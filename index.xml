<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hacklog</title>
    <link>https://sjp38.github.io/</link>
    <description>Recent content on hacklog</description>
    <image>
      <title>hacklog</title>
      <url>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Oct 2025 17:37:13 -0700</lastBuildDate>
    <atom:link href="https://sjp38.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A mini desktop as a local kernel hacking machine</title>
      <link>https://sjp38.github.io/posts/mini_desktop_as_local_kernel_hacking_machine/</link>
      <pubDate>Fri, 31 Oct 2025 17:37:13 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/mini_desktop_as_local_kernel_hacking_machine/</guid>
      <description>A few weeks ago I heard modern normal computers can build kernel faster than I expected. My 10 years old personal laptop (Thinkpad X1) used to build a kernel per a couple of hours. The last time I built kernel on the laptop was about 8 years ago. Since then, I was always using only workstation or server level machines for building kernels.
So I wanted to know how good modern normal desktop-level machines are, by myself.</description>
    </item>
    <item>
      <title>I will have a talk at the Kernel Recipes 2025</title>
      <link>https://sjp38.github.io/posts/kernel_recipes_2025_talk/</link>
      <pubDate>Fri, 23 May 2025 07:59:31 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/kernel_recipes_2025_talk/</guid>
      <description>DAMON talk for Kernel Recipes 2025 has been scheduled. The title of the talk is &amp;ldquo;Overcoming Observer Effects in Memory Management with DAMON&amp;rdquo;. It will introduce DAMON at whole for wider audience.</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2025</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2025_talk/</link>
      <pubDate>Mon, 07 Apr 2025 21:12:06 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2025_talk/</guid>
      <description>DAMON talk for OSSummit North America 2025 has been accepted and scheduled. The title of the talk is &amp;ldquo;Self-Driving DAMON/S: Controlled and Automated Access-aware Efficient Systems&amp;rdquo;. It will present DAMON&amp;rsquo;s two auto-tuning features for access monitoring and access-aware system operations.</description>
    </item>
    <item>
      <title>I will have two sessions for DAMON at LSFMM&#43;BPF 2025</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2025_talks/</link>
      <pubDate>Sat, 22 Mar 2025 13:58:08 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2025_talks/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON, and any requirements to DAMON for more access-aware memory management kernel subsystem of future in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2025. The title of the talks are &amp;ldquo;DAMON Updates and Plans: Monitoring Parameters Auot-tuning and Memory Tiering&amp;rdquo; and &amp;ldquo;DAMON Requirements for Access-aware MM of Future&amp;rdquo;, respectively.
Detailed schedules can be found from the below Google doc spreadsheet.</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2024</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2024/</link>
      <pubDate>Tue, 31 Dec 2024 10:16:21 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2024/</guid>
      <description>As today is the last day of 2024, I checked my open source commits statistics using my simple and buggy scripts. Similar statistics for 2023 is available at another post.
Note that the script may have bugs, and numbers don&amp;rsquo;t tell everything.
In short, I made 7th and 2nd biggest changes to Linux kernel memory management subsystem among the 340 people, in terms of lines of changes (2,347) and commits (102).</description>
    </item>
    <item>
      <title>I will have a talk at the FOSDEM 2025</title>
      <link>https://sjp38.github.io/posts/fosdem2025_talk/</link>
      <pubDate>Fri, 13 Dec 2024 09:08:43 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/fosdem2025_talk/</guid>
      <description>I will present DAMON in FOSDEM&#39;25. The title of the talk is &amp;ldquo;DAMON: Kernel Subsystem for Data Access Monitoring and Access-aware System Operations&amp;rdquo;.</description>
    </item>
    <item>
      <title>Creating DAMON logo using DAMON</title>
      <link>https://sjp38.github.io/posts/damon_heatmap_logo/</link>
      <pubDate>Sat, 13 Jul 2024 13:56:02 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/damon_heatmap_logo/</guid>
      <description>I just made a DAMON logo using DAMON, like below.
$ git clone https://github.com/sjp38/masim &amp;amp;&amp;amp; cd masim $ cat damon_pixel_2 11111111 11 11 111111 11111111 11 11 11111111 11111111 1111 11111111 11111111 11 11 11111111 11111111 1111 11111111 $ ./pixels_to_access_config.py ./damon_pixel_2 $((100*1024*1024)) 300 damon.cfg $ sudo damo record &amp;#34;./masim ./configs/stairs.cfg&amp;#34; $ sudo damo report heatmap --output damon.png The output is below:
The cropped one:</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit Euroe 2024</title>
      <link>https://sjp38.github.io/posts/ossummit_eu_2024_talk/</link>
      <pubDate>Wed, 12 Jun 2024 21:22:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_eu_2024_talk/</guid>
      <description>DAMON talk for OSSummit EU 2024 has accepted and scheduled. The talk will focus on use cases of DAMON for saving memory including those for real world products.
The title of the talk is &amp;ldquo;DAMON Recipes: Ways to Save Memory Using a Linux Kernel Subsystem in the Real World&amp;rdquo;.</description>
    </item>
    <item>
      <title>I will have a session for DAMON at LSFMM 2024</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2024_talk/</link>
      <pubDate>Wed, 08 May 2024 07:48:52 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2024_talk/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2024. The title of the talks is &amp;ldquo;DAMON updates and Plans: Automation of DAMON tuning, tiering, and VM guest scaling&amp;rdquo;.
https://docs.google.com/spreadsheets/d/176LXLys9Uh6A-Eal2flrzcbUSJMUXGkGwyihr9jAAaQ/edit#gid=0</description>
    </item>
    <item>
      <title>Hackermail v1 is released</title>
      <link>https://sjp38.github.io/posts/hackermail_v1/</link>
      <pubDate>Sat, 17 Feb 2024 10:40:58 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/hackermail_v1/</guid>
      <description>I started subscribing linux kernel mailing list with my gmail account in 2013. Dealing with the large amount of mails was not that easy, probably due to my poor setup and being lazy at trying more tools.
In 2019, while returning from Linux Plumbers Conference, I read an LWN article saying Linus Torvalds is now considering unsubscribing the linux kernel mailing list, owing to the evolvement of the public-inbox and lore.</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2024</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2024_talk/</link>
      <pubDate>Wed, 14 Feb 2024 23:05:59 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2024_talk/</guid>
      <description>DAMON talk for OSSummit North America 2024 has been accepted and scheduled. The talk will present DAMOS auto-tuning and hopefully, more new DAMO features. The features are still under development, but hopefully, the power of presentation-driven development will make it. ;) Looking forward to meeting you there!</description>
    </item>
    <item>
      <title>Perfbook 2nd edition translation is complete</title>
      <link>https://sjp38.github.io/posts/ko/perfbook_2nd_edition_translation_complete/</link>
      <pubDate>Sun, 11 Feb 2024 10:05:34 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ko/perfbook_2nd_edition_translation_complete/</guid>
      <description>제 작은 취미 프로젝트[1]였던 Paul E. McKenney 의 책 한국어 번역이 약 8년 만에 소박한 이정표[2]를 완성했습니다. 매우 재미있고 유익한 여정이었습니다.
[1] https://git.kernel.org/pub/scm/linux/kernel/git/paulmck/perfbook.git/commit/?id=edbfcdee0460 [2] https://lore.kernel.org/perfbook/20240211175355.4986-1-sj38.park@gmail.com/</description>
    </item>
    <item>
      <title>Perfbook 2nd edition translation is complete</title>
      <link>https://sjp38.github.io/posts/perfbook_2nd_edition_translation_complete/</link>
      <pubDate>Sun, 11 Feb 2024 10:05:34 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/perfbook_2nd_edition_translation_complete/</guid>
      <description>After about 8 years of progress on my little hobby project[1], the Korean translation of Paul E. McKenney &amp;rsquo;s book, I&amp;rsquo;m marking it as completed a humble milestone[2]. It was a very fun and informative journey.
[1] https://git.kernel.org/pub/scm/linux/kernel/git/paulmck/perfbook.git/commit/?id=edbfcdee0460 [2] https://lore.kernel.org/perfbook/20240211175355.4986-1-sj38.park@gmail.com/</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2023</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2023/</link>
      <pubDate>Sun, 31 Dec 2023 12:57:52 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2023/</guid>
      <description>As today is the last day of 2023, I checked some open source commits statistics using my simple and buggy script, and github. Similar statistics for 2022 is available at another post.
In short, I made 8th and 4th biggest changes to Linux kernel memory management subsystem among the 295 people, for lines of changes (1,910) and commits (66).
For the Linux kernel whole tree, the numbers become 264th (3,562 lines) and 80th (147 commits) among 5,006 people.</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit Europe 2023</title>
      <link>https://sjp38.github.io/posts/ossummit_eu_2023_talk/</link>
      <pubDate>Fri, 30 Jun 2023 16:01:51 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_eu_2023_talk/</guid>
      <description>DAMON talk for OSSummit EU 2023 has accepted and scheduled. The talk will focus on its user-space tool, damo. It&amp;rsquo;s mainly for helping more audiences to digest the content easier, and also for accelerating the development of damo. By the time, hopefully the version of damo would reach to, or exceed 2.0.0, and newer interface and features will be introduced together.
The title of the talk is &amp;ldquo;Data Access Monitoring Operator (DAMO): User-Space Tool/Python Library for Access-Aware Profiling and Optimization of Your Linux Systems&amp;rdquo;.</description>
    </item>
    <item>
      <title>DAMON Publications and Presentations</title>
      <link>https://sjp38.github.io/posts/damon_publications_talks/</link>
      <pubDate>Sat, 06 May 2023 12:17:00 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/damon_publications_talks/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_publications_talks. This out-dated post will be removed soon.
Below is a list of publications and presentations that cover DAMON project.
This list is not exhaustive and is compiled to the best of our ability, as some publications or presentations may have been made without the knowledge of the DAMON maintainers. If you find a publication or announcement that should be added to this list, please let us know at sj@kernel.</description>
    </item>
    <item>
      <title>DAMON Publications and Presentations</title>
      <link>https://sjp38.github.io/posts/ko/damon_publications_talks/</link>
      <pubDate>Sat, 06 May 2023 12:17:00 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_publications_talks/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_publications_talks. This out-dated post will be removed soon.
Below is a list of publications and presentations that cover DAMON project.
This list is not exhaustive and is compiled to the best of our ability, as some publications or presentations may have been made without the knowledge of the DAMON maintainers. If you find a publication or announcement that should be added to this list, please let us know at sj@kernel.</description>
    </item>
    <item>
      <title>DAMON News List</title>
      <link>https://sjp38.github.io/posts/damon_news/</link>
      <pubDate>Sat, 06 May 2023 11:27:07 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/damon_news/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_news. This out-dated post will be removed soon.
Below is a list of news around DAMON project.
This list is not exhaustive but just a DAMON maintainer&amp;rsquo;s collection of news. If you find a news that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
2024 2024-10-15: DAMON debugfs interface removal RFC patch has posted.
2024-10-10: Monthly PyPI downloads of DAMON user-space too, DAMO, doubled again after ten days.</description>
    </item>
    <item>
      <title>DAMON News List</title>
      <link>https://sjp38.github.io/posts/ko/damon_news/</link>
      <pubDate>Sat, 06 May 2023 11:27:07 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_news/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_news. This out-dated post will be removed soon.
Below is a list of news around DAMON project.
This list is not exhaustive but just a DAMON maintainer&amp;rsquo;s collection of news. If you find a news that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
2024 2024-10-15: DAMON debugfs interface removal RFC patch has posted.
2024-10-10: Monthly PyPI downloads of DAMON user-space too, DAMO, doubled again after ten days.</description>
    </item>
    <item>
      <title>I will have a session for DAMON at the LSFMM 2023</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2023_talk/</link>
      <pubDate>Thu, 04 May 2023 18:13:37 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2023_talk/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2023. The title of the talks is &amp;ldquo;DAMON updates and future plans&amp;rdquo;.
https://events.linuxfoundation.org/lsfmm/program/schedule-at-a-glance/</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2023</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2023_talk/</link>
      <pubDate>Sat, 18 Mar 2023 09:34:33 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2023_talk/</guid>
      <description>I will present DAMON, DAMOS, and DAMO in Open Source Summit North America 2023. The title of the talk is &amp;ldquo;DAMON, DAMOS, and DAMO: Kernel Subsystems and User-Space Tools for Data Access-Aware System Analysis/Optimizations&amp;rdquo;.
https://sched.co/1K5HS</description>
    </item>
    <item>
      <title>DAMON-based System Optimization Guide</title>
      <link>https://sjp38.github.io/posts/damon_optimization_guide/</link>
      <pubDate>Sun, 15 Jan 2023 10:36:11 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_optimization_guide/</guid>
      <description>This document helps you estimating the amount of benefit that you could get from DAMON-based system optimizations, and describes how you could achieve it.
Check The Signs No optimization can provide same extent of benefit to every case. Therefore you should first guess how much improvements you could get using DAMON. If some of below conditions match your situation, you could consider using DAMON.
Low IPC and High Cache Miss Ratios.</description>
    </item>
    <item>
      <title>DAMON-based System Optimization Guide</title>
      <link>https://sjp38.github.io/posts/ko/damon_optimization_guide/</link>
      <pubDate>Sun, 15 Jan 2023 10:36:11 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_optimization_guide/</guid>
      <description>This document helps you estimating the amount of benefit that you could get from DAMON-based system optimizations, and describes how you could achieve it.
Check The Signs No optimization can provide same extent of benefit to every case. Therefore you should first guess how much improvements you could get using DAMON. If some of below conditions match your situation, you could consider using DAMON.
Low IPC and High Cache Miss Ratios.</description>
    </item>
    <item>
      <title>DAMON Evaluation</title>
      <link>https://sjp38.github.io/posts/damon_evaluation/</link>
      <pubDate>Sun, 15 Jan 2023 10:34:06 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_evaluation/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_evaluation. This out-dated post will be removed soon.
DAMON is lightweight. It increases system memory usage by 0.39% and slows target workloads down by 1.16%.
DAMON is accurate and useful for memory management optimizations. An experimental DAMON-based operation scheme for THP, namely &amp;rsquo;ethp&amp;rsquo;, removes 76.15% of THP memory overheads while preserving 51.25% of THP speedup. Another experimental DAMON-based &amp;lsquo;proactive reclamation&amp;rsquo; implementation, namely &amp;lsquo;prcl&amp;rsquo;, reduces 93.</description>
    </item>
    <item>
      <title>DAMON Evaluation</title>
      <link>https://sjp38.github.io/posts/ko/damon_evaluation/</link>
      <pubDate>Sun, 15 Jan 2023 10:34:06 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_evaluation/</guid>
      <description>DAMON is lightweight. It increases system memory usage by 0.39% and slows target workloads down by 1.16%.
DAMON is accurate and useful for memory management optimizations. An experimental DAMON-based operation scheme for THP, namely &amp;rsquo;ethp&amp;rsquo;, removes 76.15% of THP memory overheads while preserving 51.25% of THP speedup. Another experimental DAMON-based &amp;lsquo;proactive reclamation&amp;rsquo; implementation, namely &amp;lsquo;prcl&amp;rsquo;, reduces 93.38% of residential sets and 23.63% of system memory footprint while incurring only 1.22% runtime overhead in the best case (parsec3/freqmine).</description>
    </item>
    <item>
      <title>2022년 오픈소스 커밋 통계</title>
      <link>https://sjp38.github.io/posts/ko/my_opensource_commits_stat_2022/</link>
      <pubDate>Sat, 31 Dec 2022 13:48:12 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/ko/my_opensource_commits_stat_2022/</guid>
      <description>2022년 마지막 날을 맞아, 저의 간단하고 버그가 많은 스크립트와[1] github 을 통해 저의 오픈소스 커밋 통계를 내봤습니다.
리눅스 커널 통계 리눅스 커널의 메모리 관리 서브시스템과 커널 전체의 2022년 통계를 위해 제 버그 많은 스크립트를[1] 아래와 같이 돌려 봤습니다.
메모리 관리 서브시스템 2022년 한해, 305명의 사람들이 리눅스 커널 메모리 관리 서브시스템 개발에 참여해 81,631 라인의 변경을 2,135 개 커밋으로 만들었습니다.
변경한 라인 수와 커밋 갯수 기준으로 저는 그 305명 가운데 두번째와 (10,537 라인) 세번째로 (106 커밋) 큰 변경을 만들었군요.</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2022</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2022/</link>
      <pubDate>Sat, 31 Dec 2022 13:48:12 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2022/</guid>
      <description>As today is the last day of 2022, I checked some open source commits statistics using my simple and buggy script[1], and github.
Linux kernel statistics I ran my buggy script[1] to show some 2022 statistics for memory management subsystem and whole tree of Linux kernel as below.
Memory Management In 2022, 305 people participated in Linux kernel memory management subsystem development by making 81,631 lines of changes with 2,135 commits.</description>
    </item>
    <item>
      <title>Summary of DAMON Development in 2022</title>
      <link>https://sjp38.github.io/posts/damon_stat_2022/</link>
      <pubDate>Thu, 29 Dec 2022 19:35:00 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_stat_2022/</guid>
      <description>A summary of DAMON development in 2022 has posted: https://lore.kernel.org/damon/20221229171209.162356-1-sj@kernel.org/
2022 was a year of active and healthy DAMON development.
Seven new DAMON major features were delivered to users. Some of those were featured in articles and academic papers.
It was possible thanks to the DAMON community. The community has expanded with its own mailing list and an open bi-weekly chat series. 40 people contributed their great code to DAMON via making their 275 commits merged into the mainline.</description>
    </item>
    <item>
      <title>My 10th anniversary of the Linux kernel contribution</title>
      <link>https://sjp38.github.io/posts/linux_kernel_contribution_10th_anniversary/</link>
      <pubDate>Sun, 16 Oct 2022 09:09:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/linux_kernel_contribution_10th_anniversary/</guid>
      <description>Today is the 10th anniversary of my Linux kernel contribution. Including the tiny and trivial patch, I made 381 patches merged in the mainline during the 10 years.
$ git log --author SeongJae --reverse commit cf174b0ef52ad8184779e1da4132e2d9d17247e5 Author: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Date: Tue Oct 16 16:47:50 2012 +0900 staging: csr: csr_framework_ext_types.h: fix coding style Fix coding style of csr_framework_ext_types.h Signed-off-by: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt; [...] $ git log --author SeongJae --oneline | wc -l 381 I&amp;rsquo;m looking forward to the next 10 years.</description>
    </item>
    <item>
      <title>나의 리눅스 커널 컨트리뷰션 10주년</title>
      <link>https://sjp38.github.io/posts/ko/linux_kernel_contribution_10th_anniversary/</link>
      <pubDate>Sun, 16 Oct 2022 09:09:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux_kernel_contribution_10th_anniversary/</guid>
      <description>오늘은 제가 리눅스 커널에 처음 기여를 한지 10년이 되는 날입니다. 그 작고 사소했던 패치를 포함해, 지난 10년간 총 381개의 패치를 메인라인에 기여했네요.
$ git log --author SeongJae --reverse commit cf174b0ef52ad8184779e1da4132e2d9d17247e5 Author: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Date: Tue Oct 16 16:47:50 2012 +0900 staging: csr: csr_framework_ext_types.h: fix coding style Fix coding style of csr_framework_ext_types.h Signed-off-by: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt; [...] $ git log --author SeongJae --oneline | wc -l 381 다음 10년을 기대합니다.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2022</title>
      <link>https://sjp38.github.io/posts/kernelsummit2022_talk/</link>
      <pubDate>Fri, 29 Jul 2022 21:02:43 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2022_talk/</guid>
      <description>I will present current status and future plans for DAMON in KernelSummit&#39;22. The title of the talk is &amp;ldquo;Current Status and Future Plans of DAMON&amp;rdquo;.
https://lpc.events/event/16/contributions/1224/</description>
    </item>
    <item>
      <title>My paper introducing DAMON and related works has accepted to appear in the HPDC 2022</title>
      <link>https://sjp38.github.io/posts/hpdc2022_talk/</link>
      <pubDate>Wed, 04 May 2022 07:12:26 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/hpdc2022_talk/</guid>
      <description>My paper introducing DAMON and related works for making Linux a more data access-aware operating system has been accepted to be presented by the HPDC&#39;22. The title of the paper is &amp;ldquo;DAOS: Data Access-aware Operating System&amp;rdquo;.</description>
    </item>
    <item>
      <title>Linux Memory Management Subsystem Development Statistics in 2021 (Short)</title>
      <link>https://sjp38.github.io/posts/linux-mm-dev-stat-2021-short/</link>
      <pubDate>Fri, 31 Dec 2021 07:52:00 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/linux-mm-dev-stat-2021-short/</guid>
      <description>Whenever reading the kernel development statistics report for each release from LWN, I wanted to scope it down to specific subsystems. For that, I wrote a script.
Belows are the top 10 kernel hackers who contributed to the memory management subsystem of Linux kernel, sorted by number of commits and changed (added, deleted, or modified) lines, respectively.
$ ./authors.py ~/linux --file mm/ --since 2021-01-01 --author_identity name --sortby lines --max_nr_authors 10 1.</description>
    </item>
    <item>
      <title>Papers I read in 2021 Q4</title>
      <link>https://sjp38.github.io/posts/paper_reading_2021_q4/</link>
      <pubDate>Sat, 30 Oct 2021 09:16:33 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/paper_reading_2021_q4/</guid>
      <description>record interesting papers that I (partially) read</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2021</title>
      <link>https://sjp38.github.io/posts/kernelsummit2021_talk/</link>
      <pubDate>Wed, 08 Sep 2021 07:12:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2021_talk/</guid>
      <description>I will present DAMON/DAMOS in KernelSummit&#39;21. The title of the talk is &amp;ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes&amp;rdquo;.
https://linuxplumbersconf.org/event/11/contributions/984/</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2021</title>
      <link>https://sjp38.github.io/posts/ko/kernelsummit2021_talk/</link>
      <pubDate>Wed, 08 Sep 2021 07:12:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernelsummit2021_talk/</guid>
      <description>KernelSummit&#39;21 에서 DAMON/DAMOS 를 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes&amp;rdquo; 입니다.
https://linuxplumbersconf.org/event/11/contributions/984/</description>
    </item>
    <item>
      <title>OSDI 2021 papers summary</title>
      <link>https://sjp38.github.io/posts/osdi2021_papers_review/</link>
      <pubDate>Sat, 07 Aug 2021 09:27:55 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/osdi2021_papers_review/</guid>
      <description>This post is for recording some notes from a few OSDI&#39;21 papers that I got fun.
DMon: Efficient Detection and Correction of Data Locality Problems Using Selective Profiling https://www.usenix.org/system/files/osdi21-khan.pdf
DMon is a compiler-based data locality optimization system. The approach is quite similar to that of daphicx or similar things. It injects data access profiling code in the target program, build and run it with some workload, collect the profiling code-generated results, analyze the profile results to figure out what kind of optimization can provide some benefit to the program, injects the optimization code in the program, built it again, and deploy the version to the production.</description>
    </item>
    <item>
      <title>리눅스 30주년 맞이 리누스 토발즈 인터뷰 번역 - 파트 2</title>
      <link>https://sjp38.github.io/posts/ko/torvalds_interview_for_30th_anniversary_of_linux_kernel_part2/</link>
      <pubDate>Mon, 17 May 2021 19:34:00 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/torvalds_interview_for_30th_anniversary_of_linux_kernel_part2/</guid>
      <description>리눅스 커널이 처음 공개된지 올해로 30년이 되었고, 이를 맞아 한 tag1 에서 리누스 토발즈와 인터뷰 를 했습니다. 분량이 많아 두 파트로 나눠 올렸는데요, 해당 매체에 허락을 받고 이곳에 그 중 두번째 파트의 번역을 올립니다.
아래 분들께서 오타 등을 찾고 글을 다듬는 걸 도와주셨습니다. 감사의 말씀을 전합니다.
Jaehoon Kim Tag1 의 원본 글은 다음 링크에서 보실 수 있습니다: https://www.tag1consulting.com/blog/interview-linus-torvalds-open-source-and-beyond-part-2
첫번째 파트의 번역은 여기서 보실 수 있습니다.
오픈소스 프로젝트의 관리 JA: 우린 최근에 Drupal 을 만든 Dries Buytaert 와 이야기 해봤는데, 그는 당신에게 받은 많은 영감과 가끔의 멘토링, 그리고 그가 지난 20년동안 그 유명한 Drupal CMS 를 관리하는 동안 받은 조언을 이야기하며 당신을 칭찬했습니다.</description>
    </item>
    <item>
      <title>리눅스 30주년 맞이 리누스 토발즈 인터뷰 번역 - 파트 1</title>
      <link>https://sjp38.github.io/posts/ko/torvalds_interview_for_30th_anniversary_of_linux_kernel_part1/</link>
      <pubDate>Sat, 08 May 2021 11:00:02 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/torvalds_interview_for_30th_anniversary_of_linux_kernel_part1/</guid>
      <description>리눅스 커널이 처음 공개된지 올해로 30년이 되었고, 이를 맞아 tag1 에서 리누스 토발즈와 인터뷰 를 했습니다: https://www.tag1consulting.com/blog/interview-linus-torvalds-linux-and-git 분량이 길어 두 파트로 나눠 올라왔는데, 해당 매체에 허락을 받고 이곳에 그 중 첫번째 파트의 번역을 올립니다.
두번째 파트는 여기서 보실 수 있습니다.
아래 분들께서 오타 등을 찾고 글을 다듬는 걸 도와주셨습니다. 감사의 말씀을 전합니다.
ganadist Jaehoon Kim 리눅스 커널 개발 Jeremy Andrews: 리눅스는 어디에나 사용되고 있고, 전체 오픈소스 세계에 영향을 끼쳤습니다. 물론, 처음부터 그런 건 아니었습니다.</description>
    </item>
    <item>
      <title>perfbook 번역 재시작</title>
      <link>https://sjp38.github.io/posts/ko/perfbook_translate_restart/</link>
      <pubDate>Sat, 27 Mar 2021 13:01:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/perfbook_translate_restart/</guid>
      <description>2019-09-27 이후로 perfbook 번역을 멈췄었군요. 이제 perfbook 2nd 에디션도 나왔으니[0], 바닥부터 번역을 다시 시작해 봅니다[1]. 물론, 예전 번역본은 여전히 있습니다[2].
[0] https://mirrors.edge.kernel.org/.../perfbook/perfbook.html
[1] https://github.com/sjp38/perfbook-ko_KR/commit/1c44ef30179b
[2] https://github.com/sjp38/perfbook-ko_KR-pdf</description>
    </item>
    <item>
      <title>Starting perfbook translation again</title>
      <link>https://sjp38.github.io/posts/perfbook_translate_restart/</link>
      <pubDate>Sat, 27 Mar 2021 13:01:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/perfbook_translate_restart/</guid>
      <description>I stopped translation of perfbook since 2019-09-27. Because the 2nd edition of perfbook is released[0], I&amp;rsquo;m starting the translation again[1], from the scratch. The old versions are still available, of course[2].
[0] https://mirrors.edge.kernel.org/.../perfbook/perfbook.html
[1] https://github.com/sjp38/perfbook-ko_KR/commit/1c44ef30179b
[2] https://github.com/sjp38/perfbook-ko_KR-pdf</description>
    </item>
    <item>
      <title>An example of DAMON usage for profiling</title>
      <link>https://sjp38.github.io/posts/damon_profile_callstack_example/</link>
      <pubDate>Thu, 25 Feb 2021 07:20:30 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/damon_profile_callstack_example/</guid>
      <description>I realized I didn&amp;rsquo;t introduce a good, intuitive example use case of DAMON[0] for profiling so far, though DAMON is not for only profiling. One straightforward and realistic usage of DAMON as a profiling tool would be recording the monitoring results with callstack and visualize those by timeline together.
For example, below shows that visualization for a realistic workload, namely &amp;lsquo;fft&amp;rsquo; in SPLASH-2X benchmark suite. The upper-most graph shows how DAMON-detected working set size of the workload (y-axis) changes by time (x-axis).</description>
    </item>
    <item>
      <title>DAMON 을 이용한 프로파일링의 한 예</title>
      <link>https://sjp38.github.io/posts/ko/damon_profile_callstack_example/</link>
      <pubDate>Thu, 25 Feb 2021 07:20:30 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_profile_callstack_example/</guid>
      <description>DAMON[0] 이 프로파일링만을 위한 건 아니지만, DAMON 을 프로파일링에 활용하는 방법에 대한 괜찮은 직관적 예를 여태 소개한 적이 없다는 걸 깨달았습니다. 간단하지만 현실적인 DAMON 의 프로파일링 도구로써의 사용법은 모니터링 결과를 콜스택과 함께 기록한 후 시간대에 맞춰 시각화 하는 것입니다.
예를 들어, 아래 그림은 SPLASH-2X 벤치마크의 &amp;lsquo;fft&amp;rsquo; 라는 워크로드에 대한 그런 시각화 결과입니다. 여기서, 우린 이 워크로드에 세개의 폭발적 메모리 액세스가 이루어지는 구간이 있는 것을 알 수 있으며, FFT1DOnce.cons::prop.2() 가 그 첫번째와 두번째 구간에, 그리고 Transpose() 는 세번째 구간에 연관되어 있음을 알 수 있습니다.</description>
    </item>
    <item>
      <title>OSDI 2020 발표 영상 감상</title>
      <link>https://sjp38.github.io/posts/ko/osdi2020_videos_review/</link>
      <pubDate>Sat, 19 Dec 2020 22:35:27 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osdi2020_videos_review/</guid>
      <description>차일 피일 미루고 있던 OSDI&#39;20 발표 영상 비디오를 휴가 기간동안 하루 한편이라도 보기로 했습니다.
A large scale analysis of hundreds of in-memory cache clusters at Twitter https://www.youtube.com/watch?v=OQtMM5vdhlI&amp;amp;feature=emb_title
트위터의 in-memory 캐시 시스템의 워크로드를 트레이스하고 그 특성을 분석한 논문입니다. 개인적으로 아래 내용이 흥미로웠습니다.
쓰기 리퀘스트가 많음. 각 오브젝트의 크기는 작아서 (중간값이 200 바이트), 오브젝트별 메타데이터 (64 바이트) 가 공간을 많이 차지함. 키의 크기가 밸류의 크기보다 그렇게 작지 않음. 트레이스 데이터는 github[1] 통해 받을 수 있습니다.</description>
    </item>
    <item>
      <title>Watching OSDI 2020 presentation videos</title>
      <link>https://sjp38.github.io/posts/osdi2020_videos_review/</link>
      <pubDate>Sat, 19 Dec 2020 22:35:27 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/osdi2020_videos_review/</guid>
      <description>I set watching at least one OSDI&#39;20 presentation video per day during the long vacation as one of my plans.
A large scale analysis of hundreds of in-memory cache clusters at Twitter https://www.youtube.com/watch?v=OQtMM5vdhlI&amp;amp;feature=emb_title
The authors traced and analyzed the workloads on the Twitter&amp;rsquo;s in-memory cache systems. To me, below findings were interesting.
There are many write requests. Size of each object is not so big (median 200 bytes), so metadata, which sizes 64 bytes per each object, is a burden Size of each key is not small compared to the size of each value.</description>
    </item>
    <item>
      <title>Remarkable 2 리뷰</title>
      <link>https://sjp38.github.io/posts/ko/remarkable2_review/</link>
      <pubDate>Sun, 29 Nov 2020 11:39:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/remarkable2_review/</guid>
      <description>올해 초, 우연히 전자잉크 태블릿인 Remarkable 2 의 소개 영상 을 보게 되었습니다. 간단하지만 분명한 목표 (&amp;lsquo;종이&amp;rsquo;와 같은 사용경험) 에 집중한 디자인과 기능이 무척 매력적으로 다가왔습니다. 망설이다 7월에 한번 더 사이트에 들어가 봤는데, 선주문 기간인데다 팬데믹 등의 영향으로 11월에야 배송된다고 하더군요. 한달 내로는 무료 반품도 된다길래 고민할 시간은 많으니 일단 지르고 고민해 보자는 생각으로 질렀습니다.
한참의 시간이 지나, 지난 월요일에 마침내 제품을 받게 되었습니다. 개인적으로 처음 구매해 본 전자잉크 기기인데, 이제 겨우 일주일 됐지만 제법 만족스럽게 사용 중입니다.</description>
    </item>
    <item>
      <title>Shallow Thought: Simple and safe thoughts management</title>
      <link>https://sjp38.github.io/posts/ko/shallow_thought/</link>
      <pubDate>Sat, 03 Oct 2020 10:40:28 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/shallow_thought/</guid>
      <description>다양한 형태로 생각을 기록하고 가끔은 공유도 해왔습니다. 그 생각들을 오래도록 안전히 보관하고 싶었지만 몇차례 시행착오를 거치며 그게 쉽지 않음을 깨달았습니다.
시작은 일기장과 노트였습니다. 분실하기도 쉽고 구석에 쳐박아 두면 다시 볼일도 거의 없더군요.
클라우드 문서 서비스가 매력적이어 보였습니다. 하지만 영원한 건 없고 결국 그때 그때 흥하는, 또는 사용 가능한 서비스를 옮겨다녀야 하더군요. 그러다보니 서비스마다의 호환성이 문제가 됩니다.
https://yargerdotblog.files.wordpress.com/2019/02/cloudmeme.jpg
Hugo 와 같은 README 등 표준적 포맷의 plain text 기반 static site generator 를 사용하고 Git 으로 원격 repo 도 관리하는 게 괜찮은 방법 같아 보였습니다.</description>
    </item>
    <item>
      <title>DAMON 테스트 패키지가 GPL v2 로 릴리즈 되었습니다</title>
      <link>https://sjp38.github.io/posts/ko/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon-tests_open_sourced/</guid>
      <description>DAMON 은 kselftest 와 kunit 에 기반한 여러 테스트를 자신의 패치셋에 포함시켜 두고 있습니다. 커널 트리에 위치하는 테스트는 짧은 수행시간만 가지는게 바람직하므로, 시간을 오래 소요하는 테스트들을 패키지화 해서 저희 회사 내에서만 사용해 오고 있었습니다. 테스트는 좋은 문서로 사용될 수 있고 컨트리뷰터들에게도 필요하죠. 그런 이유로, 이 패키지를 오픈소스로 만들겠다고 지난 커널 서밋 발표에서 이야기 했었습니다 (https://linuxplumbersconf.org/event/7/contributions/659/).
어제, 이 패키지 를 마침내 GPL v2 라이센스의 오픈소스로 릴리즈 했습니다. 이제 DAMON 인터페이스를 이해하고 여러분의 기계 위에서 스스로 DAMON 을 테스트 하는데 이 패키지를 사용하실 수 있습니다.</description>
    </item>
    <item>
      <title>Tests package for DAMON is released under GPL v2</title>
      <link>https://sjp38.github.io/posts/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/damon-tests_open_sourced/</guid>
      <description>DAMON contains a number of tests based on the kselftest and kunit in its patchset itself. As it is preferred to contain only tests having short runtime in kernel tree, I organized time consuming tests in a package and used it in my company only. Tests could be used as a good document and essential for contributors. For the reason, I promised I will make it open source in the last kernel summit talk (https://linuxplumbersconf.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2020</title>
      <link>https://sjp38.github.io/posts/kernelsummit2020_talk/</link>
      <pubDate>Sat, 08 Aug 2020 07:10:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2020_talk/</guid>
      <description>My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers Conference has accepted! Hope to (virtually) see you there. The title of the talk is, &amp;ldquo;DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations&amp;rdquo;.</description>
    </item>
    <item>
      <title>Opening a Showcase Website for DAMON</title>
      <link>https://sjp38.github.io/posts/damon_github_page/</link>
      <pubDate>Tue, 19 May 2020 06:27:47 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/damon_github_page/</guid>
      <description>A DAMON showcase website[1] is open. There are
the official documentation of DAMON[2], the heatmap format dynamic access pattern of various realistic workloads for heap area[3], mmap()-ed area[4], and stack[5] area, the dynamic working set size distribution[6] and chronological working set size changes[7], and the latest performance test results[8]. [1] https://damonitor.github.io
[2] https://damonitor.github.io/doc/html/latest
[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html
[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html
[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html
[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html
[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html
[8] https://damonitor.github.io/test/result/perf/latest/html/index.html</description>
    </item>
    <item>
      <title>DAMON 쇼케이스 웹사이트를 열었습니다</title>
      <link>https://sjp38.github.io/posts/ko/damon_github_page/</link>
      <pubDate>Sat, 16 May 2020 13:25:55 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_github_page/</guid>
      <description>DAMON 소개를 위한 웹사이트[1] 를 열었습니다.
DAMON 공식 문서[2], 실제에 가까운 여러 워크로드의 힙[3], mmap() 된 영역[4], 그리고 스택[5] 에 대한 히트맵 포맷의 동적 액세스 패턴들, 동적 워킹셋 사이즈의 분포[6] 와 시간대에 따른 워킹셋 사이즈의 변화양상[7], 그리고 성능 테스트 결과[8] 를 확인해 보실 수 있습니다.
[1] https://damonitor.github.io
[2] https://damonitor.github.io/doc/html/latest
[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html
[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html
[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html
[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html
[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html
[8] https://damonitor.github.io/test/result/perf/latest/html/index.html</description>
    </item>
    <item>
      <title>Sphynx document on Github pages Needs `.nojekyll` File</title>
      <link>https://sjp38.github.io/posts/ko/sphynx_doc_on_github_pages_needs_nojekyll/</link>
      <pubDate>Wed, 13 May 2020 06:40:03 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/sphynx_doc_on_github_pages_needs_nojekyll/</guid>
      <description>최근, Sphynx 빌드 시스템[1] 을 사용해 html 로 빌드한 리눅스 커널 문서를 Github page[2] 에 올리려 했습니다. DAMON[3] 문서를 어디서나 볼 수 있게 하려 함이었는데요. 업로드는 쉬웠습니다. 리포지토리 만들고, Sphynx 로 빌드된 Documentation/output/ 의 문서를 여기에 집어넣고 푸시했죠. 하지만, 테마가 적용되지 않아 보기 안좋더군요.
Github 은 모든 Github page 들이 Jekyll[4] 에 기반하고 있다고 생각하며, Jekyll 에서는 _ 로 시작하는 이름의 모든 파일과 디렉토리가 특수하게 처리되기 때문에, Sphynx 에서 생성한 일부 디렉토리가 무시되고 있었습니다.</description>
    </item>
    <item>
      <title>Sphynx document on Github pages Needs `.nojekyll` File</title>
      <link>https://sjp38.github.io/posts/sphynx_doc_on_github_pages_needs_nojekyll/</link>
      <pubDate>Wed, 13 May 2020 06:40:03 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/sphynx_doc_on_github_pages_needs_nojekyll/</guid>
      <description>I recently tried to upload the Linux kernel document which is generated in html form using the Sphynx build system[1] on a Github page[2] so that people can read DAMON[3] document from everywhere. The upload was very easy. I simply created the repo, put the generated html doc at Documentation/output/ into the repo and pushed. However, the theme was not applied.
Github assumes every Github pages to be based on Jekyll[4], and because every files and directories starting with underscores are handled special in Jekyll, some directories Sphynx created were ignored.</description>
    </item>
    <item>
      <title>ACM DL is allowing open access to every article until June</title>
      <link>https://sjp38.github.io/posts/acmdl_is_open_until_june/</link>
      <pubDate>Wed, 22 Apr 2020 06:45:20 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/acmdl_is_open_until_june/</guid>
      <description>ACM has decided to allow open access to every article in ACM DL until June 30, to help people doing remote works due to COVID-19. I found this by checking my papers in ACM DL. I believe this is a great decision of ACM.</description>
    </item>
    <item>
      <title>ACM DL is allowing open access to every article until June</title>
      <link>https://sjp38.github.io/posts/ko/acmdl_is_open_until_june/</link>
      <pubDate>Wed, 22 Apr 2020 06:45:20 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/acmdl_is_open_until_june/</guid>
      <description>COVID-19 로 인해 원격 업무를 해야하는 사람들을 위해 ACM 이 ACM DL 의 모든 논문을 6월 30일까지 누구나 볼 수 있게 했습니다. ACM DL 에 올라와 있는 제 논문들을 보러 갔다가 우연히 알게 됐네요. ACM 이 참 잘한 선택 같습니다.</description>
    </item>
    <item>
      <title>Eurosys&#39;20 will be held online</title>
      <link>https://sjp38.github.io/posts/eurosys20_will_be_held_online/</link>
      <pubDate>Sun, 05 Apr 2020 09:05:11 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/eurosys20_will_be_held_online/</guid>
      <description>With the upload of the accepted papers list, EuroSys homepage also updated its notice about COVID-19 related notification. It previously tried to reschedule the offline meeting, however seems they changed mind and decided to do virtual (online) conference. It&amp;rsquo;s a bad news for authors and people who planned to participate the offline meetings, but a good new for other people, because they would be allowed to participate in the conference without fee.</description>
    </item>
    <item>
      <title>Eurosys&#39;20 이 온라인 컨퍼런스로 치뤄집니다</title>
      <link>https://sjp38.github.io/posts/ko/eurosys20_will_be_held_online/</link>
      <pubDate>Sun, 05 Apr 2020 09:05:11 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/eurosys20_will_be_held_online/</guid>
      <description>Accepted paper 리스트 업로드와 함께 EuroSys 홈페이지의 COVID-19 관련 공지도 업데이트 되었습니다. 이전에는 오프라인 미팅 일정을 재조정하려 하고 있다 했지만, 가상 (온라인) 컨퍼런스로 치루기로 결정되었나봅니다. 논문 저자들과 오프라인 미팅을 참여하려고 했던 사람들에겐 안좋은 소식입니다만 다른 사람들에겐 좋은 소식이기도 합니다, 무료로 컨퍼런스에 참여할 수 있을테니까요.</description>
    </item>
    <item>
      <title>RCX: Read-Copy Transact</title>
      <link>https://sjp38.github.io/posts/ko/rcx/</link>
      <pubDate>Sat, 15 Feb 2020 09:11:55 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rcx/</guid>
      <description>Read-copy update (RCU) can provide ideal scalability for read-mostly workloads, but some believe that it provides only poor performance for updates. This belief is due to the lack of RCU-centric update synchronization mechanisms. RCU instead works with a range of update-side mechanisms, such as locking. In fact, many developers embrace simplicity by using global locking. Logging, hardware transactional memory, or fine-grained locking can provide better scalability, but each of these approaches has limitations, such as imposing overhead on readers or poor scalability on non-uniform memory access (NUMA) systems, mainly due to their lack of NUMA-aware design principles.</description>
    </item>
    <item>
      <title>RCX: Read-Copy Transact</title>
      <link>https://sjp38.github.io/posts/rcx/</link>
      <pubDate>Sat, 15 Feb 2020 09:11:55 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/rcx/</guid>
      <description>Read-copy update (RCU) can provide ideal scalability for read-mostly workloads, but some believe that it provides only poor performance for updates. This belief is due to the lack of RCU-centric update synchronization mechanisms. RCU instead works with a range of update-side mechanisms, such as locking. In fact, many developers embrace simplicity by using global locking. Logging, hardware transactional memory, or fine-grained locking can provide better scalability, but each of these approaches has limitations, such as imposing overhead on readers or poor scalability on non-uniform memory access (NUMA) systems, mainly due to their lack of NUMA-aware design principles.</description>
    </item>
    <item>
      <title>My paper has accepted to appear in the EuroSys2020</title>
      <link>https://sjp38.github.io/posts/eurosys2020_talk/</link>
      <pubDate>Fri, 14 Feb 2020 19:44:36 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/eurosys2020_talk/</guid>
      <description>The last research paper I wrote before joining my current team, has been accepted to be presented by the EuroSys&#39;20. The title of the paper is “An HTM-Based Update-side Synchronization for RCU on NUMA systems”.</description>
    </item>
    <item>
      <title>My paper has accepted to appear in the EuroSys2020</title>
      <link>https://sjp38.github.io/posts/ko/eurosys2020_talk/</link>
      <pubDate>Fri, 14 Feb 2020 19:44:36 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/eurosys2020_talk/</guid>
      <description>지금 회사에 합류하기 전에 마지막으로 쓴 제 연구 논문이 EuroSys&#39;20 에 액셉되었습니다. 논문의 제목은 “An HTM-Based Update-side Synchronization for RCU on NUMA systems” 입니다.</description>
    </item>
    <item>
      <title>A thing you should know if you are using multiple email accounts with `git send-email`</title>
      <link>https://sjp38.github.io/posts/git_send_email_multiple_email_caution/</link>
      <pubDate>Mon, 06 Jan 2020 21:10:05 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/git_send_email_multiple_email_caution/</guid>
      <description>In some case, we need to send patches that made by other people instead. git send-email command can know this situation by itself by comparing the commit author information and mail sender&amp;rsquo;s information. In that case, git send-email automatically add From: line pointing the real author of the patch in the body of the mail so that maintainers applying the patches can set the author information correctly.
For example, if &amp;ldquo;Alice alice@abc.</description>
    </item>
    <item>
      <title>Git 을 사용해 이메일 보내기</title>
      <link>https://sjp38.github.io/posts/ko/git_email_setup/</link>
      <pubDate>Sat, 28 Dec 2019 09:58:49 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/git_email_setup/</guid>
      <description>많은 개발 커뮤니티가 요즘은 Github 을 사용합니다만, 일부 커뮤니티는 여전히 메일링 리스트 기반 개발 스타일을 고수하고 있습니다. 리눅스 커널 커뮤니티가 좋은 예가 되겠죠. 이런 스타일에서는 모든 주요 커뮤니케이션이 이메일을 통해 이루어집니다. 패치는 메인테이너와 하나 이상의 공개 메일링 리스트를 향해 메일의 형태로 보내어집니다. 리뷰 또한 이에 대한 답장의 형태로 이루어지지요.
그런데, 일부 이메일 클라이언트는 ``rich user experience&amp;rsquo;&amp;rsquo; 라는 명목하에 원래 내용을 오염시키곤 합니다. 탭을 스페이스로 바꾸거나 html 코드를 집어넣거나 하는 식이죠. 때문에 패치를 보내는 사람은 자신의 메일 내용이 원래 의도한대로 읽는 사람에게 보내지도록 조심해야합니다.</description>
    </item>
    <item>
      <title>Setting Git for email send</title>
      <link>https://sjp38.github.io/posts/git_email_setup/</link>
      <pubDate>Sat, 28 Dec 2019 09:58:49 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/git_email_setup/</guid>
      <description>Many communities are using Github nowadays, but some communities still use mailing list based development style. The Linux kernel community would be a good example. In the style, all major communications are made by email only. Patches are submitted to the maintainers and one more open mailing lists as a mail. Reviews are also made as replies to the mail.
Because some email clients can distort the original content for so-called ``rich user experience&amp;rsquo;&amp;rsquo; (e.</description>
    </item>
    <item>
      <title>DAMON: Data Access Monitor</title>
      <link>https://sjp38.github.io/posts/damon/</link>
      <pubDate>Fri, 27 Dec 2019 18:21:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/damon/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon. This out-dated post will be removed soon.
With increasingly data-intensive workloads and limited DRAM capacity, optimal memory management based on dynamic access patterns is becoming increasingly important. Such mechanisms are only possible if accurate and efficient dynamic access pattern monitoring is available.
DAMON is a Data Access MONitoring framework subsystem for the Linux kernel developed for such memory management. It is designed with some key mechanism (refer to Design for the detail) that make it</description>
    </item>
    <item>
      <title>DAMON: Data Access Monitor</title>
      <link>https://sjp38.github.io/posts/ko/damon/</link>
      <pubDate>Fri, 27 Dec 2019 18:21:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon. This out-dated post will be removed soon.
With increasingly data-intensive workloads and limited DRAM capacity, optimal memory management based on dynamic access patterns is becoming increasingly important. Such mechanisms are only possible if accurate and efficient dynamic access pattern monitoring is available.
DAMON is a Data Access MONitoring framework subsystem for the Linux kernel developed for such memory management. It is designed with some key mechanism (refer to Design for the detail) that make it</description>
    </item>
    <item>
      <title>Build, Install, and Use QEMU on Ubuntu</title>
      <link>https://sjp38.github.io/posts/qemu_setup_on_ubuntu/</link>
      <pubDate>Thu, 12 Dec 2019 00:46:05 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/qemu_setup_on_ubuntu/</guid>
      <description>This post describes how you can build, install, and use QEMU on an Ubuntu machine. I basically refererenced http://wiki.qemu.org/Hosts/Linux. The test has proceeded on an Ubuntu 18.04 server machine.
QEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Get an Ubuntu server install image:</description>
    </item>
    <item>
      <title>Ubuntu 환경에서 QEMU 빌드 / 설치 / 사용하는 법</title>
      <link>https://sjp38.github.io/posts/ko/qemu_setup_on_ubuntu/</link>
      <pubDate>Thu, 12 Dec 2019 00:46:05 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/qemu_setup_on_ubuntu/</guid>
      <description>Ubuntu 에서 QEMU 를 빌드, 설치, 사용하는 법을 설명합니다. 기본적으로 http://wiki.qemu.org/Hosts/Linux 문서를 참고했습니다. 테스트는 Ubuntu 18.04 머신 위에서 진행되었습니다.
QEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Ubuntu 서버 이미지를 가져오고,
$ wget http://releases.ubuntu.com/18.04/ubuntu-18.04.3-live-server-amd64.iso qcow2 포맷으로 스토리지를 만들고,
cd .. $ ./bin/qemu-img create -f qcow2 qc2img 32G Formatting &amp;#39;qc2img&amp;#39;, fmt=qcow2 size=34359738368 encryption=off cluster_size=65536 lazy_refcounts=off refcount_bits=16 $ ls -alh total 830M drwxrwxr-x 3 sjpark sjpark 4.</description>
    </item>
    <item>
      <title>My recent research will be presented at the MIDDLEWARE&#39;19</title>
      <link>https://sjp38.github.io/posts/ko/middleware19_paper/</link>
      <pubDate>Wed, 04 Dec 2019 18:00:27 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/middleware19_paper/</guid>
      <description>제가 아마존에 입사하기 전에 썼던 논문 한편이 ACM/IFIP MIDDLEWARE&#39;19 Industry 세션 에서 발표되게 되었습니다. 발표 제목은 &amp;ldquo;Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality&amp;rdquo; 입니다.</description>
    </item>
    <item>
      <title>My recent research will be presented at the MIDDLEWARE&#39;19</title>
      <link>https://sjp38.github.io/posts/middleware19_paper/</link>
      <pubDate>Wed, 04 Dec 2019 18:00:27 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/middleware19_paper/</guid>
      <description>A research paper, which I wrote before joining Amazon, will be presented at the Industry session of the ACM/IFIP MIDDLEWARE&#39;19. The title of the paper is &amp;ldquo;Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality&amp;rdquo;.</description>
    </item>
    <item>
      <title>Richard Stallman Resigns</title>
      <link>https://sjp38.github.io/posts/ko/rms_resigns/</link>
      <pubDate>Thu, 19 Sep 2019 21:57:01 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rms_resigns/</guid>
      <description>몇일 전, 리차드 스톨만이 FSF 회장은 물론이고 의장직에서도 사임한다는 소식이 전해졌습니다. 무슨 일이 있었는지 아래의 reddit 코멘트가 가장 잘 설명하고 있다는 LWN 코멘트[1] 를 참고해, 해당 reddit 코멘트를 번역해 봅니다.
[1] https://lwn.net/Articles/799391/
최근 공개된 한 여성의 증언에 따르면 그녀가 17세 때, Epstein 이 그녀에게 Marvin Minsky 와 성관계를 가지라고 했습니다. Minsky 는 MIT Media Lab 창시자이자 A.I 선도자였으며, 2016년에 사망했습니다. 스톨만은 한 메일링 리스트에서 (Minsky 를 성폭행으로 비난하는 어느 시위 주도자의 주장에 대한 답변으로) 이렇게 주장했습니다, 자신도 Epstein 은 비난하지만, Minsky 는 그녀가 강요당한 걸 몰랐을 가능성이 있다구요:</description>
    </item>
    <item>
      <title>Richard Stallman Resigns</title>
      <link>https://sjp38.github.io/posts/rms_resigns/</link>
      <pubDate>Thu, 19 Sep 2019 21:57:01 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/rms_resigns/</guid>
      <description>몇일 전, 리차드 스톨만이 FSF 회장은 물론이고 의장직에서도 사임한다는 소식이 전해졌습니다. 무슨 일이 있었는지 아래의 reddit 코멘트가 가장 잘 설명하고 있다는 LWN 코멘트[1] 를 참고해, 해당 reddit 코멘트를 번역해 봅니다.
[1] https://lwn.net/Articles/799391/
최근 공개된 한 여성의 증언에 따르면 그녀가 17세 때, Epstein 이 그녀에게 Marvin Minsky 와 성관계를 가지라고 했습니다. Minsky 는 MIT Media Lab 창시자이자 A.I 선도자였으며, 2016년에 사망했습니다. 스톨만은 한 메일링 리스트에서 (Minsky 를 성폭행으로 비난하는 어느 시위 주도자의 주장에 대한 답변으로) 이렇게 주장했습니다, 자신도 Epstein 은 비난하지만, Minsky 는 그녀가 강요당한 걸 몰랐을 가능성이 있다구요:</description>
    </item>
    <item>
      <title>Memory: the flat, the discontiguous, and the sparse (Korean)</title>
      <link>https://sjp38.github.io/posts/ko/lwn_memory_flat_discontiguous_sparse/</link>
      <pubDate>Wed, 31 Jul 2019 07:45:17 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lwn_memory_flat_discontiguous_sparse/</guid>
      <description>LWN 의 &amp;ldquo;Memory: the flat, the discontiguous, and the sparse&amp;rdquo; 라는 제목의 글의 한글 번역입니다. 원문은 LWN 에서 볼 수 있습니다: https://lwn.net/Articles/789304/
May 27, 2019
이 기사는 Mike Rapoport 에 의해 기여되었습니다.
컴퓨터 시스템에서 물리 메모리는 소중한 자원이어서, 이를 효율적으로 관리하기 위한 많은 노력이 기울여져왔습니다. 이 일은 현대의 시스템에서의 메모리 구조가 복잡해짐에 따라 더 어려워졌습니다. 물리 메모리가 실제로 어떻게 위치해 있는가를 다루기 위한 여러 계층의 추상화가 존재합니다; 그런 추상화 중 하나는 &amp;ldquo;메모리 모델&amp;rdquo; 이라고 불립니다.</description>
    </item>
    <item>
      <title>NASA&#39;s Power of 10 Coding Rules (Korean)</title>
      <link>https://sjp38.github.io/posts/ko/nasa_coding_rules/</link>
      <pubDate>Sun, 21 Jul 2019 10:22:56 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/nasa_coding_rules/</guid>
      <description>우연히 발견한 글 을 통해 NASA 의 코딩 규칙 10가지 를 알게 되었습니다. 너무 깐깐한 규칙 아닌가 싶기도 하지만 ping 하나 날리는데 40분이 걸리고 물리적으로는 접근할 수 없는 화성에 로봇을 보내야 한다면 이런 규칙은 합리적이라 볼 수 있겠죠. 제가 참고한 저 글은 이걸 파이썬이나 자바스크립트와 같은 곳에서도 어떻게 적용해 볼 수 있을지를 고찰해 보고 있습니다. 이 포스트에선 단순히 이 10개의 규칙을 번역해 봅니다.
goto 또는 재귀호출과 같은 복잡한 수행 흐름을 피하라.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2019</title>
      <link>https://sjp38.github.io/posts/kernelsummit2019_talk/</link>
      <pubDate>Sat, 20 Jul 2019 02:41:46 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2019_talk/</guid>
      <description>My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers has accepted! Hope to see you in Lisbon. The title of the talk is, &amp;ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy&amp;rdquo;.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2019</title>
      <link>https://sjp38.github.io/posts/ko/kernelsummit2019_talk/</link>
      <pubDate>Sat, 20 Jul 2019 02:41:46 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernelsummit2019_talk/</guid>
      <description>[Linux Plumbers Conference 2019] (https://www.linuxplumbersconf.org/blog/2019/) 와 함께 열리는 올해의 [Linux Kernel Summit] (https://lwn.net/Articles/788378/) 에 제안한 발표 주제가 accept 되어 9월에 리스본에서 이에 대한 내용을 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy&amp;rdquo; 입니다.
티켓이 너무 일찍 팔려버리는 바람에 올해는 들으러도 못가나 걱정했는데 갈 수 있게 됐네요, 다행입니다! :D</description>
    </item>
    <item>
      <title>Integrate external git repository with its history</title>
      <link>https://sjp38.github.io/posts/ko/integrate_external_git_repository_with_history/</link>
      <pubDate>Thu, 27 Jun 2019 17:02:49 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/integrate_external_git_repository_with_history/</guid>
      <description>프로젝트 a 와 프로젝트 b 를 병렬로 진행하고 있었는데, 두개의 리포지토리를 합치고 싶어지는 경우가 있습니다. 예컨대 프로젝트 a 의 성격이 보다 범용이 되었고 프로젝트 b 는 프로젝트 a 를 위한 도구적 성격이 되는 경우가 있겠죠. a 프로젝트에 &amp;lsquo;b&amp;rsquo; 디렉토리를 만들고 그 아래 기존 프로젝트 b 의 파일들을 위치하고 싶습니다. 하지만 기존 b 프로젝트의 git 히스토리들도 유지하고 싶습니다. 비슷한 사례로 리눅스 커널 메모리 모델 프로젝트는 별도의 리포지토리[1] 로 개발되었지만 리눅스 업스트림 리포지토리의 tools/ 디렉토리 아래로 머지[2] 되었는데, 이 때 기존 개발 히스토리를 유지했죠.</description>
    </item>
    <item>
      <title>My Job Interview Record (2019 summer)</title>
      <link>https://sjp38.github.io/posts/ko/my_job_interview/</link>
      <pubDate>Mon, 17 Jun 2019 18:16:05 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/my_job_interview/</guid>
      <description>이번 여름 졸업을 앞두고 구직 활동을 한 결과, 얼마전 운좋게도 미국에 본사를 두고 있는 한 글로벌 IT 기업의 커널/하이퍼바이저 팀으로부터 잡 오퍼를 받았습니다. 취업을 향한 한걸음 한걸음이 어둠 속을 더듬더듬, 때로는 막무가내로 헤쳐나가는 느낌이었는데, 이런 저의 경험을 공유하는게 어떤 분들께는 도움이 되지 않을까 싶어 공유해 봅니다.
목표설정 취업을 할까 포닥을 할까 모호한 고민만 하다가 어느새 4월 중순이 되어서야 해외 IT 회사로 직장을 구하겠다는 목표가 설정되었습니다. 그제서야 든 생각은 너무 늦었다, 준비가 부족하다, 하는 것이었습니다.</description>
    </item>
    <item>
      <title>My Job Interview Record (2019 summer)</title>
      <link>https://sjp38.github.io/posts/my_job_interview/</link>
      <pubDate>Mon, 17 Jun 2019 18:16:05 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/my_job_interview/</guid>
      <description>이번 여름 졸업을 앞두고 구직 활동을 한 결과, 얼마전 운좋게도 미국에 본사를 두고 있는 한 글로벌 IT 기업의 커널/하이퍼바이저 팀으로부터 잡 오퍼를 받았습니다. 취업을 향한 한걸음 한걸음이 어둠 속을 더듬더듬, 때로는 막무가내로 헤쳐나가는 느낌이었는데, 이런 저의 경험을 공유하는게 어떤 분들께는 도움이 되지 않을까 싶어 공유해 봅니다.
목표설정 취업을 할까 포닥을 할까 모호한 고민만 하다가 어느새 4월 중순이 되어서야 해외 IT 회사로 직장을 구하겠다는 목표가 설정되었습니다. 그제서야 든 생각은 너무 늦었다, 준비가 부족하다, 하는 것이었습니다.</description>
    </item>
    <item>
      <title>Linux Development History Visualization Youtube Channel</title>
      <link>https://sjp38.github.io/posts/ko/linux_develop_visualization_youtube/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:33 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux_develop_visualization_youtube/</guid>
      <description>재미 삼아 리눅스 커널 릴리즈 때마다 git history 를 visualize 해서 올리는 유투브 채널[1]을 개설해 봤습니다. 지금은 visualization 에는 gource[2] 를 사용하고 있습니다. 이 비디오를 만드는데 사용되는 스크립트도 GPL v3 로 공개[3]했으니 필요한 분은 사용해 보셔도 좋을 것 같습니다.
[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg
[2] https://gource.io/
[3] https://github.com/sjp38/linux_development_visualization</description>
    </item>
    <item>
      <title>Linux Development History Visualization Youtube Channel</title>
      <link>https://sjp38.github.io/posts/linux_develop_visualization_youtube/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:33 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/linux_develop_visualization_youtube/</guid>
      <description>I created a Youtube channel[1]. I will upload videos for the git history between each release of the Linux kernel, just for jun. I use gource[2] for the visualization for now. The scripts I use for these videos are available[3] under GPL v3. If you want, you may use the scripts for your own video generation.
[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg
[2] https://gource.io/
[3] https://github.com/sjp38/linux_development_visualization</description>
    </item>
    <item>
      <title>DAPHICX: Data Access Pattern Hint Injecting Compiler Extension</title>
      <link>https://sjp38.github.io/posts/daphicx/</link>
      <pubDate>Thu, 30 May 2019 18:59:53 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/daphicx/</guid>
      <description>Memory pressure is inevitable as the size of working sets is rapidly growing while the capacity of dynamic random access memory (DRAM) is not. Meanwhile, storage devices have evolved so that their speed is comparable to the speed of DRAM while their capacity scales are comparable to that of hard disk drives (HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and high-end storages as swap devices will be common.</description>
    </item>
    <item>
      <title>DAPHICX: Data Access Pattern Hint Injecting Compiler Extension</title>
      <link>https://sjp38.github.io/posts/ko/daphicx/</link>
      <pubDate>Thu, 30 May 2019 18:59:53 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/daphicx/</guid>
      <description>Memory pressure is inevitable as the size of working sets is rapidly growing while the capacity of dynamic random access memory (DRAM) is not. Meanwhile, storage devices have evolved so that their speed is comparable to the speed of DRAM while their capacity scales are comparable to that of hard disk drives (HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and high-end storages as swap devices will be common.</description>
    </item>
    <item>
      <title>Biscuit (OS Written in Go) Install</title>
      <link>https://sjp38.github.io/posts/biscuit_os_install/</link>
      <pubDate>Sun, 26 May 2019 23:27:44 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/biscuit_os_install/</guid>
      <description>$ git clone https://go.googlesource.com/go go1.4; cd go1.4 $ git checkout release-branch.go1.4; cd src $ ./make.bash $ cd ../../ $ git clone https://github.com/mit-pdos/biscuit.git; cd biscuit/src $ ./make.bash $ cd ../biscuit/ $ make qemu CPUS=2 </description>
    </item>
    <item>
      <title>Biscuit (OS Written in Go) Install</title>
      <link>https://sjp38.github.io/posts/ko/biscuit_os_install/</link>
      <pubDate>Sun, 26 May 2019 23:27:44 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/biscuit_os_install/</guid>
      <description>$ git clone https://go.googlesource.com/go go1.4; cd go1.4 $ git checkout release-branch.go1.4; cd src $ ./make.bash $ cd ../../ $ git clone https://github.com/mit-pdos/biscuit.git; cd biscuit/src $ ./make.bash $ cd ../biscuit/ $ make qemu CPUS=2 </description>
    </item>
    <item>
      <title>Fedora28 ibus-hangul input problem</title>
      <link>https://sjp38.github.io/posts/fedora28_hangul_problem/</link>
      <pubDate>Fri, 26 Apr 2019 11:05:59 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fedora28_hangul_problem/</guid>
      <description>어느날부터 Fedora 터미널에서 한글 입력이 매우 불편해졌습니다. 한글 모드에서는 backspace, enter, esc 등의 특수키가 하나도 안먹힙니다. Vim 을 쓰는 입장에선 매우 불편하죠. 알고보니 ibus-hangul 버그인 것 같습니다[1]. 아래 커맨드로 ibus-hangul 을 문제 없던 버전으로 다운그레이드 시키고 세션을 재시작 하면 문제가 사라집니다.
sudo dnf downgrade ibus-hangul-1.5.0-12.fc28.x86_64 [1] http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3&amp;amp;boardNo=153170459823549&amp;amp;command=READ&amp;amp;page=1&amp;amp;categoryId=-1</description>
    </item>
    <item>
      <title>Fedora28 ibus-hangul input problem</title>
      <link>https://sjp38.github.io/posts/ko/fedora28_hangul_problem/</link>
      <pubDate>Fri, 26 Apr 2019 11:05:59 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fedora28_hangul_problem/</guid>
      <description>어느날부터 Fedora 터미널에서 한글 입력이 매우 불편해졌습니다. 한글 모드에서는 backspace, enter, esc 등의 특수키가 하나도 안먹힙니다. Vim 을 쓰는 입장에선 매우 불편하죠. 알고보니 ibus-hangul 버그인 것 같습니다[1]. 아래 커맨드로 ibus-hangul 을 문제 없던 버전으로 다운그레이드 시키고 세션을 재시작 하면 문제가 사라집니다.
sudo dnf downgrade ibus-hangul-1.5.0-12.fc28.x86_64 [1] http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3&amp;amp;boardNo=153170459823549&amp;amp;command=READ&amp;amp;page=1&amp;amp;categoryId=-1</description>
    </item>
    <item>
      <title>I will have a talk at the Hotstorage&#39;19</title>
      <link>https://sjp38.github.io/posts/hotstorage2019_talk/</link>
      <pubDate>Thu, 18 Apr 2019 09:37:04 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/hotstorage2019_talk/</guid>
      <description>HotStorage&#39;19 에 제출한 제 최근 연구에 대한 논문이 accept 되어 7월에 해당 워크샵에서 이에 대한 내용을 발표하게 되었습니다. 논문 제목은 &amp;ldquo;Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability&amp;rdquo; 입니다.</description>
    </item>
    <item>
      <title>I will have a talk at the Hotstorage&#39;19</title>
      <link>https://sjp38.github.io/posts/ko/hotstorage2019_talk/</link>
      <pubDate>Thu, 18 Apr 2019 09:37:04 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/hotstorage2019_talk/</guid>
      <description>HotStorage&#39;19 에 제출한 제 최근 연구에 대한 논문이 accept 되어 7월에 해당 워크샵에서 이에 대한 내용을 발표하게 되었습니다. 논문 제목은 &amp;ldquo;Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability&amp;rdquo; 입니다.</description>
    </item>
    <item>
      <title>Hooking Library Function Calls</title>
      <link>https://sjp38.github.io/posts/ko/hooking_library_calls/</link>
      <pubDate>Wed, 10 Apr 2019 11:39:06 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/hooking_library_calls/</guid>
      <description>LD_PRELOAD 환경변수를 사용하면 로더가 프로그램을 로드할 때 동적 로드해야 할 바이너리 코드를 해당 변수의 값의 디렉토리에서부터 뒤지도록 합니다. 따라서 이를 이용해 malloc(), free() 등의 일반적으로 사용하는 라이브러리 함수를 우리의 구현으로 대체하거나 후킹할 수 있습니다. 이 글은 이런 방법으로 malloc() 을 후킹하는 방법을 예제를 통해 간단히 설명합니다.
Original Program 먼저 다음과 같은 프로그램이 있을 수 있을 겁니다:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int main(void) { char *abc; abc = (char *)malloc(8); printf(&amp;#34;malloced address: %p\n&amp;#34;, abc); sprintf(abc, &amp;#34;hello\n&amp;#34;); printf(&amp;#34;%s\n&amp;#34;, abc); free(abc); return 0; } 단순히 malloc() 을 통해 8바이트 메모리를 할당받아 그 영역을 표시하고 종료하는 프로그램입니다.</description>
    </item>
    <item>
      <title>Backtrace on C language program</title>
      <link>https://sjp38.github.io/posts/backtrace_c_language/</link>
      <pubDate>Tue, 09 Apr 2019 17:33:50 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/backtrace_c_language/</guid>
      <description>디버깅 과정에선 현재 어떤 코드가 어떤 함수를 거쳐 수행됐는지를 통한 컨텍스트 파악이 중요합니다. Java, Python, Go 등 대부분의 언어가 이를 위해 콜스택을 뽑을 수 있는 기능을 제공하죠. C 언어의 경우 gdb 등을 사용하면 쉽게 이를 볼 수 있지만 경우에 따라선 gdb 를 포기하고 printf() 등에만 의존해야 하기도 합니다. 이를 위한 기능이 c 라이브러리에도 있습니다, backtrace() 함수입니다. man 에도 이에 대한 설명이 있습니다만, 여기서도 간단히 소개해 봅니다.
Example Source Code 예제로 설명하는게 가장 쉽죠.</description>
    </item>
    <item>
      <title>Backtrace on C language program</title>
      <link>https://sjp38.github.io/posts/ko/backtrace_c_language/</link>
      <pubDate>Tue, 09 Apr 2019 17:33:50 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/backtrace_c_language/</guid>
      <description>디버깅 과정에선 현재 어떤 코드가 어떤 함수를 거쳐 수행됐는지를 통한 컨텍스트 파악이 중요합니다. Java, Python, Go 등 대부분의 언어가 이를 위해 콜스택을 뽑을 수 있는 기능을 제공하죠. C 언어의 경우 gdb 등을 사용하면 쉽게 이를 볼 수 있지만 경우에 따라선 gdb 를 포기하고 printf() 등에만 의존해야 하기도 합니다. 이를 위한 기능이 c 라이브러리에도 있습니다, backtrace() 함수입니다. man 에도 이에 대한 설명이 있습니다만, 여기서도 간단히 소개해 봅니다.
Example Source Code 예제로 설명하는게 가장 쉽죠.</description>
    </item>
    <item>
      <title>Unit test for the Linux kernel using Kunit</title>
      <link>https://sjp38.github.io/posts/ko/kunit_intro/</link>
      <pubDate>Wed, 20 Mar 2019 15:32:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kunit_intro/</guid>
      <description>업데이트 (2020-01-01): KUnit 은 v5.5 머지 윈도우 사이 메인라인에 머지되었습니다. 이 포스트 작성 시점 이후로 많은 KUnit 에도 많은 변화가 있었고, 따라서 아래 내용 중 일부, 특히 테스트 셋업과 수행 부분은 좀 많이 달라졌습니다. 해당 내용을 위해선 공식 문서 를 참고하시길 권장합니다. 또한, 최신 버전은 파이썬 버전 종속성이 생겨서 우분투 16.04 위에서는 문제를 겪으실 수 있습니다. 최신버전의 파이썬을 쓰시거나 그냥 우분투 18.04 를 사용하시길 권장합니다.
지난 2월 말에 FAST&#39;19 학회를 다녀왔는데요, Ted Tso 도 왔더군요.</description>
    </item>
    <item>
      <title>Unit test for the Linux kernel using Kunit</title>
      <link>https://sjp38.github.io/posts/kunit_intro/</link>
      <pubDate>Wed, 20 Mar 2019 15:32:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kunit_intro/</guid>
      <description>Update (2020-01-01): KUnit has merged in v5.5 merge window. From the writing of this post, it had some changes, so below content, especially the test setup and running will not work. Recommend you to refer to the official document in the kernel for detailed tutorial. It also has a python version dependency now, so you would encounter a problem with Ubuntu 16.04. Recommend you to use later Python or Ubuntu 18.</description>
    </item>
    <item>
      <title>Gitlab docker install</title>
      <link>https://sjp38.github.io/posts/ko/gitlab_docker_install/</link>
      <pubDate>Tue, 19 Mar 2019 16:39:48 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/gitlab_docker_install/</guid>
      <description>연구실 내부 사용을 위한 Gitlab 을 Docker 를 사용해서 구축하고 사용하고 있습니다만, 하도 예전이라 Gitlab official docker image 가 아니었고, docker 버전도 2.x 대라서 최신 버전으로 바로 업그레이드가 불가능하군요.
지금은 gitlab 에서 자체적으로 정식 docker 이미지를 제공합니다. 이 포스트에서는 Ubuntu 18.04 서버 위에 gitlab 정식 docker 이미지를 사용해 설치하는 방법을 기록합니다.
Docker 설치 먼저 Docker 를 설치해야죠. 문서[1]를 참고해서 설치를 진행해 봅니다.
먼저 apt 업데이트 후 종속 패키지들을 깔아줍니다:
sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common 이제 최신 docker 를 깔기 위해 docker repository 를 apt 에 추가해 주고요:</description>
    </item>
    <item>
      <title>I will have a talk at the FAST&#39;19</title>
      <link>https://sjp38.github.io/posts/fast2019_talk/</link>
      <pubDate>Sat, 02 Feb 2019 11:13:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fast2019_talk/</guid>
      <description>FAST&#39;19 Work-in-progress 세션 에서 현재 진행중인 연구에 대해 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storage&amp;rdquo; 입니다.</description>
    </item>
    <item>
      <title>I will have a talk at the FAST&#39;19</title>
      <link>https://sjp38.github.io/posts/ko/fast2019_talk/</link>
      <pubDate>Sat, 02 Feb 2019 11:13:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fast2019_talk/</guid>
      <description>FAST&#39;19 Work-in-progress 세션 에서 현재 진행중인 연구에 대해 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storage&amp;rdquo; 입니다.</description>
    </item>
    <item>
      <title>Perf symbol problem on Linux 4.19</title>
      <link>https://sjp38.github.io/posts/ko/perf_symbol_problem_4.19/</link>
      <pubDate>Fri, 21 Dec 2018 17:00:22 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/perf_symbol_problem_4.19/</guid>
      <description>4.19 커널에서 오랫만에 perf 를 다시 빌드하고 써보려고 하니, perf report 가 아래와 같이 제대로 된 symbol name 을 찾질 못합니다.
$ sudo perf record -g ls arch builtin-ftrace.c builtin-report.c Documentation perf.data.old bench builtin.h builtin-sched.c examples perf.h Build builtin-help.c builtin-script.c include perf-read-vdso.c builtin-annotate.c builtin-inject.c builtin-stat.c jvmti perf-sys.h builtin-bench.c builtin-kallsyms.c builtin-timechart.c Makefile perf-with-kcore.sh builtin-buildid-cache.c builtin-kmem.c builtin-top.c Makefile.config pmu-events builtin-buildid-list.c builtin-kvm.c builtin-trace.c Makefile.perf python builtin-c2c.c builtin-list.c builtin-version.c MANIFEST scripts builtin-config.c builtin-lock.c check-headers.sh perf-archive.</description>
    </item>
    <item>
      <title>I will have a talk at the kernel summit</title>
      <link>https://sjp38.github.io/posts/ko/ksummit2018_talk/</link>
      <pubDate>Thu, 08 Nov 2018 06:11:48 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/ksummit2018_talk/</guid>
      <description>지난 토요일, Theodore Ts&amp;rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.
[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html</description>
    </item>
    <item>
      <title>I will have a talk at the kernel summit</title>
      <link>https://sjp38.github.io/posts/ksummit2018_talk/</link>
      <pubDate>Thu, 08 Nov 2018 06:11:48 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ksummit2018_talk/</guid>
      <description>지난 토요일, Theodore Ts&amp;rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.
[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html</description>
    </item>
    <item>
      <title>LKMM Setup and Usage</title>
      <link>https://sjp38.github.io/posts/ko/lkmm-install/</link>
      <pubDate>Thu, 08 Nov 2018 04:30:42 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lkmm-install/</guid>
      <description>리눅스 커널은 Formalised and executable memory consistent model 을 제공합니다. 줄여서 linux kernel memory model (LKMM) 이라고 하죠. 이 글은 4.19 버전을 기준으로 LKMM 을 실제로 수행해 보기 위한 환경 셋업 과정과 간단한 실행 방법을 정리해 봅니다. 글 작성을 위한 테스트는 Ubuntu 16.04 서버가 설치된 가상머신에서 진행되었습니다.
herd7 install LKMM 은 버전 7.49 의 &amp;ldquo;herd7&amp;rdquo; 과 &amp;ldquo;klitmus7&amp;rdquo; 을 필요로 합니다. 하지만 herd7 은 또 Ocaml 을 위한 패키지 매니저인 OPAM 을 설치할 것을 필요로 하죠.</description>
    </item>
    <item>
      <title>Linux Kernel Build</title>
      <link>https://sjp38.github.io/posts/ko/linux-kernel-build/</link>
      <pubDate>Fri, 07 Sep 2018 16:00:23 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux-kernel-build/</guid>
      <description>제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을 정리해 봅니다. 글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3 Server OS 를 설치한 x86_64 가상머신입니다.
Install Dependent Packages $ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \ libelf-dev 커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠. 위 커맨드는 우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다. 커널 트리의 Documentation/process/changes.rst 에도 커널 빌드에 필요한 패키지들이 나열되어 있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.</description>
    </item>
    <item>
      <title>Chromebook Plus Purchase (크롬북 플러스 구매 결정기)</title>
      <link>https://sjp38.github.io/posts/ko/chromebook-plus-purchase/</link>
      <pubDate>Mon, 03 Sep 2018 13:52:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/chromebook-plus-purchase/</guid>
      <description>크롬북을 구매했습니다. 구매 결정 과정부터 사용기까지 내용을 정리해볼까 합니다. 이번 글에서는 크롬북을 구매하기까지의 고민과 과정을 정리합니다.
기본적으로 저는 글을 읽는걸 좋아하기도 하고 읽어야만 하기도 합니다. 그러다보니 여행을 가더라도 항상 어떤 책을 들고갈까 고르는게 설레기도 하지만 짜증나기도 하고, 마음만 앞서서 캐리어 무게를 책으로 꽉 채우기도 합니다. 그래서 예전부터 이북을 고려해 봤지만 너무 반응속도가 느리기도 하고 인쇄된 것에 비해선 가독성도 떨어지고 그 특유의 책을 넘겨가며 보는 반응은 아닌 것 같아 구매하지 않고 있었습니다.</description>
    </item>
    <item>
      <title>The Paper about GCMA Accepted to TC</title>
      <link>https://sjp38.github.io/posts/gcma_accepted_to_tc/</link>
      <pubDate>Wed, 29 Aug 2018 21:53:56 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/gcma_accepted_to_tc/</guid>
      <description>A paper about GCMA project has accepted to a top-level computer science journal, Transactions on Computers[1]. It will be published soon.
[1] https://www.computer.org/web/tc</description>
    </item>
    <item>
      <title>The Paper about GCMA Accepted to TC</title>
      <link>https://sjp38.github.io/posts/ko/gcma_accepted_to_tc/</link>
      <pubDate>Wed, 29 Aug 2018 21:53:56 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/gcma_accepted_to_tc/</guid>
      <description>GCMA 에 대한 논문이 컴퓨터 과학계의 최고 수준 저널인 Transactions on Computers[1] 에 Accept 되었습니다. 조만간 이를 통해 출간될 예정입니다.
[1] https://www.computer.org/web/tc</description>
    </item>
    <item>
      <title>Git Origin Story in Korean</title>
      <link>https://sjp38.github.io/posts/ko/git_origin_story_ko/</link>
      <pubDate>Wed, 29 Aug 2018 21:15:13 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/git_origin_story_ko/</guid>
      <description>최근 흥미롭게 보았던 Git Origin Story 라는 제목의 LinuxJournal.com 기사를 번역해 봅니다. 원본 기사는 https://www.linuxjournal.com/content/git-origin-story 에서 보실 수 있습니다.
수년간 리눅스 커널 개발자들이 사용해온 다양한 리비전 컨트롤 방법, Linus Torvalds가 Bit keeper 를 사용하기로 한 결정과 그에 뒤따른 논쟁, 그리고 어떻게 Git 이 만들어졌는가에 대한 글입니다.
처음에, Linus Torvalds는 리비전 컨트롤을 아예 사용하지 않았습니다. 커널에 코드를 기여하고자 하는 사람은 Usenet 그룹에, 나중에는 메일링 리스트에 패치를 올렸고, Linus는 자신의 소스 트리에 그걸 적용했습니다.</description>
    </item>
    <item>
      <title>Raspberry Pi 3 Serial Connection</title>
      <link>https://sjp38.github.io/posts/ko/rasp3-serial/</link>
      <pubDate>Mon, 27 Aug 2018 17:16:35 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rasp3-serial/</guid>
      <description>라즈베리 파이를 메인 컴퓨터로 사용하려는게 아니라면, 라즈베리 파이에 모니터와 키보드, 마우스를 연결하고 사용하는게 아무래도 번거롭습니다. ssh 로 붙어서 작업하는 것도 한 방법이지만, 그게 여의치 않은 상황도 있습니다. 그저 터미널만 연결되면 되는 상황이라면, 가장 간단한 건 UART Serial 통신을 사용하는 겁니다.
라즈베리 파이는 UART 통신을 지원하고 있는데, GPIO 핀 중 14번과 15번이[2] 각각 TX, RX 입니다. 호스트 컴퓨터와 이 두개의 핀을 연결하면 UART 통신을 할 수 있어서 라즈베리 파이의 터미널에 바로 접근할 수 있습니다.</description>
    </item>
    <item>
      <title>Raspberry Pi 3 Model B Setup</title>
      <link>https://sjp38.github.io/posts/ko/rasp3-modelb-setup/</link>
      <pubDate>Mon, 27 Aug 2018 16:03:42 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rasp3-modelb-setup/</guid>
      <description>OSSE 2016 에서 받아온 라즈베리 파이3 셋업을 해봅니다. 셋업에 사용된 호스트 환경은 Ubuntu 16.04 데스크탑입니다.
라즈베리 파이는 SD 카드를 저장소로 사용합니다. 따라서 여기에 운영체제를 깔아야 합니다. 다만, 라즈베리 파이를 구매하면 SD 카드는 따라오지 않습니다. 각자 알아서 사야 합니다. 전 예전에 사둔 16 GiB 짜리 SD 카드를 사용하겠습니다.
라즈베리 파이를 지원하는 운영체제는 여러가지 있는데, 데비안 계열의 Raspbian 이 공식 운영체제입니다. 다운로드 페이지 에서 Raspbian stretch lite 를 다운받고 압축을 풀어줍니다.
$ ls 2018-06-27-raspbian-stretch-lite.</description>
    </item>
    <item>
      <title>Linux Kernel Performance (LKP) Tests</title>
      <link>https://sjp38.github.io/posts/ko/lkp-tests/</link>
      <pubDate>Thu, 02 Aug 2018 17:20:10 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lkp-tests/</guid>
      <description>리눅스 커널의 개발은 커뮤니티 주도입니다. 개발의 한 부분인 테스트 역시 커뮤니티 주도적입니다. 여러 개인 또는 단체가 커널을 각자의 방식으로 테스트 하고 그 결과를 공유합니다. 인텔에서는 0-day 서비스[1] 라는 서비스를 자체적으로 돌리는데, 이 서비스는 최신 리눅스 커널을 가져다가 빌드하고 다양한 기능 / 성능 테스트를 돌리고 그 결과 발견된 regression 을 LKML 에 메일로 보내주는 일을 합니다. 말하자면 Continuous Integration (CI) 이죠.
Linux Kernel Performance (LKP) Tests[2] 는 0-day 서비스에서 기능 / 성능 테스트를 수행하는데 사용되는 도구입니다.</description>
    </item>
    <item>
      <title>Linux Release History</title>
      <link>https://sjp38.github.io/posts/ko/linux_release_history/</link>
      <pubDate>Mon, 30 Jul 2018 09:14:08 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux_release_history/</guid>
      <description>Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com
2018-09-02 14:45 PDT
Linux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com
2018-08-26 14:49 PDT
Linux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com
2018-08-12 14:10:49 PDT
Linux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com
2018-08-05 12:58 PDT
Linux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com
2018-07-29 22:09 UTC
Linux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com
2018-07-23 20:46 UTC
Linux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com
2018-07-15 20:28 UTC
Linux 4.18-rc4 https://lore.kernel.org/lkml/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com/T/#u
2018-07-08 23:57 UTC
Linux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com
2018-07-01 23:46 UTC</description>
    </item>
    <item>
      <title>Linux Release History</title>
      <link>https://sjp38.github.io/posts/linux_release_history/</link>
      <pubDate>Mon, 30 Jul 2018 09:14:08 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/linux_release_history/</guid>
      <description>Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com
2018-09-02 14:45 PDT
Linux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com
2018-08-26 14:49 PDT
Linux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com
2018-08-12 14:10:49 PDT
Linux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com
2018-08-05 12:58 PDT
Linux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com
2018-07-29 22:09 UTC
Linux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com
2018-07-23 20:46 UTC
Linux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com
2018-07-15 20:28 UTC
Linux 4.18-rc4 https://lore.kernel.org/lkml/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com/T/#u
2018-07-08 23:57 UTC
Linux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com
2018-07-01 23:46 UTC</description>
    </item>
    <item>
      <title>Alpine for LKML</title>
      <link>https://sjp38.github.io/posts/alpine-for-lkml/</link>
      <pubDate>Wed, 18 Jul 2018 21:09:54 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/alpine-for-lkml/</guid>
      <description>리눅스 커널 커뮤니티는 버그 레포팅, 패치 업로드, 리뷰, 릴리즈, 토론 등등 모든 활동은 이메일을 통해 이루어집니다. 이 포스트에서는 리누스 토발즈도 쓰는 이메일 클라이언트인 Alpine 을 gmail 과 연동하는 방법을 알아봅니다.
먼저 alpine 설치는 대부분 리눅스 배포판의 패키지 시스템에 등록되어 있으므로 해당 패키지 시스템을 사용해 쉽게 설치할 수 있습니다. 데비안 계열이면 apt install alpine, 페도라 계열이면 dnf install alpine 이죠.
gmail imap 정보 입력 S (Settings) -&amp;gt; L (collectionLists) -&amp;gt; A (Add Cltn)</description>
    </item>
    <item>
      <title>Alpine for LKML</title>
      <link>https://sjp38.github.io/posts/ko/alpine-for-lkml/</link>
      <pubDate>Wed, 18 Jul 2018 21:09:54 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/alpine-for-lkml/</guid>
      <description>리눅스 커널 커뮤니티는 버그 레포팅, 패치 업로드, 리뷰, 릴리즈, 토론 등등 모든 활동은 이메일을 통해 이루어집니다. 이 포스트에서는 리누스 토발즈도 쓰는 이메일 클라이언트인 Alpine 을 gmail 과 연동하는 방법을 알아봅니다.
먼저 alpine 설치는 대부분 리눅스 배포판의 패키지 시스템에 등록되어 있으므로 해당 패키지 시스템을 사용해 쉽게 설치할 수 있습니다. 데비안 계열이면 apt install alpine, 페도라 계열이면 dnf install alpine 이죠.
gmail imap 정보 입력 S (Settings) -&amp;gt; L (collectionLists) -&amp;gt; A (Add Cltn)</description>
    </item>
    <item>
      <title>머신러닝 학습/실습 환경 (Jupyter Notebook &amp; Google Colab)</title>
      <link>https://sjp38.github.io/posts/ko/ml-study-env/</link>
      <pubDate>Mon, 28 May 2018 19:51:49 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/ml-study-env/</guid>
      <description>이 글은 머신러닝 학습 환경으로도 널리 사용되는 Jupyter Notebook 과 Google Colab 에 대해 간단히 설명합니다.
Jupyter Notebook Jupyter Notebook [1] 은 대화형으로 프로그래밍 언어를 공부하고 실습해 볼 수 있도록 만들어진 개발 / 학습 환경입니다. 이 환경은 크게 노트북 문서, Jupyter Notebook App, Notebook kernel, 그리고 Notebook Dashboard 로 구성됩니다.
노트북 문서 노트북 문서는 프로그램 코드 조각들과 Rich text (이걸 한글로 뭐라 해야 할지&amp;hellip;), 그리고 각 코드 조각의 수행 결과 로 구성됩니다.</description>
    </item>
    <item>
      <title>Linux Kernel Debugging Using QEMU</title>
      <link>https://sjp38.github.io/posts/qemu_kernel_debugging/</link>
      <pubDate>Mon, 07 May 2018 18:21:01 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/qemu_kernel_debugging/</guid>
      <description>You can use classical debugger for your Linux kernel programming, though Torvalds doesn&amp;rsquo;t like it. I also do not prefer such use of debuggers, but admit that sometimes debuggers are quite useful. ;)
There are several ways to debug Linux kernel, but one of above is to set up a Linux virtual machine using QEMU and debugging the Linux kernel of the virtual machine from the host machine. This post summarises how to debug the Linux kernel in this way.</description>
    </item>
    <item>
      <title>QEMU 를 사용한 리눅스 커널 디버깅</title>
      <link>https://sjp38.github.io/posts/ko/qemu_kernel_debugging/</link>
      <pubDate>Mon, 07 May 2018 18:21:01 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/qemu_kernel_debugging/</guid>
      <description>토발즈는 좋아하지 않지만, 리눅스 커널 프로그래밍에도 디버거를 사용할 수 있습니다. 저도 디버거 사용을 좋아하지는 않는 편이지만, 경우에 따라선 디버거를 사용하는게 좋을 때도 있고 취향은 존중되어야죠. ;)
커널 디버깅 방법은 여러가지가 있는데, 그 중 하나는 QEMU 등을 이용한 리눅스 가상 머신을 띄워 두고, 호스트 머신에서 해당 가상 머신의 리눅스 커널을 디버깅 하는 방법입니다. 이 글에선 이렇게 디버깅 하는 방법을 간단히 정리해 봅니다.
테스트 환경 글 작성 과정에서 테스트에 사용한 주요 소프트웨어들과 버전은 다음과 같습니다.</description>
    </item>
    <item>
      <title>spec cpu2006 벤치마크 수정하기</title>
      <link>https://sjp38.github.io/posts/ko/spec_cpu2006_modification/</link>
      <pubDate>Sun, 24 Dec 2017 17:30:12 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/spec_cpu2006_modification/</guid>
      <description>경우에 따라서 SPEC CPU2006 의 벤치마크 중 일부의 소스코드를 수정하고 싶을 수 있습니다. 예를 들어 특정 벤치마크가 구체적으로 어떻게 동작하는지 알아보기 위해 디버깅 메세지를 추가하고자 할수도 있고, 코드 변경을 통해 성능을 높인다거나 해볼 수도 있겠죠. 그러나, SPEC CPU2006 은 엄정한 벤치마크 수트이기 때문에 소스코드는 물론, 소스코드를 사용하는 도구가 변경된 경우 에러 메세지를 내고 수행을 거부합니다. 수정된 소스코드로 얻어진 결과는 벤치마크 결과로 적합하지 않기 때문이죠.
때문에, 어쩔 수 없이 수정이 필요하면서도 기존의 수행 방법을 따르려면 이 에러를 내는 곳을 없애는 게 한가지 방법이 될 수 있습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 05</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_05/</link>
      <pubDate>Sun, 26 Nov 2017 12:40:11 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_05/</guid>
      <description>컨퍼런스 둘째날부터는 kernel summit track 이 시작됩니다. 이번 컨퍼런스 참가는 아무래도 kernel summit 에서의 시끄럽고 정신없는 토론에 참여하고 싶기 때문이었기에 오늘부터가 제게는 가장 재밌는 시간입니다.
![foo] (/img/osse_05/1.jpg)
아침 일찍 일어나 컨퍼런스 장소로 출발합니다. 10명이 함께 묵는 방을 사용하고 있기에 일찍 일어나지 않으면 샤워를 제시간에 하기 어려우므로 조금 일찍 일어났습니다.
![foo] (/img/osse_05/2.jpg)
![foo] (/img/osse_05/3.jpg)
![foo] (/img/osse_05/4.jpg)
일찍 출발한 만큼 일찍 도착. 아직 부스에 사람도 없고 조용하네요. 한동안 부스 한켠에 준비된 휴식 공간에 앉아 커널 메일링 리스트도 읽고 코드도 보고 했습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 04</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_04/</link>
      <pubDate>Sun, 26 Nov 2017 12:13:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_04/</guid>
      <description>드디어 컨퍼런스 첫날입니다. 아침 8시부터 아침식사와 등록이 시작되므로, 7시에 숙소에서 나왔습니다.
![foo] (/img/osse_04/1.jpg)
어제는 날이 흐리더니, 오늘은 비도 옵니다. 우산을 챙겨 나옵니다. 그래도 어제 미리 학회장에 들렀던 덕에 길을 헤매지 않고 찾아갈 수 있었습니다.
![foo] (/img/osse_04/2.jpg)
빗길을 따라 한참을 걸어서 도착했습니다.
![foo] (/img/osse_04/3.jpg)
![foo] (/img/osse_04/4.jpg)
도착하니 7시 반 정도. 공식 스케쥴은 8시부터 시작이라 아직 한산합니다. 스폰서 부스도 아직 준비중인 곳이 많고, 아직 준비가 덜된 곳도 많습니다. 돌아다니며 인사도 하고 간단한 스몰토크도 하면서 시간을 보냈습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 03</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_03/</link>
      <pubDate>Sat, 04 Nov 2017 10:20:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_03/</guid>
      <description>OSSummit 등록도 마쳤고, 남은 하루는 프라하 성 쪽을 둘러보기로 했습니다. 내일부터는 OSSummit 발표를 아침부터 오후까지 들어야 하므로, 프라하 관광을 해가 떠있을 때 하는건 오늘이 마지막이니 부지런히 걸어야 합니다. 어떻게 생각해 보면 꽤 강행군이기도 하고, 아침 일찍 도착하길 다행이다 싶습니다.
Vltava[1] ![foo] (/img/osse_03/4.jpg)
OSSummit 컨퍼런스 회장인 힐튼 프라하 호텔은 프라하 시내의 동북쪽에 위치해 있어서 조금만 걸으면 아침에 심카드 사고 나서 걸었던 블타바 강이 나옵니다. 아까 지나갔던 코스지만 한번 더 걸어가기로 합니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 02</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_02/</link>
      <pubDate>Sat, 04 Nov 2017 04:58:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_02/</guid>
      <description>Immigration ![immigration] (/img/osse_02/14.jpg)
먼저 공항에서 입국심사를 거쳐야 합니다. 한글 표지판이 많이 있어서 영어에 익숙지 않은 분들도 비교적 쉽게 적응할 수 있겠다 싶었습니다.
제가 가장 많이 다녀온 외국은 미국인데요. 대한민국 여권 소지자는 미국에 갈 때 비자가 필요없지만 E-SATA 로 등록을 해야 하고, 언젠가부터 E-SATA 등록비도 몇만원 정도 생겼죠. 또, 미국은 입국심사가 왠지 날카롭다는 인상입니다. 입국할 때 입국심사 카드도 써야하고 여기 숙소 주소 등도 적어야 하고, 지문도 찍어야 하죠. 공항 보안검색대에선 투시카메라로 사진도 찍고.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 01</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_01/</link>
      <pubDate>Sun, 29 Oct 2017 16:55:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_01/</guid>
      <description>![pargue!] (/img/osse_01/8.jpg)
Open Source Summit Europe 과 Embedded Linux Conference Europe, 그리고 Annual Kernel Summit 이 합동으로 열린 프라하에 다녀왔습니다. 이에 대한 기록을 남겨봅니다.
The Event 리눅스 재단에서는 다양한 컨퍼런스를 개최합니다. 2015년까지는 한국에서도 Korea Linux Forum 이라는 행사를 매년 열었죠. 특히 2015년에는 커널 서밋도 함께해서 특히 특별했던 기억입니다. 이런 이벤트들 중에서도 가장 큰 이벤트는 오픈소스 서밋이 아닐까 싶습니다. 이 이벤트는 기존의 리눅스콘 등 행사들이 합쳐진 행사입니다. 가장 큰 이벤트가 오픈소스 서밋이라면 가장 중요한 행사는 커널 서밋이라 할 수 있지 않을까 싶습니다.</description>
    </item>
    <item>
      <title>Idle Page Tracking Tools</title>
      <link>https://sjp38.github.io/posts/idle_page_tracking/</link>
      <pubDate>Wed, 13 Sep 2017 13:46:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/idle_page_tracking/</guid>
      <description>idle_page_tracking[1] is a simple, stupid toolbox for idle pages tracking. It can be used to get real working set size of a process.
Tools This section describes two tools in the box though more tools exists. You can get more description about each tool from the README in the repository[1].
userprog userprog is a sample synthetic workload for test of other tools. It interactively allocates and access specified pages in the allocated pages.</description>
    </item>
    <item>
      <title>Idle Page Tracking Tools</title>
      <link>https://sjp38.github.io/posts/ko/idle_page_tracking/</link>
      <pubDate>Wed, 13 Sep 2017 13:46:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/idle_page_tracking/</guid>
      <description>idle_page_tracking[1] is a simple, stupid toolbox for idle pages tracking. It can be used to get real working set size of a process.
Tools This section describes two tools in the box though more tools exists. You can get more description about each tool from the README in the repository[1].
userprog userprog is a sample synthetic workload for test of other tools. It interactively allocates and access specified pages in the allocated pages.</description>
    </item>
    <item>
      <title>MariaDB (MySQL) 위에서 TPC-H 벤치마크 돌리기</title>
      <link>https://sjp38.github.io/posts/ko/tpch-on-mariadb/</link>
      <pubDate>Sun, 10 Sep 2017 10:54:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/tpch-on-mariadb/</guid>
      <description>Database 를 위해 사용되는 벤치마크는 크게 OLTP vs OLAP 로 나뉩니다[1]. OLTP 계열의 대표주자는 TPC-C 이고, OLAP 계열의 대표주자 중 하나로 TPC-H[2] 가 있습니다. 이 글에서는 TPC-H 를 MariaDB 에서 돌리는 방법에 대해 설명합니다.
Environment Setup 이 글을 작성하면서 사용한 운영체제와 소프트웨어들의 버전은 다음과 같습니다.
Ubuntu 16.04.2 Server MariaDB 10.2.8 TPC-H toolkit 2.17.2 Automated Scripts 아래 설명할 모든 내용을 자동화 해서 손쉽게 TPC-H 를 돌릴 수 있도록 소스코드 변경부터 빌드, 수행까지 정리한 스크립트들을 github 에 올려 두었습니다: https://github.</description>
    </item>
    <item>
      <title>TPC-H on MariaDB (MySQL)</title>
      <link>https://sjp38.github.io/posts/tpch-on-mariadb/</link>
      <pubDate>Sun, 10 Sep 2017 10:54:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/tpch-on-mariadb/</guid>
      <description>Benchmarks for Database can be roughly divided into two kinds, OLTP and OLAP[1]. One of the most popular OLTP benchamrks is TPC-C, while that of OLAP is TPC-H[2]. This post describes how you can run TPC-H against MariaDB.
Environment Setup The versions of the OS and programs I used for writeup of this post are as below.
Ubuntu 16.04.2 Server MariaDB 10.2.8 TPC-H toolkit 2.17.2 Automated Scripts I automated whole things I will describe below using scripts and uploaded the scripts to the Github: https://github.</description>
    </item>
    <item>
      <title>Ubuntu 16.04 Server 위에 MariaDB 설치/사용하기</title>
      <link>https://sjp38.github.io/posts/ko/mariadb_setup/</link>
      <pubDate>Thu, 31 Aug 2017 14:37:07 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/mariadb_setup/</guid>
      <description>악의 조직 Oracle 에서 Sun 을 인수한 후 이어진 반 open source 적 행보에 MySQL 개발자는 MySQL 을 fork 해서 MariaDB 를 개발하고 있습니다. 저작권을 악용해 중요한 기능은 천천히 릴리즈 하거나 유료 라이센스로만 공개하기도 하는 Oracle 의 MySQL 과 달리 MariaDB 는 예전 MySQL 처럼 공개적으로 개발되고 있어 새롭고 진보적인 기능도 많이 있는 편인 것 같습니다.
이 글에서는 Ubuntu 16.04 서버에 MariaDB 를 소스코드부터 가져와서 설치하고 사용하는 간단한 사용법을 정리해 봅니다.</description>
    </item>
    <item>
      <title>Golang 1.9 install on Fedora 26</title>
      <link>https://sjp38.github.io/posts/ko/golang1.9_fedora26/</link>
      <pubDate>Sat, 26 Aug 2017 10:54:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/golang1.9_fedora26/</guid>
      <description>현재 사용중인 랩탑에 설치한 OS 는 Fedora 24 였는데, 너무 오래되었고 지원도 얼마전 끝났기에[0] 이번에 Fedora 26 으로 새로 설치했습니다. 마침 go 언어도 1.9 가 최근에 릴리즈 되었기에 개인적으로 go 언어를 설치하는 방법을 기록해 둡니다.
여기선 소스 코드만 가지고 빌드, 설치하는 방법을 기록합니다.
Get Source Code go 언어는 오픈소스입니다. 다음 커맨드를 통해 구글로부터 소스코드를 받아올 수 있습니다.
$ git clone https://go.googlesource.com/go 기다리면 go/ 디렉토리에 소스코드가 딸려옵니다.
golang 1.4 Build &amp;amp; Install go 언어를 빌드한다는 건 go 언어 컴파일러와 기본 라이브러리 등과 같은, go 언어로 짠 프로그램을 빌드하고 수행하는데 필요한 도구들을 빌드한다는 이야기입니다.</description>
    </item>
    <item>
      <title>Kernel text addresses removed from calltrace</title>
      <link>https://sjp38.github.io/posts/kernel-text-addresses-removed-from-calltrace/</link>
      <pubDate>Fri, 16 Jun 2017 16:46:09 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kernel-text-addresses-removed-from-calltrace/</guid>
      <description>최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.
Call Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.</description>
    </item>
    <item>
      <title>Kernel text addresses removed from calltrace</title>
      <link>https://sjp38.github.io/posts/ko/kernel-text-addresses-removed-from-calltrace/</link>
      <pubDate>Fri, 16 Jun 2017 16:46:09 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernel-text-addresses-removed-from-calltrace/</guid>
      <description>최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.
Call Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.</description>
    </item>
    <item>
      <title>lkml livestream</title>
      <link>https://sjp38.github.io/posts/ko/lkml_go/</link>
      <pubDate>Sun, 28 May 2017 17:51:43 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lkml_go/</guid>
      <description>쏟아지는 LKML[2] 의 메일들을 트위터 라이브스트림처럼 터미널에 보여주는 간단한 프로그램[1] 을 go 언어로 만들어 봤습니다. 아직 보완할 점 투성이지만 이제 최초의 목적대로는 동작하는군요.
References [1] https://github.com/sjp38/lkml
[2] https://en.wikipedia.org/wiki/Linux_kernel_mailing_list</description>
    </item>
    <item>
      <title>lkml livestream</title>
      <link>https://sjp38.github.io/posts/lkml_go/</link>
      <pubDate>Sun, 28 May 2017 17:51:43 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/lkml_go/</guid>
      <description>I wrote a simple, stupid program[1] that showing LKML[2] mails in terminal briefly like twitter livestream in Go language. It is just an early version and so many things to be complemented exists, though. Nevertheless, now it just works as I wanted at first.
References [1] https://github.com/sjp38/lkml
[2] https://en.wikipedia.org/wiki/Linux_kernel_mailing_list</description>
    </item>
    <item>
      <title>Parsec 3.0 설치 / 사용법</title>
      <link>https://sjp38.github.io/posts/ko/parsec_3_howto/</link>
      <pubDate>Fri, 19 May 2017 06:23:15 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/parsec_3_howto/</guid>
      <description>PARSEC 은 멀티쓰레드 프로그램들로 구성된 benchmark suite 입니다. 멀티쓰레드로 구성되어 있기 때문에 멀티코어 시스템에서의 multi core scalability 를 테스트 하기에도 적합합니다. 이 글에선 현재 최신 버전인 3.0 버전의 PARSEC 을 Ubuntu 16.04 server 에 설치하면서 겪는 문제의 해결법과 간단한 사용법을 정리해 봅니다.
Toolbox for PARSEC 3.0 on Ubuntu Xenial 아래의 내용을 하나하나 읽어가면서 따라하는 것도 귀찮은 일입니다. 그래서 아래에서 설명하는, Ubuntu Xenial 에서 PARSEC 3.0 을 돌리기 위해 필요한 작업을 대부분 자동으로 해주는 도구들을 만들어 두었습니다.</description>
    </item>
    <item>
      <title>원격 데스크탑의 clipboard 를 ssh 와 xclip 으로 복사해오기</title>
      <link>https://sjp38.github.io/posts/ko/xclip_copy_remote_clipboard/</link>
      <pubDate>Fri, 31 Mar 2017 13:53:54 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/xclip_copy_remote_clipboard/</guid>
      <description>여러개의 리눅스 데스크탑 PC 를 한 책상 위에서 사용하는 경우가 있다. 이 때, 한 PC 에서 Ctrl-C 해서 clipboard 에 복사한 내용을 다른쪽 PC 에서 Ctrl-V 로 붙여넣고 싶은 경우가 있다. 여러가지 해결책이 있겠으나, 다음과 같이 ssh 와 xclip 을 사용해서 해결할 수도 있다:
$ ssh &amp;lt;username&amp;gt;@&amp;lt;remote host&amp;gt; &amp;#39;DISPLAY=:0 xclip -o -selection clipboard&amp;#39; | \ xclip -i -selection clipboard 참고: http://askubuntu.com/questions/513442/can-two-pcs-with-ubuntu-share-the-clipboard-buffer</description>
    </item>
    <item>
      <title>Install / execute spec cpu2006 benchmark</title>
      <link>https://sjp38.github.io/posts/spec_cpu2006_install/</link>
      <pubDate>Wed, 29 Mar 2017 05:10:55 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/spec_cpu2006_install/</guid>
      <description>SPEC, which is a standard corporation for the benchmark[1], makes and shares various benchmark suites. SPEC CPU 2006[1] is one of those benchmark suites. It has made to measure performance of computation intensive workload and widely being used now. It has released v1.0 in 2006, 1.1 in 2008, and 1.2 in 2011. This post briefly describes the way to install and execute the SPEC CPU 2006 v1.1 on Ubuntu 16.04 servers.</description>
    </item>
    <item>
      <title>spec cpu2006 벤치마크 설치 / 실행하기</title>
      <link>https://sjp38.github.io/posts/ko/spec_cpu2006_install/</link>
      <pubDate>Wed, 29 Mar 2017 05:10:55 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/spec_cpu2006_install/</guid>
      <description>SPEC 은 벤치마크를 위한 협력기구 [0] 로, 다양한 벤치마크 suite 들을 만들고 공유합니다. SPEC CPU 2006 은 여기서 만든 벤치마크 도구집합 중 하나 [1] 로 계산 작업 집중적인 워크로드에 대한 성능을 측정을 목표로 만들어졌으며, 많은 곳에서 사용되고 있습니다. 2006년 1.0 버전이, 2008년에 1.1 버전이, 그리고 2011년에 1.2 버전이 나왔습니다. 본 글은 Ubuntu 16.04 서버 위에서의 SPEC CPU 2006 v1.1 의 설치와 실행 방법에 대해 간단히 설명합니다.
Automated Toolbox 아래 내용들을 하나하나 읽고 따라하기엔 시간이 부족할 분들을 위해, 한방에 설치 / 수행이 가능하도록 스크립트를 짜서 Github 에 올려뒀습니다[1].</description>
    </item>
    <item>
      <title>Fetching linux kernel source code</title>
      <link>https://sjp38.github.io/posts/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fetching-linux-source-code/</guid>
      <description>리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.
kernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.</description>
    </item>
    <item>
      <title>Fetching linux kernel source code</title>
      <link>https://sjp38.github.io/posts/ko/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fetching-linux-source-code/</guid>
      <description>리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.
kernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.</description>
    </item>
    <item>
      <title>Updating Google Chrome on Fedora 23</title>
      <link>https://sjp38.github.io/posts/fedora-chrome-update/</link>
      <pubDate>Mon, 20 Mar 2017 22:24:26 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fedora-chrome-update/</guid>
      <description>I am using Fedora 23 laptop and installed stable version Google Chrome from its official website [0]. In this case, just using Updates of Fedora Software program doesn&amp;rsquo;t update Chrome automatically. For the case, follow below commands to update your Chrome:
$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable The second killall command is necessary because Chrome doesn&amp;rsquo;t kill its process by just cliking Close button. Or, you may reboot your computer but you wouldn&amp;rsquo;t like that.</description>
    </item>
    <item>
      <title>Updating Google Chrome on Fedora 23</title>
      <link>https://sjp38.github.io/posts/ko/fedora-chrome-update/</link>
      <pubDate>Mon, 20 Mar 2017 22:24:26 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fedora-chrome-update/</guid>
      <description>랩톱에 Fedora 23 을 깔고 크롬을 공식 홈페이지 [0] 에서 다운받아 메인 브라우저로 사용하고 있습니다. 그런데 이렇게 설치한 경우에는 단순히 Fedora Software 프로그램의 Updates 기능을 통해 업데이트가 되지 않더군요. 이런 경우에는 다음의 커맨드를 통해 직접 업데이트를 할 수 있습니다:
$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable 두번째의 killall 커맨드는 Chrome 프로세스들이 닫기 버튼을 누르는 것만으로는 모두 종료되지 않기 때문에 명시적으로 종료시키기 위해 필요합니다. 컴퓨터를 아예 리붓 하는 방법도 있겠지만 별로 그러고 싶지는 않을테지요.</description>
    </item>
    <item>
      <title>Golang kakaotalk chat bot making</title>
      <link>https://sjp38.github.io/posts/kakaobot/</link>
      <pubDate>Wed, 15 Mar 2017 22:40:32 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kakaobot/</guid>
      <description>I have developed a chat bot [1] for Kakaotalk [2] using Go language because I have been curious about the process of Kakaotalk chat bot development process. Implementation to major version has consumed only two hours owing to power of Go language, simpleness of Kakaotalk auto-reply API, and simple simple functionality requirement of my bot. It has coded really simply and in brute-force manner, do only simple echoing. However, for the reason, the code could be helpful for beginner of Kakaotalk chat bot or Go language Restful API server programmer.</description>
    </item>
    <item>
      <title>Golang kakaotalk chat bot making</title>
      <link>https://sjp38.github.io/posts/ko/kakaobot/</link>
      <pubDate>Wed, 15 Mar 2017 22:40:32 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kakaobot/</guid>
      <description>Kakaotalk [1] chat bot [2] 은 어떻게 만드는지 궁금해져서 Go 언어로 간단한 Kakaotalk chat bot 을 만들어 봤습니다. Go 언어의 강력함과 Kakaotalk auto-reply API 의 단순성, 그리고 echo 서버 역할 정도만 하자는 심플하다 못해 썰렁한 기능 목표 덕에 최초 목표한 데까지는 두시간 만에 만들어졌습니다. 매우 단순히 echo 서버 정도의 역할만 하고 있지만, 매우 단순하게 짜여져 있기 때문에 Kakaotalk chat bot 을 만들고자 할 때, 또는 Restful API 를 사용하는 서버를 Go 언어로 짜고자 할 때 시작용으로 참고할 만 하지 않을까 싶어 소개합니다.</description>
    </item>
    <item>
      <title>Using arping to know ip-MAC mapping</title>
      <link>https://sjp38.github.io/posts/arping-howto/</link>
      <pubDate>Tue, 07 Mar 2017 19:41:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/arping-howto/</guid>
      <description>You can use arping to know IP address to MAC address mapping of your local network. Usage is simple:
arping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination For example, you may use the command as below:
$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... Secret of the tool is ARP protocol [1]. To know the MAC address of the machine that has a specific IP address, IP protocol layer uses the protocol.</description>
    </item>
    <item>
      <title>Using arping to know ip-MAC mapping</title>
      <link>https://sjp38.github.io/posts/ko/arping-howto/</link>
      <pubDate>Tue, 07 Mar 2017 19:41:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/arping-howto/</guid>
      <description>로컬 네트워크에서 어떤 IP 주소가 어떤 MAC 어드레스에 매핑되는지 알기 위해 arping 을 사용할 수 있습니다. 사용법은 간단합니다:
arping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination 예를 들면, 다음과 같습니다:
$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... 이 툴의 동작 원리는 ARP 프로토콜 [1] 입니다. IP 프로토콜 레이어는 이 프로토콜을 사용해 특정 IP 주소를 사용하는 기계의 MAC 어드레스를 파악하고 이 주소를 아랫단의 Ethernet 레이어에 보냅니다.</description>
    </item>
    <item>
      <title>beautifulhugo 테마 tags 기능 구현</title>
      <link>https://sjp38.github.io/posts/ko/beautifulhugo_contribute/</link>
      <pubDate>Fri, 24 Feb 2017 22:58:25 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/beautifulhugo_contribute/</guid>
      <description>꽤 맘에 드는 hugo 테마[1]를 찾았다. 하지만 tag 기능이 빠져있어 너무 아쉬워하다가 이대로 포기하기엔 너무 맘에 들어 이래저래 찾아보니 과거에 tag 기능 관련 이슈가 올라왔지만 close 처리된 상태. 이대로는 암만 기다려도 tag 기능을 구현해주진 않겠구나 싶어서 이것저것 보고 낑낑대며 서툴고 간단하게나마 tag 기능을 구현[2]. Pull request[3] 도 보냈는데 과연 받아들여줄런지.
업데이트: 별다른 discussion 없이 머지됐다 ;)
[1] http://themes.gohugo.io/beautifulhugo/
[2] https://github.com/sjp38/beautifulhugo-sj
[3] https://github.com/halogenica/beautifulhugo/pull/15</description>
    </item>
    <item>
      <title>1990년대의 palmtop, HP 95LX 를 득템</title>
      <link>https://sjp38.github.io/posts/ko/hp_95lx/</link>
      <pubDate>Thu, 02 Feb 2017 16:24:02 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/hp_95lx/</guid>
      <description>이사로 생긴 쓰레기 정리를 돕다가 보니 한 물건이 유난히 눈에 띄었다. 자그마한 크기에 왠지 모르게 90년대 감성. 자세히 살펴 보니 전자사전 같이 생겼는데 왠지 옛날에 유행하던 palmtop[1] 같은 느낌. 어차피 버릴 물건이기에 따로 챙겨두고 컴퓨터로 검색을 해보았다.
![HP 95LX] (/img/hp95lx/1.jpg)
모델명인 HP 95LX 로 검색해보니[2] 한때 스프레드시트 프로그램의 대명사였던 Lotus 123 을 탑재한 것으로 유명한 palmtop PC 로, MS-DOS 를 장착한 모델이다. 당연하게도 바로는 안켜지지만 잘 살펴보니 전용 배터리가 아니라 2A 건전지를 사용하고 있기에 건전지를 끼고 파워 버튼을 눌러봤지만 역시 잠잠.</description>
    </item>
    <item>
      <title>uninstall kernel</title>
      <link>https://sjp38.github.io/posts/ko/uninstall-kernel/</link>
      <pubDate>Fri, 20 Jan 2017 13:18:56 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/uninstall-kernel/</guid>
      <description>테스트 등을 위해 소스코드로부터 커널을 직접 빌드, 설치하기 시작하면 어느새 수많은 커널이 설치되어 있는 것을 확인할 수 있다. 삭제를 위해선 make install 로 만들어진 파일들을 직접 제거하고 grub 을 업데이트 해줘야 한다.
예를 들어 시스템이 현재 부팅되어 있는 버전의 커널을 언인스톨하고자 한다면 다음의 일련의 커맨드를 입력하면 된다:
# rm /boot/vmlinuz-$(uname -r) # rm /boot/initrd.img-$(uname -r) # rm /boot/System.map-$(uname -r) # rm /boot/config-$(uname -r) # rm -fr /lib/modules/$(uname -r) # rm /var/lib/initramfs-tools/$(uname -r) # update-grub2 다른 버전의 설치되어있는 커널을 제거하고 싶다면 위의 $(uname -r) 부분을 제거하고자 하는 커널 버전으로 대체하면 된다.</description>
    </item>
    <item>
      <title>donate mozilla</title>
      <link>https://sjp38.github.io/posts/ko/donate-mozilla/</link>
      <pubDate>Thu, 19 Jan 2017 18:06:54 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/donate-mozilla/</guid>
      <description>나는 보통의 경우 크롬으로 웹브라우징을 한다. 하지만 몇달 전부터 몇가지 예외에 대해서는 파이어폭스를 함께 쓰고 있다.
부족한 하드웨어 스펙 나의 데스크탑 환경은 모니터 세대를 연결한 PC 하나로 구성되어 있었는데, FHD 모니터 세대를 돌리기는 벅찼는지 간헐적 입력 랙이 자주 발생했다. 또, 모니터를 한대 정도 더 늘리고 싶었다. 해서 집에서 놀고있던 5년된 HP 랩탑에 모니터 하나를 연결시키고 이 랩탑과 PC 를 키보드/마우스 하나로 제어하는 환경을 구축했다. PC 에 연결되는 모니터는 두대로 줄어드니까 입력 랙도 줄어들 것이라 생각한것.</description>
    </item>
    <item>
      <title>us sues oracle</title>
      <link>https://sjp38.github.io/posts/ko/us-sues-oracle/</link>
      <pubDate>Thu, 19 Jan 2017 10:17:09 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/us-sues-oracle/</guid>
      <description>오라클이 백인 남성에게 더 많은 월급을 지불하고 아시아인, 그중에서도 인도 사람을 많이 개발직에 채용했다는 이유로 미국 정부가 오라클을 고소.
http://www.reuters.com/article/us-oracle-usa-labor-idUSKBN1522O6?il=0</description>
    </item>
    <item>
      <title>GCMA: Guaranteed Contiguous Memory Allocator</title>
      <link>https://sjp38.github.io/posts/gcma/</link>
      <pubDate>Sat, 14 Jan 2017 23:11:23 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/gcma/</guid>
      <description>The importance of physically contiguous memory has increased in modern computing environments, including both low- and high-end systems. Existing physically contiguous memory allocators generally have critical limitations. For example, the most commonly adopted solution, the memory reservation technique, wastes a significant amount of memory space. Scatter/Gather direct memory access (DMA) and input-output memory management units (IOMMUs) avoid this problem by utilizing additional hardware for address space virtualization. However, additional hardware means an increase in costs and power consumption, which is especially disadvantageous for small systems and they do not provide real contiguous memory.</description>
    </item>
    <item>
      <title>GCMA: Guaranteed Contiguous Memory Allocator</title>
      <link>https://sjp38.github.io/posts/ko/gcma/</link>
      <pubDate>Sat, 14 Jan 2017 23:11:23 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/gcma/</guid>
      <description>The importance of physically contiguous memory has increased in modern computing environments, including both low- and high-end systems. Existing physically contiguous memory allocators generally have critical limitations. For example, the most commonly adopted solution, the memory reservation technique, wastes a significant amount of memory space. Scatter/Gather direct memory access (DMA) and input-output memory management units (IOMMUs) avoid this problem by utilizing additional hardware for address space virtualization. However, additional hardware means an increase in costs and power consumption, which is especially disadvantageous for small systems and they do not provide real contiguous memory.</description>
    </item>
    <item>
      <title>&#34;Is Parallel Programming Hard, And, If So, What Can You Do About It?&#34; Translation</title>
      <link>https://sjp38.github.io/posts/ko/perfbook-kokr/</link>
      <pubDate>Tue, 10 Jan 2017 13:46:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/perfbook-kokr/</guid>
      <description>&amp;ldquo;Is Parallel Programming is Hard, And, If So, What Can You Do About It?&amp;quot;[1] 은 parallel programming 분야에서 대가라 불릴만한 분으로, 이쪽 분야에서 매우 중요한 동기화 메커니즘인 RCU[2] 를 개발했으며 리눅스 커널의 RCU 메인테이너로 활동하고 있는 Paul E. McKenney[3] 가 오픈소스 방식으로 저술하고 있는, parallel programming 에 대한 책입니다.
개인적으로 이 책의 한국어 번역을 오픈소스[4]로 진행하고 있습니다. 이 프로젝트는 원저작자인 Paul 에게 공식 한국어 번역으로 인증받았습니다[5].
컨트리뷰션에 대해서도 열려 있으니, 이에 관심 있는 분은 repository 내의 README 문서의 Contribution 섹션[6] 을 참고 바랍니다.</description>
    </item>
    <item>
      <title>&#34;Is Parallel Programming Hard, And, If So, What Can You Do About It?&#34; Translation</title>
      <link>https://sjp38.github.io/posts/perfbook-kokr/</link>
      <pubDate>Tue, 10 Jan 2017 13:46:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/perfbook-kokr/</guid>
      <description>&amp;ldquo;Is Parallel Programming is Hard, And, If So, What Can You Do About It?&amp;quot;[1] 은 parallel programming 분야에서 대가라 불릴만한 분으로, 이쪽 분야에서 매우 중요한 동기화 메커니즘인 RCU[2] 를 개발했으며 리눅스 커널의 RCU 메인테이너로 활동하고 있는 Paul E. McKenney[3] 가 오픈소스 방식으로 저술하고 있는, parallel programming 에 대한 책입니다.
개인적으로 이 책의 한국어 번역을 오픈소스[4]로 진행하고 있습니다. 이 프로젝트는 원저작자인 Paul 에게 공식 한국어 번역으로 인증받았습니다[5].
컨트리뷰션에 대해서도 열려 있으니, 이에 관심 있는 분은 repository 내의 README 문서의 Contribution 섹션[6] 을 참고 바랍니다.</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://sjp38.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sjp38.github.io/projects/</guid>
      <description> DAMON: Data Access Monitor damo hackermail stream-track RCX: Read-Copy Transact GCMA: Guaranteed Contiguous Memory Allocator DAPHICX: Data Access Pattern Hint Injecting Compiler Extension Translation of &amp;ldquo;Is Parallel Programming Hard, And, If So, What Can You Do About It?&amp;rdquo; Lazybox </description>
    </item>
    <item>
      <title>Recent &amp; Upcoming Talks</title>
      <link>https://sjp38.github.io/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sjp38.github.io/talks/</guid>
      <description>SeongJae Park, Page-level and Fleet-wide Data Access Monitoring for Meta. In Linux Plumbers Refereed Track, Dec 2025. Link SeongJae Park, Actionable Data Access Monitoring Output Data and Format. In Linux System Monitoring and Observability MC at Linux Plumbers, Dec 2025. Link SeongJae Park, DAMON-based Pages Migration for {C,G,X}PU [un]attached NUMA nodes. In Device and Specific PurposeMemory MC at Linux Plumbers, Dec 2025. Link SeongJae Park, hkml: Mailing Tool for Simple Linux Kernel Development.</description>
    </item>
    <item>
      <title>Recent Publications</title>
      <link>https://sjp38.github.io/publications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sjp38.github.io/publications/</guid>
      <description>SeongJae Park, Madhuparna Bhowmik, Alexandru Uta, DAOS: Data Access-aware Operating System. In The 31st International ACM Symposium on High-Performance Parallel and Distributed Computing (HPDC&#39;22), June 2022. Paper, Slides, Poster SeongJae Park, Paul E. McKenney, Laurent Dufour, Heon Y. Yeom, An HTM-Based Update-side Synchronization for RCU on NUMA systems. In 15th ACM European Conference on Computer Systems (EuroSys), April 2020. Paper, Video (5min, 12min), Slides SeongJae Park, Yunjae Lee, Heon Y.</description>
    </item>
  </channel>
</rss>
