<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux kernel | hacklog</title>
    <link>/ko/categories/linux-kernel/</link>
      <atom:link href="/ko/categories/linux-kernel/index.xml" rel="self" type="application/rss+xml" />
    <description>linux kernel</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><lastBuildDate>Fri, 21 Dec 2018 17:00:22 +0900</lastBuildDate>
    <image>
      <url>/img/tux.png</url>
      <title>linux kernel</title>
      <link>/ko/categories/linux-kernel/</link>
    </image>
    
    <item>
      <title>Perf symbol problem on Linux 4.19</title>
      <link>/ko/post/perf_symbol_problem_4.19/</link>
      <pubDate>Fri, 21 Dec 2018 17:00:22 +0900</pubDate>
      <guid>/ko/post/perf_symbol_problem_4.19/</guid>
      <description>&lt;p&gt;4.19 커널에서 오랫만에 perf 를 다시 빌드하고 써보려고 하니, &lt;code&gt;perf report&lt;/code&gt; 가
아래와 같이 제대로 된 symbol name 을 찾질 못합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo perf record -g ls
arch                     builtin-ftrace.c    builtin-report.c     Documentation       perf.data.old
bench                    builtin.h           builtin-sched.c      examples            perf.h
Build                    builtin-help.c      builtin-script.c     include             perf-read-vdso.c
builtin-annotate.c       builtin-inject.c    builtin-stat.c       jvmti               perf-sys.h
builtin-bench.c          builtin-kallsyms.c  builtin-timechart.c  Makefile            perf-with-kcore.sh
builtin-buildid-cache.c  builtin-kmem.c      builtin-top.c        Makefile.config     pmu-events
builtin-buildid-list.c   builtin-kvm.c       builtin-trace.c      Makefile.perf       python
builtin-c2c.c            builtin-list.c      builtin-version.c    MANIFEST            scripts
builtin-config.c         builtin-lock.c      check-headers.sh     perf-archive.sh     tests
builtin-data.c           builtin-mem.c       command-list.txt     perf.c              trace
builtin-diff.c           builtin-probe.c     CREDITS              perf-completion.sh  ui
builtin-evlist.c         builtin-record.c    design.txt           perf.data           util
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 0.025 MB perf.data (21 samples) ]
sjpark@hydra:~/linux/tools/perf$ sudo perf report --stdio
# To display the perf.data header info, please use --header/--header-only options.
#
#
# Total Lost Samples: 0
#
# Samples: 21  of event &#39;cycles:ppp&#39;
# Event count (approx.): 2712237
#
# Children      Self  Command  Shared Object      Symbol
# ........  ........  .......  .................  .................................
#
    59.39%     0.00%  ls       [unknown]          [k] 0xffffffffa8a00088
            |
            ---0xffffffffa8a00088
               |
               |--51.91%--0xffffffffa8004185
               |          |
               |          |--17.13%--0xffffffffa8212c8b
               |          |          0xffffffffa8212afe
               |          |          0xffffffffa821274a
               |          |          0xffffffffa81bb3c5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;왜이러지 하고 삽질하다가 알고보니 perf 쪽 최신 커밋인 edeb0c90df35 (&amp;ldquo;perf
tools: Stop fallbacking to kallsyms for vdso symbols lookup&amp;rdquo;) 이 만든 버그군요.
해당 커밋만 revert 하고 perf 를 다시 빌드하면 다시 잘 됩니다.&lt;/p&gt;
&lt;p&gt;저만 겪는 문제는 아닌지 버그질라에도 이에 대한 이슈가 올라와 있네요:
&lt;a href=&#34;https://bugzilla.kernel.org/show_bug.cgi?id=201551&#34;&gt;https://bugzilla.kernel.org/show_bug.cgi?id=201551&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKMM Setup and Usage</title>
      <link>/ko/post/lkmm-install/</link>
      <pubDate>Thu, 08 Nov 2018 04:30:42 +0900</pubDate>
      <guid>/ko/post/lkmm-install/</guid>
      <description>&lt;p&gt;리눅스 커널은 Formalised and executable memory consistent model 을 제공합니다.
줄여서 linux kernel memory model (LKMM) 이라고 하죠.  이 글은 4.19 버전을
기준으로 LKMM 을 실제로 수행해 보기 위한 환경 셋업 과정과 간단한 실행 방법을
정리해 봅니다.  글 작성을 위한 테스트는 Ubuntu 16.04 서버가 설치된 가상머신에서
진행되었습니다.&lt;/p&gt;
&lt;h1 id=&#34;herd7-install&#34;&gt;herd7 install&lt;/h1&gt;
&lt;p&gt;LKMM 은 버전 7.49 의 &amp;ldquo;herd7&amp;rdquo; 과 &amp;ldquo;klitmus7&amp;rdquo; 을 필요로 합니다.  하지만 herd7 은
또 Ocaml 을 위한 패키지 매니저인 OPAM 을 설치할 것을 필요로 하죠.  우분투에선
패키지 시스템이 OPAM 을 지원하므로 아래와 같이 쉽게 설치할 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install opam
$ opam init
$ sudo opam update
$ sudo opam upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;두번째 커맨드 수행 중 다음과 같은 질문이 나오는데, 디폴트 선택을 주기 위해 그냥
엔터를 칩니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Do you want OPAM to modify ~/.profile and ~/.ocamlinit?
(default is &#39;no&#39;, use &#39;f&#39; to name a file other than ~/.profile)
    [N/y/f]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한 &lt;code&gt;update&lt;/code&gt; 와 &lt;code&gt;upgrade&lt;/code&gt; 명령 시에 root 권한으로 이 커맨드를 수행하는 걸
권장하지 않는다고 하지만 정작 &lt;code&gt;sudo&lt;/code&gt; 없이 하면 권한 없어서 실패합니다.&lt;/p&gt;
&lt;p&gt;이제 다음 명령을 통해 herdtools 의 빌드와 설치를 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/herd/herdtools7 &amp;amp;&amp;amp; cd herdtools7
$ git checkout 7.49
$ make all
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;빌드에 약 3분 10여초가 소요됐습니다.  설치가 잘 되었는지 아래와 같이 확인해
봅니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ herd7 -version
7.49, Rev: 93dcbdd89086d5f3e981b280d437309fdeb8b427
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lkmm-download&#34;&gt;LKMM Download&lt;/h1&gt;
&lt;p&gt;LKMM 은 리눅스 소스 트리의 &lt;code&gt;tools/memory-model/&lt;/code&gt; 디렉토리에 있습니다.
&lt;code&gt;https://kernel.org&lt;/code&gt; 에서 다운받거나 해서 사용하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls ~/linux/tools/memory-model/
Documentation      linux-kernel.cat  linux-kernel.def  lock.cat  scripts
linux-kernel.bell  linux-kernel.cfg  litmus-tests      README
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;herd7-based-litmus-tests-execution&#34;&gt;Herd7 Based Litmus Tests Execution&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ herd7 -conf linux-kernel.cfg litmus-tests/SB+fencembonceonces.litmus
Test SB+fencembonceonces Allowed
States 3
0:r0=0; 1:r0=1;
0:r0=1; 1:r0=0;
0:r0=1; 1:r0=1;
No
Witnesses
Positive: 0 Negative: 3
Condition exists (0:r0=0 /\ 1:r0=0)
Observation SB+fencembonceonces Never 0 3
Time SB+fencembonceonces 0.01
Hash=d66d99523e2cac6b06e66f4c995ebb48
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;klistmus7-based-litmus-tests-execution&#34;&gt;Klistmus7 Based Litmus Tests Execution&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir klitmus_test
$ klitmus7 -o klitmus_test/ litmus-tests/SB+fencembonceonces.litmus
$ cd klitmus_test/
$ ls
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ make
$ sudo sh run.sh
$ sudo sh ./run.sh
[sudo] password for sjpark:
Thu Nov  8 04:55:44 KST 2018
Compilation command: klitmus7 -o klitmus_test/ litmus-tests/SB+fencembonceonces.litmus
OPT=
uname -r=4.19.0

Test SB+fencembonceonces Allowed
Histogram (3 states)
16580117:&amp;gt;0:r0=1; 1:r0=0;
16402936:&amp;gt;0:r0=0; 1:r0=1;
3016947 :&amp;gt;0:r0=1; 1:r0=1;
No

Witnesses
Positive: 0, Negative: 36000000
Condition exists (0:r0=0 /\ 1:r0=0) is NOT validated
Hash=d66d99523e2cac6b06e66f4c995ebb48
Observation SB+fencembonceonces Never 0 36000000
Time SB+fencembonceonces 1.40

Thu Nov  8 04:55:45 KST 2018
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
