<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>daphicx | hacklog</title>
    <link>/ko/tags/daphicx/</link>
      <atom:link href="/ko/tags/daphicx/index.xml" rel="self" type="application/rss+xml" />
    <description>daphicx</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><lastBuildDate>Thu, 30 May 2019 18:59:53 +0900</lastBuildDate>
    <image>
      <url>/img/tux.png</url>
      <title>daphicx</title>
      <link>/ko/tags/daphicx/</link>
    </image>
    
    <item>
      <title>DAPHICX: Data Access Pattern Hint Injecting Compiler Extension</title>
      <link>/ko/post/daphicx/</link>
      <pubDate>Thu, 30 May 2019 18:59:53 +0900</pubDate>
      <guid>/ko/post/daphicx/</guid>
      <description>&lt;p&gt;Memory pressure is inevitable as the size of working sets is rapidly growing
while the capacity of dynamic random access memory (DRAM) is not. Meanwhile,
storage devices have evolved so that their speed is comparable to the speed of
DRAM while their capacity scales are comparable to that of hard disk drives
(HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and
high-end storages as swap devices will be common.&lt;/p&gt;
&lt;p&gt;Due to the unique characteristics of these modern storage devices, the swap
target decision should be optimal. It is essential to know the exact data
access patterns of workloads for such an optimal decision, although underlying
systems cannot accurately estimate such complex and dynamic patterns. For this
reason, memory systems allow programs to voluntarily hint their data access
pattern. Nevertheless, it is exhausting for a human to manually figure out the
patterns and embed optimal hints if the workloads are huge and complex.&lt;/p&gt;
&lt;p&gt;This project introduces a compiler extension that automatically optimizes a
program to voluntarily hint its dynamic data access patterns to the underlying
swap system using a static/dynamic analysis based profiling result. To our best
knowledge, this is the first profile-guided optimization (PGO) for modern swap
devices. Our empirical evaluation of the scheme using realistic workloads shows
consistent improvement in performance and swap device lifetime up to 2.65 times
and 2.98 times, respectively.&lt;/p&gt;
&lt;p&gt;DAPHICX has introduced by the [FAST&#39;19 WiP]
(&lt;a href=&#34;https://www.usenix.org/conference/fast19/wips&#34;&gt;https://www.usenix.org/conference/fast19/wips&lt;/a&gt;) and the [HotStorage&#39;19]
(&lt;a href=&#34;https://www.usenix.org/conference/hotstorage19/presentation/park)&#34;&gt;https://www.usenix.org/conference/hotstorage19/presentation/park)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
