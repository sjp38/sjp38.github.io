<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hacklog</title>
    <link>https://sjp38.github.io/post/</link>
    <description>Recent content in Posts on Hacklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Your Name</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0900</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LKML News after v4.16-rc4</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.16-rc4/</link>
      <pubDate>Mon, 05 Mar 2018 10:50:48 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.16-rc4/</guid>
      <description>

&lt;h2 id=&#34;linux-4-16-rc4&#34;&gt;Linux 4.16-rc4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;벌써 개발 단계의 중반이라 할 수 있는 rc4 의 릴리즈입니다.  4.16 버전의 릴리즈도
얼마 남지 않았군요.  여전히 충분히 조용한 한주였습니다.  다만 여기저기에 조금씩
변경사항이 골고루 있군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.16 Rc3</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.16-rc3/</link>
      <pubDate>Mon, 26 Feb 2018 18:38:53 +0100</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.16-rc3/</guid>
      <description>

&lt;h2 id=&#34;linux-4-16-rc3&#34;&gt;Linux 4.16-rc3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.16 세번째 rc 버전이 릴리즈 되었습니다.  rc2 보단 변경사항이 많지만, rc2 때
이야기 했듯 rc2 때는 대부분의 경우 고칠 것들을 찾지도 못했기 때문이 크기
때문이죠.  즉, 스펙터와 멜트다운으로 끔찍했던 4.15 때와 달리, 모든게 정상적이고
예상대로라고 합니다.&lt;/p&gt;

&lt;p&gt;대부분의 변경은 드라이버이고, 네트워킹 쪽 변경도 좀 크군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.16 Rc2</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.16-rc2/</link>
      <pubDate>Mon, 19 Feb 2018 11:09:15 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.16-rc2/</guid>
      <description>

&lt;h2 id=&#34;linux-4-16-rc2&#34;&gt;Linux 4.16-rc2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.16 두번째 rc 버전의 릴리즈입니다.  이번 한주는 매우 조용한 한주였군요.  머지
윈도우가 끝나고 사람들이 좀 쉬기 때문일수도, 아직 버그를 찾지 못해서일 수도
있고 일반적으로 rc2 는 조용한 편이지만, 어쨌든 토발즈는 만족스러운 눈치입니다.
4.15 에서의 spectre &amp;amp; meltdown 때문에 더 그럴지도 모르겠지만요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.16 Rc1</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.16-rc1/</link>
      <pubDate>Tue, 13 Feb 2018 13:56:47 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.16-rc1/</guid>
      <description>

&lt;h2 id=&#34;linux-4-16-rc1&#34;&gt;Linux 4.16-rc1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어느덧 2주일이 지났습니다.  머지 윈도우가 닫히고 4.16 첫번째 rc 버전이
나왔습니다.  4.15는 역시 토발즈에게 고통스러웠던 시간이었던지 이번 머지
윈도우는 4.15 보다 훨씬 나았다는 토발즈의 이야기입니다.&lt;/p&gt;

&lt;p&gt;이번 릴리즈에서는 GPU 쪽 변경 사항이 많고 대부분은 드라이버라 아주 큰 변화는
거의 없지만, 여전히 arch 쪽에도, 네트워킹과 파일시스템 등에도 변경이 없지는
않다고 정리하고 있습니다.
스펙터 / 멜트다운 이슈에 대한 x86 외 아키텍쳐의 변경사항들도 들어왔군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15/</link>
      <pubDate>Mon, 29 Jan 2018 09:20:38 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15&#34;&gt;Linux 4.15&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;드디어 4.15 버전이 릴리즈 되었습니다.  지난 한주는 매우 조용하고 변경된 사항이
거의 없었다는군요.&lt;/p&gt;

&lt;p&gt;이렇게 meltdown/spectre 로 시끄럽고 길었던, 평범하지 않았던 릴리즈 사이클이
끝났습니다.
하지만, meltdown/spectre 관련한 일이 아주 끝난 건 아니라고 이야기 하는군요.
특히, indirect bracnh mitigation 을 위한 가장 큰 수정사항을 반영받기 위해선
커널만 업데이트 해선 안되고 컴파일러의 &amp;ldquo;retpoline&amp;rdquo; 지원이 있어야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /sys/devices/system/cpu/vulnerabilities/spectre_v2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;로 컴파일러 지원이 있는지 알 수 있는데, 컴파일러 지원이 없다면&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vulnerable: Minimal generic ASM retpoline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이란 출력이 뜰겁니다.&lt;/p&gt;

&lt;p&gt;한가지 더 이야기 해둬야 할건, 이번 릴리즈에 meltdown/spectre 가 많은 영향을
끼치긴 했지만 그래도 다른 부분들은 평범하게 업데이트가 진행되었다는 겁니다.
즉, 이번 릴리즈는 좀 평범하지 않기 했지만 그렇다고 아주 이상하기만 한 릴리즈도
아니었다는 거죠.&lt;/p&gt;

&lt;p&gt;어쨌든 4.15 버전이 드디어 나왔습니다!&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-addressing-mmap-sem-contention&#34;&gt;[LSF/MM TOPIC] Addressing mmap_sem contention&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/4c20d397-1268-ca0f-4986-af59bb31022c@linux.vnet.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/4c20d397-1268-ca0f-4986-af59bb31022c@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;리눅스 커널에서 메모리 매핑은 mmap_sem 이라는 reader-writer semaphor 를 이용해
race condition 으로부터 보호되고 있습니다.  당연하게도, 쓰레드가 많은 환경에선
여기 부하가 심하게 걸리고 성능 확장을 저해하게 됩니다.  Peter Zijlstra 의
Speculative Page Fault 패치는 페이지 폴트 시에 메모리 매핑을 할 때 mmap_sem 을
잡지 않고 매핑하려 시도해보고 중간에 동시에 같은 영역을 매핑하려 한 쓰레드가
존재하면 abort &amp;amp; retry 를 하는식으로 이 문제를 완화시킵니다.
해당 패치셋은 최근 Laurent 에 의해 다시 포팅되어 커뮤니티에 올라오기도 했죠.
실제로 ebizzy[1] 와 같이 쓰레드를 많이 쓰는 벤치마크에서는 두배가까이 성능
향상이 있었다고 하구요.&lt;/p&gt;

&lt;p&gt;하지만 Speculative Page Fault 만으로는 모든 문제가 해결되지 않기에 mmap_sem
자체에 대한 논의를 LSFMM 에서 하고 싶다는 메일입니다.&lt;/p&gt;

&lt;p&gt;병렬 프로그래밍에 관심있는 제게도 흥미로운 주제네요.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://ebizzy.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;http://ebizzy.sourceforge.net/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-lru-lock-scalability&#34;&gt;[LSF/MM TOPIC] lru_lock scalability&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/2a16be43-0757-d342-abfb-d4d043922da9@oracle.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/2a16be43-0757-d342-abfb-d4d043922da9@oracle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;최근에 덜 사용된 (Least Recently Used) 페이지를 가려내기 위해 사용되는
&lt;code&gt;lru_lock&lt;/code&gt; 은 메모리 집중적 벤치마크를 돌릴 때 커널에서 가장 뜨거워지는 락들
가운데 하나입니다.
당연히 확장성 문제가 있죠.&lt;/p&gt;

&lt;p&gt;이걸 배칭 또는 페이지 개별적 락킹을 통해 해결해 보자는 안을 내놓고 이에 대해
LSFMM 에서 이야기 해보자는 메일입니다.&lt;/p&gt;

&lt;h2 id=&#34;git-pull-rcu-changes-for-v4-16&#34;&gt;[GIT PULL] RCU changes for v4.16&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180129100051.ndq4osy45fz3g26a@gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20180129100051.ndq4osy45fz3g26a@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From: Ingo Molnar &lt;a href=&#34;mailto:mingo@kernel.org&#34; target=&#34;_blank&#34;&gt;mingo@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.16 머지 윈도우가 열렸으니 Ingo 가 4.16 을 위한 rcu 쪽 변경사항을 리누스에게
풀리퀘스트 보냈습니다.
사실 이건 별로 흥미로운 메일은 아닐 수 있지만, 4.16 에서 RCU 가 어떻게 변경될지
알 수 있겠죠.
그리고, 제가 작년 프라하와 상해에서 만들어 올렸던, 패치 9개가 있습니다 ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc9</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc9/</link>
      <pubDate>Tue, 23 Jan 2018 12:16:07 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc9/</guid>
      <description>

&lt;h2 id=&#34;not-final-4-15-this-weekend&#34;&gt;&lt;em&gt;Not&lt;/em&gt; final 4.15 this weekend&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;원래대로라면 4.15 정식 버전의 릴리즈가 될 타이밍이었습니다만&amp;hellip;
아직 충분히 안정화 되지 않은 것 같다는 토발즈의 판단 아래 이번주에도 rc 버전이
나왔습니다.  rc9 입니다.
2011년의 3.1-rc9 이후 처음 나온 rc9 이네요.&lt;/p&gt;

&lt;p&gt;이번 릴리즈는 x86, arm powerpc, mips 쪽의 arch 업데이트, 드라이버, 그리고
네트워킹 핵심부 업데이트가 주된 변경이군요.&lt;/p&gt;

&lt;p&gt;다음주에는 꼭 4.15를 릴리즈 하고 싶다고 하는데, 아마도 다음주에는 4.15 정식
버전이 릴리즈되길 빕니다.&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-cma-and-larger-page-sizes&#34;&gt;[LSF/MM TOPIC] CMA and larger page sizes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/3a3d724e-4d74-9bd8-60f3-f6896cffac7a@redhat.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/3a3d724e-4d74-9bd8-60f3-f6896cffac7a@redhat.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contiguous Memory Allocator (CMA) 는 할당에 사용되는 메모리 영역을 비트맵으로
관리하는데, 페이지 하나에 비트 하나씩 주면 비트맵을 traverse 하는데 너무 많은
시간이 걸리므로, 하나의 비트가 여러개의 페이지를 담당하도록 되어있습니다.
이게 CMA 의 응답시간에는 큰 도움이 되지만, fragmentation 으로 인한 메모리
낭비가 심합니다.  Laura Abbott 은 이걸 LSFMM 에서 논의해보고 싶어하는군요.&lt;/p&gt;

&lt;h2 id=&#34;git-pull-tools-linux-kernel-memory-model&#34;&gt;[GIT PULL tools] Linux kernel memory model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180125093440.GA875@linux.vnet.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20180125093440.GA875@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paul McKenney 의 리눅스 커널 메모리 모델이 리눅스 커널 소스트리의 &lt;code&gt;tools/&lt;/code&gt;
디렉토리로 머지될 것 같습니다!
이 모델은 &lt;code&gt;cat&lt;/code&gt; 언어로 쓰여져서 &lt;code&gt;herd7&lt;/code&gt; 시뮬레이터로 실행될 수 있어서, 동시성을
갖는 코드가 실제로 어떻게 동작할지 검사할 수 있게 해줍니다.
과장 좀 보태서 자동화된 memory-barriers.txt 라고도 할 수 있죠.&lt;/p&gt;

&lt;p&gt;이미 Ingo Molnar 가 풀 했군요.  별다른 문제 없다면 정식 버전으로는 4.17
버전에서 볼 수 있겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc8</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc8/</link>
      <pubDate>Tue, 16 Jan 2018 13:26:26 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc8/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc8&#34;&gt;Linux 4.15-rc8&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;마침내 여덟번째 rc 버전의 릴리즈입니다.  스펙터 버그를 성능 저하 없이 막기 위한
구글의 해결책, Retpoline 지원이 들어갔군요.  그 외에는 드라이버 업데이트여서
일단 rc8 에 걸맞는 조용함이긴 하다고 토발즈는 평하네요.  자, 다음주에는 4.15 가
릴리즈될런지?  아니면 rc9 이 나오고 말런지?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc7</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc7/</link>
      <pubDate>Sat, 13 Jan 2018 10:30:13 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc7/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc7&#34;&gt;Linux 4.15-rc7&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meltdown 과 Spectre 로 떠들썩했던 시간을 지나 4.15 의 일곱번째 rc 버전이 릴리즈
되었습니다.  지난 여섯번째 릴리즈 때도 상당히 안정화에 신경써야 할 시점임에도
x86 pti (page table isolation) 업데이트 패치가 많이 머지되어 의아했는데, 이게
Meltdown 과 Spectre 버그 때문이었음도 밝혀졌죠.
그렇다곤 해도 그 외의 부분은 예상대로 상당히 안정화 되어가고 있다고 합니다.&lt;/p&gt;

&lt;p&gt;더불어, Thomas Geixner 등의 인텔쪽 커널 개발자들의 노력 덕에 pti 등 Meltdown 과
Spectre 버그를 위한 패치가 잘 관리되어 비교적 쉽게 머지될 수 있었음에 리누스가
감사를 표하네요.  욕할땐 욕하고 칭찬할 땐 칭찬하고. ;)&lt;/p&gt;

&lt;p&gt;아무튼, 이때문에 4.15 는 rc8 까지 릴리즈 할 계획이라고 합니다.  4.15 는 2주일
후에나 릴리즈 되겠군요.&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-2018-call-for-proposals&#34;&gt;LSF/MM 2018: Call for Proposals&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180115163952.GB26120@cmpxchg.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20180115163952.GB26120@cmpxchg.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;리눅스 스토리지, 파일 시스템, 메모리 관리 쪽 개발자들의 모임인 LSFMM 서밋 2018
을 위한 CFP 가 공개되었습니다.  올해도 4월에 하네요.  장소는 유타입니다.  1월
31일까지 토론하고 싶은 주제를 메일로 보내면 흥미로운 주제를 바탕으로 주제를
꾸미고, 그 외에도 그냥 참가하고 싶은 사람도 메일 보내면 내부적으로 심사 후
초대를 해주는 것 같네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc6</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc6/</link>
      <pubDate>Tue, 02 Jan 2018 13:34:11 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc6/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc6&#34;&gt;Linux 4.15-rc6&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;한국시간으로는 1월 1일, 토발즈의 현지 시각으로는 2017년의 마지막날, 4.15 의
여섯번째 rc 버전이 릴리즈 되었습니다.&lt;/p&gt;

&lt;p&gt;지난주는 크리스마스 등의 연휴 때문인지 참 조용했죠.  덕분에 이번 릴리즈의
변경사항도 많지 않습니다.
다만 x86 pti 쪽 업데이트가 있었기 때문에 이번엔 rc8 까지 릴리즈 할수도 있을 것
같다고 하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>spec cpu2006 벤치마크 수정하기</title>
      <link>https://sjp38.github.io/post/spec_cpu2006_modification/</link>
      <pubDate>Sun, 24 Dec 2017 17:30:12 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/spec_cpu2006_modification/</guid>
      <description>&lt;p&gt;경우에 따라서 SPEC CPU2006 의 벤치마크 중 일부의 소스코드를 수정하고 싶을 수
있습니다.  예를 들어 특정 벤치마크가 구체적으로 어떻게 동작하는지 알아보기 위해
디버깅 메세지를 추가하고자 할수도 있고, 코드 변경을 통해 성능을 높인다거나 해볼
수도 있겠죠.  그러나, SPEC CPU2006 은 엄정한 벤치마크 수트이기 때문에
소스코드는 물론, 소스코드를 사용하는 도구가 변경된 경우 에러 메세지를 내고
수행을 거부합니다.  수정된 소스코드로 얻어진 결과는 벤치마크 결과로 적합하지
않기 때문이죠.&lt;/p&gt;

&lt;p&gt;때문에, 어쩔 수 없이 수정이 필요하면서도 기존의 수행 방법을 따르려면 이 에러를
내는 곳을 없애는 게 한가지 방법이 될 수 있습니다.  다음의 패치를 적용하면
이 검증 코드가 사라져서 수정된 코드로도 벤치마크를 돌릴 수 있게 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/bin/formatter/setup_common.pl b/bin/formatter/setup_common.pl
index 36170cda1649..b21890972dbd 100755
--- a/bin/formatter/setup_common.pl
+++ b/bin/formatter/setup_common.pl
@@ -278,13 +278,13 @@ sub check_important_files {
     return if (   $::suite_version &amp;gt; 4
                &amp;amp;&amp;amp; !$ENV{&#39;SPEC_CHECK&#39;});
     $::check_integrity = 1;
-    foreach my $important_file (jp(&#39;bin&#39;, basename($0)),
-                                grep { m/$re/ } keys %::file_md5) {
-        if (!check_files(\%::file_md5, $important_file)) {
-            print STDERR &amp;quot;\n\nPart of the tools ($important_file) is corrupt!\nAborting...\n\n&amp;quot;;
-            exit 1;
-        }
-    }
+#    foreach my $important_file (jp(&#39;bin&#39;, basename($0)),
+#                                grep { m/$re/ } keys %::file_md5) {
+#        if (!check_files(\%::file_md5, $important_file)) {
+#            print STDERR &amp;quot;\n\n Part of the tools ($important_file) is corrupt!\nAborting...\n\n&amp;quot;;
+#            exit 1;
+#        }
+#    }
 }
 
 1;
diff --git a/bin/setup_common.pl b/bin/setup_common.pl
index 36170cda1649..d9dbe214d498 100755
--- a/bin/setup_common.pl
+++ b/bin/setup_common.pl
@@ -219,9 +219,9 @@ sub md5filedigest {
 sub load_module {
     my ($module, $quiet) = @_;
 
-    if ($::check_integrity &amp;amp;&amp;amp; !check_files(\%::file_md5, jp(&#39;bin&#39;, $module))) {
-	die &amp;quot;\n\nPart of the tools ($module) is corrupt!  Aborting...\n\n&amp;quot;;
-    }
+#    if ($::check_integrity &amp;amp;&amp;amp; !check_files(\%::file_md5, jp(&#39;bin&#39;, $module))) {
+#	die &amp;quot;\n\nPart of the tools ($module) is corrupt!  Aborting...\n\n&amp;quot;;
+#    }
     eval &amp;quot;require \&amp;quot;$module\&amp;quot;;&amp;quot;;
     print &#39;.&#39; unless ($quiet);
     if ($@) {
@@ -278,13 +278,13 @@ sub check_important_files {
     return if (   $::suite_version &amp;gt; 4
                &amp;amp;&amp;amp; !$ENV{&#39;SPEC_CHECK&#39;});
     $::check_integrity = 1;
-    foreach my $important_file (jp(&#39;bin&#39;, basename($0)),
-                                grep { m/$re/ } keys %::file_md5) {
-        if (!check_files(\%::file_md5, $important_file)) {
-            print STDERR &amp;quot;\n\nPart of the tools ($important_file) is corrupt!\nAborting...\n\n&amp;quot;;
-            exit 1;
-        }
-    }
+#    foreach my $important_file (jp(&#39;bin&#39;, basename($0)),
+#                                grep { m/$re/ } keys %::file_md5) {
+#        if (!check_files(\%::file_md5, $important_file)) {
+#            print STDERR &amp;quot;\n\nPart of the tools ($important_file) is corrupt!\nAborting...\n\n&amp;quot;;
+#            exit 1;
+#        }
+#    }
 }
 
 1;
diff --git a/bin/util.pl b/bin/util.pl
index ccf4a72477c0..c8c0cd786522 100755
--- a/bin/util.pl
+++ b/bin/util.pl
@@ -211,11 +211,11 @@ sub copy_tree {
                     offer_verify_advice();
 		    return 0;
 		}
-		if ($sumhash-&amp;gt;{$sf} ne md5filedigest($sf)) {
-		    Log(0, &amp;quot;\n$sf is corrupt!\n&amp;quot;);
-                    offer_verify_advice();
-		    return 0;
-		}
+#		if ($sumhash-&amp;gt;{$sf} ne md5filedigest($sf)) {
+#		    Log(0, &amp;quot;\n$sf is corrupt!\n&amp;quot;);
+#                    offer_verify_advice();
+#		    return 0;
+#		}
 	    }
             if ($sf =~ /\.bz2$/) {
               copy_bz2_file($sf, $file, [$target], 0);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc5</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.14-rc4/</link>
      <pubDate>Sun, 24 Dec 2017 14:24:13 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.14-rc4/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc5&#34;&gt;Linux 4.15-rc5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다.
원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈
한다는군요.&lt;/p&gt;

&lt;p&gt;이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의
커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc5</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc5/</link>
      <pubDate>Sun, 24 Dec 2017 14:24:13 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc5/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc5&#34;&gt;Linux 4.15-rc5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다.
원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈
한다는군요.&lt;/p&gt;

&lt;p&gt;이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의
커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.&lt;/p&gt;

&lt;h2 id=&#34;re-about-the-try-to-remove-cross-release-feature-entirely-by-ingo&#34;&gt;Re: About the try to remove cross-release feature entirely by Ingo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lockdep 의 cross release 기능은 너무 느렸고, false positive 가 많다는 이유로,
특히 false positive 가 너무 많다는 이유로 Ingo Molnar 에 의해 제거되려 하고
있습니다.  관련해서 이 블로그에서도 일단 default 로는 disable 되는 변경이 v4.14
에 있었음을 이야기 했죠.&lt;/p&gt;

&lt;p&gt;Cross release 의 개발자인 박병철님께서 이에 대해 다른 의견을 내놓는 메일입니다.&lt;/p&gt;

&lt;h2 id=&#34;re-hang-with-v4-15-rc-trying-to-swap-back-in&#34;&gt;Re: Hang with v4.15-rc trying to swap back in&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1514407817.4169.4.camel@HansenPartnership.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1514407817.4169.4.camel@HansenPartnership.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;스왑 레이어를 최적화하는 많은 변경이 최근에 있었는데, 그 중 하나가 시스템 행을
일으키는군요.  관련된 패치들을 발본색원해서 레포팅 한 메일입니다.  충분히 빠른
swap device 에 대해서는 swapcache 를 건너뛰게 한게 원인이 되었군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc4</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc4/</link>
      <pubDate>Mon, 18 Dec 2017 17:46:23 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc4/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc4&#34;&gt;Linux 4.15-rc4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.15 의 네번째 rc 버전입니다.  지난 rc 버전들이 생각보다 커서 토발즈가 좀
걱정했는데, 이번 릴리즈에 들어서는 평범한 네번째 rc 만큼이나 변화가 많이 없어
충분히 안정화 되기 시작한 것 같다고 하는군요.&lt;/p&gt;

&lt;p&gt;이번에 가장 눈에 띌만한 변화는 suspend/resume 처리를 정리하고 고친 것이라고
합니다.  크로스 락킹 디버깅 기능은 부팅 시간을 늘리는 문제 등도 있어선지 이번에
일단 제거되었네요.  나중에 다시 되살릴 계획은 있는 것 같습니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v2-1-1-move-kfree-call-rcu-to-slab-common-c&#34;&gt;[PATCH v2 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;] Move kfree_call_rcu() to slab_common.c&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513895570-28640-1-git-send-email-rao.shoaib@oracle.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1513895570-28640-1-git-send-email-rao.shoaib@oracle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RCU 의 modularity 를 개선하는 패치입니다.  몇가지 쟁점이 있긴 하지만 기본
아이디어는 받아들여지는 분위기군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc3</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc3/</link>
      <pubDate>Mon, 11 Dec 2017 11:25:13 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc3/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc3&#34;&gt;Linux 4.15-rc3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.15 의 세번째 rc 버전입니다.  지난주보단 조금 늦게 릴리즈 되었네요.&lt;/p&gt;

&lt;p&gt;일반적으로 rc3 릴리즈는 좀 변경사항이 많지만 이번엔 그중에서도 변경사항이 많은
편이라 걱정된다고 하는군요.  대부분은 드라이버쪽 변경인데 perf 쪽 변경도 꽤
있고 core, networking, kvm, arch, 문서 업데이트도 물론 있습니다.  어쨌든
토발즈는 이제는 정말 안정화가 되어가길 바라는 마음이라는군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v2-mm-slab-do-not-hash-pointers-when-debugging-slab&#34;&gt;[PATCH v2] mm/slab: Do not hash pointers when debugging slab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 버전에 들어와 포인터 값을 기반으로 한 예측을 통해 공격이 들어오는 걸
방지하기 위해 &amp;lsquo;%p&amp;rsquo; 가 포인터를 그냥 출력하는게 아니라 hash 한 다음에 출력하도록
바뀌었죠.  때문에 디버깅이 좀 까다로워졌구요.  디버깅을 위해 온전한 포인터가
필요한 곳에선 &amp;lsquo;%pX&amp;rsquo; 를 써야 합니다.  일단 slab 쪽에서도 그게 필요하기에 DEBUG
옵션이 켜졌을 때에는 &amp;lsquo;%pX&amp;rsquo; 를 사용하도록 하는 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;rfc-patch-mm-unclutter-thp-migration&#34;&gt;[RFC PATCH] mm: unclutter THP migration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171207124815.12075-1-mhocko@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171207124815.12075-1-mhocko@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transparent Huge Page 를 위한 Michal Hocko 의 패치입니다.&lt;/p&gt;

&lt;p&gt;THP 마이그레이션을 위한 메모리 할당 콜백은 THP 가 한꺼번에 마이그레이션 될 수
있는지 보고, 마이그레이션 될 곳에 메모리가 부족해 불가능하거나 하다면 평범한
페이지를 할당받습니다.  이어서 unmap_and_mov() 가 THP 를 평범한 페이지로
쪼개고, 그사이 THP 의 head page 는 split_huge_page() 를 통해 LRU 리스트에
들어갑니다.  같은 일이 THP 할당에 실패할 때도 이러나는데, 이건 에러가 나기 쉬운
행위라고 Michal 은 봅니다.&lt;/p&gt;

&lt;p&gt;LRU 리스트에 split_huge_page() 를 행하는 것도 잘못된 행위인데, 모든 tail page
들이 마이그레이션 되지 않았기 때문이죠.  이로 인해 발생하는 문제는 사용자가
각각 처리해야 했습니다.&lt;/p&gt;

&lt;p&gt;Michal 은 이 패치를 통해 THP 처리를 위한 특수한 부분들을 migrate_pages() 단계로
올려서 이 상황을 정리하고자 합니다. 여기서 unmap_and_move() 가 ENOMEM 으로
실패하면 THP 페이지를 쪼개고 현재 존재하는 리스트로 옮깁니다.  이렇게 함으로써
우리는 모든 THP 서브페이지들을 항상 마이그레이션 하고 특정한 migrate_pages()
사용자들은 앞서 이야기한 경우를 별도로 처리할 필요가 없어지는 것이죠.&lt;/p&gt;

&lt;h2 id=&#34;patch-locking-lockdep-make-config-lockdep-crossrelease-and-config-lockdep-completions-optional&#34;&gt;[PATCH] locking/lockdep: Make CONFIG_LOCKDEP_CROSSRELEASE and CONFIG_LOCKDEP_COMPLETIONS optional&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513062681-5995-1-git-send-email-byungchul.park@lge.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1513062681-5995-1-git-send-email-byungchul.park@lge.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아직 락들의 classification 이 잘 되어있지 않아 너무 많은 false positive 가
나오고 있어 lockdep 의 CROSSRELEASE 와 COMPLETIONS 를 기본 활성에서 옵셔널로
바꾸는 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-mm-reduce-memory-bloat-with-thp&#34;&gt;[PATCH] mm: Reduce memory bloat with THP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513301359-117568-1-git-send-email-nitin.m.gupta@oracle.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1513301359-117568-1-git-send-email-nitin.m.gupta@oracle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THP 는 굉장히 aggressive 하게 huge page 를 선호하기 때문에 메모리 사용량을
증가시키는 문제가 있습니다.  Redis 등에서는 그런 이유로 THP 를 꺼버리라고
하기도 하죠.&lt;/p&gt;

&lt;p&gt;이 패치는 어플리케이션이 특정 메모리 영역에 MADV_DONTNEED 를 보내면, 이 영역은
&amp;ldquo;space-efficient&amp;rdquo; 로 마크되어서 해당 영역은 항상 huge page 를 사용하는게 아니라
khugepaged 가 해당 영역이 정말로 매핑되어 있고 사용되고 있는지에 따라 huge page
로 승격을 시키도록 합니다.  어플리케이션이 다시 MADV_HUGEPAGE 를 해당 영역에
내면, 해당 영역은 다시 non-space-efficient 로 마크되어 원래대로 동작합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v2-rcutorture-add-basic-arm64-support-to-run-scripts&#34;&gt;[PATCH v2] rcutorture: Add basic ARM64 support to run scripts&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513070365-13436-1-git-send-email-lianglihao@huawei.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1513070365-13436-1-git-send-email-lianglihao@huawei.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RCU 를 테스트하는 rcutorture 드라이버의 드라이버 ;) 스크립트에 aarch64 지원을
추가하는 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v5-00-78-xarray-v5&#34;&gt;[PATCH v5 00/78] XArray v5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171215220450.7899-1-willy@infradead.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171215220450.7899-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matthew Wilcox 의 XArray 다섯번째 버전 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-0-8-restructure-struct-page&#34;&gt;[PATCH 0/8] Restructure struct page&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171216164425.8703-1-willy@infradead.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171216164425.8703-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;struct page&lt;/code&gt; 는 매우 민감한 구조체죠.  요걸 구조를 살짝 바꾸려는 패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc2</title>
      <link>https://sjp38.github.io/post/lkml_news_v4.15-rc2/</link>
      <pubDate>Mon, 04 Dec 2017 13:38:11 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v4.15-rc2/</guid>
      <description>

&lt;h2 id=&#34;linux-4-15-rc2&#34;&gt;Linux 4.15-rc2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.15 의 두번째 rc 버전이 나왔습니다.&lt;/p&gt;

&lt;p&gt;동부 지방을 여행 중인가 보군요.  평소보다 좀 이른 시간에 릴리즈가 됐습니다.
원하던 것보단 큰 릴리즈가 되어버렸지만 대부분 fixup 이기에 큰 문제는 없는 것
같다는군요.  Kernel ASLR leak 을 막기 위해 모든 &amp;ldquo;%P&amp;rdquo; 로 프린트되는 어드레스
주소를 해시해 버린다고 하네요.  이럼 디버깅할 때 좀 짜증날 수 있긴 하겠지만
다른 방법이 별로 없었다고&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;rfc-patch-v3-0-7-ktask-multithread-cpu-intensive-kernel-work&#34;&gt;[RFC PATCH v3 0/7] ktask: multithread CPU-intensive kernel work&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CPU-intensive 한 작업을 커널 내에서 병렬로 진행하도록 도와주는 새로운 프레임웍,
ktask 의 RFC 패치입니다.  예를 들어, 부팅 시에 &lt;code&gt;struct page&lt;/code&gt; 들을 초기화 하는
작업은 현재 하나의 쓰레드가 처리하게 되어 booting 시간이 길어지는데, 멀티코어
시스템이라면 ktask 를 이용해 이 작업을 자동으로 병렬화 할 수 있다는 겁니다.
기존에도 workqueue, kthread_worker 와 같이 병렬 작어을 위한 커널 기능들이
존재하지만, workqueue 는 작업을 쓰레드별로 나누는 걸 대신 해주지는 않고,
kthread_worker 는 하나의 쓰레드만 지원하기 때문에 ktask 를 새로 만들었다고
하네요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v4-00-73-xarray-version-4&#34;&gt;[PATCH v4 00/73] XArray version 4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171206004159.3755-1-willy@infradead.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20171206004159.3755-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XArray 네번째 버전의 패치가 올라왔습니다.  LinuxCon Europe 에서도 관련 발표를
재밌게 들었었는데요.  XArray 는 Radix tree 의 API 를 대체할 목적으로 만들어진
새로운 자료구조 인터페이스입니다.  이번 버전의 패치를 통해 page cache 가 완전히
Radix tree 에서 XArray 로 갈아타게 했다는군요.  하지만 여전히 문제들도 많아서
바로 머지되진 않을 것 같다고 패치의 작성자도 이야기하네요.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
