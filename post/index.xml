<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hacklog</title>
    <link>https://sjp38.github.io/post/</link>
    <description>Recent content in Posts on Hacklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Your Name</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0900</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LKML News v5.1</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1/</link>
      <pubDate>Tue, 30 Apr 2019 14:16:49 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1/</guid>
      <description>

&lt;h2 id=&#34;rfc-patch-v4-00-15-slab-movable-objects-smo&#34;&gt;[RFC PATCH v4 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞서 이 블로그에서도 공유한 SMO 패치의 새 버전입니다.  이번 버전은 dcache 쪽
코드를 많이 수정했군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fedora28 ibus-hangul input problem</title>
      <link>https://sjp38.github.io/post/fedora28_hangul_problem/</link>
      <pubDate>Fri, 26 Apr 2019 11:05:59 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/fedora28_hangul_problem/</guid>
      <description>&lt;p&gt;어느날부터 Fedora 터미널에서 한글 입력이 매우 불편해졌습니다.  한글 모드에서는
backspace, enter, esc 등의 특수키가 하나도 안먹힙니다.  Vim 을 쓰는 입장에선
매우 불편하죠.  알고보니 ibus-hangul 버그인 것 같습니다[1].  아래 커맨드로
ibus-hangul 을 문제 없던 버전으로 다운그레이드 시키고 세션을 재시작 하면 문제가
사라집니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dnf downgrade ibus-hangul-1.5.0-12.fc28.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3&amp;amp;boardNo=153170459823549&amp;amp;command=READ&amp;amp;page=1&amp;amp;categoryId=-1&#34; target=&#34;_blank&#34;&gt;http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3&amp;amp;boardNo=153170459823549&amp;amp;command=READ&amp;amp;page=1&amp;amp;categoryId=-1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc7</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc7/</link>
      <pubDate>Fri, 26 Apr 2019 11:02:24 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc7/</guid>
      <description>

&lt;h2 id=&#34;re-lsf-mm-preliminary-agenda-anyone-anyone-bueller&#34;&gt;Re: [LSF/MM] Preliminary agenda ? Anyone &amp;hellip; anyone ? Bueller ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;올해의 LSFMM 스케쥴이 구글 문서로 공유되고 있었군요:
&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0&#34; target=&#34;_blank&#34;&gt;https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-proactive-memory-reclaim&#34;&gt;[LSF/MM TOPIC] Proactive Memory Reclaim&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CALvZod4V+56pZbPkFDYO3+60Xr0_ZjiSgrfJKs_=Bd4AjdvFzA@mail.gmail.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 LSFMM 이 얼마 안남았습니다만, 또하나의 주제 제안이 올라왔습니다.&lt;/p&gt;

&lt;p&gt;메모리 오버커밋으로 인해 direct reclaim 이 발생하고, 이는 latency sensitive
어플리케이션의 latency 를 크게 저하시키니, 시스템이 좀 더 적극적으로 memory
reclaim 을 해서 direct reclaim 을 최소화 시켜보자는 건데요.  잘 접근되지 않는
cold memory 를 추적해서 미리미리 reclaim 시키자는 겁니다.  챌린지는 물론 cold
memory 를 어떻게 잘 추적하냐는 거지요.  이와 함께 커널의 &lt;code&gt;idle_page_tracking&lt;/code&gt;
의 비효율성도 이야기 했습니다.&lt;/p&gt;

&lt;p&gt;이 주제로 올해 ASPLOS 에 논문도 냈군요: &lt;a href=&#34;https://youtu.be/aKddds6jn1s&#34; target=&#34;_blank&#34;&gt;https://youtu.be/aKddds6jn1s&lt;/a&gt;
개인적으로 최근 연구하고 있는 주제와도 관계 있을 수 있어서 흥미롭습니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-docs-vm-add-documentation-of-memory-models&#34;&gt;[PATCH] docs/vm: add documentation of memory models&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1556101715-31966-1-git-send-email-rppt@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1556101715-31966-1-git-send-email-rppt@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FLAT, DISCONTIG, SPARSE 등의 다양한 메모리 모델에 대한 문서화 추가 패치입니다.
처음 코드 들여다 볼 때 조금 헷갈리던 부분인데 잘 설명되었군요.&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-lightning-round&#34;&gt;[LSF/MM TOPIC] Lightning round?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190425211906.GH4739@mit.edu&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190425211906.GH4739@mit.edu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 LSFMM 에는 라이트닝 토크 세션이 있는데요, 거기서 block layer 에 암호화
레이어를 추가하는 방안에 대해 이야기 해보자는 Ted 의 의견입니다.  안드로이드
쪽에서 이걸 열심히 해보고 있나보군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-0-4-tools-vm-slabinfo-add-fragmentation-output&#34;&gt;[PATCH 0/4] tools/vm/slabinfo: Add fragmentation output&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190426022622.4089-1-tobin@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190426022622.4089-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SLAB vs SLUB 토론 중 현재 slab allocator 의 fragmentation 정도를 알려주는
도구가 있으면 좋겠다는 이야기가 있었는데, 이를 위한 기능을 추가한 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc7&#34;&gt;Linux 5.1-rc7&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whvWQbP20g77U4QRXQDS5w+kf=V-P2QjMkgA-OwJJjHtg@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=whvWQbP20g77U4QRXQDS5w+kf=V-P2QjMkgA-OwJJjHtg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;지난번 rc6 가 거대했던 건 역시 풀 리퀘스트 타이밍 때문이었는지, 이번 rc7 은
다행히도 크기가 작은 편이라고 합니다.  네트워킹 쪽 변경이 좀 있고, 나머진
평소같이 아키텍쳐, 파일 시스템, 그외 드라이버 등의 변경이 내용을 차지했네요.
따라서 다음주엔 5.1이 예정대로 나올 것 같다고 합니다!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I will have a talk at the Hotstorage&#39;19</title>
      <link>https://sjp38.github.io/post/hotstorage2019_talk/</link>
      <pubDate>Thu, 18 Apr 2019 09:37:04 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/hotstorage2019_talk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.usenix.org/conference//hotstorage19&#34; target=&#34;_blank&#34;&gt;HotStorage&amp;rsquo;19&lt;/a&gt; 에 제출한 제
최근 연구에 대한 논문이 accept 되어 7월에 해당 워크샵에서 이에 대한 내용을
발표하게 되었습니다.  논문 제목은 &amp;ldquo;Automating Context Based Access Pattern Hint
Injection for System Performance and Swap Storage Durability&amp;rdquo; 입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc6</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc6/</link>
      <pubDate>Tue, 16 Apr 2019 23:02:17 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc6/</guid>
      <description>

&lt;h2 id=&#34;patch-v12-00-31-speculative-page-faults&#34;&gt;[PATCH v12 00/31] Speculative page faults&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;오랫만에 업데이트 된 SPF 패치셋으로, 이번 패치셋은 v5.1 위로 리베이스
되었습니다.  RCU 에서 Fine-grained reader-writer locking 으로 옮겼던 vma 보호를
다시 RCU 로 되돌린 게 눈에 띄는군요.  기존엔 패치셋만 공개했는데, 이젠 패치셋이
적용된 코드 트리를 github 으로도 제공합니다:
&lt;a href=&#34;https://github.com/ldu4/linux/tree/spf-v12&#34; target=&#34;_blank&#34;&gt;https://github.com/ldu4/linux/tree/spf-v12&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;patch-v3-00-11-provide-generic-top-down-mmap-layout-functions&#34;&gt;[PATCH v3 00/11] Provide generic top-down mmap layout functions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아키텍쳐별로 별도 구현을 하지 않고도 전체 mmap 레이아웃을 접근할 수 있게 해주는
범용 함수들을 구현하는 패치셋입니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-v5-1-rc6&#34;&gt;Linux v5.1-rc6&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wii=Ym24FWf7J2s1CEwCXU3hjVXeHSkV3A8X5iAj6eT8Q@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wii=Ym24FWf7J2s1CEwCXU3hjVXeHSkV3A8X5iAj6eT8Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;부활절이었군요.  어쨌건 토발즈는 그런 사소한 휴일에 릴리즈 일정을 바꾸진
않았습니다.&lt;/p&gt;

&lt;p&gt;이번 rc6 는 평소보다 조금 커다란 릴리즈였고, 때문에 토발즈도 다시 한번 꼼꼼히
살펴봤지만 그렇게까지 이상한 일은 아니라는군요.  4.18 때와 5.0 때도
이정도였답니다.&lt;/p&gt;

&lt;p&gt;네트워킹 쪽 변경이 좀 컸고, 드라이버, arch, selftests 와 perf 쪽에 변경이
있었으며, core mm, filesystem, scheduler, tracing 쪽에도 변경이 조금씩 있었다고
하는군요.&lt;/p&gt;

&lt;p&gt;어쨌건 그다지 이상한 건 없다고 합니다.  적어도 아직까진 5.1 을 향한 여정엔
문제가 없어 보이네요!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hooking Library Function Calls</title>
      <link>https://sjp38.github.io/post/hooking_library_calls/</link>
      <pubDate>Wed, 10 Apr 2019 11:39:06 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/hooking_library_calls/</guid>
      <description>

&lt;p&gt;&lt;code&gt;LD_PRELOAD&lt;/code&gt; 환경변수를 사용하면 로더가 프로그램을 로드할 때 동적 로드해야 할
바이너리 코드를 해당 변수의 값의 디렉토리에서부터 뒤지도록 합니다.
따라서 이를 이용해 &lt;code&gt;malloc()&lt;/code&gt;, &lt;code&gt;free()&lt;/code&gt; 등의 일반적으로 사용하는 라이브러리
함수를 우리의 구현으로 대체하거나 후킹할 수 있습니다.
이 글은 이런 방법으로 &lt;code&gt;malloc()&lt;/code&gt; 을 후킹하는 방법을 예제를 통해 간단히
설명합니다.&lt;/p&gt;

&lt;h2 id=&#34;original-program&#34;&gt;Original Program&lt;/h2&gt;

&lt;p&gt;먼저 다음과 같은 프로그램이 있을 수 있을 겁니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(void)
{
	char *abc;

	abc = (char *)malloc(8);
	printf(&amp;quot;malloced address: %p\n&amp;quot;, abc);
	sprintf(abc, &amp;quot;hello\n&amp;quot;);
	printf(&amp;quot;%s\n&amp;quot;, abc);
	free(abc);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;단순히 &lt;code&gt;malloc()&lt;/code&gt; 을 통해 8바이트 메모리를 할당받아 그 영역을 표시하고 종료하는
프로그램입니다.  위 코드를 &lt;code&gt;program.c&lt;/code&gt; 라는 파일로 저장하고, 아래와 같이
컴파일하고 수행해 보면 우리가 익히 아는, 예상대로의 결과가 나옵니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -o program program.c
$ ./program
malloced address: 0x1cc5010
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;malloc-hooking-code&#34;&gt;malloc Hooking Code&lt;/h2&gt;

&lt;p&gt;이제 &lt;code&gt;malloc()&lt;/code&gt; 함수를 후킹하는 코드를 만들어 봅시다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define _GNU_SOURCE

#include &amp;lt;dlfcn.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

typedef void *(*malloc_t)(size_t size);

void *malloc(size_t size)
{
	malloc_t malloc_fn;

	fprintf(stderr, &amp;quot;malloc(%zu) hooked\n&amp;quot;, size);
	malloc_fn = (malloc_t)dlsym(RTLD_NEXT, &amp;quot;malloc&amp;quot;);
	return malloc_fn(size);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 코드는 우리가 아는 &lt;code&gt;malloc()&lt;/code&gt; 함수와 동일한 함수명, signature 의 함수를
구현하고 있습니다.
단순히 우리가 후킹했음을 알리고, 동적 라이브러리 구조를 통해 이 다음으로
검색되는 &lt;code&gt;malloc&lt;/code&gt; 이름의 라이브러리 함수 (이게 우리가 익히 아는 그 &lt;code&gt;malloc()&lt;/code&gt;
구현이겠죠) 를 찾아, 같은 인자로 수행하고 그 결과를 리턴합니다.
즉, 우리가 아는 &lt;code&gt;malloc()&lt;/code&gt; 과 같은 일을 하긴 하지만 &lt;code&gt;malloc()&lt;/code&gt; 이 호출되었음을
알리는 것이죠.&lt;/p&gt;

&lt;p&gt;이 코드를 &lt;code&gt;mallochook.c&lt;/code&gt; 라는 이름으로 저장 후, 다음과 같이 라이브러리로
빌드합니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -shared -fPIC mallochook.c -o mallochook.so -ldl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-the-hook&#34;&gt;Install The Hook&lt;/h2&gt;

&lt;p&gt;프로그램이 기존 &lt;code&gt;malloc()&lt;/code&gt; 대신 우리가 구현한 &lt;code&gt;malloc()&lt;/code&gt; 을 수행하게 하는 건
&lt;code&gt;LD_PRELOAD&lt;/code&gt; 를 활용하면 간단합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ LD_PRELOAD=./mallochook.so ./program
malloc(8) hooked
malloc(1024) hooked
malloced address: 0x20a5010
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;두번째, 세번째 줄을 보면 &lt;code&gt;malloc()&lt;/code&gt; 이 후킹되어 우리의 메세지가 나오는 걸 볼 수
있습니다.  앞의 &lt;code&gt;program.c&lt;/code&gt; 에서는 8 바이트 &lt;code&gt;malloc()&lt;/code&gt; 호출만 있었는데 세번째
줄의 1024 바이트 malloc()&lt;code&gt;은 어디서 나온 걸까요?  아마도 뒤의&lt;/code&gt;sprintf()` 등의
라이브러리 함수가 호출한 거 아닐까 싶은데 그걸 분석하는 건 여러분의 몫으로
두겠습니다.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;자세한 원리는 생략했습니다만, 간단히 주요 라이브러리 함수를 후킹하는 방법을
알아봤습니다.
여기서 사용된 예제 코드와 명령어는 제 &lt;a href=&#34;https://github.com/sjp38/mallochook&#34; target=&#34;_blank&#34;&gt;Github repo&lt;/a&gt; 에 올려뒀으니 필요하면 참고 바랍니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backtrace on C language program</title>
      <link>https://sjp38.github.io/post/backtrace_c_language/</link>
      <pubDate>Tue, 09 Apr 2019 17:33:50 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/backtrace_c_language/</guid>
      <description>

&lt;p&gt;디버깅 과정에선 현재 어떤 코드가 어떤 함수를 거쳐 수행됐는지를 통한 컨텍스트
파악이 중요합니다.  Java, Python, Go 등 대부분의 언어가 이를 위해 콜스택을 뽑을
수 있는 기능을 제공하죠.  C 언어의 경우 gdb 등을 사용하면 쉽게 이를 볼 수
있지만 경우에 따라선 gdb 를 포기하고 &lt;code&gt;printf()&lt;/code&gt; 등에만 의존해야 하기도 합니다.
이를 위한 기능이 c 라이브러리에도 있습니다, &lt;code&gt;backtrace()&lt;/code&gt; 함수입니다.
&lt;a href=&#34;http://man7.org/linux/man-pages/man3/backtrace.3.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;man&lt;/code&gt;&lt;/a&gt; 에도 이에 대한
설명이 있습니다만, 여기서도 간단히 소개해 봅니다.&lt;/p&gt;

&lt;h2 id=&#34;example-source-code&#34;&gt;Example Source Code&lt;/h2&gt;

&lt;p&gt;예제로 설명하는게 가장 쉽죠.  간단한 사용법은 아래와 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;execinfo.h&amp;gt;

void baz(void)
{
	void *callstack[128];
	int i, frames;
	char **strs;

	frames = backtrace(callstack, 128);
	strs = backtrace_symbols(callstack, frames);
	for (i = 0; i &amp;lt; frames; i++)
		printf(&amp;quot;%s\n&amp;quot;, strs[i]);
	free(strs);
}

void bar(void)
{
	baz();
}

void foo(void)
{
	bar();
}

int main(void)
{
	foo();
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;compile&#34;&gt;Compile&lt;/h2&gt;

&lt;p&gt;아래와 같이 컴파일 합니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -rdynamic -g -o hello ./hello.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-rdynamic&lt;/code&gt; 과 &lt;code&gt;-g&lt;/code&gt; 옵션을 잊지 맙시다.&lt;/p&gt;

&lt;p&gt;이제 프로그램을 실행해 보면:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hello

./hello(baz+0x2e) [0x400964]
./hello(bar+0x9) [0x4009fd]
./hello(foo+0x9) [0x400a09]
./hello(main+0x9) [0x400a15]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f87c51e6830]
./hello(_start+0x29) [0x400869]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;, &lt;code&gt;foo()&lt;/code&gt;, &lt;code&gt;bar()&lt;/code&gt;, 를 거쳐 &lt;code&gt;baz()&lt;/code&gt; 가 수행되었음을 보입니다.  더
나아가서 어떤 소스파일의 몇번 라인인지를 보고 싶다면 &lt;code&gt;addr2line&lt;/code&gt; 커맨드를
사용할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ addr2line -e hello 0x400964
./hello.c:10
$ addr2line -e hello 0x4009fd
./hello.c:20
$ addr2line -e hello 0x400a09
./hello.c:25
$ addr2line -e hello 0x400a15
./hello.c:30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;쉽죠? ;)&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;C 프로그램에서 backtrace 를 떠보는 방법을 알아보았습니다.
위의 내용을 여러분의 환경에서도 쉽게 테스트 해 볼 수 있게끔 제 &lt;a href=&#34;https://github.com/sjp38/backtrace_example&#34; target=&#34;_blank&#34;&gt;Github repo&lt;/a&gt; 에도 정리해 두었습니다.
클론하고, &lt;code&gt;$ make run&lt;/code&gt; 해주시면 예제가 자동으로 빌드되고 돌아갈 겁니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc5</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc5/</link>
      <pubDate>Tue, 09 Apr 2019 17:33:01 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc5/</guid>
      <description>

&lt;h2 id=&#34;v2-rfc-patch-0-9-another-approach-to-use-pmem-as-numa-node&#34;&gt;[v2 RFC PATCH 0/9] Another Approach to Use PMEM as NUMA Node&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;본 블로그를 통해 지속적으로 소개하고 있는, PMEM as NUMA node 를 위한, 보다 나은
hotness 기반 page location 을 위한 패치셋입니다.
기존 코멘트에 기반해서 두번째 버전을 내놓았군요.&lt;/p&gt;

&lt;h2 id=&#34;rfc-patch-v3-00-15-slab-movable-objects-smo&#34;&gt;[RFC PATCH v3 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;최근 LWN 에서도 소개된 (&lt;a href=&#34;https://lwn.net/Articles/784964/&#34; target=&#34;_blank&#34;&gt;https://lwn.net/Articles/784964/&lt;/a&gt;) 패치입니다.
Slab allocator 에서 할당된 object 가 free page 가운데에 박혀 있어 page 를
회수할 수 없는 fragmentation 이 발생합니다.
이 패치셋은 slab allocator 로 할당된 object 의 사용자에게 가능하면 해당 object
들을 움직여 달라고 callback 할 수 있게 함으로써 이 fragmentation 을 해결하려
합니다.&lt;/p&gt;

&lt;p&gt;앞의 버전에 비해서 변경된 건 LWN 기사에 달린 코멘트를 기반으로 한 개선들이군요.&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-guarantee-natural-alignment-for-kmalloc&#34;&gt;[LSF/MM TOPIC] guarantee natural alignment for kmalloc()?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/790b68b7-3689-0ff6-08ae-936728bc6458@suse.cz&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/790b68b7-3689-0ff6-08ae-936728bc6458@suse.cz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LSFMM 을 위한 늦은 주제네요.
kmalloc() 이 2의 승수 크기 얼라인먼트를 지키도록 하는 패치에 대해서 논의하고
싶어합니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc5&#34;&gt;Linux 5.1-rc5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjvcuyCQGnfOhooaL1H4H63qXO=xgo+9yncSOG=eK+kbA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjvcuyCQGnfOhooaL1H4H63qXO=xgo+9yncSOG=eK+kbA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다섯번째 rc 커널입니다.  v5.1이 얼마 남지 않았군요.
이번 릴리즈에선 대부분 드라이버 쪽 변경이 있었으며, 딱히 이상하거나 수상한
움직임은 없다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc4</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc4/</link>
      <pubDate>Sun, 07 Apr 2019 23:17:55 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc4/</guid>
      <description>

&lt;p&gt;Linux v5.1-rc3 릴리즈 후 Linux v.5.1-rc4 릴리즈 사이 기간에 LKML 에 올라온
흥미로운 메일들을 소개합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v8-00-20-convert-x86-arm64-to-use-generic-page-walk&#34;&gt;[PATCH v8 00/20] Convert x86 &amp;amp; arm64 to use generic page walk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;전에 이 블로그에도 공유했던, &lt;code&gt;walk_page_range()&lt;/code&gt; 함수가 커널에서 사용하는
페이지 테이블은 지원하지 않아서 아키텍쳐별로 page table walk 기능을 구현한 걸
&lt;code&gt;walk_page_range()&lt;/code&gt; 의 개선을 통해 가능하게 하고자 하는 패치의 여덟번째
버전입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-mm-add-vm-event-for-page-cache-miss&#34;&gt;[PATCH] mm: add vm event for page cache miss&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Page cache miss 로 인해 사용중인 데이터베이스에 레이턴시가 증가하는 문제가
있는데, 기존 커널에는 페이지 캐시 미스 카운트를 세는 기능이 없기 때문에 만들어
봤다고 합니다.  반응은&amp;hellip; 별로 좋지 않군요.&lt;/p&gt;

&lt;h2 id=&#34;rfc-patch-00-25-accelerate-page-migration-and-use-memcg-for-pmem-management&#34;&gt;[RFC PATCH 00/25] Accelerate page migration and use memcg for PMEM management&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190404020046.32741-1-zi.yan@sent.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190404020046.32741-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞서 이 블로그에서도 소개한대로 PMEM 을 좀 많이 느린 NUMA node 로 다룰 수 있게
되었습니다.  따라서 적절한 페이지 마이그레이션이 중요해지죠.  리눅스 자체 page
replacement policy 를 이용해 page migration 을 하는 방법이 제기되었지만 그
방법은 충분한 쓰루풋을 제공하지 않고 너무 가끔 replacement 가 일어나 hot / cold
를 제대로 구분하기 어려운 문제가 있다고 이 메일은 주장하고, 자신이 생각하는
해결책을 RFC 의 형태로 제시하고 있습니다.&lt;/p&gt;

&lt;p&gt;실제 기존 방식의 마이그레이션 쓰루풋과 자신이 제안한 방식의 쓰루풋을 비교하면서
설명하는데, 재밌네요.&lt;/p&gt;

&lt;h2 id=&#34;patch-rfc-tip-core-rcu-0-4-forbid-static-srcu-use-in-modules&#34;&gt;[PATCH RFC tip/core/rcu 0/4] Forbid static SRCU use in modules&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190402142816.GA13084@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190402142816.GA13084@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;로드될 수 있는 모듈 내에서의 &lt;code&gt;DEFINE_SRCU()&lt;/code&gt; 와 &lt;code&gt;DEFINE_STATIC_SRCU()&lt;/code&gt; 사용을
급지하는 패치셋입니다.  로드 되는 모듈에서 이걸 사용하면 메모리 회수가 안될
것이기 때문이죠.  대신 동적으로 메모리 할당받고 초기화 해서 쓰고, 모듈 exit 될
때 제대로 메모리 해제 시키라고 합니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc4&#34;&gt;Linux 5.1-rc4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=widsb0vN7kqt8ATfNuNW6a54JpKjc6W0XPjt5=LW7UeGQ@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=widsb0vN7kqt8ATfNuNW6a54JpKjc6W0XPjt5=LW7UeGQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 릴리즈는 초반 rc 들이 좀 커서 걱정을 끼쳤었는데, rc4 는 다행히도
작아졌다고 합니다.  딱히 별다른 게 없다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc3</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc3/</link>
      <pubDate>Tue, 26 Mar 2019 08:53:41 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc3/</guid>
      <description>

&lt;h2 id=&#34;patch-tip-core-rcu-0-4-documentation-updates-for-v5-2&#34;&gt;[PATCH tip/core/rcu 0/4] Documentation updates for v5.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v5.2 에 머지될 목적의 RCU 문서화 업데이트 패치셋입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-tip-core-rcu-0-18-miscellaneous-fixes-for-v5-2&#34;&gt;[PATCH tip/core/rcu 0/18] Miscellaneous fixes for v5.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v5.2 를 위한 RCU 의 다양한 업데이트 패치셋입니다.  rcu 를 위한 메일링 리스트도
추가되었군요.  rcu@vger.kernel.org 입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-tip-core-rcu-0-9-torture-test-updates-for-v5-2&#34;&gt;[PATCH tip/core/rcu 0/9] Torture-test updates for v5.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v5.2 를 위한 torture test 의 업데이트 패치셋입니다.  LKMM 이라던지 formal
verification 도 많은 발전이 있었지만, torture test 도 없어질 순 없겠죠.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc3&#34;&gt;Linux 5.1-rc3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiHmEqxBvp3dfTqOut+NHzbNaip=BrnBO48SCTfnApLRg@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiHmEqxBvp3dfTqOut+NHzbNaip=BrnBO48SCTfnApLRg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;한국시간으로 만우절 아침, 5.1 을 위한 세번째 rc 버전이 릴리즈 되었습니다.  이번
릴리즈는 다른 rc3 들에 비해 조금 많은 변화가 있었기에 좋은 현상은 아니지만
그렇다 해도 아직 rc3 정도니까 큰 문제는 아닐 거라 하는군요.  전체적으로 코드가
추가된 것보다 제거된 게 많은 것 같습니다.
어쨌건 앞으로는 점점 변경양이 줄었으면 좋겠다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unit test for the Linux kernel using Kunit</title>
      <link>https://sjp38.github.io/post/kunit_intro/</link>
      <pubDate>Wed, 20 Mar 2019 15:32:29 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/kunit_intro/</guid>
      <description>

&lt;p&gt;지난 2월 말에 FAST&amp;rsquo;19 학회를 다녀왔는데요, &lt;a href=&#34;https://thunk.org/tytso/&#34; target=&#34;_blank&#34;&gt;Ted Tso&lt;/a&gt;
도 왔더군요.  심지어 구글 부스를 지키고 계시더라구요.  어쩌다보니
식사자리에서 합석하고 잡담 나눈 레드햇 개발자 분들이랑 이야기를 하고 있길래
껴서 좀 이야기를 했는데, 이야기 중 테스트에 대한 이야기가 나왔고, 이에 Ted 가
KUnit 이라는 도구를 소개해 줬습니다.  잠깐 사용해 보니 매우 매력적인 것 같아서
이 블로그에서도 소개해 볼까 합니다.&lt;/p&gt;

&lt;p&gt;KUnit 은 이름에서 짐작했겠지만 리눅스 커널을 위한 유닛 테스트 프레임웍입니다.
구글의 Brendan Higgins 라는 분이 개발하고 있고, 커널 내에 머지되는 걸 목표로
해서 LKML 에도 &lt;a href=&#34;https://lkml.org/lkml/2019/2/14/1144&#34; target=&#34;_blank&#34;&gt;RFC 패치&lt;/a&gt;를 보내고
있습니다.
구글러다 보니 구글에서 호스팅 되는
&lt;a href=&#34;https://kunit.googlesource.com/linux/&#34; target=&#34;_blank&#34;&gt;소스트리&lt;/a&gt; 위에서 개발을 하고 있고,
&lt;a href=&#34;https://google.github.io/kunit-docs/third_party/kernel/docs/&#34; target=&#34;_blank&#34;&gt;문서화&lt;/a&gt; 도 잘
해뒀군요.&lt;/p&gt;

&lt;p&gt;이 글은 이런 KUnit 을 사용하는 법을 간단히 정리해 봅니다.  글 내의 테스트에
사용된 환경은 Ubuntu 16.04 서버 버전입니다.&lt;/p&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;p&gt;Kunit 개발 커널은 &lt;a href=&#34;https://kunit.googlesource.com&#34; target=&#34;_blank&#34;&gt;https://kunit.googlesource.com&lt;/a&gt; 에서 받을 수 있습니다.  간단히
아래 명령으로 커널 코드를 땡겨옵시다.  여기선 가장 최근에 RFC 패치를 보냈던
5.0-rc5 위의 버전으로 가져오겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -b kunit/rfc/5.0-rc5/v4 https://kunit.googlesource.com/linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;물론, &lt;a href=&#34;https://lore.kernel.org/patchwork/project/lkml/list/?series=383391&#34; target=&#34;_blank&#34;&gt;Patchwork&lt;/a&gt; 을 통해
KUnit 패치만 직접 받아와 사용중인 커널에 적용하실 수도 있습니다.  전 v5.0 버전
위에도 적용해 봤는데 문제 없이 잘 적용되더군요.&lt;/p&gt;

&lt;p&gt;이어서 KUnit 을 위한 패키지를 깔아야 할텐데요, 커널 빌드에 필요한 패키지만 깔면
됩니다.  커널 빌드에 필요한 패키지에 대한 정보는 이 블로그의 커널 빌드 및
설치에 대한 &lt;a href=&#34;https://sjp38.github.io/post/linux-kernel-build/&#34; target=&#34;_blank&#34;&gt;포스트&lt;/a&gt; 를 참고해 주세요.&lt;/p&gt;

&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;

&lt;p&gt;커널 빌드 종속성 패키지까지 다 설치했다면 준비가 거의 끝났습니다.  잘 돌아가는지 확인해 보기 위해 kunit 에서 제공하는 예제 테스트들을 돌려봅시다.&lt;/p&gt;

&lt;p&gt;KUnit 을 돌리기 위해선 configuration 을 커널 트리 루트에 &lt;code&gt;kunitconfig&lt;/code&gt; 라는
이름의 파일로 써줘야 합니다.  이 설정은 어떤 테스트를 돌릴지 등을 지정합니다.
일단 아래 내용으로 해당 파일을 써줍시다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd linux
$ echo CONFIG_KUNIT=y &amp;gt; kunitconfig
$ echo CONFIG_KUNIT_TEST=y &amp;gt;&amp;gt; kunitconfig
$ echo CONFIG_KUNIT_EXAMPLE_TEST=y &amp;gt;&amp;gt; kunitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 다음의 간단한 명령만으로 KUnit 예제 테스트를 돌릴 수 있습니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./tools/testing/kunit/kunit.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래와 같은 결과가 터미널에 뜰겁니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[11:31:47] Building KUnit Kernel ...
[11:32:12] Starting KUnit Kernel ...
[11:32:12] ==============================
[11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_init_resources
[11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_alloc_resource
[11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_free_resource
[11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_cleanup_resources
[11:32:13] ==============================
[11:32:13] [PASSED] kunit-try-catch-test:kunit_test_try_catch_successful_try_no_catch
[11:32:13] [PASSED] kunit-try-catch-test:kunit_test_try_catch_unsuccessful_try_does_catch
[11:32:13] [PASSED] kunit-try-catch-test:kunit_test_generic_try_catch_successful_try_no_catch
[11:32:13] [PASSED] kunit-try-catch-test:kunit_test_generic_try_catch_unsuccessful_try_does_catch
[11:32:13] ==============================
[11:32:13] [PASSED] string-stream-test:string_stream_test_get_string
[11:32:13] [PASSED] string-stream-test:string_stream_test_add_and_clear
[11:32:13] ==============================
[11:32:13] [PASSED] example:example_simple_test
[11:32:13] ==============================
[11:32:13] Testing complete. 11 tests run. 0 failed. 0 crashed.
[11:32:13] Elapsed time: 26.005s total, 0.000s configuring, 25.736s building, 0.268s running.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;kunit-resource-test, kunit-try-catch-test, string-stream-tets, example&lt;/code&gt; 등의
예제 테스트가 돌아갔고, 모두 테스트를 통과해서 문제가 없음을 보여줍니다.&lt;/p&gt;

&lt;p&gt;KUnit 은 테스트를 위해 커널도 빌드하기 때문에 빌드 시간이 조금 길긴 합니다.  이
경우엔 26초 정도 걸렸네요.  하지만 이건 처음 빌드라 그렇고, 기존에 빌드를
해두고 파일 하나만 수정하는 경우엔 약 10초 정도 걸리는 것 같습니다.  하지만
이후 실제 테스트를 돌리는건 매우 짧은 시간을 필요로 합니다.  이 경우 0.27초
가량 걸렸군요!  따라서 테스트가 늘어나도 많은 시간을 요하지 않습니다.&lt;/p&gt;

&lt;p&gt;스스로를 위한 유닛 테스트를 추가하는 법은 Kunit 공식 문서[1] 를 참고하시기
바랍니다.  어렵지 않습니다 :)&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://google.github.io/kunit-docs/third_party/kernel/docs/start.html#writing-your-first-test&#34; target=&#34;_blank&#34;&gt;https://google.github.io/kunit-docs/third_party/kernel/docs/start.html#writing-your-first-test&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;리눅스 커널을 위한 Unit test framework 인 KUnit 에 대한 간단한 소개와 사용법을
설명했습니다.  저도 최근 개발에 활용하고 있는데, TDD 의 장점을 오랫만에 느낄 수
있었습니다.  하루 빨리 업스트림에도 머지되었으면 좋겠네요!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitlab docker install</title>
      <link>https://sjp38.github.io/post/gitlab_docker_install/</link>
      <pubDate>Tue, 19 Mar 2019 16:39:48 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/gitlab_docker_install/</guid>
      <description>

&lt;p&gt;연구실 내부 사용을 위한 Gitlab 을 Docker 를 사용해서 구축하고 사용하고
있습니다만, 하도 예전이라 Gitlab official docker image 가 아니었고, docker
버전도 2.x 대라서 최신 버전으로 바로 업그레이드가 불가능하군요.&lt;/p&gt;

&lt;p&gt;지금은 gitlab 에서 자체적으로 정식 docker 이미지를 제공합니다.
이 포스트에서는 Ubuntu 18.04 서버 위에 gitlab 정식 docker 이미지를 사용해
설치하는 방법을 기록합니다.&lt;/p&gt;

&lt;h1 id=&#34;docker-설치&#34;&gt;Docker 설치&lt;/h1&gt;

&lt;p&gt;먼저 Docker 를 설치해야죠.  문서[1]를 참고해서 설치를 진행해 봅니다.&lt;/p&gt;

&lt;p&gt;먼저 apt 업데이트 후 종속 패키지들을 깔아줍니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 최신 docker 를 깔기 위해 docker repository 를 apt 에 추가해 주고요:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&amp;quot;
sudo apt update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치합시다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install docker-ce
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;잘 깔렸는지 확인해 봅시다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run hello-world
Unable to find image &#39;hello-world:latest&#39; locally
latest: Pulling from library/hello-world
1b930d010525: Pull complete 
Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 &lt;code&gt;Hello from Docker!&lt;/code&gt; 가 나오면 된겁니다.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&#34; target=&#34;_blank&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;gitlab-설치&#34;&gt;Gitlab 설치&lt;/h1&gt;

&lt;h2 id=&#34;일단-시작&#34;&gt;일단 시작&lt;/h2&gt;

&lt;p&gt;이제 Gitlab docker image 를 가져오고 돌려보죠.  Gitlab 쪽 문서[1]를 참고합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME; mkdir data
$ sudo docker run --detach --hostname gitlab.example.com \
		--publish 30443:443 --publish 30480:80 --publish 30422:22 \
		--name gitlab --restart always \
		--volume $HOME/data/srv/gitlab/config:/etc/gitlab \
		--volume $HOME/data/srv/gitlab/logs:/var/log/gitlab \
		--volume $HOME/data/srv/gitlab/data:/var/opt/gitlab \
		gitlab/gitlab-ce:11.8.2-ce.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 글 작성 시점 기준으로 가장 마지막 정식 릴리즈가 11.8 이므로 11.8.2 버전을
골랐고, 기존에 웹서버와 ssh 가 깔려있는 관계로 별도의 포트를 사용하게 했습니다.&lt;/p&gt;

&lt;p&gt;조금 기다렸다가 &lt;a href=&#34;http://gitlab.example.com:30480&#34; target=&#34;_blank&#34;&gt;http://gitlab.example.com:30480&lt;/a&gt; 으로 들어가면 로그인 됩니다.
&lt;code&gt;$ sudo docker ps -a&lt;/code&gt; 명령을 통해 만든 컨테이너의 status 가 &lt;code&gt;starting&lt;/code&gt; 을
넘어갈 때까지만 기다리면 됩니다.
최초 로그인 시에는 관리자 패스워드를 바로 설정할 수 있습니다.
이후 root 계정에 지금 설정한 패스워드를 입력해 접속할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;설정-변경&#34;&gt;설정 변경&lt;/h2&gt;

&lt;p&gt;몇가지 설정을 추가해야 합니다.  설정은 아래 명령으로 지금 띄운 컨테이너에
들어가 설정 파일을 수정하는 것으로 가능합니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker exec -it gitlab /bin/bash
# vi /etc/gitlab/gitlab.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--volume&lt;/code&gt; 으로 &lt;code&gt;$HOME/data/srv/gitlab/config&lt;/code&gt; 아래로 파일이 링크되어 있으므로
여기서 수정해도 괜찮습니다.&lt;/p&gt;

&lt;p&gt;해당 파일을 변경한 후에는 docker 를 재시작 해야 변경된 설정이 적용됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker restart gitlab
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;포트-변경-적용&#34;&gt;포트 변경 적용&lt;/h2&gt;

&lt;p&gt;호스트의 80 포트, 22 포트, 443 포트를 점유할 수 없는 상황이므로 우린 30480,
30422, 30443 포트를 대신 사용하도록 했습니다.
이 경우 추가적인 설정이 필요합니다.
&lt;code&gt;gitlab.rb&lt;/code&gt; 파일에 아래 네줄을 추가합시다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;external_url &#39;http://gitlab.example.com:30480&#39;
nginx[&#39;listen_port&#39;] = 80
nginx[&#39;listen_https&#39;] = false
gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 30422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;두번째, 세번째 줄을 추가 안해주면 동작 안합니다[3].&lt;/p&gt;

&lt;h2 id=&#34;gmail-smtp-설정&#34;&gt;gmail smtp 설정&lt;/h2&gt;

&lt;p&gt;이어서 smtp 설정을 해야 합니다.&lt;/p&gt;

&lt;p&gt;우린 gmail smtp 를 사용하겠습니다.  이 설정 파일에 다음과 같은 내용을
추가합니다.  이 내용은 공식 문서의 예제[2]에서 가져왔습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitlab_rails[&#39;smtp_enable&#39;] = true
gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.gmail.com&amp;quot;
gitlab_rails[&#39;smtp_port&#39;] = 587
gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;my.email@gmail.com&amp;quot;
gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;my-gmail-password&amp;quot;
gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;smtp.gmail.com&amp;quot;
gitlab_rails[&#39;smtp_authentication&#39;] = &amp;quot;login&amp;quot;
gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true
gitlab_rails[&#39;smtp_tls&#39;] = false
gitlab_rails[&#39;smtp_openssl_verify_mode&#39;] = &#39;peer&#39; # Can be: &#39;none&#39;, &#39;peer&#39;, &#39;client_once&#39;, &#39;fail_if_no_peer_cert&#39;, see http://api.rubyonrails.org/classes/ActionMailer/Base.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여기서 &lt;code&gt;my.email&lt;/code&gt; 과 &lt;code&gt;my-gmail-password&lt;/code&gt; 는 당연히 실제 gmail 계정으로
바꿔야겠죠?  해당 gmail 계정도 gmail 설정에서 smtp 를 사용할 수 있게 설정해
줘야 합니다.&lt;/p&gt;

&lt;h2 id=&#34;가입-기능-제거&#34;&gt;가입 기능 제거&lt;/h2&gt;

&lt;p&gt;gitlab 첫페이지는 &lt;code&gt;sign in&lt;/code&gt; 과 &lt;code&gt;register&lt;/code&gt; 기능이 있습니다.  처음 사용하는
유저는 &lt;code&gt;register&lt;/code&gt; 를 사용하면 되는거죠.&lt;/p&gt;

&lt;p&gt;하지만 우린 폐쇄적으로 운영할 꺼라 계정을 관리자 통해서만 만들 수 있게 하고
싶습니다.  Admin area -&amp;gt; Settings -&amp;gt; General -&amp;gt; Sign-up restrictions 메뉴에서
Sign-up enabled 를 비활성화 시키고 변경사항 저장 버튼을 누릅니다.
이제 gitlab 첫페이지에 &lt;code&gt;register&lt;/code&gt; 기능이 사라져 있을 겁니다.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://docs.gitlab.com/omnibus/docker/&#34; target=&#34;_blank&#34;&gt;https://docs.gitlab.com/omnibus/docker/&lt;/a&gt;
[2] &lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/smtp.html&#34; target=&#34;_blank&#34;&gt;https://docs.gitlab.com/omnibus/settings/smtp.html&lt;/a&gt;
[3] &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/issues/3535&#34; target=&#34;_blank&#34;&gt;https://gitlab.com/gitlab-org/omnibus-gitlab/issues/3535&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc2</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc2/</link>
      <pubDate>Tue, 19 Mar 2019 12:11:11 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc2/</guid>
      <description>

&lt;h2 id=&#34;patch-v5-00-19-convert-x86-arm64-to-use-generic-page-walk&#34;&gt;[PATCH v5 00/19] Convert x86 &amp;amp; arm64 to use generic page walk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;커널이 &lt;code&gt;walk_page_range()&lt;/code&gt; 함수를 제공하긴 하지만 이 함수는 커널에 의해
사용되는 페이지 테이블은 볼수가 없기 때문에 각 아키텍쳐별로 페이지 테이블
순회를 위한 기능을 별도로 만들어 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;이 패치셋은 &lt;code&gt;walk_page_range()&lt;/code&gt; 가 커널의 페이지 테이블을 만질 수 있도록
확장함으로써 그런 불필요한 아키텍쳐별 파편화를 줄이려 합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v6-0-7-psi-pressure-stall-monitors-v6&#34;&gt;[PATCH v6 0/7] psi: pressure stall monitors v6&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;시스템이 어떤 부분의 pressure 를 받는지 쉽게 확인하기 위한 pressure stall
monitor 구현 패치의 여섯 번째 버전입니다.  안드로이드는 이미 이 기능을 적용해서
모바일 기기의 메모리 부족 문제를 해결하고 있다는군요.&lt;/p&gt;

&lt;p&gt;파일 기반의 기존 인터페이스는 자주 들여다보면 오버헤드가 있기 때문에 유저가
&lt;code&gt;poll()&lt;/code&gt; 할 수 있는 형태로 인터페이스를 개선한 것 같습니다.&lt;/p&gt;

&lt;p&gt;이 패치 기반으로 안드로이드의 low memory killer daemon 을 개선했고, 결과 false
positive memory pressure 를 vmpressure signal 대비 약 10배까지 줄일 수 있었다고
합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-0-2-remove-support-for-deprecated-pf-and-pf-in-vsprintf&#34;&gt;[PATCH 0/2] Remove support for deprecated %pf and %pF in vsprintf&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190322132108.25501-1-sakari.ailus@linux.intel.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190322132108.25501-1-sakari.ailus@linux.intel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;함수 포인터의 프린트를 위해 사용되는 프린트 포맷 지시어인 %pf 와 %pF 를 거의
같은 일을 하면서 ia64, ppc64, parisc64 아키텍쳐에선 좀 더 많은 일을 해주는 $ps
와 %pS 로 대체하는 패치입니다.&lt;/p&gt;

&lt;h2 id=&#34;rfc-patch-0-10-another-approach-to-use-pmem-as-numa-node&#34;&gt;[RFC PATCH 0/10] Another Approach to Use PMEM as NUMA Node&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1553316275-21985-1-git-send-email-yang.shi@linux.alibaba.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1553316275-21985-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞서 이 블로그에서도 소개한 바 있는 PMEM 을 매우 느린 NUMA node 로 쓰는 패치가
머지되었습니다.
&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c221c0b0308fd01d9fb33a16f64d2fd95f8830a4&#34; target=&#34;_blank&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c221c0b0308fd01d9fb33a16f64d2fd95f8830a4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그럼 이렇게 평범한 NUMA node 로 인식되는 PMEM 을 어떻게 잘 쓸 것인가? 하는
문제가 남아있는데, 이 패치셋은 이를 위한 패치입니다.&lt;/p&gt;

&lt;p&gt;기본적으로 DRAM 을 먼저 쓰게 만들고, 사용자가 기존의 방식대로 명시적으로 NUMA
인터페이스를 사용해 PMEM 을 요청하면 할당해 줍니다.  그리고, 자주 접근되는
페이지는 vma 단위로 조사해서 DRAM 으로 migrate 시킵니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc2&#34;&gt;Linux 5.1-rc2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgg_PRWs3a6u2gnFLQjhxOJcrFkqqWVnLw60eQAwD-DNw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgg_PRWs3a6u2gnFLQjhxOJcrFkqqWVnLw60eQAwD-DNw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;두번째 rc 입니다.  아직 rc 라고 하기엔 고칠 문제도 찾지 못한 상태라고 할 수
있겠지만요.  따라서 토발즈는 열심히 테스트 해달라고 하네요.&lt;/p&gt;

&lt;p&gt;어쨌건 이번 릴리즈도 크게 특이한 사항은 없다고 합니다, 다만 이번 수정사항 중
&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; 가량이 tools/ 쪽에 집중되었다고 하네요.  perf 쪽의 변경 때문이라고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc1</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.1-rc1/</link>
      <pubDate>Mon, 04 Mar 2019 13:07:30 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.1-rc1/</guid>
      <description>

&lt;p&gt;Linux v5.0 릴리즈 (2019-03-03) 부터 v5.1-rc1 릴리즈 (2019-03-17) 사이의 머지
윈도우 기간 LKML 에 올라온 흥미로운 메일들을 소개합니다.&lt;/p&gt;

&lt;h2 id=&#34;cma-allocation-failure&#34;&gt;CMA allocation failure&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;제게도 GCMA 레이턴시 관련 문의를 보냈던 분인데, LKML 에도 관련 도움을 요청하는
메일을 보냈군요.&lt;/p&gt;

&lt;p&gt;왜 CMA 가 할당에 실패하는지 이유를 묻는 메일인데요, 답은 없습니다.&lt;/p&gt;

&lt;h2 id=&#34;lsf-mm-topic-using-xarray-to-manage-the-vma&#34;&gt;[LSF/MM TOPIC] Using XArray to manage the VMA&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MM 의 오랜 숙원 중 하나는 &lt;code&gt;mmap_sem&lt;/code&gt; 으로 인한 확장성 문제 해결이죠.  기존의 RB
tree 대신 XArray 를 사용하는 것으로 새로운 시도를 시작해 보는건 어떨지 LSFMM
에서 토의해보자는, speculative page fault 의 최근 메인테이너인 Laurent 의
메일입니다.
곧바로 XArray 메인테이너인 Matthew 의 답장이 오는군요.
꼭 해보려는 의지가 강력해 보입니다.&lt;/p&gt;

&lt;h2 id=&#34;mm-cma-c-high-latency-for-cma-allocation&#34;&gt;mm/cma.c: High latency for cma allocation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/SG2PR02MB3098E44824F5AA69BC04F935E8470@SG2PR02MB3098.apcprd02.prod.outlook.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/SG2PR02MB3098E44824F5AA69BC04F935E8470@SG2PR02MB3098.apcprd02.prod.outlook.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이어지는 CMA 레이턴시에 대한 문의입니다.  제게 GCMA 레이턴시에 대해 온 문의에
대해서는 제 실험 환경을 보내주고 그쪽 환경에서 돌려본 후 결과를 알려달라
했는데, 아직 답이 없군요.
좀 더 자세한 분석 결과를 달라는 Michal 의 답변이 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-1-rc1&#34;&gt;Linux 5.1-rc1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj1c_Tb-wwM6qaPLdggXtW3rOh1JzYUOs+O7PsHt-=+jg@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj1c_Tb-wwM6qaPLdggXtW3rOh1JzYUOs+O7PsHt-=+jg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v5.1 머지 윈도우가 종료되고 v5.1-rc1 이 릴리즈 되었습니다.  이번 릴리즈도 크게
다른 건 없고 매우 평범했다고 합니다.  좋은 징조인데요, 변경사항의 60%를 차지한
드라이버 가운데 habanalab 의 AI 가속기 칩 드라이버를 조금 특별한 변경사항으로
토발즈는 꼽네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.0/</link>
      <pubDate>Mon, 25 Feb 2019 13:16:39 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.0/</guid>
      <description>

&lt;p&gt;Linux v5.0-rc8 릴리즈 (2019-02-24) 부터 Linux v5.0 릴리즈 (2019-03-03) 사이
기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-0-5-v5-allow-persistent-memory-to-be-used-like-normal-ram&#34;&gt;&lt;code&gt;[PATCH 0/5] [v5] Allow persistent memory to be used like normal RAM&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞서 몇번 소개했던, persistent memory 를 좀 많이 느린 numa node 인 것처럼 해서
시스템이 사용할 수 있게 하는 접근법의 패치 다섯번째 버전입니다.
이제 개선은 어느정도 된 것 같으니 슬슬 머지되야하지 않겠냐고 주장하는군요.&lt;/p&gt;

&lt;h2 id=&#34;linux-v5-0&#34;&gt;Linux v5.0&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;마침내 5.0 릴리즈입니다!  제 랩톱에도 바로 받아다가 설치했습니다! ;)  물론 5.0
릴리즈에 특별한 기능 추가라던지 하는건 없고 그저 시간이 꽤 지나서 이렇게
된거라곤 하지만 어쨌든 느낌은 새롭군요.&lt;/p&gt;

&lt;p&gt;rc8 릴리즈 후에도 양은 크게 줄었지만 패치가 좀 있었습니다.  그렇게 고쳐진 버그
중 하나로는 uninitialized variable 문제가 있었는데, gcc 가 알아서 초기화를
시켜주다보니 워닝이 안떴었군요.  물론 다른 컴파일러를 사용하면 문제가 생기게
되니 무쓸모한 변경은 아니었다 자평합니다.&lt;/p&gt;

&lt;p&gt;어쨌든, 이렇게 v5.0 커널이 정식으로 나왔고, v5.1 을 향한 여정이 시작되었습니다!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
