<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hacklog</title>
    <link>https://sjp38.github.io/post/</link>
    <description>Recent content in Posts on Hacklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Your Name</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0900</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LKML News v5.3-rc4</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.3-rc4/</link>
      <pubDate>Mon, 12 Aug 2019 01:40:13 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.3-rc4/</guid>
      <description>

&lt;h2 id=&#34;rfc-patch-v6-00-92-vm-introspection&#34;&gt;[RFC PATCH v6 00/92] VM introspection&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;호스트 또는 별도 VM 에서 돌아가는 어플리케이션이 다른 VM들을 제어하거나 상태를
알아보거나 shadow 페이지 테이블을 조정하거나 특정 이벤트 발생시 알림을 받거나
할 수 있게 해주는 KVM introspection 서브시스템을 제안하는 패치입니다.  무려
92개짜리의 거대한 패치군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v4-1-5-mm-page-idle-add-per-pid-idle-page-tracking-using-virtual-indexing&#34;&gt;[PATCH v4 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;] &lt;code&gt;mm/page_idle&lt;/code&gt;: Add per-pid idle page tracking using virtual indexing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;페이지 액세스 여부를 알아볼 수 있는 &lt;code&gt;page_idle&lt;/code&gt; 기능을 프로세스별로 트래킹 하기
편하게 만들어 주는 패치의 네번째 버전입니다.  저자는 구글 직원으로,
안드로이드의 heap profiler 가 이 기능을 쓰나봅니다.  이전 버전과의 차이는&amp;hellip;
Swap pte 처리가 추가되었군요.&lt;/p&gt;

&lt;p&gt;다섯번째 버전도 바로 올라왔습니다만, 큰 차이는 없어 보이는군요:
&lt;a href=&#34;https://lkml.kernel.org/r/20190807171559.182301-1-joel@joelfernandes.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190807171559.182301-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;linux-5-3-rc4&#34;&gt;Linux 5.3-rc4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whWJ7Dv9yZBZpxWd1zcAMwokjt7c8YOp-FOf1PXDKGrmQ@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=whWJ7Dv9yZBZpxWd1zcAMwokjt7c8YOp-FOf1PXDKGrmQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;세번째 rc 는 어째선지 작은 크기였다 말했었죠, 그냥 pull request 들이 천천히
왔기 때문이 맞는 것 같다고 합니다.  이번 rc 릴리즈는 평소 크기에 rc3 에
안들어간 내용이 들어간 만큼 크다고 합니다.
덕분에 최근 2년 사이의 rc4 중 가장 크다고 하네요.
rc3 에 안들어갔다가 rc4 에 뒤늦게 들어온 변경사항은 대부분 network 쪽
코드라는군요.&lt;/p&gt;

&lt;p&gt;이번 변경 중 개인적으로 눈에 띄는건 &lt;code&gt;switch-case&lt;/code&gt; 구문의 fall-through 코멘트
업데이트입니다.
LWN 에도 관련 글이 올라왔으니 한번 읽어보는 것도 좋을 겁니다:
&lt;a href=&#34;https://lwn.net/Articles/794944/&#34; target=&#34;_blank&#34;&gt;https://lwn.net/Articles/794944/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc3</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.3-rc3/</link>
      <pubDate>Wed, 31 Jul 2019 08:40:48 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.3-rc3/</guid>
      <description>

&lt;h2 id=&#34;patch-v5-00-14-provide-generic-top-down-mmap-layout-functions&#34;&gt;[PATCH v5 00/14] Provide generic top-down mmap layout functions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아키텍쳐별로 다르게 구현되어 있던 mmap 레이아웃 함수들을 범용화 시키는 패치셋,
다섯번째 버전입니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v10-00-22-generic-page-walk-and-ptdump&#34;&gt;[PATCH v10 00/22] Generic page walk and ptdump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;역시 아키텍쳐별로 다르게 구현되어 있던 page table walk 과 page table dump
기능을 범용화 시키는 패치입니다.  벌써 10번째 버전이군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-0-3-address-hugetlb-page-allocation-stalls&#34;&gt;[PATCH 0/3] address hugetlb page allocation stalls&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sysctl&lt;/code&gt; 이나 &lt;code&gt;procfs&lt;/code&gt; 를 통한 hugetlb 페이지 할당은 수분이나 수시간까지도 오래
걸릴 수 있습니다.  이 패치셋은 이렇게 느린 할당시간 문제를 유발하는 reclaim 과
compaction 쪽 문제를 해결할 수 있는 수정사항들을 담고 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-3-rc3&#34;&gt;Linux 5.3-rc3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiW+q32YcUL62XWjAme8giZDo-=kmB9=f_JEgyEgV7eaA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiW+q32YcUL62XWjAme8giZDo-=kmB9=f_JEgyEgV7eaA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;보통 머지 윈도우가 지난 후에는 사람들이 숨을 고르고 넘어가기 때문에 보통 rc2 가
작고 rc3 부터 변경이 많아집니다.  하지만 이번 릴리즈는 이상하게도 rc2 보다
작았다는군요.&lt;/p&gt;

&lt;p&gt;커밋 기반으로 그린 rc3 개발 시각화 동영상을 다음 링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/V1qUa2QXZes&#34; target=&#34;_blank&#34;&gt;https://youtu.be/V1qUa2QXZes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Memory: the flat, the discontiguous, and the sparse (Korean)</title>
      <link>https://sjp38.github.io/post/lwn_memory_flat_discontiguous_sparse/</link>
      <pubDate>Wed, 31 Jul 2019 07:45:17 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lwn_memory_flat_discontiguous_sparse/</guid>
      <description>

&lt;p&gt;LWN 의 &amp;ldquo;Memory: the flat, the discontiguous, and the sparse&amp;rdquo; 라는 제목의 글의
한글 번역입니다.  원문은 LWN 에서 볼 수 있습니다:
&lt;a href=&#34;https://lwn.net/Articles/789304/&#34; target=&#34;_blank&#34;&gt;https://lwn.net/Articles/789304/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;May 27, 2019&lt;/p&gt;

&lt;p&gt;이 기사는 Mike Rapoport 에 의해 기여되었습니다.&lt;/p&gt;

&lt;p&gt;컴퓨터 시스템에서 물리 메모리는 소중한 자원이어서, 이를 효율적으로 관리하기
위한 많은 노력이 기울여져왔습니다.
이 일은 현대의 시스템에서의 메모리 구조가 복잡해짐에 따라 더 어려워졌습니다.
물리 메모리가 실제로 어떻게 위치해 있는가를 다루기 위한 여러 계층의 추상화가
존재합니다; 그런 추상화 중 하나는 &amp;ldquo;메모리 모델&amp;rdquo; 이라고 불립니다.
커널은 세개의 모델을 지원하고 있는데, 그 중 하나는 지원이 멈춰져 가고 있습니다.
이 변경을 이해하기 위한 방법으로, 이 기사는 커널의 메모리 모델들의 진화, 현재
상태, 그리고 있을 법한 미래에 대해 자세히 들여다 봅니다.&lt;/p&gt;

&lt;h2 id=&#34;flatmem&#34;&gt;FLATMEM&lt;/h2&gt;

&lt;p&gt;리눅스가 처음 나왔을 때, 메모리는 평평했습니다: 메모리는 0 부터 수 메가바이트의
물리 주소를 갖는 단순한 선형적 배열일 뿐이었습니다.
각 물리 페이지 프레임은 커널의 &lt;code&gt;mem_map&lt;/code&gt; 배열에 하나의 원소와 연관되었으며, 이
당시에 이 배열은 해당 페이지가 가진 레퍼런스의 갯수를 세는 하나의 &lt;code&gt;unsigned
short&lt;/code&gt; 원소로 이루어져 있었습니다.
하지만, 얼마 있지 않아서, 이 &lt;code&gt;mem_map&lt;/code&gt; 의 원소들은 스왑 관리를 위한 &lt;code&gt;age&lt;/code&gt; 와
&lt;code&gt;dirty counter&lt;/code&gt; 를 포함하도록 커졌습니다.
Linux 1.3.50 에서 &lt;code&gt;mem_map&lt;/code&gt; 의 원소들은 마침내 &lt;code&gt;struct page&lt;/code&gt; 로
이름지어졌습니다.&lt;/p&gt;

&lt;p&gt;이 평평한 메모리 매핑은 물리 페이지 프레임 번호 (page-frame number : PFN) 와
그에 대응되는 &lt;code&gt;struct page&lt;/code&gt; 사이의 쉽고 빠른 변환을 제공했습니다; 이 변환
작업은 간단한 배열 인덱스 계산 문제였습니다.
이후 &lt;code&gt;struct page&lt;/code&gt; 의 레이아웃 변경이 있었는데, 새로운 사용처 (예컨대, page
cache) 들과 &lt;code&gt;struct page&lt;/code&gt; 의 캐시 성능 최적화를 위한 것이었습니다.
메모리 매핑은 깔끔하고 효율적인 평평한 배열로 유지되었습니다만, 이는 중요한
단점을 가지고 있었습니다: 물리 주소 공간 상의 큰 공백을 처리할 수 없었습니다.
이 메모리 매핑 가운데 공백에 연관된 부분은 낭비되어지거나, ARM 에서처럼, 메모리
매핑 자체가 공백을 가질 수 있었습니다.&lt;/p&gt;

&lt;h2 id=&#34;discontigmem&#34;&gt;DISCONTIGMEM&lt;/h2&gt;

&lt;p&gt;상당히 비연속적인 물리 메모리를 효율적으로 처리하기 위한 지원이 리눅스를 NUMA
기계들 위에서 잘 동작하도록 하기 위한 노력의 일환으로 1999년에 메모리 관리
서브시스템으로 들어왔습니다.
이 코드는 &lt;code&gt;CONFIG_DISCONTIGMEM&lt;/code&gt; 설정 옵션에 종속적이어서, 이 메모리 모델은
&lt;code&gt;DISCONTIGMEM&lt;/code&gt; 이라 이름지어진 첫번째 모델이었습니다.&lt;/p&gt;

&lt;p&gt;이 &lt;code&gt;DISCONTIGMEM&lt;/code&gt; 모델은 메모리 노드 (memory node) 라는 개념을 소개했는데, 이
개념은 여전히 NUMA 메모리 관리의 기본으로 남아있습니다.
각 노드는 free-page lists, in-use page lists, least-recently-used (LRU) 정보,
사용 통계 등을 포함한, (대부분) 독립적인 메모리 관리 서브시스템을 갖습니다.
이런 것들 가운데, &lt;code&gt;struct pglist_data&lt;/code&gt; (또는 짧게 &lt;code&gt;pg_data_t&lt;/code&gt;) 로 표현되는 노드
데이터는 하나의 노드에 대한 메모리 매핑 정보를 가지고 있습니다.
각 노드가 연속적인 물리 메모리를 가지고 있다는 가정 하에, 노드당 하나의 &lt;code&gt;struct
page&lt;/code&gt; 배열을 갖는 것은 평평한 메모리 매핑 안의 거대한 공백 문제를 해결했습니다.&lt;/p&gt;

&lt;p&gt;하지만 이게 공짜로 된 건 아닙니다.
&lt;code&gt;DISCONTIGMEM&lt;/code&gt; 에서는, 예를 들면 어떤 PFN 을 그에 연관된 &lt;code&gt;struct page&lt;/code&gt; 로
변환하기 위해 특정 페이지를 어떤 노드가 가지고 있는지를 알 수 있어야 합니다.
비슷하게, 페이지를 가지고 PFN 을 구하기 위해 어떤 노드의 메모리 맵이 해당
&lt;code&gt;struct page&lt;/code&gt; 를 가지고 있는지도 알 수 있어야 합니다.
긴 진화의 끝에, &lt;code&gt;KVADDR_TO_NID()&lt;/code&gt;, &lt;code&gt;LOCAL_MAP_BASE()&lt;/code&gt;, &lt;code&gt;ADDR_TO_MAPBASE()&lt;/code&gt;,
그리고 &lt;code&gt;LOCAL_BASE_ADDR()&lt;/code&gt; 매크로를 처음 정의한 &lt;code&gt;mips64&lt;/code&gt; 부터 시작해서 PFN 의
&lt;code&gt;struct page&lt;/code&gt; 로의 변환과 그 반대 작업은 &lt;code&gt;include/asm-generic/memory_model.h&lt;/code&gt;
안에 정의된, 비교적 간단한 &lt;code&gt;pfn_to_page()&lt;/code&gt; 와 &lt;code&gt;page_to_pfn()&lt;/code&gt; 매크로로 수행되게
되었습니다.&lt;/p&gt;

&lt;p&gt;하지만, DISCONTIGMEM 은 약점이 있었습니다: 메모리 핫플러그 (hotplug) 와
핫리무브 (hot remove) 입니다.
실제 NUMA 노드는 실제 핫플러그를 지원하기엔 너무 굵은 크기였고, 노드를 쪼개는
것은 불필요한게 많은 단편화와 오버헤드를 가져올 것이었습니다.
각 노드가 독립적인 메모리 관리 구조체들을 연관된 비용과 함께 가짐을 기억해
보세요; 노드를 쪼개는 것은 그런 비용을 상당히 증가시킬 겁니다.&lt;/p&gt;

&lt;h2 id=&#34;sparsemem&#34;&gt;SPARSEMEM&lt;/h2&gt;

&lt;p&gt;이 한계는 SPARSEMEM 을 통해 해결되었습니다.  이 모델은 메모리 매핑을
아키텍쳐별로 정의된 임의의 크기의 섹션들의 집합으로 추상화 했습니다.
각 섹션은 &lt;code&gt;struct mem_section&lt;/code&gt; 으로 표현되며, (코드에 설명된 바에 따르면):
&amp;ldquo;논리적으로, &lt;code&gt;struct page&lt;/code&gt; 의 배열로의 포인터입니다.  하지만, 다른 마술을 통해
저장됩니다&amp;rdquo;.
이 섹션들의 배열은 &lt;code&gt;SECTION_SIZE&lt;/code&gt; 크기로 효율적으로 쪼개질 수 있는 메타 메모리
매핑입니다.
PFN 과 &lt;code&gt;struct page&lt;/code&gt; 사이의 효율적인 변환을 위해, PFN 의 상위 비트 몇개는 이
섹션 배열로의 인덱스로 사용됩니다.
반대 방향 변환을 위해선, 이 섹션 넘버가 page 의 flag 로 인코딩 됩니다.&lt;/p&gt;

&lt;p&gt;이 모델이 리눅스 커널에 소개되고 몇달 후, SPARSEMEM 은 &lt;code&gt;SPARSEMEM_EXTREME&lt;/code&gt; 으로
확장되었는데, 이 모델은 산재하는 물리 주소 공간을 갖는 시스템에 적합합니다.
&lt;code&gt;SPARSEMEM_EXTREME&lt;/code&gt; 에서는, 첫번째 레벨은 &lt;code&gt;mem_section&lt;/code&gt; 구조체들로의 포인터가
되고, 실제 &lt;code&gt;mem_section&lt;/code&gt; 객체는 실제로 꽂힌 물리 메모리에 기반해서 동적으로
할당됩니다.&lt;/p&gt;

&lt;p&gt;2007년에 SPARSEMEM 의 또다른 개선이 이루어졌습니다; 이는 SPARSEMEM 의 일반적인
가상 메모리 매핑 지원 또는 &lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; 이라고 불렸습니다.
&lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; 의 아이디어는 전체 메모리 매핑이 가상 연속 공간에 매핑되어
있지만, 활성화된 섹션들만이 물리 페이지로 연결되어 있도록 하자는 것입니다.
이 모델은 32-bit 시스템에서는 물리 메모리의 크기가 가상 주소 공간을 넘을 수
있기 때문에 잘 동작하지 못할 수 있습니다.
하지만, 64-bit 시스템에서 &lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; 은 확실히 우수합니다.
추가적인 페이지 테이블 엔트리 사용이라는 비용 아래, &lt;code&gt;page_to_pfn()&lt;/code&gt; 과
&lt;code&gt;pfn_to_page()&lt;/code&gt; 는 평평한 모델만큼이나 간단해 졌습니다.&lt;/p&gt;

&lt;p&gt;SPARSEMEM 메모리 모델의 마지막 확장은 꽤 최근 (2016) 이었습니다; 이는
persistent 메모리 디바이스의 사용 증가로 인해 이루어졌습니다.
메모리 매핑을 메인 메모리가 아니라 그런 디바이스들 내에 직접 저장하는 걸
지원하기 위해, 이 가상 메모리 매핑은 &lt;code&gt;struct vmem_altmap&lt;/code&gt; 을 사용할 수 있게
되었는데, 이 구조체는 persistent 메모리 안의 페이지 구조체를 제공합니다.&lt;/p&gt;

&lt;p&gt;2005년으로 돌아가보면, SPARSEMEM 은 &amp;ldquo;새로운, 그리고 실험적인 &lt;code&gt;discontiguous
memory&lt;/code&gt; 의 대체재&amp;rdquo; 로 설명되었습니다.
&lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; 을 추가한 커밋은 그것을 &amp;ldquo;우리가 SPARSEMEM 을 대부분의
시스템에 기본 (그리고 유일한) 옵션이 되게 할 가능성이 있다&amp;rdquo; 고 했습니다.
그리고 실제로, 일부 아키텍쳐는 DISCONTIGMEM 에서 SPARSEMEM 으로 옮겨탔습니다.
2008년, &lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; 은 x86-64 를 위한 유일한 메모리 모델이 되었는데,
FLATMEM 보단 조금 비싸지만 DISCONTIGMEM 보다는 효율적이기 때문입니다.&lt;/p&gt;

&lt;p&gt;메모리 핫플러그, persistent 메모리 지원, 다양한 성능 최적화와 같은 최근의
메모리 관리 분야 개발은 모두 SPARSEMEM 모델을 타겟으로 하고 있습니다.
하지만 과거의 모델들은 여전히 존재해서, 아키텍쳐와 메모리 관리 코드 상의 많은
&lt;code&gt;#ifdef&lt;/code&gt; 블록의 존재와, 관련된 구성 옵션의 특별한 미로의 존재라는 추가비용을
유발하고 있습니다.
남아있는 &lt;code&gt;DISCONTIGMEM&lt;/code&gt; 사용자들을 &lt;code&gt;SPARSEMEM&lt;/code&gt; 으로 완전히 바꿔타게 하려는
노력들이 있습니다만, ia64 나 mips64 와 같은 아키텍쳐들을 그렇게 변화시키기는
쉬운 작업이 아닐 겁니다.
그리고 ARC 아키텍쳐의 DISCONTIGMEM 사용은 &amp;ldquo;normal&amp;rdquo; 메모리 아래 &amp;ldquo;high memory&amp;rdquo;
영역의 존재를 갖는데, 이는 분명 변경하기 어려울 겁니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc2</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.3-rc2/</link>
      <pubDate>Fri, 26 Jul 2019 08:41:19 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.3-rc2/</guid>
      <description>

&lt;h2 id=&#34;patch-v6-0-5-introduce-madv-cold-and-madv-pageout&#34;&gt;[PATCH v6 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어플리케이션의 메모리를 좀 더 적극적으로 reclaim 시킴으로써 반응성을 높이기
위한 패치셋의 일부를 따로 떼어낸, &lt;code&gt;MADV_COLD&lt;/code&gt; 와 &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 힌트를
&lt;code&gt;madvise()&lt;/code&gt; 에 추가하는 패치의 여섯번째 버전입니다.&lt;/p&gt;

&lt;p&gt;일곱번째 버전도 빠르게 올라왔군요:
&lt;a href=&#34;https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org&lt;/a&gt;
단순히 mmotm 최신 버전 위로 리베이스 한 것 같네요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v9-00-21-generic-page-walk-and-ptdump&#34;&gt;[PATCH v9 00/21] Generic page walk and ptdump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;x86 과 arm64 가 범용적 페이지 테이블 워킹을 하도록 했던 해치셋을 조금 더 확장한
버전입니다.  기존 대비 페이지 테이블 덤프 기능도 일반화 시킨게 차이군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v1-1-2-mm-page-idle-add-support-for-per-pid-page-idle-using-virtual-indexing&#34;&gt;[PATCH v1 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;] mm/page_idle: Add support for per-pid page_idle using virtual indexing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190722213205.140845-1-joel@joelfernandes.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190722213205.140845-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;리눅스 커널은 &lt;code&gt;page_idle&lt;/code&gt; 이라는 인터페이스를 통해 특정 페이지의 액세스 여부를
파악할 수 있게 합니다.  저도 이걸 통해서 wss 를 재거나 하는데 쓸 수 있는
&lt;a href=&#34;https://github.com/sjp38/idle_page_tracking&#34; target=&#34;_blank&#34;&gt;도구&lt;/a&gt;를 만들었었죠.&lt;/p&gt;

&lt;p&gt;문제는 이 인터페이스는 쓰기가 조금 복잡합니다.  PFN 을 가지고 페이지를 지목할
수 있게 되어 있기 때문에 특정 프로세스의 데이터 액세스를 추적하려면 해당
프로세스가 사용하고 있는 가상 메모리가 어떤 PFN 으로 매핑되어 있는지 알아야
하기 때문이죠.  달리 말하면 &lt;code&gt;page_idle&lt;/code&gt; 인터페이스가 글로벌하기 때문에 생기는
문제입니다.&lt;/p&gt;

&lt;p&gt;이 패치셋은 &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/page_idle&lt;/code&gt; 파일을 생성하고 이를 통해 프로세스 단위로
virtual page frame number (VFN) 을 통해 페이지 트랙킹을 할 수 있게 합니다.
이로써 이 인터페이스를 사용하는 유저스페이스 도구의 코드가 간단해질 뿐더러 보안
이슈도 좀 더 편리해지죠.  구글에선 내부적으로 이를 통해 heap profiler
(heapprofd) 를 좀 더 쉽게 만들었나보군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-rfc-mm-page-idle-simple-idle-page-tracking-for-virtual-memory&#34;&gt;[PATCH RFC] mm/page_idle: simple idle page tracking for virtual memory&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/156388286599.2859.5353604441686895041.stgit@buzz&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/156388286599.2859.5353604441686895041.stgit@buzz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞에서 소개한 패치와 비슷하게 &lt;code&gt;page_idle&lt;/code&gt; 을 간편화 시키는 패치셋입니다.  특정
pid 의 모든 mapped page frame 의 access bit 을 한번에 clear 할 수 있게 합니다.
인터페이스는 &lt;code&gt;echo 6 &amp;gt; /proc/&amp;lt;pid&amp;gt;/clear_refs&lt;/code&gt; 같은 형태군요.  이후,
&lt;code&gt;/proc/&amp;lt;pid&amp;gt;/smaps&lt;/code&gt; 파일을 이용해 현재 idle 한 페이지들의 갯수를 알 수
있습니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-3-rc2&#34;&gt;Linux 5.3-rc2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiiKRJprQDJqJzdcjdaGs73UtVPTM2+jOHWdMgu5Sp2HQ@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiiKRJprQDJqJzdcjdaGs73UtVPTM2+jOHWdMgu5Sp2HQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;두번째 rc 버전이 예정대로 나왔습니다.  변경사항이 많은 머지윈도우였던 만큼 rc2
도 꽤 수정사항이 많은 것 같습니다.  전체적으로 문서, arch 코드, 그리고 드라이버
쪽 수정사항이 대부분인 듯 하군요.&lt;/p&gt;

&lt;p&gt;앞선 rc1 릴리즈부터 이번 릴리즈 사이의 변경 사항의 시각화 비디오를 아래
링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/yxtq3-lhebQ&#34; target=&#34;_blank&#34;&gt;https://youtu.be/yxtq3-lhebQ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NASA&#39;s Power of 10 Coding Rules (Korean)</title>
      <link>https://sjp38.github.io/post/nasa_coding_rules/</link>
      <pubDate>Sun, 21 Jul 2019 10:22:56 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/nasa_coding_rules/</guid>
      <description>&lt;p&gt;우연히 발견한
&lt;a href=&#34;https://dev.to/xowap/10-rules-to-code-like-nasa-applied-to-interpreted-languages-40dd?fbclid=IwAR1OA1FluREjWhd_1s93WBLtix8wrJZU6tOa5YLC-G9YxVu3iPeOOu09dzQ&#34; target=&#34;_blank&#34;&gt;글&lt;/a&gt;
을 통해 &lt;a href=&#34;http://spinroot.com/gerard/pdf/P10.pdf&#34; target=&#34;_blank&#34;&gt;NASA 의 코딩 규칙 10가지&lt;/a&gt; 를
알게 되었습니다.
너무 깐깐한 규칙 아닌가 싶기도 하지만 &lt;code&gt;ping&lt;/code&gt; 하나 날리는데 40분이 걸리고
물리적으로는 접근할 수 없는 화성에 로봇을 보내야 한다면 이런 규칙은 합리적이라
볼 수 있겠죠.
제가 참고한 저 글은 이걸 파이썬이나 자바스크립트와 같은 곳에서도 어떻게 적용해
볼 수 있을지를 고찰해 보고 있습니다.
이 포스트에선 단순히 이 10개의 규칙을 번역해 봅니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;goto&lt;/code&gt; 또는 재귀호출과 같은 복잡한 수행 흐름을 피하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;원문: 모든 코드를 매우 간단한 수행 흐름으로 제한하라 - &lt;code&gt;goto&lt;/code&gt; 문, &lt;code&gt;setjmp`
또는&lt;/code&gt;longjmp`` 명령, 그리고 직/간접적 재귀 호출을 사용하지 말라.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid complex flow constructs, such as goto and recursion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Restrict all code to very simple control flow constructs – do not use goto
statements, setjmp or longjmp constructs, and direct or indirect recursion.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;모든 루프 (반복문) 은 고정된 최대 반복 횟수를 가져야 한다.  이는 무한반복
코드를 방지한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 루프는 고정된 최대 반복 횟수를 가져야 한다.  코드 체크 도구가 정적으로
어떤 루프의 반복 횟수가 미리 설정된 최대 횟수를 넘는지를 쉽게 검사할 수 있어야
한다.  이 반복 한계가 정적으로 검증될 수 없다면, 이 규칙이 깨어진 것으로
간주한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All loops must have fixed bounds. This prevents runaway code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All loops must have a fixed upper-bound. It must be trivially possible for a
checking tool to prove statically that a preset upper-bound on the number of
iterations of a loop cannot be exceeded. If the loop-bound cannot be proven
statically, the rule is considered violated.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;힙 메모리 할당을 피하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;초기화 단계 후에는 동적 메모리 할당을 사용하지 말라.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid heap memory allocation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do not use dynamic memory allocation after initialization.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;함수의 크기를 한장의 종이에 적힐 수 있게 제한하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;어떤 함수도 명령문당 한줄, 선언당 한줄을 갖는 표준 레퍼런스 포맷을 지킨 채로
한장의 종이에 프린트 될 수 있는 길이 이상을 가져선 안된다.  보통, 이는 함수당
60줄 이상의 코드를 가져선 안된다는 것을 의미한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restrict functions to a single printed page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No function should be longer than what can be printed on a single sheet of
paper in a standard reference format with one line per statement and one line
per declaration. Typically, this means no more than about 60 lines of code per
function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;최소 함수당 두개의 런타임 단정문을 사용하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;평균적으로 함수당 최소 두개의 단정문이 있어야 한다.  단정문은 실제 수행 중에
일어나선 안되는 문제가 있는 조건을 검사하는데 사용되어야 한다.  단정문은 항상
사이드 이펙트로부터 자유로워야 하고 Boolean 테스트로 정의되어야 한다.  단정문이
실패한다면 명시적인 복구 동작이 행해져야 하는데, 예를 들면 이 실패한 단정문을
수행한 함수를 호출한 측에 에러 정보를 리턴하는 것이다.  정적 검사 도구가 절대
실패할 수 없거나 항상 성공한다고 증명해내는 단정문은 모두 이 규칙을 어기는
것이다. (예를 들어, 전혀 도움 되지 않을 &lt;code&gt;assert(true)&lt;/code&gt; 문을 추가함으로써 이
규칙을 만족시킬 순 없다.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a minimum of two runtime assertions per function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The assertion density of the code should average to a minimum of two assertions
per function. Assertions are used to check for anomalous conditions that should
never happen in real-life executions. Assertions must always be side-effect
free and should be defined as Boolean tests. When an assertion fails, an
explicit recovery action must be taken, e.g., by returning an error condition
to the caller of the function that executes the failing assertion. Any
assertion for which a static checking tool can prove that it can never fail or
never hold violates this rule. (I.e., it is not possible to satisfy the rule by
adding unhelpful &amp;ldquo;assert(true)&amp;rdquo; statements.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;데이터의 사용 영역을 가능한 작게 잡아라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;데이터 객체는 가능한 가장 작은 단계의 영역에서 선언되어야만 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restrict the scope of data to the smallest possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Data objects must be declared at the smallest possible level of scope.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;리턴 타입이 &lt;code&gt;void&lt;/code&gt; 가 아닌 (non-void) 모든 함수의 리턴값은 검사되거나
리턴값이 무의미하다는 걸 알리기 위해 &lt;code&gt;void&lt;/code&gt; 로 캐스팅 되어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;non-void&lt;/code&gt; 함수의 리턴값은 각 호출 함수에 의해 체크되어야 하며, 패러미터의
유효성은 각 함수 안에서 검사되어야 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check the return value of all non-void functions, or cast to void to
indicate the return value is useless.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The return value of non-void functions must be checked by each calling
function, and the validity of parameters must be checked inside each function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;전처리기를 아껴 사용하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전처리기의 사용은 헤더 파일을 포함하는 용도와 간단한 매그로 정의로 국한되어야만
한다.  토큰 붙이기, 유동적 갯수의 인자 리스트, 그리고 재귀적 매크로 호출은
허용되지 않는다.  모든 매크로는 완전한 구문적 단위로 확장되어야만 한다.  조건적
컴파일 지시어의 사용은 많은 경우 모호하지만, 항상 금지될 수는 없다.  이는
거대한 소프트웨어 개발 노력이 든다 하더라도 동일한 헤더 파일의 중복 포함을
방지하는 상용문 외의 한두개의 조건적 컴파일 지시어를 위한 정당화가 필요하다는
것을 의미한다.  그런 모든 경우에는 도구 기반의 검사를 통한 플래그가 붙어있거나
코드 안에 사용의 정당성에 대한 설명이 있어야 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the preprocessor sparingly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The use of the preprocessor must be limited to the inclusion of header files
and simple macro definitions. Token pasting, variable argument lists
(ellipses), and recursive macro calls are not allowed. All macros must expand
into complete syntactic units. The use of conditional compilation directives is
often also dubious, but cannot always be avoided. This means that there should
rarely be justification for more than one or two conditional compilation
directives even in large software development efforts, beyond the standard
boilerplate that avoids multiple inclusion of the same header file. Each such
use should be flagged by a tool-based checker and
justified in the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;포인터의 사용을 한단계 디레퍼런스로 제한하고, 함수 포인터는 사용하지 말라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;포인터의 사용은 제한되어야 한다.  구체적으로, 두단계 이상의 디레퍼런스는
허용되지 않는다.  포인터 디레퍼런스 오퍼레이션이 매크로 정의나 &lt;code&gt;typedef&lt;/code&gt; 선언
안에 숨겨져선 안된다.  함수 포인터는 허용되지 않는다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Limit pointer use to a single dereference, and do not use function pointers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The use of pointers should be restricted. Specifically, no more than one level
of dereferencing is allowed. Pointer dereference operations may not be hidden
in macro definitions or inside typedef declarations. Function pointers are not
permitted.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;모든 가능한 경고를 활성화 한 채 컴파일 하라; 그리고 모든 경고는 해당
소프트웨어의 배포 전에 해결되어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 코드는 개발을 시작한 첫날부터 모든 컴파일러 경고가 가장 엄중한 설정으로
활성화 된 채 컴파일 되어야만 한다.  모든 코드는 이 설정 아래 아무런 경고 없이
컴파일 되어야 한다.  모든 코드는 최소 하루에 한번, 그러나 가급적 한번 넘게,
최신의 정적 소스 코드 분석도구를 통해 검사되어야 하며 이 검사를 어떤 경고도
없이 통과해야만 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile with all possible warnings active; all warnings should then be
addressed before release of the software.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All code must be compiled, from the first day of development, with allcompiler
warnings enabled at the compiler’s most pedantic setting. All code must compile
with these setting without any warnings. All code must be checked daily with at
least one, but preferably more than one, state-of-the-art static source code
analyzer and should pass the analyses with zero warnings.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2019</title>
      <link>https://sjp38.github.io/post/kernelsummit2019_talk/</link>
      <pubDate>Sat, 20 Jul 2019 02:41:46 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/kernelsummit2019_talk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.linuxplumbersconf.org/blog/2019/&#34; target=&#34;_blank&#34;&gt;Linux Plumbers Conference 2019&lt;/a&gt; 와 함께 열리는 올해의
&lt;a href=&#34;https://lwn.net/Articles/788378/&#34; target=&#34;_blank&#34;&gt;Linux Kernel Summit&lt;/a&gt; 에 제안한 발표
주제가 accept 되어 9월에 리스본에서 이에 대한 내용을 발표하게
되었습니다.  발표 제목은 &amp;ldquo;Tracing Data Access Pattern with Bounded
Overhead and Best-effort Accuracy&amp;rdquo; 입니다.&lt;/p&gt;

&lt;p&gt;티켓이 너무 일찍 팔려버리는 바람에 올해는 들으러도 못가나 걱정했는데 갈 수 있게
됐네요, 다행입니다! :D&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My talk proposal to the Linux Kernel Summit of this year which is co-located
with the Linux Plumbers has accepted!  Hope to see you in Lisbon.  The title of
the talk is, &amp;ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort
Accuracy&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc1</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.3-rc1/</link>
      <pubDate>Thu, 11 Jul 2019 02:42:22 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.3-rc1/</guid>
      <description>

&lt;h2 id=&#34;patch-v5-0-5-introduce-madv-cold-and-madv-pageout&#34;&gt;[PATCH v5 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MADV_COLD&lt;/code&gt; 와 &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 을 구현하는 패치, 어느새 다섯번째 버전입니다.  큰
변경은 없는 것 같군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v2-0-3-make-working-with-compound-pages-easier&#34;&gt;[PATCH v2 0/3] Make working with compound pages easier&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Huge page 를 다루기 쉽게끔 &lt;code&gt;page_size()&lt;/code&gt;, &lt;code&gt;page_shift()&lt;/code&gt;, 그리고
&lt;code&gt;compound_nr()&lt;/code&gt; 이라는 세개의 helper 함수를 추가하고 이 함수들을 사용하게끔
기존 코드를 다듬는 패치셋입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PAGE_SIZE &amp;lt;&amp;lt; compound_order(page)&lt;/code&gt; 는 &lt;code&gt;page_size(page)&lt;/code&gt; 가,
&lt;code&gt;PAGE_SHIFT + compound_order(page)&lt;/code&gt; 는 &lt;code&gt;page_shift(page)&lt;/code&gt; 가, 그리고
&lt;code&gt;1 &amp;lt;&amp;lt; compound_order(page)&lt;/code&gt; 는 &lt;code&gt;compound_nr(page)&lt;/code&gt; 가 되는 것이죠.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-3-rc1&#34;&gt;Linux 5.3-rc1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/wiVjkTqzP6OppBuLQZ+t1mpRQC4T+Ho4Wg2sBAapKd--Q@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/wiVjkTqzP6OppBuLQZ+t1mpRQC4T+Ho4Wg2sBAapKd--Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 릴리즈 사이의 변경 사항을 시각화 한 비디오를 아래 링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/vx_BUvs00u8&#34; target=&#34;_blank&#34;&gt;https://youtu.be/vx_BUvs00u8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2주일이 지나고 5.3 을 향한 첫번째 rc 릴리즈가 이루어졌습니다.&lt;/p&gt;

&lt;p&gt;이번 rc 릴리즈는 커밋 갯수로 볼 때 꽤 큰 릴리즈입니다.  4.12, 4.15, 4.19 때의
머지 윈도우와 비슷한 정도라는군요.  참고로 가장 큰 머지윈도우는 아직 4.9 의
것이었습니다.&lt;/p&gt;

&lt;p&gt;이번 머지 윈도우는 초기에 두개의 버그가 나와서 토발즈를 괴롭게 했다고 하는데요.
하나는 토발즈의 커널 컨피규레이션이 너무 간단하게 되어 있어 어떤 코드가 테스트
되지 않아 토발즈가 만들어낸 버그였고, 다른 하나는 패치 자체에 존재하는
버그였다고 합니다.  토발즈가 유발한 버그는 토발즈가 고쳤고, 두번째 버그를
일으킨 패치는 그냥 리버트 시켰다고 하는군요.&lt;/p&gt;

&lt;p&gt;그렇다고는 해도 이번 머지 윈도우의 후반부는 충분히 스무스하게 이뤄졌다고
합니다.&lt;/p&gt;

&lt;p&gt;그리고 이번 머지 윈도우에 이름을 올린 개발자는 총 1600명이었다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.2/</link>
      <pubDate>Mon, 01 Jul 2019 15:48:04 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.2/</guid>
      <description>

&lt;h2 id=&#34;patch-v5-00-12-s-a-r-a-a-new-stacked-lsm&#34;&gt;[PATCH v5 00/12] S.A.R.A. a new stacked LSM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다양한 보안 측정을 위한 공용 인터페이스를 제공하는 스택 기반의 리눅스 보안
모듈입니다.  이름이 재밌네요. S.A.R.A 는 S.A.R.A is Another Recursive Acronym
의 약자라고 합니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-2&#34;&gt;Linux 5.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 릴리즈 중간엔 토발즈의 여행이 있었죠.  초반엔 예상 외로 큰 rc 릴리즈도
있었구요.  해서 이번주는 rc8 이 릴리즈 될지 5.2가 릴리즈 될지 저도 좀
궁금했는데, 최종적으로 5.2 릴리즈가 되었습니다.  토발즈도 rc8 을 릴리즈 할까
망설였다고 하네요.  하지만 그래야 할만한 문제가 전혀 없었기에 5.2를 릴리즈
했다고 합니다.&lt;/p&gt;

&lt;p&gt;더불어, 토발즈는 이번 여행 중에도 스쿠버다이빙을 즐겼나보네요.  더크 혼델이
찍은 사진도 공유했습니다:
&lt;a href=&#34;https://hohndel.name/palau-2019&#34; target=&#34;_blank&#34;&gt;https://hohndel.name/palau-2019&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrate external git repository with its history</title>
      <link>https://sjp38.github.io/post/integrate_external_git_repository_with_history/</link>
      <pubDate>Thu, 27 Jun 2019 17:02:49 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/integrate_external_git_repository_with_history/</guid>
      <description>

&lt;p&gt;프로젝트 a 와 프로젝트 b 를 병렬로 진행하고 있었는데, 두개의 리포지토리를
합치고 싶어지는 경우가 있습니다.  예컨대 프로젝트 a 의 성격이 보다 범용이
되었고 프로젝트 b 는 프로젝트 a 를 위한 도구적 성격이 되는 경우가 있겠죠.
a 프로젝트에 &amp;lsquo;b&amp;rsquo; 디렉토리를 만들고 그 아래 기존 프로젝트 b 의 파일들을 위치하고
싶습니다.
하지만 기존 b 프로젝트의 git 히스토리들도 유지하고 싶습니다.
비슷한 사례로 리눅스 커널 메모리 모델 프로젝트는 별도의 리포지토리[1] 로
개발되었지만 리눅스 업스트림 리포지토리의 tools/ 디렉토리 아래로 머지[2]
되었는데, 이 때 기존 개발 히스토리를 유지했죠.&lt;/p&gt;

&lt;p&gt;이 포스트는 이렇게 특정 git 리포지토리를 그 히스토리를 유지한 채 다른 git
리포지토리의 하위 디렉토리로 옮기는 법을 설명합니다.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://github.com/aparri/memory-model&#34; target=&#34;_blank&#34;&gt;https://github.com/aparri/memory-model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/memory-model&#34; target=&#34;_blank&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/memory-model&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;초기-상황과-목표&#34;&gt;초기 상황과 목표&lt;/h2&gt;

&lt;p&gt;먼저 현재 디렉토리 아래에 a 리포지토리와 b 리포지토리가 있다고 가정합니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls
a   b
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;우리는 a 리포지토리 아래 b/ 디렉토리를 만들고 그 아래 b 리포지토리를 넣고
싶습니다.&lt;/p&gt;

&lt;h2 id=&#34;전략&#34;&gt;전략&lt;/h2&gt;

&lt;p&gt;b 리포지토리가 b/ 디렉토리 아래 모든 파일을 위치하도록 변경한 후, 이
리포지토리를 a 리포지토리에서 &lt;code&gt;--allow-unrelated-histories&lt;/code&gt; 옵션을 사용해
머지하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&#34;합쳐질-리포지토리-파일-구조-변경&#34;&gt;합쳐질 리포지토리 파일 구조 변경&lt;/h2&gt;

&lt;p&gt;먼저 b 리포지토리의 파일들이 b/ 디렉토리 아래 위치하도록 만듭니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd b
$ mkdir b
$ git mv !(b) b
$ git commit -a -m &amp;quot;Relocate files for inclusion&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;리포지토리-병합&#34;&gt;리포지토리 병합&lt;/h2&gt;

&lt;p&gt;이제 b 리포지토리를 임시 remote 리포지토리로 등록하고 머지합니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../a
$ git remote add temp ../b
$ git fetch temp
$ git merge --allow-unrelated-histories temp/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--allow-unrelated-histories&lt;/code&gt; 는 경로가 다른 파일에 대한 커밋들도 머지가 될 수
있게 해줍니다.&lt;/p&gt;

&lt;p&gt;임시로 등록한 remote 리포지토리는 지워줍시다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote rm temp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;

&lt;p&gt;이상과 같이 기존의 개발 히스토리를 유지하면서 특정 git 리포지토리를 다른 git
리포지토리의 하위 디렉토리로 병합하는 방법을 알아보았습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc7</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.2-rc7/</link>
      <pubDate>Thu, 27 Jun 2019 15:35:12 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.2-rc7/</guid>
      <description>

&lt;h2 id=&#34;patch-v7-0-4-thp-aware-uprobe&#34;&gt;[PATCH v7 0/4] THP aware uprobe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;uprobe&lt;/code&gt; 가 THP 로 받쳐지고 있는 코드에 적용되면 이 THP 는 regular page 로
쪼개집니다.  이 패치셋은 이 문제를 해결합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v9-0-6-enable-thp-for-text-section-of-non-shmem-files&#34;&gt;[PATCH v9 0/6] Enable THP for text section of non-shmem files&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어플리케이션의 텍스트 섹션을 THP 로 지원해 줌으로써 iTLB 미스를 줄이고 성능을
높이고자 하는 패치셋입니다.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-2-rc7&#34;&gt;Linux 5.2-rc7&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여전히 토발즈의 여행 탓에 릴리즈가 평소와 조금 다른 시간대에 이뤄졌습니다,
토발즈 자신의 시점으로는 평소와 같은 일요일 오후지만요.  아마도 아시아 쪽에
있는 것 같군요.  이번 릴리즈는 심지어 바다 위에서의 릴리즈라네요.  인터넷 안될
줄 알았는데 Dirk Hohndel 이 핸폰 핫스팟을 빌려줬다고 ;)&lt;/p&gt;

&lt;p&gt;이번 릴리즈는 고요했고, 별 문제 없었다고 합니다.  다음주엔 정식 릴리즈일까요?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc6</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.2-rc6/</link>
      <pubDate>Mon, 17 Jun 2019 19:22:48 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.2-rc6/</guid>
      <description>

&lt;h2 id=&#34;patch-notformerge-0-5-extend-remote-madvise-api-to-ksm-hints&#34;&gt;[PATCH NOTFORMERGE 0/5] Extend remote madvise API to KSM hints&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 블로그에서도 여러번 소개한 remote &lt;code&gt;madvise()&lt;/code&gt; 에 대한 관심이 많이 있는 것
같네요.
이 패치셋은 &lt;code&gt;MADV_MERGEABLE&lt;/code&gt;, &lt;code&gt;MADV_UNMERGEABLE&lt;/code&gt; 을 추가해서 KSM 힌트도
&lt;code&gt;madvise()&lt;/code&gt; 를 통해 줄 수 있게 합니다.&lt;/p&gt;

&lt;p&gt;논의를 위한 패치라 이대로 머지되진 않겠지만, 사용처가 많이 늘어날 것 같네요.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-2-rc6&#34;&gt;Linux 5.2-rc6&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;안타깝게도 기대와 달리 이번 릴리즈는 조용하지 않았습니다.  이번 5.2 개발을
위한 릴리즈 중 머지 윈도우와 rc1 을 제외하면 rc6 가 오히려 가장 많은 변화를
담고 있다는군요.  TCP SACK/fragmentation/mss 수정이 영향을 끼친 것들 중
하나라고 합니다.&lt;/p&gt;

&lt;p&gt;또, 이번에도 릴리즈가 빨라진 건 내일 토발즈가 비행기 타기 때문이랍니다.
컨퍼런스도 참여해야하고 휴양도 취하는 모양입니다.  이 때문에 rc7 은 조금 늦어질
수 있다는군요.  보통은 rc6 가 가장 안정화 되었을 무렵이라 이렇게 일정을
잡았다고 합니다만, 일이 복잡해졌네요.  자신에게 무슨 일이 있으면 Greg 이 대신할
거라고 합니다.&lt;/p&gt;

&lt;p&gt;뭐, 그렇다곤 해도 5.2 릴리즈 진행은 예정대로 진행될 것 같다고도 합니다.  이번
릴리즈의 주요 변경은 SPDX 제외하면 네트워킹, 셀프테스트 그리고 문서화였군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Job Interview Record (2019 summer)</title>
      <link>https://sjp38.github.io/post/my_job_interview/</link>
      <pubDate>Mon, 17 Jun 2019 18:16:05 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/my_job_interview/</guid>
      <description>

&lt;p&gt;이번 여름 졸업을 앞두고 구직 활동을 한 결과, 얼마전 운좋게도 미국에 본사를 두고
있는 한 글로벌 IT 기업의 커널/하이퍼바이저 팀으로부터 잡 오퍼를 받았습니다.
취업을 향한 한걸음 한걸음이 어둠 속을 더듬더듬, 때로는 막무가내로 헤쳐나가는
느낌이었는데, 이런 저의 경험을 공유하는게 어떤 분들께는 도움이 되지 않을까 싶어
공유해 봅니다.&lt;/p&gt;

&lt;h2 id=&#34;목표설정&#34;&gt;목표설정&lt;/h2&gt;

&lt;p&gt;취업을 할까 포닥을 할까 모호한 고민만 하다가 어느새 4월 중순이 되어서야 해외 IT
회사로 직장을 구하겠다는 목표가 설정되었습니다.
그제서야 든 생각은 너무 늦었다, 준비가 부족하다, 하는 것이었습니다.
취업을 위해 뭐 하나 준비한게 없더라구요.&lt;/p&gt;

&lt;p&gt;일단은 졸업 후 국내에서 취업 준비를 탄탄히 해서 내년 봄 시즌에 해외 글로벌 IT
기업에 취업하는걸 목표로 하되, 당장 취업 준비를 시작하고 붙을 가능성은 없겠지만
볼 수 있는 면접은 연습삼아서라도 보기로 마음을 먹었습니다.&lt;/p&gt;

&lt;h2 id=&#34;취업을-위한-준비&#34;&gt;취업을 위한 준비&lt;/h2&gt;

&lt;p&gt;가장 시급한 건 영어 듣기 능력이었습니다.
토발즈의 인터뷰와 키노트, 리눅스 파운데이션 주최 컨퍼런스 발표들과 리눅스를
주제로 한 팟캐스트 등을 mp3 로 추출해 매일 출퇴근 길에 들었습니다.&lt;/p&gt;

&lt;p&gt;코딩 테스트를 연습하기 위해서는 유명한 &lt;a href=&#34;http://www.crackingthecodinginterview.com/&#34; target=&#34;_blank&#34;&gt;cracking the coding
interview&lt;/a&gt; 책도 읽어보고, 이 즈음에
우연히 지인에게 소개받은 &lt;a href=&#34;https://leetcode.com/&#34; target=&#34;_blank&#34;&gt;leetcode&lt;/a&gt; 라는 사이트를 통해
코딩 문제도 풀어보기 시작했습니다.
작년 무렵 지인을 통해 &lt;code&gt;cracking the coding interview&lt;/code&gt; 책을 이용한 오프라인
스터디도 진행했는데, 그 경험이 큰 도움이 되었습니다.
&lt;code&gt;Leetcode&lt;/code&gt; 는 왜 이제 알게 됐나 싶은 생각이 들 정도로 도움이 되었습니다.&lt;/p&gt;

&lt;h2 id=&#34;링크드인-및-이력서&#34;&gt;링크드인 및 이력서&lt;/h2&gt;

&lt;p&gt;지인들과의 대화 도중, 링크드인은 내가 지금 직업을 구하고 있는지 아닌지를 알리는
기능이 있다는 걸 우연히 알게 되었습니다.
이걸 켜니 몇몇 회사의 리크루터들이 연락을 줬습니다.
이 회사도 마찬가지였습니다.
채용하는 포지션에 대한 아주 짧막한 설명과 함께, 관심 있으면 이력서를 보내달라는
연락이 왔고, 이력서를 보내니 회사의 해당 포지션 채용 링크를 보내주며 시스템을
통해 지원해 달라고 했습니다.&lt;/p&gt;

&lt;h2 id=&#34;온라인-코딩&#34;&gt;온라인 코딩&lt;/h2&gt;

&lt;p&gt;사흘만에 이 회사에서 구축한 코딩 테스트 시스템으로의 초대장이 왔습니다.
Leetcode 와 같은 여타 코딩 테스트 사이트랑 비슷하게 되어 있는데, 네개 정도의
문제가 있습니다.
편한 시간을 골라서 문제를 풀 수 있으며, 테스트를 시작하면 중단은 못하고 두시간
내에 테스트를 반드시 끝내야 합니다.
실제 인터뷰어와 전화를 통해 진행하는게 아니다보니 내가 편한 시간을 고를 수
있고, 영어 듣기가 부족한 저로썬 문제가 글로 써져 있어 좋더군요.
제출하고 나면 곧바로 풀이에 대한 전체 테스트 결과도 볼 수 있었습니다.&lt;/p&gt;

&lt;p&gt;아주 어려운 문제는 없었고 간단한 자료구조와 알고리즘 위주였기에 무난하게 문제를
풀 수 있었습니다.
하지만 마지막 한문제는 일부 corner case 를 제대로 풀지 못해 점수가 만족스럽지는
않았습니다.&lt;/p&gt;

&lt;h2 id=&#34;전화-인터뷰&#34;&gt;전화 인터뷰&lt;/h2&gt;

&lt;p&gt;몇일 후, 전화 인터뷰 하고 싶으니 일정을 잡자는 메일이 왔습니다.
적당히 일정을 잡고 인터뷰를 진행했습니다.&lt;/p&gt;

&lt;p&gt;애초에 외국 회사는 온사이트 인터뷰까지 진행되면 후보에게 비행기표 등을 지불해야
되니 이 단계에서 가급적 많은 후보자를 탈락시킨다고 합니다.
전화 통화는 바디랭귀지가 일체 허용되지 않거니와 통화품질, 인터뷰어의 독특한
억양 등의 문제가 있을 수 있기에 저처럼 영어가 약한 사람에게는 정말 죽을
맛입니다.
다행히도 이번 인터뷰는 통화품질도 좋았고 인터뷰어의 발음도 제 귀에 또렷하게
들리는 억양이라 큰 문제는 없었습니다.
그래도 역시 기본 실력이 어디가진 않아서, 몇번은 못알아듣고 버벅이긴 했습니다.&lt;/p&gt;

&lt;p&gt;인터뷰는 약 한시간 정도 분량으로, 제가 채용되면 함께 일하게 될 팀과 업무,
그리고 인터뷰어 자신에 대한 간단한 소개를 시작으로, 제 소개와 그에 대한 문답,
업무적 경험에 대한 질문, 기술적 질문으로 이어졌고, 막판에 약 5분 정도 제가
회사에 대해 질문할 수 있는 시간으로 구성되었습니다.&lt;/p&gt;

&lt;p&gt;소개 후의 문답은 제가 소개한 제 연구들에 대해 깊은 질문이 왔는데, 평소 하는
일이라 쉽게 대답할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;업무적 경험에 대한 문답에서는 어떤 특정 상황에 처했던 경험을 이야기 해달라고
하는데, 이게 꽤 어려웠습니다.
질문받은 경우에 처한 경험이야 많지만 그 중 어떤 걸 골라서 이야기해야 좋은
인상을 얻을까 고민하게 되거든요.
팀원의 반대 의견에 부딪혔을 때에 대한 경험도 요청받았는데, 재밌게도 그날 아침에
함께 연구를 진행하고 있는 친구와 격렬하게 토론했던 즐거운 경험이 있어 그걸
이야기 했습니다.
다른 질문들에는 오픈소스 활동과 개인 프로젝트에 대한 경험도 이야기 했습니다.&lt;/p&gt;

&lt;p&gt;기술적 질문은 커널의 동작 구조 및 원리에 대한 몇가지 질문이 있었습니다.
역시 밥먹고 하는 일이다 보니 어렵지 않게 답할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;마지막 질답 시간엔 무슨 질문했는지 기억이 잘 안나는데, 내가 이 면접 통과하고
함께 일하게 되면 어떤 일을 하게 될지, 내가 소개한 연구들 중 어떤 내용이 회사에
도움 될 수 있을거라 생각하는지 뭐 그런 질문을 한 것 같습니다.&lt;/p&gt;

&lt;p&gt;전화 중에도 코딩 테스트가 있을 줄 알았는데, 없었습니다.
다행이었죠.&lt;/p&gt;

&lt;h2 id=&#34;온사이트-인터뷰-제의&#34;&gt;온사이트 인터뷰 제의&lt;/h2&gt;

&lt;p&gt;다시 몇일 후, 2차 전화 인터뷰가 있겠거니 하고 있었는데, 온사이트 인터뷰를
보자는 메일이 왔습니다!
예전에 모 회사와는 대략 네다섯번까지 이어지는 전화 인터뷰를 하면서 파김치가
되었던 기억이 있는데, 이번엔 한번의 전화 인터뷰만에 스크리닝이 끝나서 정말
기뻤습니다.
메일은 온사이트 인터뷰 가능한 일정 (3주의 기한을 줬습니다), 일하게 된다면
언제부터 일할 수 있는지, 원하는 연봉은 얼마인지, 인터뷰 보러 오는데 비자
필요한지 등을 물어왔습니다.&lt;/p&gt;

&lt;p&gt;적당적당히 일정이 잡혔고, 회사에서 비행기표와 호텔을 예약해 줬습니다.
호텔은 이틀을 예약해 줬습니다.
앞에서 이야기했듯 사실 이때까지만 해도 전 이 회사에 붙을 거라는 생각은
없었습니다.
회사가 면접 통과하기 어렵기로 유명한 회사이기도 하고 준비가 부족하다고
생각했으니까요.
이 시점까지만 해도 그저 공짜로 외국여행 하는구나 싶었죠.&lt;/p&gt;

&lt;h2 id=&#34;온사이트-인터뷰&#34;&gt;온사이트 인터뷰&lt;/h2&gt;

&lt;p&gt;온사이트 인터뷰는 채용되면 실제 제가 일하게 될 오피스에서 아침 10시부터 오후
4시까지 6시간동안 이루어졌습니다.
한시간마다 한명씩 다른 인터뷰어가 들어왔는데, 중간에 한번은 두 인터뷰어가 함께
들어왔습니다.
따라서 총 여섯번의 인터뷰를 본 셈이며, 매 인터뷰마다 형식은 전화 인터뷰와
비슷했습니다.
인터뷰어의 회사와 자기 자신에 대한 소개, 제 소개와 그에 대한 문답, 업무적 경험
질문, 기술적 질문, 마지막으로 제가 질문하는 시간.&lt;/p&gt;

&lt;p&gt;붙을리가 있냐, 여행이나 하자 하는 생각으로 왔지만 막상 당일이 되자 굉장히
긴장되더군요.
그런데 이날 만난 직원들은 너무나도 친절하고 유쾌했습니다.
막상 면접이 시작되니 면접을 본다기보다는 기술 커뮤니티 밋업에서 만난 사람들이랑
즐거운 기술 이야기 하는 느낌이라 너무 즐거웠습니다.&lt;/p&gt;

&lt;p&gt;오후 12시부터 한시간은 점심시간이라 인터뷰어 한명과 함께 식사했습니다.
식사가 인터뷰의 연장인 셈이죠.
앞서 이야기한대로 어찌나 긴장이 풀렸는지 이 때 인터뷰어 앞에서 맥주까지 한잔
했습니다.&lt;/p&gt;

&lt;p&gt;그 중 두번의 인터뷰는 화이트보드를 사용한 코딩 인터뷰가 포함되었습니다.
그 와중에 가장 긴장한 시간이었긴 한데, 역시 즐겁게 진행되었습니다.
다행히 평범한 자료구조 문제였기에 조금 버벅이긴 했지만 일단 코딩을 하는건
어렵지 않았으며, 이후 관련한 질문에 답하고 개선을 어떻게 할 수 있을지
논의하고 추가 코딩을 했는데 이 과정 역시 즐거웠습니다.&lt;/p&gt;

&lt;p&gt;인터뷰가 끝나고 나선 붙든 떨어지든 상관 없지만 평생 잊지 못할 만큼 즐거운
시간이었고 이런 시간을 앞으로도 갖고 싶다, 떨어져도 여한이 없다는 생각이
들었습니다.
면접을 본게 아니라 커뮤니티 모임 같은데 가서 놀다 온 느낌이었죠.&lt;/p&gt;

&lt;h2 id=&#34;오퍼&#34;&gt;오퍼&lt;/h2&gt;

&lt;p&gt;온사이트 인터뷰가 금요일이었습니다.
현지 시간으로 화요일, 인터뷰에 통과했으니 정식 오퍼를 보내겠다는 연락을
받았습니다.&lt;/p&gt;

&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;

&lt;p&gt;준비부터 오퍼를 받기까지의 제 경험을 정리해 봤습니다.
준비도 능력도 부족한데 어디까지나 운이 좋아서 면접을 통과한지라 다른 분들께 이
기록이 얼마나 도움이 될지 모르겠습니다.
그래도 공유하지 않는 것보다는 낫겠죠.
누군가에겐 이 기록이 도움이 되길 빌어봅니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc5</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.2-rc5/</link>
      <pubDate>Mon, 10 Jun 2019 10:17:29 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.2-rc5/</guid>
      <description>

&lt;h2 id=&#34;patch-v3-0-5-thp-aware-uprobe&#34;&gt;[PATCH v3 0/5] THP aware uprobe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;uprobe 는 THP 로 되어있는 페이지를 쪼갭니다.  이로 인해 성능 향상 효과가
사라지죠.  이 패치셋은 uprobe 가 THP 를 인식하게 해서 이런 문제를 제거합니다.&lt;/p&gt;

&lt;h2 id=&#34;patch-v2-0-5-introduce-madv-cold-and-madv-pageout&#34;&gt;[PATCH v2 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기존에도 소개한 MADV_COLD 와 MADV_PAGEOUT 을 madvise() 에 추가하는 패치셋의
두번째 버전입니다.  이 패치셋을 ChromeOS 팀의 Brian Geffon 은 가져다가 탭이
백그라운드로 들어가고 45초 이상 그 상태를 유지하면 이 기능을 사용해서 페이지를
proactively swap out 시켰는데, 그 결과 tab 전환 속도가 25% 나 빨라졌다고
합니다.&lt;/p&gt;

&lt;h2 id=&#34;v3-rfc-patch-0-9-migrate-mode-for-node-reclaim-with-heterogeneous-memory-hierarchy&#34;&gt;[v3 RFC PATCH 0/9] Migrate mode for node reclaim with heterogeneous memory hierarchy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1560468577-101178-1-git-send-email-yang.shi@linux.alibaba.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/1560468577-101178-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NUMA node 로 pmem 을 취급할 수 있게 된 이후, 노드간 migration 을 보다
효율적으로 하기 위한 패치셋의 세번째 버전입니다.  LSFMM 에서 이에 대해 토의가
있었는데, 이번 버전은 그에 기반해 수정되었다고 하네요.&lt;/p&gt;

&lt;h2 id=&#34;linux-v5-2-rc5&#34;&gt;Linux v5.2-rc5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whEQPvLpDbx+WR4Q4jf2FxXjf_zTX3uLy_6ZzHtgTV4LA@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=whEQPvLpDbx+WR4Q4jf2FxXjf_zTX3uLy_6ZzHtgTV4LA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;지난주는 토발즈의 여행 때문에 릴리즈가 평소보다 조금 빨리 이루어졌는데요,
이번에도 마찬가지입니다.  앞으로도 2주동안 여행ㅇ을 더 한다네요.&lt;/p&gt;

&lt;p&gt;어쨌든 5.2 가 가까워졌습니다.  어느덧 rc5군요.  rc4 대비 사이즈도 많이
줄어들었습니다.  SPDX 업데이트도 없는 덕에 diff 도 깔끔하게 되었구요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc4</title>
      <link>https://sjp38.github.io/post/lkml_news_v5.2-rc4/</link>
      <pubDate>Tue, 04 Jun 2019 10:49:00 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/lkml_news_v5.2-rc4/</guid>
      <description>

&lt;h2 id=&#34;patch-00-15-slab-movable-objects-smo&#34;&gt;[PATCH 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;전에도 RFC 패치셋은 여기서도 소개했었죠.  Slab 할당자에 할당받은 객체들의
이동이 가능하게끔 하는 패치셋의 정식 패치 버전이 나왔습니다.  변경된
인터페이스는 XArray 와 dcache 에 적용되는군요.&lt;/p&gt;

&lt;h2 id=&#34;patch-v1-0-4-introduce-madv-cold-and-madv-pageout&#34;&gt;[PATCH v1 0/4] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;바로 지난주에도 소개한 external madvise 패치셋이 쪼개졌네요.  &lt;code&gt;MADV_COLD&lt;/code&gt; 와
&lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 두개의 새로운 advice 기능 추가 버전만 담은 패치셋입니다.  이게
더 일찍 머지될 가능성이 생겼군요.&lt;/p&gt;

&lt;h2 id=&#34;linux-5-2-rc4&#34;&gt;Linux 5.2-rc4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com&#34; target=&#34;_blank&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;메일을 받고 깜짝 놀랐습니다, 평소보다 빨랐기 때문이죠.  아시아를 여행중인가?
싶기도 했는데요, 그건 아니고 비행기 여행이 예정되어 있기 때문에 평소보다 일찍
했다는군요.&lt;/p&gt;

&lt;p&gt;지난 rc3 가 좀 작았던 탓인지 이번 rc4 는 덩치가 좀 큽니다.  하지만 그걸
감안하면 별 문제 없어 보인다고 하네요.&lt;/p&gt;

&lt;p&gt;이번 릴리즈에도 SPDX 변경이 많습니다.  변경 자체야 문제가 없긴 한데 diff 를
보기 귀찮게 하는게 조금은 짜증도 나는 것 같네요.&lt;/p&gt;

&lt;p&gt;어쨌든 이렇게 네번째 rc 가 릴리즈 되었습니다.  정식 버전도 많이 남지 않았네요!&lt;/p&gt;

&lt;p&gt;이번 릴리즈의 개발 과정을 시각화 한 비디오를 아래 URL 에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/OooOmr4Z8dw&#34; target=&#34;_blank&#34;&gt;https://youtu.be/OooOmr4Z8dw&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux Development History Visualization Youtube Channel</title>
      <link>https://sjp38.github.io/post/linux_develop_visualization_youtube/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:33 +0900</pubDate>
      
      <guid>https://sjp38.github.io/post/linux_develop_visualization_youtube/</guid>
      <description>&lt;p&gt;재미 삼아 리눅스 커널 릴리즈 때마다 git history 를 visualize 해서 올리는 유투브
채널[1]을 개설해 봤습니다. 지금은 visualization 에는 gource[2] 를 사용하고
있습니다. 이 비디오를 만드는데 사용되는 스크립트도 GPL v3 로 공개[3]했으니
필요한 분은 사용해 보셔도 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;I created a Youtube channel[1]. I will upload videos for the git history
between each release of the Linux kernel, just for jun. I use gource[2] for the
visualization for now. The scripts I use for these videos are available[3]
under GPL v3. If you want, you may use the scripts for your own video
generation.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&#34;https://gource.io/&#34; target=&#34;_blank&#34;&gt;https://gource.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&#34;https://github.com/sjp38/linux_development_visualization&#34; target=&#34;_blank&#34;&gt;https://github.com/sjp38/linux_development_visualization&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
