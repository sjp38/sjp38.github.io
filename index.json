[{"authors":["admin"],"categories":null,"content":"SeongJae Park is a computer programmer who loves to analyze and develop systems. He is currently working in Amazon, and particiaptes in the Linux kernel development community just for fun and profit. His interests include operating system kernels, parallel computing, and memory management. He received a PhD in the Department of Computer Science and Engineering, Seoul National University in 2019.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"SeongJae Park is a computer programmer who loves to analyze and develop systems. He is currently working in Amazon, and particiaptes in the Linux kernel development community just for fun and profit. His interests include operating system kernels, parallel computing, and memory management. He received a PhD in the Department of Computer Science and Engineering, Seoul National University in 2019.","tags":null,"title":"SeongJae Park","type":"authors"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/2] Introduce simple pidfd to task helper (Christian Brauner) https://lkml.kernel.org/r/20211004125050.1153693-1-christian.brauner@ubuntu.com\nThis patchset adds a pidfd handling wrapper for removing duplications.\n[PATCH 00/62] Separate struct slab from struct page (Matthew Wilcox) https://lkml.kernel.org/r/20211004134650.4031813-1-willy@infradead.org\nThis huge patchset separates struct slab from struct page to make struct page simple and therefore easier to handle.\n[PATCH v3 00/66] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20211005012959.1110504-1-Liam.Howlett@oracle.com\nThis patchset introduces Maple tree, which is intended to replace the rb tree for vmas, to improve the scalability.\nmmotm 2021-10-05-19-53 uploaded (Andrew Morton) https://lkml.kernel.org/r/20211006025350.a5PczFZP4%akpm@linux-foundation.org\nMMOTM updated. 11 patches drop, 47 patches added, and 29 patches modified. DAMOS also added here.\n[RFC] pgflags_t (Matthew Wilcox) https://lkml.kernel.org/r/YV25hsgfJ2qAYiRJ@casper.infradead.org\nThis patch makes struct page-\u0026gt;flags a struct instead of the plain unsigned long for enhance its type safety.\nCompaction \u0026amp; folios (Ken Overstreet) https://lkml.kernel.org/r/YV4o9SxfYuLm1i4d@moria.home.lan\nThis mail explains how folios can make compaction and hugepages easier.\n","date":1633412350,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633412350,"objectID":"bae3e1d8c61f6385abea7580d5ec72c5","permalink":"/post/lkml_news_v5.15-rc5/","publishdate":"2021-10-05T07:39:10+02:00","relpermalink":"/post/lkml_news_v5.15-rc5/","section":"post","summary":"[PATCH 0/2] Introduce simple pidfd to task helper (Christian Brauner) https://lkml.kernel.org/r/20211004125050.1153693-1-christian.brauner@ubuntu.com\nThis patchset adds a pidfd handling wrapper for removing duplications.\n[PATCH 00/62] Separate struct slab from struct page (Matthew Wilcox) https://lkml.kernel.org/r/20211004134650.4031813-1-willy@infradead.org\nThis huge patchset separates struct slab from struct page to make struct page simple and therefore easier to handle.\n[PATCH v3 00/66] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20211005012959.1110504-1-Liam.Howlett@oracle.com\nThis patchset introduces Maple tree, which is intended to replace the rb tree for vmas, to improve the scalability.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.15-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH 0/8] mm/madvise: support process_madvise(MADV_DONTNEED) (Nadav Amit) https://lkml.kernel.org/r/20210926161259.238054-1-namit@vmware.com\nThis patchset makes process_madvise() to support MADV_DONTNEED hint.\nmmotm 2021-09-28-19-05 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210929020604.DyNimbxao%akpm@linux-foundation.org\nThe mm-of-the-moment snapshot has been updated. 13 drop, 45 add, 37 modified. 184 patches in the broken/ in total.\n[PATCH 1/2] memcg: flush stats only if updated (Shakeel Butt) https://lkml.kernel.org/r/20210930044711.2892660-1-shakeelb@google.com\nThis patchset makes memcg stats updated only when needed, as it is currently flushed on every refault and reclaim iteration. For reading 8 GiB tmpfs file on zram-based swap device configured system, 63% of read time has reduced.\n[RFC] mm: Optimise put_pages_list() (Matthew Wilcox) https://lkml.kernel.org/r/20210930163258.3114404-1-willy@infradead.org\nThis RFC optimizes put_pages_list() by doing the operations in batch. Nevertheless, this is RFC mainly because the author didn\u0026rsquo;t evaluated the performance.\nmmotm 2021-09-30-19-36 uploaded (Andrew Morton) https://lkml.kernel.org/r/20211001023703.54h-iZdWT%akpm@linux-foundation.org\nNew mmotm is uploaded. No patch dropped, 39 new patches added, 8 patches modified. 223 patches in total.\n[PATCH 0/7] Implement Data Access Monitoring-based Memory Operation Schemes (SeongJae Park) https://lkml.kernel.org/r/20211001125604.29660-1-sj@kernel.org\nThe DAMOS patchset has dropped its RFC tag, as DAMON has merged. This patchset allows users to manage their memory based on the real data access patterns. The patchset has quickly merged in -mm tree (https://lore.kernel.org/mm-commits/20211001233339.SV5JeiSqb%25akpm@linux-foundation.org/).\nLinux 5.15-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wifo=ocAVFtoutuLQvqYyNz1r014uJD8TRPJKpVaPLrRQ@mail.gmail.com\nThere were hiccups due to the -Werror at the beginning of the v5.15 stabiliziation, but now seems it all stabled. Normal rc4 release. In this release set_fs() has removed from m68k.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-10-04 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1632807098,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632807098,"objectID":"ed73c070144f15a59783568b025d069f","permalink":"/post/lkml_news_v5.15-rc4/","publishdate":"2021-09-28T07:31:38+02:00","relpermalink":"/post/lkml_news_v5.15-rc4/","section":"post","summary":"[RFC PATCH 0/8] mm/madvise: support process_madvise(MADV_DONTNEED) (Nadav Amit) https://lkml.kernel.org/r/20210926161259.238054-1-namit@vmware.com\nThis patchset makes process_madvise() to support MADV_DONTNEED hint.\nmmotm 2021-09-28-19-05 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210929020604.DyNimbxao%akpm@linux-foundation.org\nThe mm-of-the-moment snapshot has been updated. 13 drop, 45 add, 37 modified. 184 patches in the broken/ in total.\n[PATCH 1/2] memcg: flush stats only if updated (Shakeel Butt) https://lkml.kernel.org/r/20210930044711.2892660-1-shakeelb@google.com\nThis patchset makes memcg stats updated only when needed, as it is currently flushed on every refault and reclaim iteration.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.15-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH] Introducing lockless cache built on top of slab allocator (Hyeonggon Yoo) https://lkml.kernel.org/r/20210919164239.49905-1-42.hyeyoo@gmail.com\nThe block layer now has a lockless cache, which increased its IOPS. This RFC generalizes it so that it can be used in some other area, such as NAPI.\n[PATCH v5 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand) https://lkml.kernel.org/r/20210920142856.17758-1-david@redhat.com\nThis patchset makes a basic infrastructure to exclude some physical memory regions that marked as IORESOURCE_SYSTEM_RAM from /dev/mem access, even though they are not marked as IORESOURCE_BUSY.\nBoF at LPC: Documenting the Heterogeneous Memory Model Architecture (Felix Kuehling) https://lkml.kernel.org/r/23aeacb6-0cd9-d10f-76bc-3c9d33905daa@amd.com\nA BoF session for documentation of heterogeneous memory model, which let memory of GPU-like accelerators aggregated with system RAM, is proposed.\nmmotm 2021-09-21-16-54 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210921235437.zcAiZPmxd%akpm@linux-foundation.org\nMMOTM updated. 0 patch dropped, 30 patches added, and 13 patches modified.\nStruct page proposal (Ken Overstreet) https://lkml.kernel.org/r/YUvWm6G16+ib+Wnb@moria.home.lan\nIn this mail, Ken describes one common point from Matthew and Johannes in the Folios discussion, and proposes new struct page. It contains only two pointers, so the memory overhead for struct page objects becomes only 0.4%.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210924154257.1dbf6699ab8d88c0460f924f@linux-foundation.org\nPull request from Andrew Morton for various fixes.\n[PATCH 0/2] mm/mprotect: avoid unnecessary TLB flushes (Nadav Amit) https://lkml.kernel.org/r/20210925205423.168858-1-namit@vmware.com\nMemory-unprotect using usefaultfd (i.e., userfaultfd IOCTL) triggers a TLB flush even though no architectural data but only a software flag is updated. This patchset tries to solve the issue by not tailoring the specific scenario but consolidating the interfaces for TLB batching. This patchset is based on an old RFC.\nLinux 5.15-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgoE8XBPVA6Mu4CygxX9TE0FgWaAsVUJOe8KQH-CzEcAA@mail.gmail.com\nPartly because of the Werror change, 5.15 rc2 was not so calm. Now seems the things wound down and it became normal, Torvalds says.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-09-20 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1632116928,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632116928,"objectID":"7c10aa67089aa8559d61127d617eb76d","permalink":"/post/lkml_news_v5.15-rc3/","publishdate":"2021-09-20T07:48:48+02:00","relpermalink":"/post/lkml_news_v5.15-rc3/","section":"post","summary":"[RFC PATCH] Introducing lockless cache built on top of slab allocator (Hyeonggon Yoo) https://lkml.kernel.org/r/20210919164239.49905-1-42.hyeyoo@gmail.com\nThe block layer now has a lockless cache, which increased its IOPS. This RFC generalizes it so that it can be used in some other area, such as NAPI.\n[PATCH v5 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand) https://lkml.kernel.org/r/20210920142856.17758-1-david@redhat.com\nThis patchset makes a basic infrastructure to exclude some physical memory regions that marked as IORESOURCE_SYSTEM_RAM from /dev/mem access, even though they are not marked as IORESOURCE_BUSY.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.15-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v1] vmpressure: wake up work only when there is registration event (wangyong) https://lkml.kernel.org/r/1631548441-2784-1-git-send-email-wang.yong12@zte.com.cn\nCurrently, vmpressure works are awaken even though there are no vmpressure callbacks. This commit avoids such unnecessary wakeup by counting the number of registered events and skip waking up works if the number is zero.\n[PATCH v3 00/76] Optimize list lru memory consumption (Muchun Song) https://lkml.kernel.org/r/20210914072938.6440-1-songmuchun@bytedance.com\nMuchun found kmalloc-32 for list_lru_one allocation consuming 6 GiB of memory on their server. That came from a large number of containers. This patchset aims to optimize the memory consumption by adding the memcg to the list_lru at the first insert, rather than instantiating all at memcg init time.\nFor creating 10,000 memcg and mounting 10,000 filesystems, this patchset reduced the memory consumption from 24 GiB to 4 GiB.\n[MAINTAINER SUMMIT] Folios as a potential Kernel/Maintainers Summit topic? (Theodore Ts\u0026rsquo;o) https://lkml.kernel.org/r/YUIwgGzBqX6ZiGgk@mit.edu\nFolio is still not merged in the mainline. Ted says, as a file system developer he is eagerly looking forward to what Folios will enable. For the reason, he suggests to have a maintainer summit topic for Folio. In detail, take a place in a LPC BOF room in Friday.\n[PATCH 0/2] Fix NUMA without SMP (Geert Uytterhoeven) https://lkml.kernel.org/r/cover.1631781495.git.geert+renesas@glider.be\nThere are variables and functions which are used by the NUMA code for SMP-only case. This causes build errors for SuperH architecture, which supports NUMA without SMP. This patch fixes it.\n[PATCH] mm: add ztree - new allocator for use via zpool API (Ananda Badmaev) https://lkml.kernel.org/r/20210916085102.19310-1-a.badmaev@clicknet.pro\nThis patch provides a backend for zswap, which uses red-black trees for storing compressed objects blocks. This might be able to be used by zram, either.\nmmotm 2021-09-16-14-00 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210916210058.KrWpsFx8b%akpm@linux-foundation.org\nAndrew updated the first mmotm after v5.15 merge window had opened. Compared to the last mmotm before the merge window, 351 patches dropped, 74 patches added, and 23 patches modified.\nLinux 5.15-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wirexiZR+VO=H3xemGKOMkh8OasmXaKXTKUmAKYCzi8AQ@mail.gmail.com/\nDue to the Werror change, Linus spent lots of time for the build warning fixes. Thouh the change has been not default, Linus apparently wants to eliminate all the warnings. The work is not complete yet, but he really hopes the kernel to built without warning.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-09-20 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1631596046,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631596046,"objectID":"952503b3b6a32eb0e358b4a7167e0ce8","permalink":"/post/lkml_news_v5.15-rc2/","publishdate":"2021-09-14T07:07:26+02:00","relpermalink":"/post/lkml_news_v5.15-rc2/","section":"post","summary":"[PATCH v1] vmpressure: wake up work only when there is registration event (wangyong) https://lkml.kernel.org/r/1631548441-2784-1-git-send-email-wang.yong12@zte.com.cn\nCurrently, vmpressure works are awaken even though there are no vmpressure callbacks. This commit avoids such unnecessary wakeup by counting the number of registered events and skip waking up works if the number is zero.\n[PATCH v3 00/76] Optimize list lru memory consumption (Muchun Song) https://lkml.kernel.org/r/20210914072938.6440-1-songmuchun@bytedance.com\nMuchun found kmalloc-32 for list_lru_one allocation consuming 6 GiB of memory on their server.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.15-rc2","type":"post"},{"authors":[],"categories":["talks"],"content":"I will present DAMON/DAMOS in KernelSummit'21. The title of the talk is \u0026ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes\u0026rdquo;.\nhttps://linuxplumbersconf.org/event/11/contributions/984/\n","date":1631077952,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631077952,"objectID":"fb3b90943f4e14092a8368ddbf1b9359","permalink":"/post/kernelsummit2021_talk/","publishdate":"2021-09-08T07:12:32+02:00","relpermalink":"/post/kernelsummit2021_talk/","section":"post","summary":"I will present DAMON/DAMOS in KernelSummit'21. The title of the talk is \u0026ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes\u0026rdquo;.\nhttps://linuxplumbersconf.org/event/11/contributions/984/","tags":["linux","linux kernel summit","kernel summit","linux plumbers conference 2021","lpc2021","talk","damon","damos","daos"],"title":"I will have a talk at the Linux Kernel Summit 2021","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH] mm/oom: detect and kill task which has allocation forbidden by cpuset limit (Feng Tang) https://lkml.kernel.org/r/1630399085-70431-1-git-send-email-feng.tang@intel.com\nDocker needs to allocate memory in non-movable zones for creation of an OS (e.g., GFP_HIGHUSER). However, if it is binded to a cpuset which has only movable zone, the allocation fails and OOM storm attacks other innocent processes. This patch detects the case and kill only the allocation failing process.\nFolios: Can we resolve this please? (David Howells) https://lkml.kernel.org/r/3285174.1630448147@warthog.procyon.org.uk\nDavid Howells is trying to resolve the folio issue within this merge window, as his work also depend on the folio work.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210902144820.78957dff93d7bea620d55a89@linux-foundation.org\nThe first pull request from Andrew Morton for 212 patches is posted.\nPatch series \u0026quot;Migrate Pages in lieu of discard\u0026quot;, v11 is included here.\nReport Bug to Linux Memory Management (nzyang@xidian.edu.cn) https://lkml.kernel.org/r/4f29a246.310.17bb4e8e686.Coremail.nzyang@stu.xidian.edu.cn\nIf a system has too many dirty memory, Linux kernel tries to reduce the dirty ratio by running a background writeback daemon. If it doesn\u0026rsquo;t make progress, kernel makes all I/O write-through. As a result, all I/O intensive processes will be slow. This mail argues that a malicious user can make whole system slow by intensively dirtying its memory.\nRe: [PATCH] Enable \u0026lsquo;-Werror\u0026rsquo; by default for all kernel builds (Guenter Roeck) https://lore.kernel.org/all/20210906142615.GA1917503@roeck-us.net/\nLinus Torvalds recently enabled -WError compile option, which treats every build warnings as error. The intention is to make all kernel build clean. Of course, it will cause many build failures. With this mail, Guenter reports 64 build failures among 153 builds due to this change.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210907195226.14b1d22a07c085b22968b933@linux-foundation.org\nSecond pull request for memory management subsystem has sent to Linus Torvalds. The patchset for DAMON also included here.\nMerge branch \u0026lsquo;akpm\u0026rsquo; (patches from Andrew) (Linus Torvalds) https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2d338201d5311bcd79d42f66df4cecbcbc5f4f2c\nTorvalds merged lots of patches in Andrew\u0026rsquo;s second pull request, including DAMON. Now, DAMON is in the mainline.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210908180859.d523d4bb4ad8eec11c61500d@linux-foundation.org\nYet more patches from Andrew, for hotfixes, which also need to be merged in the stable trees. Linus quickly merged those.\n[RFC PATCH] psi : calc psi memstall time more precisely (Huangzahoyang) https://lkml.kernel.org/r/1631188824-25623-1-git-send-email-huangzhaoyang@gmail.com\nThis patch makes PSI\u0026rsquo;s memstall time more precise by excluding the task\u0026rsquo;s off-cpu time.\nLinux 5.15-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgbygOb3hRV+7YOpVcMPTP2oQ=iw6tf09Ydspg7o7BsWQ@mail.gmail.com\nThe merge window is closed and the first release candidate for v5.15 is out. Number of commits are not so huge. In fact, smaller than usual of v5.x. However, number of lines changed are about the average.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-09-13 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1630474093,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630474093,"objectID":"482a94d7df75d1a3fd7045cd30294847","permalink":"/post/lkml_news_v5.15-rc1/","publishdate":"2021-09-01T07:28:13+02:00","relpermalink":"/post/lkml_news_v5.15-rc1/","section":"post","summary":"[RFC PATCH] mm/oom: detect and kill task which has allocation forbidden by cpuset limit (Feng Tang) https://lkml.kernel.org/r/1630399085-70431-1-git-send-email-feng.tang@intel.com\nDocker needs to allocate memory in non-movable zones for creation of an OS (e.g., GFP_HIGHUSER). However, if it is binded to a cpuset which has only movable zone, the allocation fails and OOM storm attacks other innocent processes. This patch detects the case and kill only the allocation failing process.\nFolios: Can we resolve this please?","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.15-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[GIT PULL] Memory folios for v5.15 (Matthew Wilcox) https://lkml.kernel.org/r/YSPwmNNuuQhXNToQ@casper.infradead.org\nMatthew Wilcox sent a pull request for his page folio works to Linus Torvalds. Linus Torvalds replied he wants this to work in reverse. That is, calling head pages as normal pages but calling tail pages something other, as the term, page, is more common and de-facto standard in the industry.\nmmotm 2021-08-23-16-42 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210823234329.H9WD-du1K%akpm@linux-foundation.org\nMMOTM is rebased on v5.14-rc7 and uploaded. In total, 10 patches dropped and 16 added.\nDropped ------- hugetlb-dont-pass-page-cache-pages-to-restore_reserve_on_error.patch kfence-fix-is_kfence_address-for-addresses-below-kfence_pool_size.patch maintainers-update-clangbuiltlinux-irc-chat.patch mm-hwpoison-retry-with-shake_page-for-unhandlable-pages.patch mm-memcontrol-fix-occasional-ooms-due-to-proportional-memorylow-reclaim.patch mm-page_alloc-dont-corrupt-pcppage_migratetype.patch mm-vmscan-fix-missing-psi-annotation-for-node_reclaim.patch mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch revert-mm-shmem-fix-shmem_swapin-race-with-swapoff.patch revert-mm-swap-check-if-swap-backing-device-is-congested-or-not.patch Added ----- checkpatch-improve-git_commit_id-test-fix.patch checkpatch-improve-git_commit_id-test.patch compiler-attributes-add-__alloc_size-for-better-bounds-checking-fix.patch kernel-unexport-get_mmtask_exe_file.patch mm-memory_hotplug-fix-potential-permanent-lru-cache-disable.patch mm-memory_hotplug-make-hwpoisoned-dirty-swapcache-pages-unmovable.patch mm-memory_hotplug-use-helper-zone_is_zone_device-to-simplify-the-code.patch mm-migrate-change-to-use-bool-type-for-page_was_mapped.patch mm-migrate-fix-the-incorrect-function-name-in-comments.patch mm-migrate-introduce-a-local-variable-to-get-the-number-of-pages.patch mm-migrate-simplify-the-file-backed-pages-validation-when-migrating-its-mapping.patch mm-secretmem-use-refcount_t-instead-of-atomic_t.patch mm-unexport-folio_memcg_unlock.patch mm-unexport-unlock_page_memcg.patch mm-vmalloc-add-__alloc_size-attributes-for-better-bounds-checking.patch selftests-vm-use-kselftest-skip-code-for-skipped-tests.patch summary: 10 drop, 16 add, 49 modified # from 2021-08-20 07:38:07 +0200 to 2021-08-24 07:36:41 +0200 [PATCH 0/6] netfs, afs, ceph: Support folios, at least partially (David Howells) https://lkml.kernel.org/r/162981147473.1901565.1455657509200944265.stgit@warthog.procyon.org.uk\nThis patchset makes netfs to use folios, though it\u0026rsquo;s unclear if folio will be merged in as is now.\n[PATCH v4 00/14] mm, sparse-vmemmap: Introduce compound devmaps for device-dax (Joao Martins) https://lkml.kernel.org/r/20210827145819.16471-1-joao.m.martins@oracle.com\nThis patchset tries to minimize the \u0026lsquo;struct page\u0026rsquo; overhead for pmem use case.\n[PATCH v8 0/3] Anonymous VMA naming patches (Suren Baghdasaryan) https://lkml.kernel.org/r/20210827191858.2037087-1-surenb@google.com\nThere were several idea for making anonymous virtual memory area to be able to be named, but not yet any implementation was merged. This patchset continues the work.\nDiscontiguous folios/pagesets (Matthew Wilcox) https://lkml.kernel.org/r/YSqIry5dKg+kqAxJ@casper.infradead.org\nFolio is for helping VM dealing with physically contiguous chunks of memory. This mail iscuss about extending folios for logically contiguous but physically discontiguous chunks of memory.\nLinux 5.14 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wh75ELUu99yPkPNt+R166CK=-M4eoV+F62tW3TVgB7=4g@mail.gmail.com\nOne week after the -rc7, Linux 5.14 is released. Now let\u0026rsquo;s see what v5.15 would be look like after the merge window completes.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-06-28 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1629782990,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629782990,"objectID":"2a327b2c5707b5efc65ada35e8a9992f","permalink":"/post/lkml_news_v5.14/","publishdate":"2021-08-24T07:29:50+02:00","relpermalink":"/post/lkml_news_v5.14/","section":"post","summary":"[GIT PULL] Memory folios for v5.15 (Matthew Wilcox) https://lkml.kernel.org/r/YSPwmNNuuQhXNToQ@casper.infradead.org\nMatthew Wilcox sent a pull request for his page folio works to Linus Torvalds. Linus Torvalds replied he wants this to work in reverse. That is, calling head pages as normal pages but calling tail pages something other, as the term, page, is more common and de-facto standard in the industry.\nmmotm 2021-08-23-16-42 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210823234329.H9WD-du1K%akpm@linux-foundation.org\nMMOTM is rebased on v5.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand) https://lkml.kernel.org/r/20210816142505.28359-1-david@redhat.com\nOnce the virtio-mem driver is plugging/unplugging memory of virtual machines, accessing the memory region via /dev/mem from the user space makes no sense. To avoid such insane use case, this patchset adds a basic infrastructure to exclude some physical memory regions completely from /dev/mem.\n[PATCH v2 00/61] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20210817154651.1570984-1-Liam.Howlett@oracle.com\nThis patchset introduces a new data structure called maple tree, which intended to replace the rbtree for vm_area_struct. Because this is a range based B-tree, the author argues this can solve the locking scalability issue.\nmmotm 2021-08-16-22-16 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210817051640.JSWSiyLWh%akpm@linux-foundation.org\nmm of the moment queue updated. 10 patches dropped, 42 patches added, and 44 patches modified.\nDropped ------- kasan-kmemleak-reset-tags-when-scanning-block.patch kasan-slub-reset-tag-when-printing-address.patch lib-use-pfn_phys-in-devmem_is_allowed.patch linux-next-git-rejects.patch linux-next-rejects-fix.patch makefile-remove-stale-cc-option-checks.patch mm-madvise-report-sigbus-as-efault-for-madv_populate_readwrite.patch mm-memcg-fix-incorrect-flushing-of-lruvec-data-in-obj_stock.patch mm-slub-fix-slub_debug-disablement-for-list-of-slabs.patch slub-fix-kmalloc_pagealloc_invalid_free-unit-test.patch Added ----- all-replace-find_next_zero_bit-with-find_first_zero_bit-where-appropriate.patch arch-remove-generic_find_first_bit-entirely.patch bitmap-unify-find_bit-operations.patch bitops-move-find_bit__le-functions-from-leh-to-findh.patch bitops-protect-find_first_zero_bit-properly.patch checkpatch-make-email-address-check-case-insensitive.patch cpumask-replace-cpumask_next_-with-cpumask_first_-where-appropriate.patch cpumask-use-find_first_and_bit.patch devfreq-use-hz-macros.patch find-micro-optimize-for_each_setclear_bit.patch hwmon-drivers-mr75203-use-hz-macros.patch i2c-drivers-ov02q10-use-hz-macros.patch iio-drivers-as73211-use-hz-macros.patch iio-drivers-hid-sensor-use-hz-macros.patch include-linux-move-for_each_bit-macros-from-bitopsh-to-findh.patch include-move-findh-from-asm_generic-to-linux.patch lib-add-find_first_and_bit.patch lib-bitmap-add-performance-test-for-bitmap_print_to_pagebuf.patch memblock-make-memblock_find_in_range-method-private.patch mm-add-kernel_misc_reclaimable-in-show_free_areas.patch mm-gup-documentation-corrections-for-gup-pup.patch mm-gup-remove-try_get_page-call-try_get_compound_head-directly.patch mm-gup-small-refactoring-simplify-try_grab_page.patch mm-hwpoison-change-argument-struct-page-hpagep-to-hpage.patch mm-hwpoison-fix-potential-pte_unmap_unlock-pte-error.patch mm-hwpoison-fix-some-obsolete-comments.patch mm-hwpoison-remove-unneeded-variable-unmap_success.patch mm-idle_page_tracking-make-pg_idle-reusable-fix-2.patch mm-in_irq-cleanup.patch mm-percpu-micro-optimize-pcpu_is_populated.patch mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled-fix-fix.patch mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled-fix.patch mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch mtd-drivers-nand-use-hz-macros.patch phy-drivers-stm32-use-hz-macros.patch replace-for_each__bit_from-with-for_each__bit-where-appropriate.patch thermal-drivers-devfreq_cooling-use-hz-macros.patch tools-rename-bitmap_alloc-to-bitmap_zalloc.patch tools-sync-tools-bitmap-with-mother-linux.patch units-add-the-hz-macros.patch units-change-from-l-to-ul.patch vsprintf-rework-bitmap_list_string.patch Modified -------- fix-zone_id-may-be-used-uninitialized-in-this-function-warning.patch info-task-hung-in-generic_file_write_iter.patch init-mainc-silence-some-wunused-parameter-warnings.patch kconfigdebug-drop-selecting-non-existing-hardlockup_detector_arch.patch lib-test-convert-test_sortc-to-use-kunit.patch linux-next-rejects.patch linux-next.patch math-rational_kunit_test-should-depend-on-rational-instead-of-selecting-it.patch memcg-enable-accounting-for-mnt_cache-entries.patch memcg-enable-accounting-for-new-namesapces-and-struct-nsproxy.patch mm-debug_vm_pgtable-fix-corrupted-page-flag.patch mm-debug_vm_pgtable-introduce-struct-pgtable_debug_args.patch mm-debug_vm_pgtable-remove-unused-code.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-basic-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-leaf-and-savewrite-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-migration-and-thp-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pgd-and-p4d-modifying-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pmd-modifying-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-protnone-and-devmap-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pte-modifying-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pud-modifying-tests.patch mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-soft_dirty-and-swap-tests.patch mm-delete-unused-get_kernel_page.patch mm-introduce-memmap_alloc-to-unify-memory-map-allocation.patch mm-migrate-enable-returning-precise-migrate_pages-success-count.patch mm-move-kvmalloc-related-functions-to-slabh.patch mm-numa-automatically-generate-node-migration-order.patch mm-page_alloc-always-initialize-memory-map-for-the-holes.patch mm-page_alloc-make-alloc_node_mem_map-__init-rather-than-__ref.patch mm-remove-pfn_valid_within-and-config_holes_in_zone.patch mm-remove-redundant-compound_head-calling.patch mm-report-a-more-useful-address-for-reclaim-acquisition.patch mm-rmap-convert-from-atomic_t-to-refcount_t-on-anon_vma-refcount.patch mm-slub-convert-kmem_cpu_slab-protection-to-local_lock.patch mm-slub-optionally-save-restore-irqs-in-slab_lock.patch mm-slub-use-migrate_disable-on-preempt_rt.patch mm-track-present-early-pages-per-zone.patch mm-use-in_task-in-mm-page_allocc.patch mm-workingset-correct-kernel-doc-notations.patch mm.patch origin.patch proc-stop-using-seq_get_buf-in-proc_task_name.patch shmem-use-raw_spinlock_t-for-stat_lock.patch trap-cleanup-trap_init.patch summary: 10 drop, 42 add, 44 modified [PATCH v4 00/11] Multigenerational LRU Framework (Yu Zhao) https://lkml.kernel.org/r/20210818063107.2696454-1-yuzhao@google.com\nThe fourth version of the multi-gen LRU. Unclear what\u0026rsquo;s the difference from v3, though.\nmmotm 2021-08-19-22-10 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210820051045.l7RIfLz4C%akpm@linux-foundation.org\nmm of the moment queue updated. 0 patches dropped, 34 patches added, and 31 patches modified.\nAdded ----- checkpatch-add-__alloc_size-to-known-attribute.patch compiler-attributes-add-__alloc_size-for-better-bounds-checking.patch doc-hwpoison-correct-the-support-for-hugepage.patch huge-tmpfs-decide-statst_blksize-by-shmem_is_huge.patch huge-tmpfs-fix-fallocatevanilla-advance-over-huge-pages.patch huge-tmpfs-fix-split_huge_page-after-falloc_fl_keep_size.patch huge-tmpfs-move-shmem_huge_enabled-upwards.patch huge-tmpfs-remove-shrinklist-addition-from-shmem_setattr.patch huge-tmpfs-revert-shmems-use-of-transhuge_vma_enabled.patch huge-tmpfs-sgp_noalloc-to-stop-collapse_file-on-race.patch huge-tmpfs-shmem_is_hugevma-inode-index.patch hugetlb-dont-pass-page-cache-pages-to-restore_reserve_on_error.patch ia64-fix-typo-in-a-comment.patch kfence-fix-is_kfence_address-for-addresses-below-kfence_pool_size.patch maintainers-update-clangbuiltlinux-irc-chat.patch mm-bootmem_info-mark-__init-on-register_page_bootmem_info_section.patch mm-hwpoison-dont-drop-slab-caches-for-offlining-non-lru-page.patch mm-hwpoison-dump-page-for-unhandlable-page.patch mm-hwpoison-retry-with-shake_page-for-unhandlable-pages.patch mm-introduce-pageflags_mask-to-replace-1ul-nr_pageflags-1.patch mm-memcontrol-fix-occasional-ooms-due-to-proportional-memorylow-reclaim.patch mm-page_alloc-add-__alloc_size-attributes-for-better-bounds-checking.patch mm-remove-bogus-vm_bug_on.patch mm-slub-convert-kmem_cpu_slab-protection-to-local_lock-fix-2.patch mm-slub-convert-kmem_cpu_slab-protection-to-local_lock-fix.patch mm-vmscan-fix-missing-psi-annotation-for-node_reclaim.patch mm-vmscan-guarantee-drop_slab_node-termination.patch ocfs2-quota_local-fix-possible-uninitialized-variable-access-in-ocfs2_local_read_info.patch percpu-add-__alloc_size-attributes-for-better-bounds-checking.patch remap_file_pages-use-vma_lookup-instead-of-find_vma.patch shmem-shmem_writepage-split-unlikely-i915-thp.patch slab-add-__alloc_size-attributes-for-better-bounds-checking.patch slab-clean-up-function-declarations.patch vsprintf-rework-bitmap_list_string-fix.patch Modified -------- info-task-hung-in-generic_file_write_iter.patch init-mainc-silence-some-wunused-parameter-warnings.patch init-move-usermodehelper_enable-to-populate_rootfs.patch kconfigdebug-drop-selecting-non-existing-hardlockup_detector_arch.patch lib-test-convert-test_sortc-to-use-kunit.patch linux-next-rejects.patch linux-next.patch math-rational_kunit_test-should-depend-on-rational-instead-of-selecting-it.patch mm-idle_page_tracking-make-pg_idle-reusable.patch mm-migrate-enable-returning-precise-migrate_pages-success-count.patch mm-slub-call-deactivate_slab-without-disabling-irqs.patch mm-slub-check-new-pages-with-restored-irqs.patch mm-slub-convert-kmem_cpu_slab-protection-to-local_lock.patch mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled.patch mm-slub-move-disabling-irqs-closer-to-get_partial-in-___slab_alloc.patch mm-slub-move-flush_cpu_slab-invocations-__free_slab-invocations-out-of-irq-context-fix-2.patch mm-slub-move-flush_cpu_slab-invocations-__free_slab-invocations-out-of-irq-context-fix.patch mm-slub-move-reset-of-c-page-and-freelist-out-of-deactivate_slab.patch mm-slub-optionally-save-restore-irqs-in-slab_lock.patch mm-slub-restore-irqs-around-calling-new_slab.patch mm-slub-stop-disabling-irqs-around-get_partial.patch mm-slub-validate-slab-from-partial-list-or-page-allocator-before-making-it-cpu-slab.patch mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch origin.patch selftests-vm-add-cow-time-test-for-ksm-pages.patch selftests-vm-add-ksm-merge-test.patch selftests-vm-add-ksm-merging-across-nodes-test.patch selftests-vm-add-ksm-merging-time-test.patch selftests-vm-add-ksm-unmerge-test.patch selftests-vm-add-ksm-zero-page-merging-test.patch trap-cleanup-trap_init.patch summary: 0 drop, 34 add, 31 modified [REMINDER] LSF/MM/BPF: 2021: Cancellation announcement (Josef Bacik) https://lkml.kernel.org/r/611ff5df.1c69fb81.43234.a478@mx.google.com\nUnfortunately, LSF/MM/BPF for 2021 has canceled due to the COVID19 infection. So sad, but hopefully this could be continued in 2022!\nLinux 5.14-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgZ_W7ZF84Mtq6KRjF4FEoYh14dnw+Oc0avZz_6WrCkfw@mail.gmail.com\nNo strange things happened last week, so seventh rc is normal. Unless we find something special this week, we will show 5.14 next week.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-08-23 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc6 releases in the last two years.\n","date":1629176860,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629176860,"objectID":"cf17433ba78dde9849ccc29b679bab20","permalink":"/post/lkml_news_v5.14-rc7/","publishdate":"2021-08-17T07:07:40+02:00","relpermalink":"/post/lkml_news_v5.14-rc7/","section":"post","summary":"[PATCH v2 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand) https://lkml.kernel.org/r/20210816142505.28359-1-david@redhat.com\nOnce the virtio-mem driver is plugging/unplugging memory of virtual machines, accessing the memory region via /dev/mem from the user space makes no sense. To avoid such insane use case, this patchset adds a basic infrastructure to exclude some physical memory regions completely from /dev/mem.\n[PATCH v2 00/61] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20210817154651.1570984-1-Liam.Howlett@oracle.com\nThis patchset introduces a new data structure called maple tree, which intended to replace the rbtree for vm_area_struct.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v9 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210809185259.405936-1-surenb@google.com\n9th version of the patchset which introducing a new system call for releasing memory of a process in a speedy manner.\nmmotm 2021-08-09-19-18 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210810021934.XcpwGUEMn%akpm@linux-foundation.org\n-mm tree updated.\n[PATCH 0/5] x86: Impplement support for unaccepted memory (Kirill A. Shutemov) https://lkml.kernel.org/r/20210810062626.1012-1-kirill.shutemov@linux.intel.com\nSome platforms like Intel TDX or AMD SEV-SNP require memory to be accepted before it can be used by the guest. Because the acceptance operation is existance, this patchset implements on-demand memory acceptance for TDX.\n[RFC PATCH] folio: Add a function to get the host inode for a folio (David Howells) https://lkml.kernel.org/r/162880453171.3369675.3704943108660112470.stgit@warthog.procyon.org.uk\nThis RFC adds a function folio_inode() which gets the host inode from a folio\u0026rsquo;s mapping.\nmmotm 2021-08-12-17-34 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210813003532.rn9wMWItF%akpm@linux-foundation.org\nmmotm updated. 29 patches added, one dropped (shmem_swapin_page-fix-error-processing-for-get_swap_device.patch), and three modified.\n[RFC][PATCH] netfs, afs, ceph: Use folios (David Howells) https://lkml.kernel.org/r/2408234.1628687271@warthog.procyon.org.uk\nThis patchset makes netfs helper library and the afs filesystem to use memory folios.\nLinux 5.14-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wi8=9QbNFFZ1PwZ=J-3w6LkhF68_rEns-mN1DCJrYo1qQ@mail.gmail.com\nAnother fairly normal rc release. Changes spread over usual subsystems.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-08-16 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc6 releases in the last two years.\n","date":1628573017,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628573017,"objectID":"aff35e9557ad460e657a484553e2b40f","permalink":"/post/lkml_news_v5.14-rc6/","publishdate":"2021-08-10T07:23:37+02:00","relpermalink":"/post/lkml_news_v5.14-rc6/","section":"post","summary":"[PATCH v9 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210809185259.405936-1-surenb@google.com\n9th version of the patchset which introducing a new system call for releasing memory of a process in a speedy manner.\nmmotm 2021-08-09-19-18 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210810021934.XcpwGUEMn%akpm@linux-foundation.org\n-mm tree updated.\n[PATCH 0/5] x86: Impplement support for unaccepted memory (Kirill A. Shutemov) https://lkml.kernel.org/r/20210810062626.1012-1-kirill.shutemov@linux.intel.com\nSome platforms like Intel TDX or AMD SEV-SNP require memory to be accepted before it can be used by the guest.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc6","type":"post"},{"authors":[],"categories":["researches review"],"content":"This post is for recording some notes from a few OSDI'21 papers that I got fun.\n DMon: Efficient Detection and Correction of Data Locality Problems Using Selective Profiling https://www.usenix.org/system/files/osdi21-khan.pdf\nDMon is a compiler-based data locality optimization system. The approach is quite similar to that of daphicx or similar things. It injects data access profiling code in the target program, build and run it with some workload, collect the profiling code-generated results, analyze the profile results to figure out what kind of optimization can provide some benefit to the program, injects the optimization code in the program, built it again, and deploy the version to the production.\nBiggest novelty of DMon is its selective profiling. It first figure out for what resource (e.g., CPU, L1/L2/L3$, or memory) the program\u0026rsquo;s performance is bounded, and select what information to collect based on that. It also uses a simple sampling technique. The default sampling rate is 1 sample per 1000 events, though it can be tuned by user. In this way, DMon profile only necessary information and therefore incurs only small overhead (1.36% on average). This allows DMon to do the profiling not only under production-like workloads but also real production.\nFor the optimization, it uses some existing well-known techniques including (in)direct prefetching, and structure merging, based on the analyzed profiling results. The paper claims this provide 16.83% speedup on average. For the evaluation, the authors use some benchmarks including PARSEC3/SPLASH-2X, NPB, TPC-H on PostgreSQL, and Renaissance benchmark suite.\nThe idea is novel and makes sense. However, because this is a compiler-based approach, it has a limitation in language. It supports only C and C++ for now. Also, though it claims it can be used on production, I unsure if real production people agrees. Especially, the re-deployment of the optimized version would not be so easy for long-running systems.\nRearchitecting Linux Storage Stack for µs Latency and High Throughput https://www.usenix.org/conference/osdi21/presentation/hwang\nWhen latency-sensitive apps and throughput-bound apps are co-running, Linux kernel cannot achieve microseconds-scale latency and high throughput. Both SPDK and advanced SPDK usage are same. This paper finds the storage stack of Linux kernel is somewhat like network switch, because it routes I/O request from CPU cores to input queues of storage devices. This paper introduces blk-switch, which modifies the stack to decouple request processing from the application cores and utilizing multiple egress queue having several advanced features including prioritization and steering. It achieves microseconds-scale latency and high throughput under the situation, without modification of the application.\nBeyond malloc efficiency to fleet efficiency: a hugepage-aware memory allocator https://www.usenix.org/conference/osdi21/presentation/hunter\nThis paper optimizes TCMALLOC by making it more aware of hugepage and using it on Google\u0026rsquo;s warehouse scale computing. The optimization is mostly based on some model-based heuristics. It\u0026rsquo;s description on TCMALLOC internal and the problem background is quite useful.\nNap: A Black-Box Approach to NUMA-Aware Persistent Memory Indexes https://www.usenix.org/conference/osdi21/presentation/wang-qing\nIntel released Optane PM DIMM, so real PM world has already started long time ago. This paper explores the performance of the PM indexing on NUMA systems. It finds PM performance is degraded on NUMA systems, and current NUMA-aware PM indexing systems are not working good enough for NUMA systems. Based on findings that most of the real world workloads have highly skewed access pattern, the authors implemented a system called Nap, which translates the PM indexing to be NUMA-awared.\n","date":1628321275,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628321275,"objectID":"343d47bf9b6a9294448a018467b92bd0","permalink":"/post/osdi2021_papers_review/","publishdate":"2021-08-07T09:27:55+02:00","relpermalink":"/post/osdi2021_papers_review/","section":"post","summary":"This post is for recording some notes from a few OSDI'21 papers that I got fun.\n DMon: Efficient Detection and Correction of Data Locality Problems Using Selective Profiling https://www.usenix.org/system/files/osdi21-khan.pdf\nDMon is a compiler-based data locality optimization system. The approach is quite similar to that of daphicx or similar things. It injects data access profiling code in the target program, build and run it with some workload, collect the profiling code-generated results, analyze the profile results to figure out what kind of optimization can provide some benefit to the program, injects the optimization code in the program, built it again, and deploy the version to the production.","tags":["osdi","osdi21","paper"],"title":"OSDI 2021 papers summary","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao) https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com\nThis patchset drops subpages of THPs which contain only zero contents when splitting those, to reduce memory pressure overheads due to THP internal fragmentations.\n[PATCH v4 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210802221431.2251210-1-surenb@google.com\nThis patchset introduces a new system call, namely process_mrelease(). It can be used to quickly release memory of a process.\n[PATCH v7 0/5] Introduce multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1627970362-61305-1-git-send-email-feng.tang@intel.com\nThis patchset allows users to set multiple preferred memory policy, so that a process can use memory from multiple NUMA nodes.\n[PATCH] mm/madvise: add MADV_WILLNEED to process_madvise() (zhangkui) https://lkml.kernel.org/r/20210804082010.12482-1-zhangkui@oppo.com\nThis patch allow process_madvise() to allow MADV_WILLNEED behavior.\n[PATCH v6 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210804185004.1304692-1-surenb@google.com\nSixth version of process_mrelease() system call introduction patchset.\n[PATCH v7 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210805170859.2389276-1-surenb@google.com\nSeventh version of the patchset posted quite soon.\nmmotm 2021-08-05-19-46 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210806024648.V0Ye_YURy%akpm@linux-foundation.org\nThe -mm tree is updated. This time, DAMON patchset is merged in.\n[PATCH v2 0/2] add KSM performance tests (Zhansaya Bagdauletkyzy) https://lkml.kernel.org/r/cover.1628199399.git.zhansayabagdaulet@gmail.com\nThis patchset extends KSM self tests with a performance test.\nLinux 5.14-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wg8QmMMBCEYCV0gPM2GqRQObsQ__fK0r8C6SYAg3Upyjg@mail.gmail.com\nThe fifth rc release is perfectly normal in terms of the size and the distribution of the changes.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-08-09 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1627967342,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627967342,"objectID":"673b98811badeb018068977b91b5a364","permalink":"/post/lkml_news_v5.14-rc5/","publishdate":"2021-08-03T07:09:02+02:00","relpermalink":"/post/lkml_news_v5.14-rc5/","section":"post","summary":"[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao) https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com\nThis patchset drops subpages of THPs which contain only zero contents when splitting those, to reduce memory pressure overheads due to THP internal fragmentations.\n[PATCH v4 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210802221431.2251210-1-surenb@google.com\nThis patchset introduces a new system call, namely process_mrelease(). It can be used to quickly release memory of a process.\n[PATCH v7 0/5] Introduce multi-preference mempolicy (Feng Tang) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"mmotm 2021-07-28-18-24 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210729012524.S8-WP%akpm@linux-foundation.org\nAndrew Morton is updating the -mm tree.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210729145259.24681c326dc3ed18194cf9e5@linux-foundation.org\nSeven fixup patches from Andrew Morton.\n[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao) https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com\nThis patch optimizes THP split for reclaim or migration by dropping subpages that contain only zeroes.\nLinux 5.14-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whv0g5YqoRXc8oxqJX3r+GP1dN3ia_Qg_V6UTjhi8vg8w@mail.gmail.com\nAfter one week, entirely normal rc4 is released. 5.14 is not so far now.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-08-02 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1627573691,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627573691,"objectID":"cfb1fd75516ad798c0840882f82ce544","permalink":"/post/lkml_news_v5.14-rc4/","publishdate":"2021-07-29T17:48:11+02:00","relpermalink":"/post/lkml_news_v5.14-rc4/","section":"post","summary":"mmotm 2021-07-28-18-24 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210729012524.S8-WP%akpm@linux-foundation.org\nAndrew Morton is updating the -mm tree.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210729145259.24681c326dc3ed18194cf9e5@linux-foundation.org\nSeven fixup patches from Andrew Morton.\n[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao) https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com\nThis patch optimizes THP split for reclaim or migration by dropping subpages that contain only zeroes.\nLinux 5.14-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whv0g5YqoRXc8oxqJX3r+GP1dN3ia_Qg_V6UTjhi8vg8w@mail.gmail.com\nAfter one week, entirely normal rc4 is released. 5.14 is not so far now.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/7] Free user PTE page table pages (Qi Zheng) https://lkml.kernel.org/r/20210718043034.76431-1-zhengqi.arch@bytedance.com\nThis patchset frees user PTE page table pages when all PTE entries are empty, to reduce the memory overhead due to page tables.\n[PATCH v15 00/17] Folio support in block + iomap layers (Matthew Wilcox) https://lkml.kernel.org/r/20210719184001.1750630-1-willy@infradead.org\nSeems memory folios patchset is now merged in -mm tree and -next tree. This patchset further updates iomap to use folios.\nRuntime Memory Validation in Intel-TDX and AMD-SNP (Joerg Roedel) https://lkml.kernel.org/r/YPV27hDPZUoVsIZt@suse.de\nThis is a proposal mail describing how to implement runtime memory validation for confidential guests.\n[RFC -V7 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying) https://lkml.kernel.org/r/20210722031819.3446711-1-ying.huang@intel.com\nTiered-memory system usually uses RAM and PMEM. Commit c221c0b0308f (\u0026ldquo;device-dax: \u0026ldquo;Hotplug\u0026rdquo; persistent memory for use like normal RAM\u0026rdquo;) made PMEM could be accessed as simply a very slow NUMA node. After that, \u0026lsquo;[PATCH -V10 0/9] Migrate Pages in lieu of discard\u0026rsquo; made a mechanism to demote cold DRAM pages to PMEM node under memory pressure. This patchset further optimizes the mechanism and achieves up to 119.1% improvement with pmbench.\n[PATCH v3 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210723011436.60960-1-surenb@google.com\nFacebook\u0026rsquo;s oomd or Android\u0026rsquo;s lmkd uses a strategy of killing processes under memory pressure. However, the time to free memory depends on each process. This patchset introduces a new system call that can be used for faster memory release.\n[PATCH resend] mm: compaction: optimize proactive compaction deferrals (Charan Teja Reddy) When proactive compaction is making no progress, it waits some time before trying again. For this, it repeatedly sleeps, awakes, and decrement a counter. If the counter becomes 0, it retries the compaction. The wakeup for only counter decrement makes no sense, so this patch makes it unnecessary.\nLinux 5.14-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgvwZiLbZpFUApWFDkwyjC3+EmRoEBAuP+VzNQaMd630g@mail.gmail.com\nAnother week, another rc. Last release was something worrisome, becuase it was quite big. Seems things calmed down, as rc3 looks pretty normal.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-07-26 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1626758671,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626758671,"objectID":"b2c41d1d9d69b36b7568643e615f6599","permalink":"/post/lkml_news_v5.14-rc3/","publishdate":"2021-07-20T07:24:31+02:00","relpermalink":"/post/lkml_news_v5.14-rc3/","section":"post","summary":"[PATCH 0/7] Free user PTE page table pages (Qi Zheng) https://lkml.kernel.org/r/20210718043034.76431-1-zhengqi.arch@bytedance.com\nThis patchset frees user PTE page table pages when all PTE entries are empty, to reduce the memory overhead due to page tables.\n[PATCH v15 00/17] Folio support in block + iomap layers (Matthew Wilcox) https://lkml.kernel.org/r/20210719184001.1750630-1-willy@infradead.org\nSeems memory folios patchset is now merged in -mm tree and -next tree. This patchset further updates iomap to use folios.\nRuntime Memory Validation in Intel-TDX and AMD-SNP (Joerg Roedel) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v6 0/6] Introduce multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1626077374-81682-1-git-send-email-feng.tang@intel.com\nSix version of the patchset that allows applications to set multiple preferred memory policy.\n[PATCH v1] madvise.2: Document MADV_POPULATE_READ and MADV_POPULATE_WRITE (David Hildenbrand) https://lkml.kernel.org/r/20210712083917.16361-1-david@redhat.com\nThis patch documents the new madvise() options, MADV_POPULATE_(READ|WRITE).\nRequest for folios (David Howells) https://lkml.kernel.org/r/3398985.1626104609@warthog.procyon.org.uk\nDavid is working for improving local filesystem\u0026rsquo;s caching and network filesystem support library. He thinks the folio work would make his work easier, though it also makes some of his work challenging. Therefore, he is asking Andrew to merge it in the -mm tree.\n[PATCH v13a 00/32] Memory folios (Matthew Wilcox) https://lkml.kernel.org/r/20210712190204.80979-1-willy@infradead.org\nThis patchset adds a new type for managing pages, called folios. It allows dealing with variable sized pages simpler.\n[PATCH v13b 00/18] Convert memcg to folios (Matthew Wilcox) https://lkml.kernel.org/r/20210712194551.91920-1-willy@infradead.org\nThis is the second part of memory folios. On top of memofy folios introduction, this patchset converts memcg to use folios for better handling of variable-sized pages.\n[PATCH v3 00/14] mm, sparse-vmemmap: Introduce compound pagemaps (Joao Martins) https://lkml.kernel.org/r/20210714193542.21857-1-joao.m.martins@oracle.com\nThis patchset is for further reducing struct page memory overhead for huge pages. It applies the strategy of Muchun Song (https://lore.kernel.org/linux-mm/20210308102807.59745-1-songmuchun@bytedance.com/) further to PMD.\nmmotm 2021-07-15-18-29 uploaded (Andrew Morton) https://lkml.kernel.org/r/20210716012956.QCXYl0cgg%akpm@linux-foundation.org\nmmotm has finally updated after the 5.14 mergewindow.\n[PATCH v5] mm: introduce reference pages (Peter Collingbourne) https://lkml.kernel.org/r/20210717025757.3945742-1-pcc@google.com\nIn case of anonymous pages allocations, the memory region is initially mapped to clean zero page. This patch introduces a new syscall, refpage_create(), which makes the memory regions to be initially mapped to a page containing user-specificed contents, instead of the zero page.\nLinux 5.14-rc2 https://lkml.kernel.org/r/CAHk-=wjYghA5O+ZsWKVNApMK3j4V1EibO5P+c4MrHnqp8YhY=g@mail.gmail.com\nThe second release candidate for Linux v5.14 is released. This release is larger than expected. It is largest rc2 during 5.x. This might mean there are something wrong, but no certainly wrong things found, so it must be too early to say so.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-07-19 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1626153464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626153464,"objectID":"ba895da2bada26e196bcc49ea413cb4e","permalink":"/post/lkml_news_v5.14-rc2/","publishdate":"2021-07-13T07:17:44+02:00","relpermalink":"/post/lkml_news_v5.14-rc2/","section":"post","summary":"[PATCH v6 0/6] Introduce multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1626077374-81682-1-git-send-email-feng.tang@intel.com\nSix version of the patchset that allows applications to set multiple preferred memory policy.\n[PATCH v1] madvise.2: Document MADV_POPULATE_READ and MADV_POPULATE_WRITE (David Hildenbrand) https://lkml.kernel.org/r/20210712083917.16361-1-david@redhat.com\nThis patch documents the new madvise() options, MADV_POPULATE_(READ|WRITE).\nRequest for folios (David Howells) https://lkml.kernel.org/r/3398985.1626104609@warthog.procyon.org.uk\nDavid is working for improving local filesystem\u0026rsquo;s caching and network filesystem support library. He thinks the folio work would make his work easier, though it also makes some of his work challenging.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"incoming (Andrew Morton) https://lkml.kernel.org/r/20210628193256.008961950a714730751c1423@linux-foundation.org\nThe first pull request from Andrew Morton for the v5.14 merge window.\n[PATCH v3 00/18] Folio conversion of memcg (Matthew Wilcox) https://lkml.kernel.org/r/20210630040034.1155892-1-willy@infradead.org\nThis patchset was a part of the memory folio patchset, but has split out to individual patchset.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210630184624.9ca1937310b0dd5ce66b30e7@linux-foundation.org\nRest of the -mm tree, which dependent on things in -next. Andrew will trickle that over next week, before the merge window is closed.\n[PATCH 0/5] writeback: Fix bandwidth estimates (Jan Kara) https://lkml.kernel.org/r/20210705161610.19406-1-jack@suse.cz\nWhen the storage device is not fully busy, the writeback throughput estimation can be wrongly zero.\nThis patchset fixes the issue and cleans up related code.\n[PATCH Part1 RFC v4 00/36] Add AMD Secure Nested Paging (SEV-SNP) Guest Support (Brijesh Singh) This patchset series makes Linux to support Secure Encryptd Paging (SEV-SNP) of AMD.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210707175950.eceddb86c6c555555d4730e2@linux-foundation.org\nAnother pull request from Andrew Morton. Below patchsets looks interesting.\n \u0026ldquo;mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas\u0026rdquo;, v20 \u0026ldquo;Add build ID to stacktraces\u0026rdquo;, v6  Linux 5.14-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjB5XBk4obhMPfrU3mnOakV9VgHAYOo-ZGJnB2X0DnBWA@mail.gmail.com\nUsual two weeks of the merge winodw has passed and now the first release candidate for 5.14 is ready. This release is just usual in size, though the regular size doesn\u0026rsquo;t always means there will be only regular amount of issues.\nMost of the changes are for AMD drivers headers. Other than that, most changes are for drivers. Remaining changes are well spread to architectures and various core kernel parts.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-07-12 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1624943499,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624943499,"objectID":"e01b8659cae5a680fc264042aa992236","permalink":"/post/lkml_news_v5.14-rc1/","publishdate":"2021-06-29T07:11:39+02:00","relpermalink":"/post/lkml_news_v5.14-rc1/","section":"post","summary":"incoming (Andrew Morton) https://lkml.kernel.org/r/20210628193256.008961950a714730751c1423@linux-foundation.org\nThe first pull request from Andrew Morton for the v5.14 merge window.\n[PATCH v3 00/18] Folio conversion of memcg (Matthew Wilcox) https://lkml.kernel.org/r/20210630040034.1155892-1-willy@infradead.org\nThis patchset was a part of the memory folio patchset, but has split out to individual patchset.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210630184624.9ca1937310b0dd5ce66b30e7@linux-foundation.org\nRest of the -mm tree, which dependent on things in -next. Andrew will trickle that over next week, before the merge window is closed.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.14-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v4] mm: introduce reference pages (Peter Collingbourne) https://lkml.kernel.org/r/20210619092002.1791322-1-pcc@google.com\nThis patch introduces a new syscall, refpage_create(). This system creates a file descriptor which can be mmap-ed using mmap(), which will be similar to anonymous mapping but the memory will be backed by a reference page instead of the zero page.\n[PATCH 0/3] mm/page_reporting: Make page reporting work on arm64 with 64KB page size (Gavin Shan) https://lkml.kernel.org/r/20210621051152.305224-1-gshan@redhat.com\nThis patchset makes the page reporting to work on ARM with more realistic threshold, which is 2MB instead of 512MB, when the system\u0026rsquo;s page size is 64KB. This will be very helpful for memory-fragmented systems.\n[LSF/MM TOPIC] Impact on core mm from new hardware features (Dave Hansen) https://lkml.kernel.org/r/51d3010b-6324-2441-42c0-27bb536c897d@intel.com\nDave is proposing a LSF/MM session for discussion on core mm changes for Intel\u0026rsquo;s new hardware features including shadow stack, linear address masking, supervisor protection key, and TDX.\n[PATCH v12 00/33] Memory folios (Matthew Wilcox) https://lkml.kernel.org/r/20210622114118.3388190-1-willy@infradead.org\nThis patchset introduces memory folio, which is a new abstraction for pages of different size. This makes the handling of compound pages be easy.\n[PATCH v2 00/46] Folio-enabling the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20210622121551.3398730-1-willy@infradead.org\nThis patchset converts filesystems to use memory folios.\n[PATCH 1/1] mm: introduce process_reap system call (Suren Baghdasaryan) https://lkml.kernel.org/r/20210623192822.3072029-1-surenb@google.com\nThis patch introduces a new system call, process_reap(), which reclaims memory of a dying process from the caller\u0026rsquo;s context. This can be helpful for reclaiming memory consumed by other process in predictable time.\n[PATCH -V9 0/9] Migrate Pages in lieu of discard (Huang Ying) https://lkml.kernel.org/r/20210625073204.1005986-1-ying.huang@intel.com\nA patchset for the tiered memory systems. This patchset makes cold pages to be located in slower memory, like pmem.\nLinux 5.13 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj7E9iTGHbqfgtaTAM09WrVzwXjda2_D59MT8D_1=54Rg@mail.gmail.com\nAfter the seven release candidates, Linux v5.13 is out. It is one of the bigger 5.x releases. It has over 16k commits from over 2k people. Obviously, this also means the merge window for 5.14 has opened.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-06-28 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1624338143,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624338143,"objectID":"c9b76e967cbedb34c19646c6e99fc286","permalink":"/post/lkml_news_v5.13/","publishdate":"2021-06-22T07:02:23+02:00","relpermalink":"/post/lkml_news_v5.13/","section":"post","summary":"[PATCH v4] mm: introduce reference pages (Peter Collingbourne) https://lkml.kernel.org/r/20210619092002.1791322-1-pcc@google.com\nThis patch introduces a new syscall, refpage_create(). This system creates a file descriptor which can be mmap-ed using mmap(), which will be similar to anonymous mapping but the memory will be backed by a reference page instead of the zero page.\n[PATCH 0/3] mm/page_reporting: Make page reporting work on arm64 with 64KB page size (Gavin Shan) https://lkml.kernel.org/r/20210621051152.305224-1-gshan@redhat.com\nThis patchset makes the page reporting to work on ARM with more realistic threshold, which is 2MB instead of 512MB, when the system\u0026rsquo;s page size is 64KB.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v11 00/33] Memory folios (\u0026ldquo;Matthew Wilcox (Oracle)\u0026quot;) (33+ msgs) (Matthew Wilcox) https://lkml.kernel.org/r/20210614201435.1379188-1-willy@infradead.org\nEleventh version of the memory folios patchset. It helps easier handling of head and tails of compounded pages.\n[LSF/MM TOPIC] Tiered memory accounting and management (Tim Chen) https://lkml.kernel.org/r/475cbc62-a430-2c60-34cc-72ea8baebf2c@linux.intel.com\nAnother LSF/MM topic for discussion of tiered memory accounting and management, including the DRAM to PMEM demotion and PMEM to DRAM promotion.\n[REMINDER] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik) https://lkml.kernel.org/r/60ca126b.1c69fb81.90af4.93a7@mx.google.com\nThis mail reminds LSF/MM/BPF is still planned as an in person conference.\nLPC 2021: Plumbers Performance and Scalability track (Davidlohr Bueso) https://lkml.kernel.org/r/20210616175935.pnnkjrtzywasmdso@offworld\nThe \u0026lsquo;Performance and Scalability track\u0026rsquo; for LPC will be back this year. This email is to confirm key participants and gather more topics to discuss there.\n[PATCH v5 -mm 0/6] Introduced multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1623987884-43576-1-git-send-email-feng.tang@intel.com\nThe patchset for mutiple memory policy has revised to fifth version.\n[LSF/MM/BPF TOPIC] Userspace managed memory tiering (Wei Xu) https://lkml.kernel.org/r/CAAPL-u8Xz=BkTzgyf1o4yh3T2usD=yRfBOUWdLez2AAqooox3A@mail.gmail.com\nWei proposes to discuss userspace-managed memory tiering and the kernel support for that in the LSF/MM/BPF.\nLinux 5.13-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjj38E8hW+unHZ9EaJrS6x+4Tnz0qffjvLcGf70dXkKnQ@mail.gmail.com\nSeventh release candidate for v5.13 released without remakable changes. The last week was calm. Networking has some changes, but most of those were just small. If the trend goes on, we will get v5.13 next week.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-06-21 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc7 releases in the last two years.\n","date":1623733129,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623733129,"objectID":"6aa99f3ecc85219032d36299bb78e4ba","permalink":"/post/lkml_news_v5.13-rc7/","publishdate":"2021-06-15T06:58:49+02:00","relpermalink":"/post/lkml_news_v5.13-rc7/","section":"post","summary":"[PATCH v11 00/33] Memory folios (\u0026ldquo;Matthew Wilcox (Oracle)\u0026quot;) (33+ msgs) (Matthew Wilcox) https://lkml.kernel.org/r/20210614201435.1379188-1-willy@infradead.org\nEleventh version of the memory folios patchset. It helps easier handling of head and tails of compounded pages.\n[LSF/MM TOPIC] Tiered memory accounting and management (Tim Chen) https://lkml.kernel.org/r/475cbc62-a430-2c60-34cc-72ea8baebf2c@linux.intel.com\nAnother LSF/MM topic for discussion of tiered memory accounting and management, including the DRAM to PMEM demotion and PMEM to DRAM promotion.\n[REMINDER] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH V3] zram:calculate available memory when zram is used (wangyong) https://lkml.kernel.org/r/1623080354-21453-1-git-send-email-yongw.pur@gmail.com\nThis patchset adds a new entry called SwapAvailable in /proc/meminfo. It shows the memory savings when swap devices are used. If zram is used, it considers the compression ratio.\n[PATCH v3 0/9] Remove DISCONTIGMEM memory model (Mike Rapoport) https://lkml.kernel.org/r/20210608091316.3622-1-rppt@kernel.org\nThis patchset removes DISCONTIGMEM memory model, finally. There are no more architectures requiring it.\n[LSF/MM/BPF TOPIC] Consolidating representations of the physical memory (Mike Rapoport) https://lkml.kernel.org/r/YMBxeYHBY55Ddkpr@kernel.org\nMike says the physical memory layout is quite simple but the kernel has so many inconsistent structures for representation of it. He suggests to use memblock as the basis for the abstraction and discuss about this in the LSF/MM/BPF.\nRe: Maintainers / Kernel Summit 2021 planning kick-off (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiB6FJknDC5PMfpkg4gZrbSuC3d391VyReM4Wb0+JYXXA@mail.gmail.com\nThe maintainers/kernel summit 2021 was initially planned to be held in person, but it changed to be held fully in virtual a few months ago, obviously due to the COVID19. Because the vaccination is going well, there were some discussions regarding changing the decision or adjusting the plan somehow. In the thread, Enrico spoke about his negative opinion regarding the vaccination, and Torvalds replied to him in this email. Torvalds explains how vaccines work, especially for mRNA vaccines, and ask people to be vaccinated to protect their family and neighbors. For someone insist on believing what anti-vax says, he asks to at least \u0026lsquo;SHUT THE HELL UP\u0026rsquo; on LKML.\n[LSF/MM/BPF TOPIC] Improving alloc_contig_range() (David Hildenbrand) https://lkml.kernel.org/r/c8e21ac4-ace7-3176-8782-535bd6590583@redhat.com\nDavid proposes to discuss about alloc_contig_range() for ZONE_NORMAL, for problems of MAX_ORDER, slab shrinking, PCP handling, etc.\nIdle THPs (Matthew Wilcox) https://lkml.kernel.org/r/YMGKVmt8trMJ9kOP@casper.infradead.org\nWhile working for the memory folio, Matthew found all tail pages would not set as Idle. He is asking if this is intended behavior.\n[PATCH] mm: Mark idle page tracking as BROKEN (Matthew Wilcox) https://lkml.kernel.org/r/20210612000714.775825-1-willy@infradead.org\nAs a followup of the Idle THPs question, Matthew and some MM developers concluded it is not working as expected, and trying to remove that entirely. As a first step, they are trying to mark it as BROKEN. As an alternative, he suggests userfaultfd like mechanisms.\nLinux 5.13-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wi9so00V0_ZVBP8oSZpowoWu5VKKTswGz=nuYTpWkkqQA@mail.gmail.com\nNothing special in this release. No scary reports Torvalds received, the size is just as usual for this stage, and the diffstat looks good. Torvalds says we would have 5.13 in timely manner if this trend continues.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-06-14 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc6 releases in the last two years.\n","date":1623128028,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623128028,"objectID":"0a2a439684d67b9bf6d65b089085fddd","permalink":"/post/lkml_news_v5.13-rc6/","publishdate":"2021-06-08T06:53:48+02:00","relpermalink":"/post/lkml_news_v5.13-rc6/","section":"post","summary":"[RFC PATCH V3] zram:calculate available memory when zram is used (wangyong) https://lkml.kernel.org/r/1623080354-21453-1-git-send-email-yongw.pur@gmail.com\nThis patchset adds a new entry called SwapAvailable in /proc/meminfo. It shows the memory savings when swap devices are used. If zram is used, it considers the compression ratio.\n[PATCH v3 0/9] Remove DISCONTIGMEM memory model (Mike Rapoport) https://lkml.kernel.org/r/20210608091316.3622-1-rppt@kernel.org\nThis patchset removes DISCONTIGMEM memory model, finally. There are no more architectures requiring it.\n[LSF/MM/BPF TOPIC] Consolidating representations of the physical memory (Mike Rapoport) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH V3 0/2] mm: compaction: proactive compaction trigger by user (Charan Teja Reddy) https://lkml.kernel.org/r/cover.1622454385.git.charante@codeaurora.org\nThis patchset introduces /proc/sys/vm/compaction_proactiveness file, which can trigger proactive compaction by writing it.\n[RFC PATCH] mm/page_reporting: Adjust threshold according to MAX_ORDER (Gavin Shan) https://lkml.kernel.org/r/20210601033319.100737-1-gshan@redhat.com\nThe free pages reporting feature doesn\u0026rsquo;t allow discontiguous pages that smaller than PAGE_REPORTING_MIN_ORDER. Current setting of it makes the feature to never work on specific environment, because it is set to be equal to pageblock_order. This patchset mitigates the situation.\n[LSF/MM TOPIC] mmap locking topics (Michel Lespinasse) https://lkml.kernel.org/r/20210601044845.GA12713@lespinasse.org\nTwo topics for mmap locking issue, specificallyt speculative page faults and fine grained locking are proposed.\n[LSF/MM/BPF TOPIC] The Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20210601223007.pvrns2kqqzuomdlm@revolver\nAnother LSF/MM topic for the maple tree. It is a RCU-safe range-based B-tree. It aims to be used for MM structures. Liam proposes to discuss how to use it and how it could be used for the file systems in LSF/MM.\n[LSF/MM/BPF TOPIC] Handling of VMAs (Liam Howlett) https://lkml.kernel.org/r/20210602150312.cjg3vhren2c5arp7@revolver\nLiam is proposing another LSF/MM topic for VMA scalability. He points out current VMAs handling is unnecessarily complicated and therefore we need to revisit it. He also says he will post more patches before the conference.\n[PATCH 0/2] Allow high order pages to be stored on PCP v2 (Mel Gorman) https://lkml.kernel.org/r/20210603142220.10851-1-mgorman@techsingularity.net\nOnly order-0 pages are handled by the per-cpu page allocator (PCP). This patchset reduce PCP overhead and make it able to store high-order pages on PCP.\n[PATCH v2 0/9] Remove DISCINTIGMEM memory model (Mike Rapoport) https://lkml.kernel.org/r/20210604064916.26580-1-rppt@kernel.org\nThis patchset finally removes DISCONTIGMEM memory model, because SPARSEMEM is replacing it.\nLinux 5.13-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgxOqRbXUwQ73sMgxfOg9+B7BeTgZ6JP9oHR9BPhKGjOg@mail.gmail.com\nAlready fifth release candidate. Nevertheless, Torvalds says the things not really calmed down yet, so he hopes it to be calmed now. Biggest fixes came from networking, but other parts also have fair amount of fixes.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-06-07 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1622523924,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622523924,"objectID":"1879c3f89e98866e22568cc399bcd6a7","permalink":"/post/lkml_news_v5.13-rc5/","publishdate":"2021-06-01T07:05:24+02:00","relpermalink":"/post/lkml_news_v5.13-rc5/","section":"post","summary":"[PATCH V3 0/2] mm: compaction: proactive compaction trigger by user (Charan Teja Reddy) https://lkml.kernel.org/r/cover.1622454385.git.charante@codeaurora.org\nThis patchset introduces /proc/sys/vm/compaction_proactiveness file, which can trigger proactive compaction by writing it.\n[RFC PATCH] mm/page_reporting: Adjust threshold according to MAX_ORDER (Gavin Shan) https://lkml.kernel.org/r/20210601033319.100737-1-gshan@redhat.com\nThe free pages reporting feature doesn\u0026rsquo;t allow discontiguous pages that smaller than PAGE_REPORTING_MIN_ORDER. Current setting of it makes the feature to never work on specific environment, because it is set to be equal to pageblock_order.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/2] arm64: remove page granularity limitation from KFENCE (Jisheng Zhang) https://lkml.kernel.org/r/20210524172433.015b3b6b@xhacker.debian\nThis patchset removes the page granularity mapping requirement for the KFENCE\u0026rsquo;s linear map, to achieve both arm64\u0026rsquo;s block level and contiguous mapping for non-KFENCE pool pages, by allocating the KFENCE pool before paging_init().\n[PATCH v2 00/21] Optimize list lru memory consumption (Muchun Song) https://lkml.kernel.org/r/20210527062148.9361-1-songmuchun@bytedance.com\nMuchun found kmalloc-32 slab cache consuming huge memory due to cgroups initialization, and posting this patchset which expected to fix the problem fundamentally. This patchset reduced memory consumption of system under specific scenario from about 24GB to about 4GB.\nLinux 5.13-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjKJ5Mw7P=U0AyhFJbGB+4TT=SE=tmf=md0cqEn527HFg@mail.gmail.com\nLast release candidate (rc3) was quite small than usual. Maybe it was just a matter of timing, as rc of this week is fairly big. So nothing worrisome for now.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-05-31 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1621920253,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621920253,"objectID":"adfdadea0202f5ca31979323a62560f7","permalink":"/post/lkml_news_v5.13-rc4/","publishdate":"2021-05-25T07:24:13+02:00","relpermalink":"/post/lkml_news_v5.13-rc4/","section":"post","summary":"[PATCH 0/2] arm64: remove page granularity limitation from KFENCE (Jisheng Zhang) https://lkml.kernel.org/r/20210524172433.015b3b6b@xhacker.debian\nThis patchset removes the page granularity mapping requirement for the KFENCE\u0026rsquo;s linear map, to achieve both arm64\u0026rsquo;s block level and contiguous mapping for non-KFENCE pool pages, by allocating the KFENCE pool before paging_init().\n[PATCH v2 00/21] Optimize list lru memory consumption (Muchun Song) https://lkml.kernel.org/r/20210527062148.9361-1-songmuchun@bytedance.com\nMuchun found kmalloc-32 slab cache consuming huge memory due to cgroups initialization, and posting this patchset which expected to fix the problem fundamentally.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"RCU tests for Maple Tree (Paul E. McKenney) https://lkml.kernel.org/r/20210517154048.GA2013926@paulmck-ThinkPad-P17-Gen-1\nPaul is asking if there are rcu-related tests for Maple Tree other than rcu_loop() and rcu_val() that Paul needs to looking for.\n[PATCH v20 0/7] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20210518072034.31572-1-rppt@kernel.org\nThe 20th version of the patchset that implements \u0026lsquo;secret\u0026rsquo; mappings backed by a file descriptor.\n[PATCH v3 00/14] Multigenerational LRU Framework (Yu Zhao) https://lkml.kernel.org/r/20210520065355.2736558-1-yuzhao@google.com\nThird version of multi-gen LRU patchset is posted. No many changes but fixed a bug and rebased on v5.13-rc2.\n[LSF/MM TOPIC] mm documentation (Mike Rapoport) https://lkml.kernel.org/r/YKYkKTZsWZg88tWd@kernel.org\nAnother LSF/MM topic proposal for improving documentation of MM.\nLinux 5.13-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiUwtRp+jjCMd9x8O90iD_YHVBQzJoKCsT9e06L7qob3Q@mail.gmail.com\nUnlike the expectation, this week\u0026rsquo;s release is very small. This is interesting because rc3 is usually the time real fixes coming in. However, this is the smallest rc3 in the 5.x series. Would not because there is no problem at all, but people are not sending fixes yet.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-05-24 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1621314673,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621314673,"objectID":"3547a4533c60693d80d8a5e4ae3d66f4","permalink":"/post/lkml_news_v5.13-rc3/","publishdate":"2021-05-18T07:11:13+02:00","relpermalink":"/post/lkml_news_v5.13-rc3/","section":"post","summary":"RCU tests for Maple Tree (Paul E. McKenney) https://lkml.kernel.org/r/20210517154048.GA2013926@paulmck-ThinkPad-P17-Gen-1\nPaul is asking if there are rcu-related tests for Maple Tree other than rcu_loop() and rcu_val() that Paul needs to looking for.\n[PATCH v20 0/7] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20210518072034.31572-1-rppt@kernel.org\nThe 20th version of the patchset that implements \u0026lsquo;secret\u0026rsquo; mappings backed by a file descriptor.\n[PATCH v3 00/14] Multigenerational LRU Framework (Yu Zhao) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RESEND] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik) https://lkml.kernel.org/r/60997079.1c69fb81.77f3f.a045@mx.google.com/\nCFG for LSF/MM/BPF 2021 posted. It will be held from 2021-12-06 to 2021-12-08 in Palm Springs, California. As of now, it is supposed to be an in-person conference!\n[LSF/MM/BPF TOPIC] Memory folios (Matthew Wilcox) https://lkml.kernel.org/r/YJlzwcADaxO/JHRE@casper.infradead.org\nMatthew expects the memory folios patchset will be merged soon, but he wants to discuss about it in the LSFMM, if there are something to discuss more.\n[PATCH] mm/lru: Add folio LRU functions (Matthew Wilcox) https://lkml.kernel.org/r/20210513122702.2245882-1-willy@infradead.org\nThis patch makes LRU code to use the page folio interface. Owing to the reduced head/tail pages handling code, about 800 bytes of kernel text saved.\nLinux 5.13-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgX-4PTGAH7kRvqHYiq9wPJ-zN6jhLsuOAj6cG__g9N9A@mail.gmail.com\nSecond release candidate for the 5.13 released. Unlike the rc1, which was bigger than usual, this release is smaller than average, but still seems it\u0026rsquo;s only in noise.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-05-17 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1620760265,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620760265,"objectID":"5fb48300e69c4055383a3932197f43ca","permalink":"/post/lkml_news_v5.13-rc2/","publishdate":"2021-05-11T21:11:05+02:00","relpermalink":"/post/lkml_news_v5.13-rc2/","section":"post","summary":"[RESEND] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik) https://lkml.kernel.org/r/60997079.1c69fb81.77f3f.a045@mx.google.com/\nCFG for LSF/MM/BPF 2021 posted. It will be held from 2021-12-06 to 2021-12-08 in Palm Springs, California. As of now, it is supposed to be an in-person conference!\n[LSF/MM/BPF TOPIC] Memory folios (Matthew Wilcox) https://lkml.kernel.org/r/YJlzwcADaxO/JHRE@casper.infradead.org\nMatthew expects the memory folios patchset will be merged soon, but he wants to discuss about it in the LSFMM, if there are something to discuss more.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v3] mm/compaction:let proactive compaction order configurable (chukaiping) https://lkml.kernel.org/r/1619313662-30356-1-git-send-email-chukaiping@baidu.com\nThird version of the patchset making compaction order lower than 9. Machines using 1GB hugetlbfs huge pages could be an example user of this feature.\n[PATCH v4] mm/compaction: let proactive compaction order configurable (chukaiping) https://lkml.kernel.org/r/1619576901-9531-1-git-send-email-chukaiping@baidu.com\nFourth version of the patchset posted quite quickly.\n[PATCH 00/94] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20210428153542.2814175-1-Liam.Howlett@Oracle.com\nThis huge patchset introduces an RCU-safe range based B-tree called maple tree. It is mainly designed to be used for scalable virtual memory areas management.\n[PATCH v3] mm: improve mprotect(R|W) efficiency on pages referenced once (Peter Collingbourne) https://lkml.kernel.org/r/20210429214801.2583336-1-pcc@google.com\nAfter removing write protection of a page using mprotect(), any writes to the page result in page faults and copy-on-write, even though the page is referenced by only a single PTE, which incur some performance overhead. This patch optimizes this problem.\ninocming (Andrew Morton) https://lkml.kernel.org/r/20210429225251.02b6386d21b69255b4f6c163@linux-foundation.org\nThe pull request from Andrew Morton for v5.13.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210504183219.a3cc46aee4013d77402276c5@linux-foundation.org\nThe remainder of the main mm/ queue for v5.13. This includes below patchsets.\n Make alloc_contirg_range handle Hugetlb pages Prohibit pinning pages in ZONE_MOVABLE  [PATCH v9 00/96] Memory folios (Matthew Wilcox) https://lkml.kernel.org/r/20210505150628.111735-1-willy@infradead.org\nThis patchset once called page folios, but now renamed into memory folios. This helps managing non-4KiB pages cleanly and efficiently.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210506180126.03e1baee7ca52bedb6cc6003@linux-foundation.org\nPull request for every remaining paches in -mm tree.\nLinux 5.13-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiWTU+=wK9pv_YG01rXSqApCS_oY+78Ztz5-ORH5a-kvg@mail.gmail.com\nAfter the two weeks of merge window, first rc1 for v5.13 released. Fairly big merge window compared to last one. Most changes are spread over all subsystems, though some subsystems show big, but not so important changes that makes the picture overshadowed.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-01 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1619499666,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619499666,"objectID":"42410dfe8e07d5f7009f962653aa2d72","permalink":"/post/lkml_news_v5.13-rc1/","publishdate":"2021-04-27T07:01:06+02:00","relpermalink":"/post/lkml_news_v5.13-rc1/","section":"post","summary":"[PATCH v3] mm/compaction:let proactive compaction order configurable (chukaiping) https://lkml.kernel.org/r/1619313662-30356-1-git-send-email-chukaiping@baidu.com\nThird version of the patchset making compaction order lower than 9. Machines using 1GB hugetlbfs huge pages could be an example user of this feature.\n[PATCH v4] mm/compaction: let proactive compaction order configurable (chukaiping) https://lkml.kernel.org/r/1619576901-9531-1-git-send-email-chukaiping@baidu.com\nFourth version of the patchset posted quite quickly.\n[PATCH 00/94] Introducing the Maple Tree (Liam Howlett) https://lkml.kernel.org/r/20210428153542.2814175-1-Liam.Howlett@Oracle.com\nThis huge patchset introduces an RCU-safe range based B-tree called maple tree.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.13-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH -next v3 1/2] mm/debug_vm_pgtable: Move {pmd/pud}_huge_tests out of CONFIG_TRANSPARENT_HUGEPAGE (Liu Shixin) The functions are not THP dependent in real, but made dependent. This patch moves it out.\n[PATCH v10 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210419075413.1064-1-osalvador@suse.de\nThe 10th version of the patchset which allows Hugetlb pages allocated via alloc_contig_range(), dynamically.\n[PATCH v2 0/5] mm/madvise: introduce MADV_POPULATE_(READ|WRITE) to prefault page tables (David Hildenbrand) https://lkml.kernel.org/r/20210419135443.12822-1-david@redhat.com\nThis is the second version of the patchset implementing MADV_POPULATE_(READ|WRITE) for madvise() system call. It could be used for prefaulting pages.\nMaintainers / Kernel Summit 2021 planning kick-off (Theodore Ts\u0026rsquo;o) https://lkml.kernel.org/r/YH2hs6EsPTpDAqXc@mit.edu\nThe plan for maintainers/kernel summit 2021 is announced. Those will be co-located with LPC on Dublin, Ireland, from September 27th to 29th. The schedule could be changed depend on the vaccination situation, though.\n[RFC] memory reserve for userspace oom-killer (Shakeel Butt) https://lkml.kernel.org/r/CALvZod7vtDxJZtNhn81V=oE-EPOf=4KZB2Bv6Giz+u3bFFyOLg@mail.gmail.com\nThis is a RFC proposing making userspace oom-killer has guaranteed memory.\n[PATCH v2] docs: proc.rst: meminfo: briefly describe gaps in memory accounting (Mike Rapoport) https://lkml.kernel.org/r/20210420121354.1160437-1-rppt@kernel.org\nThis commit notifies the possible gaps in memory accounting, and how those could be found.\n[PATCH 000/190] Revertion of all of the umn.edu commits (Greg Kroah-Hartman) https://lkml.kernel.org/r/20210421130105.1226686-1-gregkh@linuxfoundation.org\nIt found a research team in University of Minnesota has intentionally submitted malicious patches that don\u0026rsquo;t fix real problems but introduce new security holes and flaws into the Linux kernel, and a number of such patches merged in both mainline and the stable trees. This patchset is reverting all patches from umn.edu as a reaction.\n[PATCH] mm: compaction: improve /proc trigger for full node memory compaction (Charan Teja Reddy) https://lkml.kernel.org/r/1619098678-8501-1-git-send-email-charante@codeaurora.org\n/proc/sys/vm/compact_memory file triggers full node compaction and don\u0026rsquo;t stop even though the trigger application now suffice with progress. This patch adds /proc/sys/vm/proactive_compact_memory file, which triggers full node compaction when an arbitrary value is written on it, but it can be stopped in middle if COMPACTION_HPAGE_ORDER pages become available.\n[MAINTAINER SUMMIT] Rethinking the acceptance policy for \u0026ldquo;trivial\u0026rdquo; patches (James Bottomley) https://lkml.kernel.org/r/afc5664dc2b60f912dd97abfa818b3f7c4237b92.camel@HansenPartnership.com\nAs a followup of the University of Minnesota event, James proposed a maintainer summit topic for trivial patches acceptance policy.\nLinux 5.12 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj3ANm8QrkC7GTAxQyXyurS0_yxMR3WwjhD9r7kTiOSTw@mail.gmail.com\nI personally worried how the University of Minnesota happening affect the release schedule. Unlike concerns, v5.12 released as expected, after only one extra rc. This means the merge window for v5.13 started.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-04-26 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1618895968,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618895968,"objectID":"9728b8540092785f68f6e51894c3ce79","permalink":"/post/lkml_news_v5.12/","publishdate":"2021-04-20T07:19:28+02:00","relpermalink":"/post/lkml_news_v5.12/","section":"post","summary":"[PATCH -next v3 1/2] mm/debug_vm_pgtable: Move {pmd/pud}_huge_tests out of CONFIG_TRANSPARENT_HUGEPAGE (Liu Shixin) The functions are not THP dependent in real, but made dependent. This patch moves it out.\n[PATCH v10 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210419075413.1064-1-osalvador@suse.de\nThe 10th version of the patchset which allows Hugetlb pages allocated via alloc_contig_range(), dynamically.\n[PATCH v2 0/5] mm/madvise: introduce MADV_POPULATE_(READ|WRITE) to prefault page tables (David Hildenbrand) https://lkml.kernel.org/r/20210419135443.12822-1-david@redhat.com\nThis is the second version of the patchset implementing MADV_POPULATE_(READ|WRITE) for madvise() system call.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2 0/5] mm/memcg: Reduce kmemcache memory accounting overhead (Waiman Long) https://lkml.kernel.org/r/20210412225503.15119-1-longman@redhat.com\nRecently introduced new slab memory controller eliminates the need for separate kmemcaches for each memory cgroup and therefore reduce kernel memory usage. However, it also increases memory accouning overhead in kmem cache alloc and free functions. This patchset reduces unnecessary local_irq_save() and local_irq_restore() sequences in the code path as much as possible for minimal overhead.\n[PATCH v7 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210413104747.12177-1-osalvador@suse.de\nThis patchset makes Hugetlb pages to be able to be allocated via alloc_contig_range(), which is also used by CMA.\n[RFC] mm: support multi_freearea to the reduction of external fragmentation (lipeifeng) https://lkml.kernel.org/r/20210414023803.937-1-lipeifeng@oppo.com\nThis patch sorts sorts the free pages in buddy so that low-order pages allocation done in the front area of memory while the high-order pages allocation done in the back area of memory. As a result, the high-order pages allocation could success more easily.\n[PATCH v8 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210415103544.6791-1-osalvador@suse.de\nNew version of the patchset. Collected \u0026lsquo;Reviewed-by\u0026rsquo;s and \u0026lsquo;Acked-by\u0026rsquo;s.\n[PATCH 00/13] [RFC] Rust support (Miguel Ojeda) https://lore.kernel.org/lkml/20210414184604.23473-1-ojeda@kernel.org/\nThis is the RFC for Rust support in Linux build system.\n[PATCH 1/2] mm/vmscan: add sync_shrinkers function (Christian Koenig) https://lkml.kernel.org/r/20210415115624.2904-1-christian.koenig@amd.com\nThis patchset adds a new function sync_shrinkers(), which prevents a race between, for example, shrinkers trying to free pages and hotplug trying to remove the device which having the pages.\n[PATCH v2] mm/compaction:let proactive compaction order configurable (chukaiping) https://lkml.kernel.org/r/1618593751-32148-1-git-send-email-chukaiping@baidu.com\nThe proactive compaction has fixed value \u0026lsquo;9\u0026rsquo; for COMPACTION_HPAGE_ORDER. This doesn\u0026rsquo;t make sense for machines having less than 9 max order of free pages, because it would trigger compactions too frequently. For example, machines configured with 1GB hugetlbfs huge pages. This patch exports the order to procfs so that admins could configure it.\nLinux 5.12-rc8 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjgVFDhX60fxwDobHoqJvVkuxf=JgSTtGnGMa5r-1u4Yw@mail.gmail.com\nThe last week was calm, but not calm enough to avoid rc8 release. This is fifth rc8 release for 5.x series.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-04-19 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1618292228,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618292228,"objectID":"b2e0d4d3d27344acffe9ce69fb0ddb2d","permalink":"/post/lkml_news_v5.12-rc8/","publishdate":"2021-04-13T07:37:08+02:00","relpermalink":"/post/lkml_news_v5.12-rc8/","section":"post","summary":"[PATCH v2 0/5] mm/memcg: Reduce kmemcache memory accounting overhead (Waiman Long) https://lkml.kernel.org/r/20210412225503.15119-1-longman@redhat.com\nRecently introduced new slab memory controller eliminates the need for separate kmemcaches for each memory cgroup and therefore reduce kernel memory usage. However, it also increases memory accouning overhead in kmem cache alloc and free functions. This patchset reduces unnecessary local_irq_save() and local_irq_restore() sequences in the code path as much as possible for minimal overhead.\n[PATCH v7 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML NEws v5.12-rc8","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH v1 00/11] Manage the top tier memory in a tiered memory (Tim Chen) https://lkml.kernel.org/r/cover.1617642417.git.tim.c.chen@linux.intel.com\nThere are two patchsets for better handling of tiered-memory. [PATCH 00/10] [v7] Migrate Pages in lieu of discard (https://lore.kernel.org/linux-mm/20210401183216.443C4443@viggo.jf.intel.com/) makes cold pages to be placed in PMEM instead of DRAM, and [PATCH 0/6] [RFC v6] NUMA balancing: optimize memory placement for memory tiering system (https://lore.kernel.org/linux-mm/20210311081821.138467-1-ying.huang@intel.com/) allows hot pages to be placed in DRAM instead of PMEM.\nThis patchset further improves the situation, by providing memory monitors on the top tier memory that each cgroup is using, and enables kswapd to demote top tier memory from cgroups when excess top tier memory usage is observed. In other words, this allows provisioning of different amount of top tier memory for each cgroup, depending on each cgroup\u0026rsquo;s needs.\n[PATCH v7 00/28] Memory Folios (Matthew Wilcox) https://lkml.kernel.org/r/20210409185105.188284-1-willy@infradead.org\nSeventh version of the page folio patchset. It makes THP handling simpler.\nLinux 5.12-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiHGchP=V=a4DbDN+imjGEc=2nvuLQVoeNXNxjpU1T8pg@mail.gmail.com\nUnlike the sixth rc, which shrinked as expected, this time it became bigger than usual. It\u0026rsquo;s biggest rc7 for 5.x series. Torvalds says it\u0026rsquo;s due to the networking fixes that didn\u0026rsquo;t arrive in last release but this release. So we will see rc8 next week unless the it is calm enough like dead.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-29 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1617686234,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617686234,"objectID":"b430b20497a1c5f01762f17abeb4b070","permalink":"/post/lkml_news_v5.12-rc7/","publishdate":"2021-04-06T07:17:14+02:00","relpermalink":"/post/lkml_news_v5.12-rc7/","section":"post","summary":"[RFC PATCH v1 00/11] Manage the top tier memory in a tiered memory (Tim Chen) https://lkml.kernel.org/r/cover.1617642417.git.tim.c.chen@linux.intel.com\nThere are two patchsets for better handling of tiered-memory. [PATCH 00/10] [v7] Migrate Pages in lieu of discard (https://lore.kernel.org/linux-mm/20210401183216.443C4443@viggo.jf.intel.com/) makes cold pages to be placed in PMEM instead of DRAM, and [PATCH 0/6] [RFC v6] NUMA balancing: optimize memory placement for memory tiering system (https://lore.kernel.org/linux-mm/20210311081821.138467-1-ying.huang@intel.com/) allows hot pages to be placed in DRAM instead of PMEM.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC] NUMA balancing: reduce TLB flush via delaying mapping on hint page fault (Huang Ying) https://lkml.kernel.org/r/20210329062651.2487905-1-ying.huang@intel.com\nNUMA balancing shots down TLBs on all CPUs that recently run hint-faulted process during the migration of the hint-faulted page to appropriate node. This commit delays the TLB shootdown to reduce the overhead. With pmbench, it reduced TLB shooting IPI up to 99%, though it didn\u0026rsquo;t makde visible benchmark score changes.\n[RFC v2 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga) https://lkml.kernel.org/r/1617140178-8773-1-git-send-email-anthony.yznaga@oracle.com\nSecond revision after a while. This patchset makes a part of memory to be exported as a file system to user space and let the content of the memory preserved while the system is rebooted using kexec. The user space programs could restart fast regardless of system reboot by using that as a temporary place to put their data.\n[PATCH v2 1/2] kunit: add a KUnit test for SLUB debugging functionality (Oliver Glitta) https://lkml.kernel.org/r/20210330120436.4591-1-glittao@gmail.com\nThis commit makes SLUB_RESILIENCY_TEST macro, which is hardcoded as not defined and therefore couldn\u0026rsquo;t be used in normal case without kernel modification, to be able to be defined with kernel configuration so that the code hidden behind the macro could be used in kunit.\n[PATCH v6 00/27] Memory Folios (Mattew Wilcox) https://lkml.kernel.org/r/20210331184728.1188084-1-willy@infradead.org\nThis is the sixth version of the page folio patchset. This helps handling complex compound pages in simpler way.\n[PATCH 00/10] [v7][RESEND] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20210401183216.443C4443@viggo.jf.intel.com\nThis patchset is for the usual tieremed memory system, which configured with DRAM and a slower auxiliary memory such as persistent memory. The system starts allocation with DRAM and do reclamation once DRAM is filled up. Then, from a point, it starts falling over to the slower auxiliary memory. As a result, new allocations could result in slow auxiliary memory while there is a space in DRAM, and the data reclaimed from DRAM is discarded even though there was a space in the auxiliary memory. This patchset makes the DRAM reclaimation to migrate the pages to the auxiliary memory instead.\nLinux 5.12-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whK9=wafv+cSLCGqFGPBbgp67Dut3jKCnWB--8y7Lxonw@mail.gmail.com\nLast release (rc5) make Linus a little bit worried, but this week release is somewhat positively tiny one. He says the release schedule will be as usual unless something different happens within next two weeks.\n","date":1617082552,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617082552,"objectID":"1c5448a9a42047f5f4f38aaf86910470","permalink":"/post/lkml_news_v5.12-rc6/","publishdate":"2021-03-30T07:35:52+02:00","relpermalink":"/post/lkml_news_v5.12-rc6/","section":"post","summary":"[RFC] NUMA balancing: reduce TLB flush via delaying mapping on hint page fault (Huang Ying) https://lkml.kernel.org/r/20210329062651.2487905-1-ying.huang@intel.com\nNUMA balancing shots down TLBs on all CPUs that recently run hint-faulted process during the migration of the hint-faulted page to appropriate node. This commit delays the TLB shootdown to reduce the overhead. With pmbench, it reduced TLB shooting IPI up to 99%, though it didn\u0026rsquo;t makde visible benchmark score changes.\n[RFC v2 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc6","type":"post"},{"authors":["projects"],"categories":[],"content":"I stopped translation of perfbook since 2019-09-27. Because the 2nd edition of perfbook is released[0], I\u0026rsquo;m starting the translation again[1], from the scratch. The old versions are still available, of course[2].\n[0] https://mirrors.edge.kernel.org/.../perfbook/perfbook.html\n[1] https://github.com/sjp38/perfbook-ko_KR/commit/1c44ef30179b\n[2] https://github.com/sjp38/perfbook-ko_KR-pdf\n","date":1616846467,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616846467,"objectID":"d8e6a7d5de3d26d56bc4c7d64bec549d","permalink":"/post/perfbook_translate_restart/","publishdate":"2021-03-27T13:01:07+01:00","relpermalink":"/post/perfbook_translate_restart/","section":"post","summary":"I stopped translation of perfbook since 2019-09-27. Because the 2nd edition of perfbook is released[0], I\u0026rsquo;m starting the translation again[1], from the scratch. The old versions are still available, of course[2].\n[0] https://mirrors.edge.kernel.org/.../perfbook/perfbook.html\n[1] https://github.com/sjp38/perfbook-ko_KR/commit/1c44ef30179b\n[2] https://github.com/sjp38/perfbook-ko_KR-pdf","tags":["projects","perfbook","translation"],"title":"Starting perfbook translation again","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/3 v5] Introduce a bulk order-0 page allocator (Mel Gorman) https://lkml.kernel.org/r/20210322091845.16437-1-mgorman@techsingularity.net\nFifth version of the order-0 pages bulk allocator. In this version, the API users are dropped from the patchset, because the callers are not confirmed if they prefer an array or list interface.\n[PATCH] mm: cma: add trace events for CMA alloc perf testing (Georgi Djakov) https://lkml.kernel.org/r/20210324160740.15901-1-georgi.djakov@linaro.org\nThis patch adds tracepoints for CMA and page migrations. Those aims to be used for performance debugging of CMA.\n[PATCH 0/4] mm/page_reporting: Some knobs and fixes (Xunlei Pang) https://lkml.kernel.org/r/1616751898-58393-1-git-send-email-xlpang@linux.alibaba.com\nThis commit adds some counters for debugging and fix of a problem in the page reporting feature.\nLinux 5.12-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wg89U6PLp1AGhaqUx4KAZtkvKS6kuNmb+zObQhf1jez+g@mail.gmail.com\nUnlike previous week\u0026rsquo;s release, rc5 is bigger than average. It\u0026rsquo;s not hitting any record, though. Torvalds says he doesn\u0026rsquo;t overly worrying, but thinking about rc8. io_uring is pointed out as one of the sources of noises.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-29 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1616479917,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616479917,"objectID":"ca5b80ed4bd9d564081b39b703ccdc01","permalink":"/post/lkml_news_v5.12-rc5/","publishdate":"2021-03-23T07:11:57+01:00","relpermalink":"/post/lkml_news_v5.12-rc5/","section":"post","summary":"[PATCH 0/3 v5] Introduce a bulk order-0 page allocator (Mel Gorman) https://lkml.kernel.org/r/20210322091845.16437-1-mgorman@techsingularity.net\nFifth version of the order-0 pages bulk allocator. In this version, the API users are dropped from the patchset, because the callers are not confirmed if they prefer an array or list interface.\n[PATCH] mm: cma: add trace events for CMA alloc perf testing (Georgi Djakov) https://lkml.kernel.org/r/20210324160740.15901-1-georgi.djakov@linaro.org\nThis patch adds tracepoints for CMA and page migrations. Those aims to be used for performance debugging of CMA.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"File THP and HWPoison (Matthew Wilcox) https://lkml.kernel.org/r/20210316140947.GA3420@casper.infradead.org\nTHP is not splitted for file-backed pages when it got memory failure. This mail describes the problem in detail and propose some change to mitigate it.\nIssue with kfence and kmemleak (Luis Henriques) https://lkml.kernel.org/r/YFDf6iKH1p/jGnM0@suse.de\nLuis found a problem when kmemleak and kfence is used together. A fix is made by Marco.\n[PATCH v4 00/13] Introduced multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1615952410-36895-1-git-send-email-feng.tang@intel.com\nThis is the fourth version of the patchset. It allows programs to set multiple preferred nodes using new mempolicy called MPOL_PREFERRED_MANY.\nWe are now in linux-next! (Miguel Ojeda) https://lkml.kernel.org/r/CANiq72nbNxpps+p4wYp03ncrbGH9FFoTfHQZwg_vGdPO41eGmQ@mail.gmail.com\nThe Rust support for Linux kernel development is merged in linux-next. This doesn\u0026rsquo;t necessarily mean it will be merged in the mainline, but the authors aim to be merged in v5.13 or v5.14.\n[PATCH v5 0/5] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210317111251.17808-1-osalvador@suse.de\nFifth version of the patchset making alloc_contig_range() to handle HugeTLB pages.\nLinux 5.12-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whDxybSS63==ycQiNobvamDmoyxQo1JL-31Tup8azbeWw@mail.gmail.com\nThe fourthe release is out without particular strange things. Rather than that, it\u0026rsquo;s quite normal. Torvalds says everything looks pretty normal, despite the rc1 hiccup.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-22 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1615961475,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615961475,"objectID":"57793fa33c80261cad6b49f8f50aedfe","permalink":"/post/lkml_news_v5.12-rc4/","publishdate":"2021-03-17T07:11:15+01:00","relpermalink":"/post/lkml_news_v5.12-rc4/","section":"post","summary":"File THP and HWPoison (Matthew Wilcox) https://lkml.kernel.org/r/20210316140947.GA3420@casper.infradead.org\nTHP is not splitted for file-backed pages when it got memory failure. This mail describes the problem in detail and propose some change to mitigate it.\nIssue with kfence and kmemleak (Luis Henriques) https://lkml.kernel.org/r/YFDf6iKH1p/jGnM0@suse.de\nLuis found a problem when kmemleak and kfence is used together. A fix is made by Marco.\n[PATCH v4 00/13] Introduced multi-preference mempolicy (Feng Tang) https://lkml.kernel.org/r/1615952410-36895-1-git-send-email-feng.tang@intel.com\nThis is the fourth version of the patchset.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 00/10] [v6] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20210304235949.7922C1C3@viggo.jf.intel.com\nWhen the system configured with both DRAM and persistent memory, current kernel starts reclamation when DRAM fulls even though there are some space in persistent memory. And from some point, all page allocation is done on the persistent memory only, even though DRAM has some free slots now.\nThis patchset mitigates the problem by migrating pages that about to be reclaimed to persistent memory. The migration destination could be any slow tier memory.\n[PATCH RFCv2] mm/madvise: introduce MADV_POPULATE_(READ|WRITE) to prefault/prealloc memory (David Hildenbrand) https://lkml.kernel.org/r/20210308164520.18323-1-david@redhat.com\nFor user space sparse memory mappings management (e.g., hypervisors for memory ballooning or similar techniques or memory allocators), dynamic population and discard of such a sparse memory region is beneficial. This commit implements two new madvise() hints for the purpose.\n[PATCH v4 0/5] Allocate memmap from hotadded memory (per device) (Oscar Salvador) https://lkml.kernel.org/r/20210309175546.5877-1-osalvador@suse.de\nThis patchset reduces memory overhead due to hot-added memory, for SPARSEMEM_VMEMMAP memory model. The main three problems are, we are consuming additional memory even before hot-added memory is onlined, memmap could located on a different numa node, and memmap could populated with base pages only if the memory is fragmented. This patchset mitigates the problems by allocating the memmap from the hot-added memory itself.\n[PATCH 0/5] Introduce a bulk order-0 page allocator with two in-tree users (Mel Gorman) https://lkml.kernel.org/r/20210310104618.22750-1-mgorman@techsingularity.net\nThis patchset introduces a bulk order-0 page allocator and make sunrpc and network pagepool to be the users of it.\n[PATCH v4 0/4] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210310150853.13541-1-osalvador@suse.de\nThis commit let alloc_contig_range() which allocates physically contiguous memory, to handle HugeTLB pages for better flexibility.\n[RFC -V6 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying) https://lkml.kernel.org/r/20210311081821.138467-1-ying.huang@intel.com\nThis is a followup of not-yet-merged patchset, \u0026lsquo;Migrate Pages in lieu of discard\u0026rsquo;. These are part of the pmem-based numa balancing. That is, placing hot pages in DRAM and cold pages in pmem node.\n[PATCH v1 00/14] Multigenerational LRU (Yu Zhao) https://lkml.kernel.org/r/20210313075747.3781593-1-yuzhao@google.com\nThis patchset makes the page reclamation logic to make finer-grained eviction target decision, by maintaining multiple LRU lists based on their age. The aging is done by finding newly referenced pages via page table scanning. After that, when eviction is needed, it selects the eviction target pages from the oldest lru list.\nThey used this approach on Chrome OS and achieved 96% fewer low-memory tab discards and 59% fewer OOM kills.\nLinux 5.12-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgAr4Z2deEQs+5L6bJb68FouwBZUSURh+m-47TBnEsGZg@mail.gmail.com\nThis round of the release is pretty big compared to other rc3, but it\u0026rsquo;s due to early release of rc2. There are also many rebased commits that made due to the swap file bug in rc1, which marked as recent unnecessarily. Excluding such things, this release is actually smaller than usual, Torvalds says.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-15 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1615112367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615112367,"objectID":"f9a70b43cc006a5968f82e2e6cd27f15","permalink":"/post/lkml_news_v5.12-rc3/","publishdate":"2021-03-07T11:19:27+01:00","relpermalink":"/post/lkml_news_v5.12-rc3/","section":"post","summary":"[PATCH 00/10] [v6] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20210304235949.7922C1C3@viggo.jf.intel.com\nWhen the system configured with both DRAM and persistent memory, current kernel starts reclamation when DRAM fulls even though there are some space in persistent memory. And from some point, all page allocation is done on the persistent memory only, even though DRAM has some free slots now.\nThis patchset mitigates the problem by migrating pages that about to be reclaimed to persistent memory.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH] mm: introduce clear all vm events counters (Pintu Kumar) https://lkml.kernel.org/r/1614595766-7640-1-git-send-email-pintu@codeaurora.org\nBecause the vmstat data is only cumulated, users should calculate the diff manually or just reboot. This commit adds a procfs file that can be used to clear all vmstat counters.\n[PATCH 0/5] Introduce a bulk order-0 page allocator with two in-tree users (Mel Gorman) https://lkml.kernel.org/r/20210301161200.18852-1-mgorman@techsingularity.net\nThis patchset introduces a bulk order-0 page allocator. It also makes the sunrpc and the network page pool to use that. Mel says current implementation would not particularly efficient, but the performance report shows improvements.\n[PATCH v3 00/14] Introduced multi-preference mempolicy https://lkml.kernel.org/r/1614766858-90344-1-git-send-email-feng.tang@intel.com\nThis patchset introduces a new NUMA memory placement policy called MPOL_PREFERRED_MANY, which can be used for set_mempolicy() or mbind() system calls. It allows users to set preferred NUMA nodes as similar to MPOL_PREFERRED, but it allows multiple nodes, unlike MPOL_PREFERRED.\nLinux 5.12-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whH-stL2zLCf02HZaOeQgS4oGa7eEiHeYZGj-orK-PX0g@mail.gmail.com\nIt turned out the v5.12-rc1 has a nasty bug related to swap files and therefore it removed from the mainline. Therefore Linus has released the next rc two days earlier than usual. The swap file bug is fixed, and also contains more fixes as usual. Nothing special except it released earlier than expected.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-06 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1614665271,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614665271,"objectID":"fb81ddf561383e3f0218094c244e6417","permalink":"/post/lkml_news_v5.12-rc2/","publishdate":"2021-03-02T07:07:51+01:00","relpermalink":"/post/lkml_news_v5.12-rc2/","section":"post","summary":"[PATCH] mm: introduce clear all vm events counters (Pintu Kumar) https://lkml.kernel.org/r/1614595766-7640-1-git-send-email-pintu@codeaurora.org\nBecause the vmstat data is only cumulated, users should calculate the diff manually or just reboot. This commit adds a procfs file that can be used to clear all vmstat counters.\n[PATCH 0/5] Introduce a bulk order-0 page allocator with two in-tree users (Mel Gorman) https://lkml.kernel.org/r/20210301161200.18852-1-mgorman@techsingularity.net\nThis patchset introduces a bulk order-0 page allocator. It also makes the sunrpc and the network page pool to use that.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc2","type":"post"},{"authors":[],"categories":["examples"],"content":"I realized I didn\u0026rsquo;t introduce a good, intuitive example use case of DAMON[0] for profiling so far, though DAMON is not for only profiling. One straightforward and realistic usage of DAMON as a profiling tool would be recording the monitoring results with callstack and visualize those by timeline together.\nFor example, below shows that visualization for a realistic workload, namely \u0026lsquo;fft\u0026rsquo; in SPLASH-2X benchmark suite. From that, you can know there are three memory access bursting phases in the workload and FFT1DOnce.cons::prop.2() looks responsible for the first and second hot phase, while Transpose() is responsible for the last one. Now the programmer can take a deep look in the functions and optimize the code (e.g., adding madvise() or mlock() calls).\nWe used the approach for \u0026lsquo;mlock()'-based optimization of a range of other realistic benchmark workloads. The optimized versions achieved up to about 2.5x performance improvement under memory pressure[1].\nNote: I made the uppermost two figures in above \u0026lsquo;fft\u0026rsquo; visualization (working set size and access frequency of each memory region by time) via the DAMON user space tool[2], while the lowermost one (callstack by time) is made using perf and speedscope[3]. We have no descent and totally automated tool for that yet (will be implemented soon, maybe under perf as a perf-script[4]), but you could reproduce that with below commands.\n$ # run the workload $ sudo damo record $(pidof \u0026lt;the workload\u0026gt;) \u0026amp; $ sudo perf record -g --pid $(pidof \u0026lt;the workload\u0026gt;) $ # after your workload finished (you should also finish perf on your own) $ damo report wss --sortby time --plot wss.pdf $ damo report heats --heatmap freq.pdf $ sudo perf script | speedscope - $ # open wss.pdf and freq.pdf with our favorite pdf viewer  [0] https://damonitor.github.io\n[1] https://linuxplumbersconf.org/event/4/contributions/548/attachments/311/590/damon_ksummit19.pdf\n[2] https://lore.kernel.org/linux-mm/20201215115448.25633-8-sjpark@amazon.com/\n[3] https://www.speedscope.app/\n[4] https://lore.kernel.org/linux-mm/20210107120729.22328-1-sjpark@amazon.com/\n","date":1614234030,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614234030,"objectID":"8dacdca9930c1620259b4ce505058e72","permalink":"/post/damon_profile_callstack_example/","publishdate":"2021-02-25T07:20:30+01:00","relpermalink":"/post/damon_profile_callstack_example/","section":"post","summary":"I realized I didn\u0026rsquo;t introduce a good, intuitive example use case of DAMON[0] for profiling so far, though DAMON is not for only profiling. One straightforward and realistic usage of DAMON as a profiling tool would be recording the monitoring results with callstack and visualize those by timeline together.\nFor example, below shows that visualization for a realistic workload, namely \u0026lsquo;fft\u0026rsquo; in SPLASH-2X benchmark suite. From that, you can know there are three memory access bursting phases in the workload and FFT1DOnce.","tags":["damon","profile","callstack","linux","kernel","example"],"title":"An example of DAMON usage for profiling","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v11 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210215161349.246722-1-pasha.tatashin@soleen.com\nThe 11th version of the patchset making ZONE_MOVABLE really movable. In this version, a build error on i386 is fixed.\n[RFC PATCH] mm, oom: introduce vm.sacrifice_hugepage_on_oom https://lkml.kernel.org/r/20210216030713.79101-1-eiichi.tsukata@nutanix.com\nThis RFC patch introduces yet another sysctl knob called vm.sacrifice_hugepage_on_oom. When it is turned on, it tries to free available hugepages before waking oom-killer up.\n[RFC] Hugepage collapse in process context (David Rientjes) https://lkml.kernel.org/r/d098c392-273a-36a4-1a29-59731cdf5d3d@google.com\nWhen a THP request via madvise() is made, the system call only mark the memory region as a candidate of the promotion but does not do the promotion synchronously. The THP daemon, khugepaged, scans virtual address spaces and collapse regular pages of such regions to huge pages transparently. However, because the scanning works very slowly (at most 4096 pages every 10 seconds) to not consume CPU resource too much, it doesn\u0026rsquo;t show immediate effect to short-living workloads. My DAMOS-based efficient THP implementation also showed this problem before.\nIn this mail, David is proposing making a synchronous compaction can be requested from process context, via madvise_process() like system call.\n[PATCH RFC] mm/madvise: introduce MADV_POPULATE to prefault/prealloc memory (David Hildenbrand) https://lkml.kernel.org/r/20210217154844.12392-1-david@redhat.com\nDynamic populactions and discards of memory is required in user space when it needs to do sparse memory mappings management. Hypervisors are the good example. Though the discardings are available using MADV_DONTNEED and FALLOC_FL_PUNCH_HOLE, there is no appropriate way to do the pre-population. mmap() with MAP_POPULATE might be used, but it is not applicable for the dynamic remappings. This patch introduces MADV_POPULATE for the purpose.\n[PATCH] mm: vmstat: add cma statistics (Minchan Kim) https://lkml.kernel.org/r/20210217170025.512704-1-minchan@kernel.org\nThis patch adds CMA statistics in vmstat, so people can more easily understand how aggressively CMA is used and how much allocations fail.\nRe: 5.10 LTS Kernel: 2 or 6 years? (Grep Korah-Hartman) https://lkml.kernel.org/r/YC+AEcuXhPXXtmRB@kroah.com\nGreg told he wants to officially support v5.10.y for more than 2 years (maybe 6 years) if some company comes up and continuously use and support the versions. Hanjun Guo from Huawei came up and told Huawei will support it by using the kernel in their product, run tests continuously, and provide backporting of upstream fixes. Greg welcomes the reaction. So v5.10.y might be officially supported 6 years soon.\n[PATCH v6 1/1] mm/page_alloc.c: refactor initialization of struct page for holes in memory layout (Mike Rapoport) In case of real memory bank is not a multiple of SECTION_SIZE or the architecture does not register memory holes reserved by the firmware as memblock.memory, there could be struct pages that are not backed by real physical memory.\nThose had proper links to proper zone and node before, but after commit 73a6e474cb37, it doesn\u0026rsquo;t. This patch makes those to have proper links to zone and node again.\n[PATCH v3 0/2] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador) https://lkml.kernel.org/r/20210222135137.25717-1-osalvador@suse.de\nThis is third version of the patchset making CMA to be usable for HugeTLB. Non-minor changes are mande from v2.\n[RFC PATCH v3 00/49] 1GB PUD THP support on x86_64 (Zi Yan) https://lkml.kernel.org/r/20210224223536.803765-1-zi.yan@sent.com\nThis RFC is for 1GB THP support on x86_64. Nevertheless, Zi Yan posted only the cover letter to discuss about his two concerns first. The first concern is how to allocate the 1GB memory. Current implementation uses CMA. This means someone could wrongly tune the kernel so that too large or too small CMA area could be configured. Second concern is the large amount of code. He tried to make the code as small as possible for convenient review, but failed and looking for a better way.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20210225171452.713967e96554bb6a53e44a19@linux-foundation.org\nThe (maybe last) mm pull request for v5.12. This includes the kfence patchset and it merged in the mainline.\nLinux 5.12-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjUzNbTuRCAv80vyD1dXEEaefdpRi23J+suSaognBoV8A@mail.gmail.com\nAfter the two weeks of merge window, the first release candidate of v5.12 Linux kernel is released. Torvalds note that this release is partly small and he suspects this is partly due to the electricity problem in Portland area. As a result, he even considered extending the merge window, but he didn\u0026rsquo;t at the end of the day. Instead, he is now saying he could be more flexible about late pull requests, though he still asks the maintainers to explain what was the problem.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-03-01 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1613456258,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613456258,"objectID":"d82a41ecc9f3f0fb2ed9427bdab84c75","permalink":"/post/lkml_news_v5.12-rc1/","publishdate":"2021-02-16T07:17:38+01:00","relpermalink":"/post/lkml_news_v5.12-rc1/","section":"post","summary":"[PATCH v11 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210215161349.246722-1-pasha.tatashin@soleen.com\nThe 11th version of the patchset making ZONE_MOVABLE really movable. In this version, a build error on i386 is fixed.\n[RFC PATCH] mm, oom: introduce vm.sacrifice_hugepage_on_oom https://lkml.kernel.org/r/20210216030713.79101-1-eiichi.tsukata@nutanix.com\nThis RFC patch introduces yet another sysctl knob called vm.sacrifice_hugepage_on_oom. When it is turned on, it tries to free available hugepages before waking oom-killer up.\n[RFC] Hugepage collapse in process context (David Rientjes) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.12-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2] mm: cma: support sysfs (Minchan Kim) https://lkml.kernel.org/r/20210208180142.2765456-1-minchan@kernel.org\nThis patch introduces sysfs interface for CMA that shows stats including number of CMA allocation attempts and failures.\n[PATCH v10 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210211162427.618913-1-pasha.tatashin@soleen.com\nThe 10th version of the patchset making ZONE_MOVABLE really movable.\nLinux 5.11 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wg8LpRi9+P2_V+ehJ2_EoJifNh2QmVf47aLXfkCd-1UAQ@mail.gmail.com\nNothing strange happened last week, so Linus released v5.11 as expected. The number of changes from the rc7 to this release is actually even smaller than average.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-02-15 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1612851517,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612851517,"objectID":"6c265b208ffb2954a9dd6955131769d7","permalink":"/post/lkml_news_v5.11/","publishdate":"2021-02-09T07:18:37+01:00","relpermalink":"/post/lkml_news_v5.11/","section":"post","summary":"[PATCH v2] mm: cma: support sysfs (Minchan Kim) https://lkml.kernel.org/r/20210208180142.2765456-1-minchan@kernel.org\nThis patch introduces sysfs interface for CMA that shows stats including number of CMA allocation attempts and failures.\n[PATCH v10 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210211162427.618913-1-pasha.tatashin@soleen.com\nThe 10th version of the patchset making ZONE_MOVABLE really movable.\nLinux 5.11 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wg8LpRi9+P2_V+ehJ2_EoJifNh2QmVf47aLXfkCd-1UAQ@mail.gmail.com\nNothing strange happened last week, so Linus released v5.11 as expected. The number of changes from the rc7 to this release is actually even smaller than average.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC 00/20] TLB batching consolidation and enhancements (Nadav Amit) https://lkml.kernel.org/r/20210131001132.3368247-1-namit@vmware.com\nThis patchset prepares more aggressive TLB flushing batching by consolidating a few TLB batching methods.\n[PATCH v9 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210201153827.444374-1-pasha.tatashin@soleen.com\nThis patchset makes ZONE_MOVABLE really movable by prohibiting pinning of pages in the zone.\nAugmented Page Reclaim (Yu Zhao) https://lkml.kernel.org/r/YBkT6175GmMWBvw3@google.com\nThis mail shares a part of decade researh/experimentation in memory overcommit at Google. The author wants to start submitting patch based on responses. It allows userspace to trigger aging and eviction via debugfs for working set estimation, proactive reclaim, far memory tiering, NUMA-aware job scheduling, and more. The work adopted for mobile (Android), warehouse-scale computers (Borg), and desktop (Chrome OS) and achieved impressive results.\n[RFC -V5 0/6] autonuma: Optimize memory placement for memory tiering system (Huang Ying) https://lkml.kernel.org/r/20210204101056.89336-1-ying.huang@intel.com\nThis RFC patchset makes hot pages to placed in DRAM and cold pages in PMEM. For hot pages identification, this patchset reuses the mechanism of AutoNUMA. IOW, recently used pages are identified as hot.\nLinux 5.11-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgxhBkWH0D6chYcwqDvdh2rB5ZVpToxodz5Q6qaFd_qyg@mail.gmail.com\nThe release candidate that is supposed to be the last one before the v5.11 is released. No surprise is there, so unless some scary things happen later, v5.11 will be released next week.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-02-08 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1612246761,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612246761,"objectID":"a2378d0513636addc95c2186c1d0a9c4","permalink":"/post/lkml_news_v5.11-rc7/","publishdate":"2021-02-02T07:19:21+01:00","relpermalink":"/post/lkml_news_v5.11-rc7/","section":"post","summary":"[RFC 00/20] TLB batching consolidation and enhancements (Nadav Amit) https://lkml.kernel.org/r/20210131001132.3368247-1-namit@vmware.com\nThis patchset prepares more aggressive TLB flushing batching by consolidating a few TLB batching methods.\n[PATCH v9 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210201153827.444374-1-pasha.tatashin@soleen.com\nThis patchset makes ZONE_MOVABLE really movable by prohibiting pinning of pages in the zone.\nAugmented Page Reclaim (Yu Zhao) https://lkml.kernel.org/r/YBkT6175GmMWBvw3@google.com\nThis mail shares a part of decade researh/experimentation in memory overcommit at Google. The author wants to start submitting patch based on responses.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC][PATCH 00/13] [v5] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20210126003411.2AC51464@viggo.jf.intel.com\nIf a system has a small DRAM and a large persistent memory (PMEM), reclamation starts when DRAM fills up, and newer allocations will done on PMEM. This patchset makes the reclaim logic to migrate pages to PMEM instead of just discarding it.\n[PATCH v3 00/25] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20210128070404.1922318-1-willy@infradead.org\nThis patchset introduces a new data structure called page folio. It helps functions to handle compound pages without having to check if a given page is a head or a tail.\nLinux 5.11-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiOjOh4gNkg==Tyjho98cea06UtnZ4ePwMP3uK-9VLCNA@mail.gmail.com\nThings keep going calm. v5.11-rc6 is in average of the series, and the commits spread to subsystems as usual.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-02-01 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1611641695,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611641695,"objectID":"dd9b07c511f71edead51b2996c65ac4d","permalink":"/post/lkml_news_v5.11-rc6/","publishdate":"2021-01-26T07:14:55+01:00","relpermalink":"/post/lkml_news_v5.11-rc6/","section":"post","summary":"[RFC][PATCH 00/13] [v5] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20210126003411.2AC51464@viggo.jf.intel.com\nIf a system has a small DRAM and a large persistent memory (PMEM), reclamation starts when DRAM fills up, and newer allocations will done on PMEM. This patchset makes the reclaim logic to migrate pages to PMEM instead of just discarding it.\n[PATCH v3 00/25] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20210128070404.1922318-1-willy@infradead.org\nThis patchset introduces a new data structure called page folio.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2 00/27] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20210118170148.3126186-1-willy@infradead.org\nThis is the second version of the page folios patchset. This introduces a new struct named folio. Functions that receive folio as an argument always receives head page, so the function don\u0026rsquo;t need to do compound_head().\n[PATCH -V9 0/3] numa balancing: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernek.org/r/20210120061235.148637-1-ying.huang@intel.com\nThis patch make optimization of cross-socket memory accesses for AutoNUMA in case of application is bound to multiple NUMA nodes possible.\n[PATCH 1/1] process_madvise.2: Add process_madvise man page (Suren Baghdasaryan) https://lkml.kernel.org/r/20210120202337.1481402-1-surenb@google.com\nThis patch is for the man page of the process_madvise() system call.\n[PATCH v2 0/5] create hugetlb flags to consolidate state (Mike Kravetz) https://lkml.kernel.org/r/20210120013049.311822-1-mike.kravetz@oracle.com\nHugetlb specific page state information is stored in hard to read/understand/maintain way. This patch series store hugetlb specific page flags in the \u0026lsquo;private\u0026rsquo; field of \u0026lsquo;struct page\u0026rsquo; to mitigate the problem.\n[PATCH v6 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20210120014333.222547-1-pasha.tatashin@soleen.com\nThis patch makes movable pages really movable by prohibiting pinning them in ZONE_MOVABLE.\n[PATCH RFC 0/6] fix the negative dentres bloating system memory usage (Gautham Ananthakrishna) https://lkml.kernel.org/r/1611235185-1685-1-git-send-email-gautham.ananthakrishna@oracle.com\nThis commit mitigates the memory bloat caused by \u0026lsquo;negative dentries\u0026rsquo; by moving those to end of siblings list and keep dcache at most three unreferenced negative dentries in each hash bucket.\nLinux 5.11-rc5 https://lkml.kernel.org/r/CAHk-=wgmJ0q1URHrOb-2iCOdZ8gYybiH6LY2Gq7cosXu6kxAnA@mail.gmail.com\nThe fifthe release candidate for v5.11 is slightly larger than usual. Mainly because of about 40~% commits for -rc5 which came in the last day. Noticeable change is regression due to get rid of set_fs() change that made for v5.10. The regression was under rare-to-happen condition, but seems now v5.10 is widespread enough to let people notice such problems.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-01-25 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1611038760,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611038760,"objectID":"a47e9c4e19e7d2ddc075401087da95b5","permalink":"/post/lkml_news_v5.11-rc5/","publishdate":"2021-01-19T07:46:00+01:00","relpermalink":"/post/lkml_news_v5.11-rc5/","section":"post","summary":"[PATCH v2 00/27] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20210118170148.3126186-1-willy@infradead.org\nThis is the second version of the page folios patchset. This introduces a new struct named folio. Functions that receive folio as an argument always receives head page, so the function don\u0026rsquo;t need to do compound_head().\n[PATCH -V9 0/3] numa balancing: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernek.org/r/20210120061235.148637-1-ying.huang@intel.com\nThis patch make optimization of cross-socket memory accesses for AutoNUMA in case of application is bound to multiple NUMA nodes possible.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH] mm: thp: introduce NR_PARTIAL_THPS (Bin Wang) https://lkml.kernel.org/r/20210112021208.1875-1-wangbin224@huawei.com\nBecause partially unmapped THP is not split, the memory stat becomes confusing. This patch add another counter called NR_PARTIAL_THPS in node_stat_item to reduce such confusions.\n[PATCH v2 00/70] RFC mm: Introducing the Maple Tree (Liam R. Howlett) https://lkml.kernel.org/r/20210112161240.2024684-1-Liam.Howlett@Oracle.com\nSecond RFC of the Maple tree. It is an RCU-safe B-tree that aims to be used as the vma tree with better scalability.\n[PATCH] mm/debug: Improve memcg debugging (Matthew Wilcox) https://lkml.kernel.org/r/20210114190200.1894484-1-willy@infradead.org\nThis patch modifies __dump_page() to show memcg information better.\n[PATCH v2 0/5] Add sysfs interface to collect reports from debugging tools (Alexander Potapenko) https://lkml.kernel.org/r/20210115130336.2520663-1-glider@google.com\nThis patch adds a library that can be used for error report from debugging tools, and make KASAN and KFENCE to use the library for error report. The error report can be accessed from the user space via the sysfs.\nLinux 5.11-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjGqX0BFV0eH9R=9m2Xezib0w8Ty2zEc6XDJ73zNRPuPQ@mail.gmail.com\nThe fourth release candidate for v5.11 is out with normal shape. No big, no small, just average. This also includes NVIDIA ampere support.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-01-18 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1610432328,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610432328,"objectID":"5090c776b1c5fd6012952037a69b5625","permalink":"/post/lkml_news_v5.11-rc4/","publishdate":"2021-01-12T07:18:48+01:00","relpermalink":"/post/lkml_news_v5.11-rc4/","section":"post","summary":"[PATCH] mm: thp: introduce NR_PARTIAL_THPS (Bin Wang) https://lkml.kernel.org/r/20210112021208.1875-1-wangbin224@huawei.com\nBecause partially unmapped THP is not split, the memory stat becomes confusing. This patch add another counter called NR_PARTIAL_THPS in node_stat_item to reduce such confusions.\n[PATCH v2 00/70] RFC mm: Introducing the Maple Tree (Liam R. Howlett) https://lkml.kernel.org/r/20210112161240.2024684-1-Liam.Howlett@Oracle.com\nSecond RFC of the Maple tree. It is an RCU-safe B-tree that aims to be used as the vma tree with better scalability.\n[PATCH] mm/debug: Improve memcg debugging (Matthew Wilcox) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH] mm: vmscan: support complete shrinker reclaim (Sudarshan Rajagopalan) https://lkml.kernel.org/r/2d1f1dbb7e018ad02a9e7af36a8c86397a1598a7.1609892546.git.sudaraja@codeaurora.org\nThis patch makes caches can dropped even when those are smaller than the batch size.\n[PATCH 0/6] hugetlbfs: support free page reporting (Liang Li) https://lkml.kernel.org/r/20210106034623.GA1128@open-light-1.localdomain\nBecause hugetlbfs is using reserved memory, it\u0026rsquo;s not reported by the free page reporting feature. This patch makes it able to be reported.\nLinux 5.11-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wizR7--Ub-rasYx2S5XURkooCQ63Sat23BpvTAuN0scQA@mail.gmail.com\nThe prediction of Linus for this release was wrong. He thought this week would be calm as people are coming back from their vacations, and it was calm at the beginning of the week. However, it finished as a big release. Unless some weird issue comes out, there will be no extra week for v5.11.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-01-11 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1609914018,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609914018,"objectID":"a9de27e4da7a72bbd8cf0b175d954241","permalink":"/post/lkml_news_v5.11-rc3/","publishdate":"2021-01-06T07:20:18+01:00","relpermalink":"/post/lkml_news_v5.11-rc3/","section":"post","summary":"[PATCH] mm: vmscan: support complete shrinker reclaim (Sudarshan Rajagopalan) https://lkml.kernel.org/r/2d1f1dbb7e018ad02a9e7af36a8c86397a1598a7.1609892546.git.sudaraja@codeaurora.org\nThis patch makes caches can dropped even when those are smaller than the batch size.\n[PATCH 0/6] hugetlbfs: support free page reporting (Liang Li) https://lkml.kernel.org/r/20210106034623.GA1128@open-light-1.localdomain\nBecause hugetlbfs is using reserved memory, it\u0026rsquo;s not reported by the free page reporting feature. This patch makes it able to be reported.\nLinux 5.11-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wizR7--Ub-rasYx2S5XURkooCQ63Sat23BpvTAuN0scQA@mail.gmail.com\nThe prediction of Linus for this release was wrong.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"Linux 5.11-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whS+rzNMSsU6vRoLMzrm0JPN-OVg+BxhybMet3NpqpR-Q@mail.gmail.com\nDue to the holiday season, rc2 ends up fairly small. Maybe we will see rc8 for v5.11, but Torvalds just saying let\u0026rsquo;s watch more.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-01-04 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1609741240,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609741240,"objectID":"fad72ff7faa3c4f14a370de1ab6bafcb","permalink":"/post/lkml_news_v5.11-rc2/","publishdate":"2021-01-04T07:20:40+01:00","relpermalink":"/post/lkml_news_v5.11-rc2/","section":"post","summary":"Linux 5.11-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whS+rzNMSsU6vRoLMzrm0JPN-OVg+BxhybMet3NpqpR-Q@mail.gmail.com\nDue to the holiday season, rc2 ends up fairly small. Maybe we will see rc8 for v5.11, but Torvalds just saying let\u0026rsquo;s watch more.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2019-01-04 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.11-rc2","type":"post"},{"authors":[],"categories":["researches review"],"content":"I set watching at least one OSDI'20 presentation video per day during the long vacation as one of my plans.\n A large scale analysis of hundreds of in-memory cache clusters at Twitter https://www.youtube.com/watch?v=OQtMM5vdhlI\u0026amp;feature=emb_title\nThe authors traced and analyzed the workloads on the Twitter\u0026rsquo;s in-memory cache systems. To me, below findings were interesting.\n There are many write requests. Size of each object is not so big (median 200 bytes), so metadata, which sizes 64 bytes per each object, is a burden Size of each key is not small compared to the size of each value.  The trace data is available via github[1]. It\u0026rsquo;s 2.8TB for compressed version, and 14TB for uncompressed version.\n[1] https://github.com/twitter/cache-trace\nAIFM: High-Performance, Application-Integrated Far Memory https://www.youtube.com/watch?v=xHhaniGXTUg\u0026amp;feature=emb_title\nOS-level fast-network-based far memory approaches provide transparency to the application but wastes performance due to the semantic gap due to the fixed-size page abstraction and the kernel space time consumption. AIFM solves the semantic gap using new data structure abstraction and provides user space runtime that don\u0026rsquo;t need kernel space time consumption. As a result, the application is required to be modified, but the authors argue it\u0026rsquo;s only modest change. Compared to other state-of-the-art (FastSwap from EuroSys'20), it achieved 13x speedup.\nLinnOS: Predictability on Unpredictable Flash Storage with a Light Neural Network https://www.youtube.com/watch?v=yzv9lcjxhAg\u0026amp;feature=emb_title\nIt\u0026rsquo;s not easy to predict each I/O speed of modern fast storage devices, due to their complex internals like the caching, the wear-leveling and the garbage collection. One well-known solution is hedging. It prepare an array of SSDs, issue I/O to one of them, and if the response doesn\u0026rsquo;t made until a timeout, revoke the request and try with another SSD. The wait time limit bounds the latency. LinnOS uses an approach similar to the hedging, but it uses a neural network that can predict if each I/O to each SSD will be served fast or not. For this, the neural network receives current I/O queue depth and queue depths and latencies of last few I/Os as input. Then, it predicts if the latency will be only fast or slow. To mitigate with the effect from wrong predictions, it uses biased learning and adaptive hedging based on the prediction accuracy. The network is learned offline.\nDo OS abstractions make sense on FPGAs? https://www.youtube.com/watch?v=k-cp4U3JKug\u0026amp;feature=emb_title\nComputer systems embedding FPGA in addition to CPU, called heterogeneous computing systems, are widesparead nowadays. These systems typically have high operational complexity. Especially developing and deploying FPGA application is quite complicated. For the reason, some manufacturers provide some FPGA shells providing some of the OS abstractions. The authors developed a FPGA shell called Coyote, which provides full abstraction sets of the OS and experimented if it works well for the systems. The result was very positive.\nFast RDMA-based Ordered Key-Value Store using Remote Learned Cache https://www.youtube.com/watch?v=Qv-0YL_SII4\u0026amp;feature=emb_title\nBecause server-centric key-value store (KVS) performance bound to the server CPUs, RDMA-based approaches were proposed. Because one RTT is required for one RDMA, the approaches require many round trips and therefore doesn\u0026rsquo;t show high performance. Caching the index in client is one solution, but it makes huge client memory footage. The authors propose to use neural network as the index cache. They train neural network to receive key and provide logical address of the value for the key in server. The network retrained for dynamci updates and copyied to clients. Then, client use the nerual network, which is much smaller than the full index tree to know the address of the value and fetch it via the RDMA.\nA Simpler and Faster NIC Driver Model for Network Functions https://www.youtube.com/watch?v=zKJIY4vbBDA\u0026amp;feature=emb_title\nSoftware-defined network approach, which implements functionality of appliances like bridege, router, firewall is widespread. For better performance and flexibility, the software complexity has increased so that it\u0026rsquo;s hard to do formal verification of the network stacks. The authors argue that by sacrificing some of the fliexibility, it\u0026rsquo;s available to implement simple and fast network stack. They prove their idea with a new network driver model, tinynf. They implemented a driver for Intel 82599 based on the driver model with only 550 lines of code. It was able to finish formal verification 7x faster than a state-of-the-art driver. Also, it achieved 1.6x performance compared to the state-of-the-art.\nTheseus: an experiment in operating system structure and state management https://www.youtube.com/watch?v=i1pLDZKtlBI\nIn this paper, the authors present an OS called Theseus that designed for state spill problem. For this, they made it to composed with many tiny components called \u0026lsquo;cell\u0026rsquo;, and applied rust-like language level safe guaranteeness mechanisms in the OS level.\nSpecification and verification in the field: Applying formal methods to BPF just-in-time compilers in the Linux kernel https://www.youtube.com/watch?v=2V3ts5-W_9g\u0026amp;feature=emb_title\nBPF program is verified before run, but it runs after compiled via JIT, after the verification. Therefore, if there is a bug in the JIT, real problem occurs. The authors of this paper devloped a new BPF JIT for RISC-V with a JIT correctness specification framework, jitterbug. The changes made to the kernel are merged into the mainline kernel.\nStorage Systems are Distributed Systems (So Verify Them That Way!) https://www.youtube.com/watch?v=4s8EeXcu_8Y\u0026amp;feature=emb_title\nStorage systems have high complexity, so it\u0026rsquo;s hard to do the verification. The authors of this paper realized the architecture and charactersitics of the storage systems are similar to those of distributed systems, and applied the verification methodologies for distributed systems to the storage systems after making it more general. Based on this, they implemented a verifiable key-value storage, VeriSafeKV. The performance of it was similar to unverified DB systems.\nCaladan: Mitigating Interference at Microsecond Timescales https://www.youtube.com/watch?v=G-v3ndwixOI\u0026amp;feature=emb_title\nOn a system, multiple workloads that has different requirements co-scheduled. For example, some workloads only need best-effort resources while others require strict tail latency. Because the workloads share some hardware resources like LLC and memory bandwidth, it\u0026rsquo;s hard to fulfill all the requirements. Well know solution is resource partitioning. Because static partitioning could result in low resource utilization, dynamic partitioning solutions were previously proposed. However, the dynamic partitioning doesn\u0026rsquo;t provide microsecond granularity decision, while 100 microseconds is the marginal timewindow to guarantee the tail latency problem, according to the authors\u0026rsquo; arguments. The authors propose to use different interference signals and design the system to work in micro-second level.\nSemeru: A Memory-Disaggregated Managed Runtime https://www.youtube.com/watch?v=MFA3MmNDKaM\u0026amp;feature=emb_title\nConstructing system as distributed machines for different works such as CPU works and memory works are know ans resource-disaggregated architecture and gaining popularity. However, the architecture is usually written for native applications rather than GC-based applications. This paper introduces JVM runtime, Semeru, which is designed for resource-disaggregation architecture.\nPANIC: A High-Performance Programmable NIC for Multi-tenant Networks https://www.youtube.com/watch?v=EB6dK3L8Jzg\u0026amp;feature=emb_title\nMulti-tenant networks require generality, flexible chaining, isolation, and performance to programmable NIC. However, current programmable NICs doesn\u0026rsquo;t support those. Authors propose a new programmable NIC design for the requirements and introduce an implementation on FPGA, PANIC.\nServing DNNs like Clockwork: Performance Predictability from the Bottom Up https://www.youtube.com/watch?v=wHOpY_MY57Y\u0026amp;feature=emb_title\nNowadays, data center serves for many machine learning models for different users. Even though the latency of each inference is predictable because it has no conditional branches, the models serving system could result in unpredictable end-to-end latency. This paper proposes a new machine learning models serving system that designed do protect the latency.\nTeting Configuration Changes in Context to Prevent Production Failures https://www.youtube.com/watch?v=QrGKmp3ALKQ\u0026amp;feature=emb_title\nIn this paper, a new test framework called \u0026lsquo;ctest\u0026rsquo; is proposed for validation of configuration changes that can made in production environment. It\u0026rsquo;s similar to other test frameworks like Junit in its form.\n","date":1608413727,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608413727,"objectID":"b058fb33a47700876f1160c07c06686b","permalink":"/post/osdi2020_videos_review/","publishdate":"2020-12-19T22:35:27+01:00","relpermalink":"/post/osdi2020_videos_review/","section":"post","summary":"I set watching at least one OSDI'20 presentation video per day during the long vacation as one of my plans.\n A large scale analysis of hundreds of in-memory cache clusters at Twitter https://www.youtube.com/watch?v=OQtMM5vdhlI\u0026amp;feature=emb_title\nThe authors traced and analyzed the workloads on the Twitter\u0026rsquo;s in-memory cache systems. To me, below findings were interesting.\n There are many write requests. Size of each object is not so big (median 200 bytes), so metadata, which sizes 64 bytes per each object, is a burden Size of each key is not small compared to the size of each value.","tags":["osdi","osdi20","paper"],"title":"Watching OSDI 2020 presentation videos","type":"post"},{"authors":[],"categories":["lkml news"],"content":"incoming (Andrew Morton) https://lkml.kernel.org/r/20201214190237.a17b70ae14f129e2dca3d204@linux-foundation.org\nThe pull request for v5.11 from Andrew Morton. The mmap_lock tracepoint patchset series is included in here.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201215123253.954eca9a5ef4c0d52fd381fa@linux-foundation.org\nAnother pull request from Andrew Morton for memcg scalability improvement. This makes per-memcg lru lock.\n[PATCH 00/25] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20201216182335.27227-1-willy@infradead.org\nThis is the patchset for the page folios, which Matthew proposed a few days ago and discussed via zoom.\nDo we still need skip swapcache logic in do_swap_page() for SWP_SYNCHRONOUS_IO? (Huang Ying) https://lkml.kernel.org/r/87y2hxgpo7.fsf@yhuang-dev.intel.com\nA commit made swap cache logic for fast swap devices to be skipped, but a later commit uses the swap cache for workingset detection. Huang asks if the skipping is still necessary.\n[PATCH v10 00/11] Free some vmemmap pages of HugeTLB page (Muchun Song) https://lkml.kernel.org/r/20201217121303.13386-1-songmuchun@bytedance.com\nThis patchset saves memory by freeing some vmemmap pages for hugetlbpage. LWN also covers this: https://lwn.net/Articles/839737/\n[PATCH v4 00/10] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20201217185243.3288048-1-pasha.tatashin@soleen.com\n4th version of the patchset for making ZONE_MOVABLE movable.\n[RFC v2 PATCH 1/4] mm: make page reporing worker works better for low order page https://lkml.kernel.org/r/20201221162806.GA22524@open-light-1.localdomain\nThis commit makes the free page reporting to release the zone lock periodically, to avoid the free page reporting feature holds the lock too long, due to huge number of low-order pages that need to be reported.\n[RFC PATCH 0/3] add support for free hugepage reporting https://lkml.kernel.org/r/20201222074538.GA30029@open-light-1.localdomain\nThe free pages reporting feature reports only buddy pages, but the hugetlb pages are not buddy pages because those are managed in the reservation scheme. This RFC adds support for reporting of the hugetlb pages.\nLinux 5.11-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wg1+kf1AVzXA-RQX0zjM6t9J2Kay9xyuNqcFHWV-y5ZYw@mail.gmail.com\nAfter two weeks, merge window finished with Christmas and 5.11-rc1 released. Things worked well as expected. Most pull requests received to Torvalds in the first week, so that he could get the holiday week peaceful. The size of the rc1 is not so big, not so little, just as usual.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2020-12-28 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1608013940,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608013940,"objectID":"47f4b1b31e863c1f16e7d374cbf3c6b3","permalink":"/post/lkml_news_v5.11-rc1/","publishdate":"2020-12-15T07:32:20+01:00","relpermalink":"/post/lkml_news_v5.11-rc1/","section":"post","summary":"incoming (Andrew Morton) https://lkml.kernel.org/r/20201214190237.a17b70ae14f129e2dca3d204@linux-foundation.org\nThe pull request for v5.11 from Andrew Morton. The mmap_lock tracepoint patchset series is included in here.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201215123253.954eca9a5ef4c0d52fd381fa@linux-foundation.org\nAnother pull request from Andrew Morton for memcg scalability improvement. This makes per-memcg lru lock.\n[PATCH 00/25] Page folios (Matthew Wilcox) https://lkml.kernel.org/r/20201216182335.27227-1-willy@infradead.org\nThis is the patchset for the page folios, which Matthew proposed a few days ago and discussed via zoom.\nDo we still need skip swapcache logic in do_swap_page() for SWP_SYNCHRONOUS_IO?","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC V2 00/37] Enhance memory utilization with DMEMFS (Yuley Zhang) https://lkml.kernel.org/r/cover.1607332046.git.yuleixzhang@tencent.com\nThis patchset aims to remove the \u0026lsquo;struct page\u0026rsquo; from user-sepcified region of memory and use a file system called \u0026lsquo;dmemfs\u0026rsquo; to minimize the memory region dedicated for \u0026lsquo;struct page\u0026rsquo;s.\n[PATCH] mm: don\u0026rsquo;t SetPageWorkingset unconditionally during swapin (Yu Zhao) https://lkml.kernel.org/r/20201209012400.1771150-1-yuzhao@google.com\nUnconditional \u0026lsquo;SetPageWorkingset\u0026rsquo; miscategorizes read-ahead pages or pages that never belong to the working set as working set because it\u0026rsquo;s called unconditionally. This patch simply remove the unconditional call.\n[PATCH v2 0/8] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20201210004335.64634-1-pasha.tatashin@soleen.com\nThis pathset makes pages in \u0026lsquo;ZONE_MOVABLE\u0026rsquo; really movable by forcing new allocations during page pinning to omit the zone and migrate pages away when pinning.\n[PATCH 00/28] RFC mm: Introducing the Maple Tree (Liam R. Howlett) https://lkml.kernel.org/r/20201210170402.3468568-1-Liam.Howlett@Oracle.com\nMaple tree is a range based B-tree designed to use modern processor cache efficiently. It\u0026rsquo;s design presented in several venues before, and the RFC code is finally available. It initially designed for replacement of vma tree for reduction of the \u0026lsquo;mmap_sem\u0026rsquo; contention. This patchset also does some of the replacement and shows impressive performance with benchmarks.\nZoom call about Page Folios tomorrow (Matthew Wilcox) https://lkml.kernel.org/r/20201210210519.GC7338@casper.infradead.org\nMatthew wants to have a zoom call to share his idea called Page Folios. He decided to use Zoom call because in-person conference is not there anywhere for now.\nLinux 5.10 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whCKhxNyKn1Arut8xUDKTwp3fWcCj_jbL5dbzkUmo45gQ@mail.gmail.com\nThe v5.10, the next LTS release is out now. The final week for the release was calm enough to convince Linus. This also means the merge window for v5.11 opened. Because of the timing with the holiday season, Torvalds says this merge window will be more strict than last one. All pull requests are strictly required to be ready before the merge window open.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-12-07 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1607407859,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607407859,"objectID":"7cec2e8ca883c08f995a1072fe147530","permalink":"/post/lkml_news_v5.10/","publishdate":"2020-12-08T07:10:59+01:00","relpermalink":"/post/lkml_news_v5.10/","section":"post","summary":"[RFC V2 00/37] Enhance memory utilization with DMEMFS (Yuley Zhang) https://lkml.kernel.org/r/cover.1607332046.git.yuleixzhang@tencent.com\nThis patchset aims to remove the \u0026lsquo;struct page\u0026rsquo; from user-sepcified region of memory and use a file system called \u0026lsquo;dmemfs\u0026rsquo; to minimize the memory region dedicated for \u0026lsquo;struct page\u0026rsquo;s.\n[PATCH] mm: don\u0026rsquo;t SetPageWorkingset unconditionally during swapin (Yu Zhao) https://lkml.kernel.org/r/20201209012400.1771150-1-yuzhao@google.com\nUnconditional \u0026lsquo;SetPageWorkingset\u0026rsquo; miscategorizes read-ahead pages or pages that never belong to the working set as working set because it\u0026rsquo;s called unconditionally.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH] mm: mmap_lock: fix use-after-free race and css ref leak in tracepoints (Axel Rasmussen) https://lkml.kernel.org/r/20201130233504.3725241-1-axelrasmussen@google.com\nThis patch fixes a use-after-free bug that reported by syzbot.\n[PATCH 0/6] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20201202052330.474592-1-pasha.tatashin@soleen.com\nPinned pages in ZONE_MOVABLE is a wellknown problem. This patchset fixes the issue by forcing pinning new page to allocated from a zone other than ZONE_MOVABLE and migrating out existing pages from the zone during pinning.\n[LSFMMBPF 2021] A status update (Josef Bacik) https://lkml.kernel.org/r/fd5264ac-c84d-e1d4-01e2-62b9c05af892@toxicpanda.com\nThe plan is not fixed yet, but they are trying to do LSFMMBPF 2021 as an in-person conference in second half of 2021. More detail will be shared again. Hope the pandemic to be finished soon so that we can redo the in-person conference.\nLinux 5.10-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgtCzNv7ghB=1VK1fYe82GwiS8xdaXTDqcVzQKn4QfrXw@mail.gmail.com\nThe rc7 is quite normal. Linus seems convincing. v5.10 will be released next week, unless something weird happens!\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-12-07 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1606889770,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606889770,"objectID":"d02589ab21e1031bed9072118655a961","permalink":"/post/lkml_news_v5.10-rc7/","publishdate":"2020-12-02T07:16:10+01:00","relpermalink":"/post/lkml_news_v5.10-rc7/","section":"post","summary":"[PATCH] mm: mmap_lock: fix use-after-free race and css ref leak in tracepoints (Axel Rasmussen) https://lkml.kernel.org/r/20201130233504.3725241-1-axelrasmussen@google.com\nThis patch fixes a use-after-free bug that reported by syzbot.\n[PATCH 0/6] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin) https://lkml.kernel.org/r/20201202052330.474592-1-pasha.tatashin@soleen.com\nPinned pages in ZONE_MOVABLE is a wellknown problem. This patchset fixes the issue by forcing pinning new page to allocated from a zone other than ZONE_MOVABLE and migrating out existing pages from the zone during pinning.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2] mm: memcontrol: account pagetables per node (Shakeel Butt) https://lkml.kernel.org/r/20201123161425.341314-1-shakeelb@google.com\nThis commit allows user to account memory size used for page tables per node.\n[PATCH 0/2] userspace memory reaping using process_madvise (Suren Baghdasaryan) https://lkml.kernel.org/r/20201124053943.1684874-1-surenb@google.com\nThis commit allows user-space driven OOM reaping using process_madvise(MADV_DONTNEED).\n[PATCH -V6 0/3] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201126053219.234793-1-ying.huang@intel.com\nThe 6th version for autonuma migration among multiple bound nodes. In this version, more benchmark data and example is added.\nLinux 5.10-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgSJRZPhfZ4QZhpb78uxRHwO3XLGQFJ5=+5rikOBgQ9rA@mail.gmail.com\nFortunately, it becomes calming. Torvalds says he surprised by sudden increase of the number of pull requests in last Friday, but things are normal overall. So we could expect the v5.10 to be released in the supposed schedule.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-11-30 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1606200100,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606200100,"objectID":"fbf4f67981dc1d7706c23efa1d00ad4e","permalink":"/post/lkml_news_v5.10-rc6/","publishdate":"2020-11-24T07:41:40+01:00","relpermalink":"/post/lkml_news_v5.10-rc6/","section":"post","summary":"[PATCH v2] mm: memcontrol: account pagetables per node (Shakeel Butt) https://lkml.kernel.org/r/20201123161425.341314-1-shakeelb@google.com\nThis commit allows user to account memory size used for page tables per node.\n[PATCH 0/2] userspace memory reaping using process_madvise (Suren Baghdasaryan) https://lkml.kernel.org/r/20201124053943.1684874-1-surenb@google.com\nThis commit allows user-space driven OOM reaping using process_madvise(MADV_DONTNEED).\n[PATCH -V6 0/3] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201126053219.234793-1-ying.huang@intel.com\nThe 6th version for autonuma migration among multiple bound nodes. In this version, more benchmark data and example is added.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v9 0/9] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20201117162932.13649-1-rppt@kernel.org\nThe 9th version of the memfd_secret patchset.\n[patch V4 0/8] mm/highmem: Preemptible variant of kmap_atomic \u0026amp; friends (Thomas Gleixner) https://lkml.kernel.org/r/20201118194838.753436396@linutronix.de\nAs the name suggests, this patchset allow the code using kmap_atomic and similar things to be preemptible. This incur some overhead to highmem, but Thomas claims highmem was always slow.\n[PATCH 0/7] Split huge pages to any lower order pages and selftests. (Zi Yan) The patchset adds support for any order pages that could be used as a pagecache THP after Matthew\u0026rsquo;s work.\nLinux 5.10-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiYHcVOuZo8LNn__OgqY_ePW3BSPW8FxZbfChrT8SHnuw@mail.gmail.com\nThis is the biggest rc5 in the 5.x series. The changes looks normal to Linus, but the rc5 releases are normally supposed to start calmdown and shrink. Linus also note that he hope things to calm down. If not, the 5.10 release might come out in the holiday season.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-11-23 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1605685566,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605685566,"objectID":"1d1aa37f96d410b361ac2f3ca54a2537","permalink":"/post/lkml_news_v5.10-rc5/","publishdate":"2020-11-18T08:46:06+01:00","relpermalink":"/post/lkml_news_v5.10-rc5/","section":"post","summary":"[PATCH v9 0/9] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20201117162932.13649-1-rppt@kernel.org\nThe 9th version of the memfd_secret patchset.\n[patch V4 0/8] mm/highmem: Preemptible variant of kmap_atomic \u0026amp; friends (Thomas Gleixner) https://lkml.kernel.org/r/20201118194838.753436396@linutronix.de\nAs the name suggests, this patchset allow the code using kmap_atomic and similar things to be preemptible. This incur some overhead to highmem, but Thomas claims highmem was always slow.\n[PATCH 0/7] Split huge pages to any lower order pages and selftests.","tags":["linux","kernel","lkml","news"],"title":"Lkml_news_v5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH -V3 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201110055951.85085-1-ying.huang@intel.com\nThis patchset makes AutoNUMA\u0026rsquo;s cross-socket memory access optimization possible even if the application\u0026rsquo;s memory is bound to multiple NUMA nodes.\n[PATCH] kfence: Avoid stalling work queue task without allocations (Marco Elver) https://lkml.kernel.org/r/20201110135320.3309507-1-elver@google.com\nThis commit makes the toggle allocation gate of kfence to have 1 second timeout, to be prepared for allocation stallings.\n[RFC PATCH 0/6] Split huge pages to any lower order pages. (Zi Yan) https://lkml.kernel.org/r/20201111204008.21332-1-zi.yan@sent.com\nNow pagecache can handle any size of THP, however the split_huge_page() splits a THP to only order-0 pages. For the reason, this patchset supports the function to be able to split a THP into any size smaller pages.\n[PATCH v4 00/16] Overhaul multi-page lookups for THP (Matthew Wilcox) https://lkml.kernel.org/r/20201112212641.27837-1-willy@infradead.org\nThis is a preparation of next changes Matthew will post. It first makes several page cache iteration APIs to only return head pages.\nAre THPs the right model for the pagecache? (Matthew Wilcox) https://lkml.kernel.org/r/20201113044652.GD17076@casper.infradead.org\nTHP is for architectures supporting large TLB entries. However, the point of enabling THP for page cache is only reducing the software works, so the definition doesn\u0026rsquo;t need to be true in there. Matthew suggests to use another model for the case and lists concerns about it.\nLinux 5.10-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjFfAktnadOPb_iV5nKh=V5Am1sG-gciYveswRtuEkrLQ@mail.gmail.com\nIt\u0026rsquo;s already rc4. The next long term support kernel, v5.10, will be released about 4-5 weeks later. Now Linus want the things to start calming down, but it wasn\u0026rsquo;t so much. That said, he says it\u0026rsquo;s not really worrisome but looks good.\n","date":1604988970,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604988970,"objectID":"7965beafe5ddc32664d7c5511d08f27b","permalink":"/post/lkml_news_v5.10-rc4/","publishdate":"2020-11-10T07:16:10+01:00","relpermalink":"/post/lkml_news_v5.10-rc4/","section":"post","summary":"[PATCH -V3 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201110055951.85085-1-ying.huang@intel.com\nThis patchset makes AutoNUMA\u0026rsquo;s cross-socket memory access optimization possible even if the application\u0026rsquo;s memory is bound to multiple NUMA nodes.\n[PATCH] kfence: Avoid stalling work queue task without allocations (Marco Elver) https://lkml.kernel.org/r/20201110135320.3309507-1-elver@google.com\nThis commit makes the toggle allocation gate of kfence to have 1 second timeout, to be prepared for allocation stallings.\n[RFC PATCH 0/6] Split huge pages to any lower order pages.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v7 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201103175841.3495947-1-elver@google.com\nThe 7th version of KFENCE. Now the authors say they believe this is ready to be included in the mm tree. And, it has now merged in the -mm tree.\n[PATCH] page_frag: Recover from memory pressure (Matthew Wilcox) https://lkml.kernel.org/r/20201105042140.5253-1-willy@infradead.org\nAfter an extreme memory pressure, some non-essential packets can be dropped because the \u0026lsquo;page_frag\u0026rsquo; allocator do the drops to recover from the memory pressure but it doesn\u0026rsquo;t change back the behavior even after the recovery. This commit fixes this.\n[PATCH v6 0/1] mmap_lock: add tracepoints around lock acquisition (Axel Rasmussen) https://lkml.kernel.org/r/20201105211739.568279-1-axelrasmussen@google.com\nSixth version of adding tracepoints for mmap_lock acquisition. This will be helpful for the mmap locking contention understanding.\nLinux 5.10-rc3 https://lkml.kernel.org/r/CAHk-=wiZtabGDAxTbxaAkxf7QjuJSK7c7mcZXFkrYjRfXmSnmQ@mail.gmail.com\nNormal rc3 released. There is no particular thing in terms of the size and distribution of changes.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-11-09 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1604470088,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604470088,"objectID":"18279a8c6a79c96af0945ec0d83b76ab","permalink":"/post/lkml_news_v5.10-rc3/","publishdate":"2020-11-04T07:08:08+01:00","relpermalink":"/post/lkml_news_v5.10-rc3/","section":"post","summary":"[PATCH v7 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201103175841.3495947-1-elver@google.com\nThe 7th version of KFENCE. Now the authors say they believe this is ready to be included in the mm tree. And, it has now merged in the -mm tree.\n[PATCH] page_frag: Recover from memory pressure (Matthew Wilcox) https://lkml.kernel.org/r/20201105042140.5253-1-willy@infradead.org\nAfter an extreme memory pressure, some non-essential packets can be dropped because the \u0026lsquo;page_frag\u0026rsquo; allocator do the drops to recover from the memory pressure but it doesn\u0026rsquo;t change back the behavior even after the recovery.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/9] More THP fixes (Matthew Wilcox) https://lkml.kernel.org/r/20201026183136.10404-1-willy@infradead.org\nSeveral THP fixes.\n[PATCH v5 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201027141606.426816-1-elver@google.com\nThe fifth version of the KFENCE.\n[PATCH -V2 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201028023411.15045-1-ying.huang@intel.com\nThis patch is for multiple NUMA nodes bounded application\u0026rsquo;s AutoNUMA balancing.\n[PATCH v6 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201029131649.182037-1-elver@google.com\nThe sixth version of KFENCE patchset came out quite quickly than before. Jann says now there are only minor issues.\nLinux 5.10-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiGc62spBHh+i1yH9sVLpCqZBznUF8QdO7H5772qO1xqQ@mail.gmail.com\nAs usual, the rc2 released. It is a little big bigger than usual, and a lot of the diffstat is due to removal of MIC drivers for some hardware and ABI documents formatting for easy parsing. These made Torvalds feels a little bit odd about this release.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-11-02 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1603779048,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603779048,"objectID":"f36963a2136c5c327eb5643a97eeb6e9","permalink":"/post/lkml_news_v5.10-rc2/","publishdate":"2020-10-27T07:10:48+01:00","relpermalink":"/post/lkml_news_v5.10-rc2/","section":"post","summary":"[PATCH 0/9] More THP fixes (Matthew Wilcox) https://lkml.kernel.org/r/20201026183136.10404-1-willy@infradead.org\nSeveral THP fixes.\n[PATCH v5 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201027141606.426816-1-elver@google.com\nThe fifth version of the KFENCE.\n[PATCH -V2 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying) https://lkml.kernel.org/r/20201028023411.15045-1-ying.huang@intel.com\nThis patch is for multiple NUMA nodes bounded application\u0026rsquo;s AutoNUMA balancing.\n[PATCH v6 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20201029131649.182037-1-elver@google.com","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH] mm: Make allocator take care of memoryless numa node (Xianting Tian) https://lkml.kernel.org/r/20201012082739.15661-1-tian.xianting@h3c.com\nCPUs in powerpc like architecture could have no local memory. As the kernel code doesn\u0026rsquo;t care about it, this commit makes it to handle the case.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201013164658.3bfd96cc224d8923e66a9f4e@linux-foundation.org\nThis is the pull request from Andrew Morton, the mm maintainer, for v5.10.\n[PATCH v4 0/5] Speed up mremap on large regions (Kalesh Singh) https://lkml.kernel.org/r/20201014005320.2233162-1-kaleshsingh@google.com)\nRepost fo the patch series. Change from v3 is only adding Kirill\u0026rsquo;s Acked-by\u0026rsquo;s.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201015194043.84cda0c1d6ca2a6847f2384a@linux-foundation.org\nAnother pull request from Andrew Morton. Changes for THP, which removes the assumption on THP size seems interesting.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201017161314.88890b87fae7446ccc13c902@linux-foundation.org\nYet another pull request from Andres Morton. Minchan Kim\u0026rsquo;s process_madvise() patchset is in here.\nSplitting a THP beyond EOF (Matthew Wilcox) https://lkml.kernel.org/r/20201020014357.GW20115@casper.infradead.org\nMatthew shares a weird corner case that THP is used beyond the end of file and his idea on the solution of this problem.\n[PATCH] mm: don\u0026rsquo;t wake kswapd prematurely when watermark boosting is disabled (Johannes Weiner) https://lkml.kernel.org/r/20201020175833.397286-1-hannes@cmpxchg.org\nIn case of multiple NUMA nodes systems, the watermark boosting related code allow kswapd to wake up if one node\u0026rsquo;s memory is full but other nodes have some free memory. This is for fragmentation handling, but this frequent kswapd work makes some workloads slow. This commit avoids such unnecessary kswapd wakeup.\n[PATCH v4 0/1] Add tracepoints around mmap_lock acquisition (Axel Rasmussen) https://lkml.kernel.org/r/20201020184746.300555-1-axelrasmussen@google.com\nFourth version of the patch adding tracepoints for mmap_lock acquisition. This will help understanding and solving the mmap locking contention problem.\n[PATCH 0/2] block layer filter and block device snapshot module (Sergei Shtepa) https://lkml.kernel.org/r/1603271049-20681-1-git-send-email-sergei.shtepa@veeam.com\nThis patchset introduce blk-filter, which allows to intercept BIO requests, and blk-snap, which snapshots block device for backup.\nLinux 5.10-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whcRFYSm0jj3Xh3xCyBaxCHA1ZMNO0h_gZso_WZFDUtiQ@mail.gmail.com\nTwo weeks of the merge window passed, and the 5.10-rc1 has released as a result. Torvalds says this is bigger than he expected. This could be a general upward trend, just a fluke, or due to delayed 5.9 release, Torvalds says. He also picks up the set_fs() removal change from Christoph as most interesting change in this release.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2020-10-26 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1602567250,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602567250,"objectID":"3cee0c375332186d53374e34bc301874","permalink":"/post/lkml_news_v5.10-rc1/","publishdate":"2020-10-13T07:34:10+02:00","relpermalink":"/post/lkml_news_v5.10-rc1/","section":"post","summary":"[PATCH] mm: Make allocator take care of memoryless numa node (Xianting Tian) https://lkml.kernel.org/r/20201012082739.15661-1-tian.xianting@h3c.com\nCPUs in powerpc like architecture could have no local memory. As the kernel code doesn\u0026rsquo;t care about it, this commit makes it to handle the case.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20201013164658.3bfd96cc224d8923e66a9f4e@linux-foundation.org\nThis is the pull request from Andrew Morton, the mm maintainer, for v5.10.\n[PATCH v4 0/5] Speed up mremap on large regions (Kalesh Singh) https://lkml.kernel.org/r/20201014005320.2233162-1-kaleshsingh@google.com)\nRepost fo the patch series.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.10-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH RFC v2] Opportunistic memory reclaim (Andrea Righi) https://lkml.kernel.org/r/20201005081313.732745-1-andrea.righi@canonical.com\nThis patch introduces new file under memcg, \u0026lsquo;memory.swap.reclaim\u0026rsquo; that allow users to incur Reclaim even before the memory pressure happens, to help reducing system memory footprint and speed up hibernation/VM migration time, etc.\n[PATCH v2 0/2] Add tracepoints around mmap_lock acquisition (Axel Rasmussen) https://lkml.kernel.org/r/20201007184403.1902111-1-axelrasmussen@google.com\nThis patchset adds tracepoints for mmap_lock to use that for analysis of the contention.\n[RFC][PATCH 0/9] [v4][RESEND] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.kernel.org/r/20201007161736.ACC6E387@viggo.jf.intel.com\nThis commit makes the tiered-memory operation to do migration instead of reclamation.\nLinux 5.9 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wi-u86++np80GQvgDuARdt9xpBNho6SjHLmYgm8jibGag@mail.gmail.com\nAs expected, Linux v5.9 released. Torvalds says the changes in last week was a little bit more that he hoped, but there was no scary change. So, the merge window for v5.10 has open!\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-10-12 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1601961169,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601961169,"objectID":"333b5b9dca3eb02870b3cfd177bf6b54","permalink":"/post/lkml_news_v5.9/","publishdate":"2020-10-06T07:12:49+02:00","relpermalink":"/post/lkml_news_v5.9/","section":"post","summary":"[PATCH RFC v2] Opportunistic memory reclaim (Andrea Righi) https://lkml.kernel.org/r/20201005081313.732745-1-andrea.righi@canonical.com\nThis patch introduces new file under memcg, \u0026lsquo;memory.swap.reclaim\u0026rsquo; that allow users to incur Reclaim even before the memory pressure happens, to help reducing system memory footprint and speed up hibernation/VM migration time, etc.\n[PATCH v2 0/2] Add tracepoints around mmap_lock acquisition (Axel Rasmussen) https://lkml.kernel.org/r/20201007184403.1902111-1-axelrasmussen@google.com\nThis patchset adds tracepoints for mmap_lock to use that for analysis of the contention.\n[RFC][PATCH 0/9] [v4][RESEND] Migrate Pages in lieu of discard (Dave Hansen) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH v2 00/30] 1GB PUD THP support on x86_64 (Zi Yan) https://lkml.kernel.org/r/20200928175428.4110504-1-zi.yan@sent.com\nThis patch adds support of 1GB THP using PUD.\n[PATCH v4 00/11] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200929133814.2834621-1-elver@google.com\nThe 4th version of the KFENCE patchset.\n[PATCH 0/5] Speed up mremap on large regions (Kalesh Singh) https://lkml.kernel.org/r/20200930222130.4175584-1-kaleshsingh@google.com\nThis patchset optimizes mremap() by allowing memory regions to be able to mapped at PMD/PUD.\n[PATCH] selftests/vm: 10x speedup for hmm-tests https://lkml.kernel.org/r/20201003011721.44238-1-jhubbard@nvidia.com\nThis patch reduces number of iteration of hmm-tests so it can run faster.\nLinux v5.9-rc8 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj-H5BYCU_kKiOK=B9sN3BtRzL4pnne2AJPyf54nQ+d=w@mail.gmail.com\nAs expected, rc8 instead of the v5.9 is released. Torvalds is still waiting some fixes from network part, but he also says it was really calm last week and therefore he think this is the right time for the last week before the v5.9 release.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-10-05 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc8 releases in the last two years.\n","date":1601356950,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601356950,"objectID":"74b97768446866bd3091fb107cbc844d","permalink":"/post/lkml_news_v5.9-rc8/","publishdate":"2020-09-29T07:22:30+02:00","relpermalink":"/post/lkml_news_v5.9-rc8/","section":"post","summary":"[RFC PATCH v2 00/30] 1GB PUD THP support on x86_64 (Zi Yan) https://lkml.kernel.org/r/20200928175428.4110504-1-zi.yan@sent.com\nThis patch adds support of 1GB THP using PUD.\n[PATCH v4 00/11] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200929133814.2834621-1-elver@google.com\nThe 4th version of the KFENCE patchset.\n[PATCH 0/5] Speed up mremap on large regions (Kalesh Singh) https://lkml.kernel.org/r/20200930222130.4175584-1-kaleshsingh@google.com\nThis patchset optimizes mremap() by allowing memory regions to be able to mapped at PMD/PUD.\n[PATCH] selftests/vm: 10x speedup for hmm-tests https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc8","type":"post"},{"authors":[],"categories":[],"content":"DAMON contains a number of tests based on the kselftest and kunit in its patchset itself. As it is preferred to contain only tests having short runtime in kernel tree, I organized time consuming tests in a package and used it in my company only. Tests could be used as a good document and essential for contributors. For the reason, I promised I will make it open source in the last kernel summit talk (https://linuxplumbersconf.org/event/7/contributions/659/).\nYesterday, I finally publicly released the package under GPL v2. Now you can use the package to understand the DAMON interface and test it on your machine by yourself.\n","date":1601102832,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601102832,"objectID":"1b704e88f322a62e4fa8cea24cf2723e","permalink":"/post/damon-tests_open_sourced/","publishdate":"2020-09-26T08:47:12+02:00","relpermalink":"/post/damon-tests_open_sourced/","section":"post","summary":"DAMON contains a number of tests based on the kselftest and kunit in its patchset itself. As it is preferred to contain only tests having short runtime in kernel tree, I organized time consuming tests in a package and used it in my company only. Tests could be used as a good document and essential for contributors. For the reason, I promised I will make it open source in the last kernel summit talk (https://linuxplumbersconf.","tags":["damon","linux","kernel","mm"],"title":"Tests package for DAMON is released under GPL v2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v3 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200921132611.1700350-1-elver@google.com\nThe third version of KFENCE patchset is uploaded.\nMachine lockups on extreme memory pressure (Shakeel Butt) https://lkml.kernel.org/r/CALvZod4FWLsV9byrKQojeus7tMDhHjQHFF5J_JpNsyB0HkaERA@mail.gmail.com\nShakeel reports a machine lockup due to extreme memory pressure. It\u0026rsquo;s locked up on memcg\u0026rsquo;s vmpressure sr_lock, which is irq-unsafe. And the lockup made in IRQ. He proposes a solution simply changing the lock with irq-safe one, but he also admits it\u0026rsquo;s not a maintainable solution. Therefore, he asks if others has similar problems and if so, what was the solution.\n[PATCH v6 0/6] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20200924132904.1391-1-rppt@kernel.org\nSixth version of the memfd_secret patchset. It aims to provide \u0026ldquo;secret\u0026rdquo; mappings, mostly for the guests.\nLinux 5.9-rc7 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj1SJmva5pQxT-XZkMREOa+iJuy0K8-zua0K=vF-Jz7zw@mail.gmail.com\nAll of the v5.9 gating issues including the VM bugs are finally fixed. However, because the fixes came in fairly late, Torvalds says he would release rc8 next week, instead of the v5.9.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-09-28 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc7 releases in the last two years.\n","date":1600751252,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600751252,"objectID":"291aeda1227a4a15a7b1a897f97c2750","permalink":"/post/lkml_news_v5.9-rc7/","publishdate":"2020-09-22T07:07:32+02:00","relpermalink":"/post/lkml_news_v5.9-rc7/","section":"post","summary":"[PATCH v3 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200921132611.1700350-1-elver@google.com\nThe third version of KFENCE patchset is uploaded.\nMachine lockups on extreme memory pressure (Shakeel Butt) https://lkml.kernel.org/r/CALvZod4FWLsV9byrKQojeus7tMDhHjQHFF5J_JpNsyB0HkaERA@mail.gmail.com\nShakeel reports a machine lockup due to extreme memory pressure. It\u0026rsquo;s locked up on memcg\u0026rsquo;s vmpressure sr_lock, which is irq-unsafe. And the lockup made in IRQ. He proposes a solution simply changing the lock with irq-safe one, but he also admits it\u0026rsquo;s not a maintainable solution.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v14 0/5] KASAN-KUnit Integration (David Gow) https://lkml.kernel.org/r/20200915035828.570483-1-davidgow@google.com\nThe 14th patchset for the KASAN and KUnit integration. From the v13, compile warnings in test_kasan_module fixed.\n[PATCH v2 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200915132046.3332537-1-elver@google.com\nThe second version of the KFENCE posted.\n[PATCH 1/2] fs: Add a filesystem flag for THPs (Matthew Wilcox) https://lkml.kernel.org/r/20200916032717.22917-1-willy@infradead.org\nThis patchset caches whether the backing filesystem support THP or not in an address space flags, so that the page cache can determine if it can send THP to the backing filesystem or not.\n[PATCH] mmap_lock: add tracepoints around lock acquisition (Axel Rasmussen) https://lkml.kernel.org/r/20200917181347.1359365-1-axelrasmussen@google.com\nThis patchset adds tracepoints in the mmap_lock(), for debugging of the lock contentions.\nLinux 5.9-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjSWKpiNbcMpzQ9fBUA5s11sU-STLztzQkHhCHtYvLP5A@mail.gmail.com\nLast week was again normally calm enough for rc6. One thing that Torvalds mentions is the removal of fbcon and vgacon. Those were removed by Torvalds, mainly because the parts has raised a few of security bugs but not actively maintained now. Torvalds told he will resurrect it only after people complain and some maintainers come up.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-09-21 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc6 releases in the last two years.\n","date":1600146220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600146220,"objectID":"ef36c15e807b573ae515fc040a2092f4","permalink":"/post/lkml_news_v5.9-rc6/","publishdate":"2020-09-15T07:03:40+02:00","relpermalink":"/post/lkml_news_v5.9-rc6/","section":"post","summary":"[PATCH v14 0/5] KASAN-KUnit Integration (David Gow) https://lkml.kernel.org/r/20200915035828.570483-1-davidgow@google.com\nThe 14th patchset for the KASAN and KUnit integration. From the v13, compile warnings in test_kasan_module fixed.\n[PATCH v2 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200915132046.3332537-1-elver@google.com\nThe second version of the KFENCE posted.\n[PATCH 1/2] fs: Add a filesystem flag for THPs (Matthew Wilcox) https://lkml.kernel.org/r/20200916032717.22917-1-willy@infradead.org\nThis patchset caches whether the backing filesystem support THP or not in an address space flags, so that the page cache can determine if it can send THP to the backing filesystem or not.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH RFC 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200907134055.2878499-1-elver@google.com\nThis patchset introduces another kernel use-after-free detection infrastructure, called Kernel Electric-Fence (KFENCE). Unlike KASAN, this trades the performance for precision and as a result it incurs near zero performance overhead so that it can be enabled in the production.\n[PATCH 00/11] Remove assumptions of THP size (Matthew Wilcox) https://lkml.kernel.org/r/20200908195539.25896-1-willy@infradead.org\nMatthew is working for variable sized THP. For start of the work, this patchset changes the assumption that THP will be PMD size by introducing thp_nr_pages() and let the other VM code to use it.\n[PATCH] memcg: introduce per-memcg reclaim interface (Shakeel Butt) https://lkml.kernel.org/r/20200909215752.1725525-1-shakeelb@google.com\nSometimes the workload is mixed with latency sensitive ones and latency tolerative ones. The kernel does not have a way to distinguish those. It\u0026rsquo;s rather well known to the users. Therefore, this patchset allow the userspace to trigger reclaim specific memory cgroup.\n[PATCH v13 0/5] KASAN-KUnit Integration (David Gow) https://lkml.kernel.org/r/20200910070331.3358048-1-davidgow@google.com\n13th version of the KASAN-KUnit integration patchset.\nWays to deprecate /sys/devices/system/memory/memoryX/phys_device ? (David Hildenbrand) https://lkml.kernel.org/r/21852ccb-bd06-9281-7c8e-485ec02f2883@redhat.com\nIn this mail, David introduces how phys_device file has added in the kernel, updated, and finally been not useful at all but only makes concern in backward compatibility with some user space tools. He asks what is the better intermediate step towards the complete removal of the interface. Just making it return \u0026lsquo;0\u0026rsquo; always, or making it supported on the backward compatibility concerning arch, s390x, only.\nmm: fix memory to node bad links in sysfs (Laurent Dufour) https://lkml.kernel.org/r/20200911134831.53258-1-ldufour@linux.ibm.com\nThe firmware could expose memory layout that some region are interleaved in multiple NUMA nodes. Then, the memory blocks wrongly assigned to the multiple nodes in sysfs. This causes BUG_ON() when the block is hot-unplugged and the hot-plugged again, due to the sysfs inconsistency detection.\nThis patchset fixes the problem.\nLinux 5.9-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjLVdzdX09kS324Q=GoRn0uPCnr-sovqVCdJcUxVdkJCQ@mail.gmail.com\nTorvalds sees the gray world due to the wildfires but he also sees the release is quite normal. Just as normal as usual rc5.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1599541969,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599541969,"objectID":"0e438500dbd78cb2debc5fdead8b62ea","permalink":"/post/lkml_news_v5.9-rc5/","publishdate":"2020-09-08T07:12:49+02:00","relpermalink":"/post/lkml_news_v5.9-rc5/","section":"post","summary":"[PATCH RFC 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver) https://lkml.kernel.org/r/20200907134055.2878499-1-elver@google.com\nThis patchset introduces another kernel use-after-free detection infrastructure, called Kernel Electric-Fence (KFENCE). Unlike KASAN, this trades the performance for precision and as a result it incurs near zero performance overhead so that it can be enabled in the production.\n[PATCH 00/11] Remove assumptions of THP size (Matthew Wilcox) https://lkml.kernel.org/r/20200908195539.25896-1-willy@infradead.org\nMatthew is working for variable sized THP. For start of the work, this patchset changes the assumption that THP will be PMD size by introducing thp_nr_pages() and let the other VM code to use it.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v9 0/3] introduce memory hinting API for external process (Minchan Kim) https://lkml.kernel.org/r/20200901000633.1920247-1-minchan@kernel.org\nAfter the rejection, this patchset posted again. Linus\u0026rsquo;s opinion about dropping the task_struct to do_madvise and Christian\u0026rsquo;s comment regarding compat syscall entry has resolved.\nAnd, this patchset merged in the \u0026lsquo;-mm\u0026rsquo; tree again. Hopefully it will be merged in mainline by 5.10!\n[PATCH v6 0/3] Anonymous VMA naming patches (Sumit Semwal) https://lkml.kernel.org/r/20200901091901.19779-1-sumit.semwal@linaro.org\nThis is reposting of old patchset which Colin Cross sent before. Sumit Semwal repost this mainly due to its necessary for Android on mainline kenrnel.\n[RFC PATCH 00/16] 1GB THP support on x86_64 (Zi Yan) https://lkml.kernel.org/r/20200902180628.4052244-1-zi.yan@sent.com\nThis patchset makes 1GB THP available on x86_64.\n[PATCH] mm: workingset: ignore slab memory size when calculating shadows pressure (Roman Gushchin) https://lkml.kernel.org/r/20200903230055.1245058-1-guro@fb.com\ncount_shadow_nodes() function returns the memory size for LRU pages and slab. This makes sense in non-memcg case, but in memcg case, this doesn\u0026rsquo;t make sense as the shadow nodes themselves are backed by slabs. Also, recent commit fb2f2b0adb98 (\u0026ldquo;mm: memcg/slab: reparent memcg kmem_caches on cgroup removal\u0026rdquo;) makes the per-lruvec slab counters on non-leaf cgroup inaccurate. For the reason, this commit redefines the count_shadow_nodes() to not count the slab memory.\nLinux 5.9-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgdq1XfoECVoZyr5+j+LM7oG31DhEhSoju=DQFBdSvEsw@mail.gmail.com\nUnlke last week, this week release has unusually many changes. Maybe the changes for last week came this week. Nonetheless, it\u0026rsquo;s not outlier. Changes are spread well. So, Torvalds says he can\u0026rsquo;t say it\u0026rsquo;s calmed down, but also he doesn\u0026rsquo;t worry about this too much.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-09-07 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1598937635,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598937635,"objectID":"4975d365a7bc65fbebe46555afc3ad31","permalink":"/post/lkml_news_v5.9-rc4/","publishdate":"2020-09-01T07:20:35+02:00","relpermalink":"/post/lkml_news_v5.9-rc4/","section":"post","summary":"[PATCH v9 0/3] introduce memory hinting API for external process (Minchan Kim) https://lkml.kernel.org/r/20200901000633.1920247-1-minchan@kernel.org\nAfter the rejection, this patchset posted again. Linus\u0026rsquo;s opinion about dropping the task_struct to do_madvise and Christian\u0026rsquo;s comment regarding compat syscall entry has resolved.\nAnd, this patchset merged in the \u0026lsquo;-mm\u0026rsquo; tree again. Hopefully it will be merged in mainline by 5.10!\n[PATCH v6 0/3] Anonymous VMA naming patches (Sumit Semwal) https://lkml.kernel.org/r/20200901091901.19779-1-sumit.semwal@linaro.org\nThis is reposting of old patchset which Colin Cross sent before.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC -V3 0/5] autonuma: Optimize memory placement for memory tiering system (Huang Ying) https://lkml.kernel.org/r/20200825002354.17038-1-ying.huang@intel.com\nThe third RFC of autonuma for help placing of data items on systems utilizing both DRAM and PMEM as different NUMA nodes.\nLinux 5.9-rc3 https://lkml.kernel.org/r/CAHk-=wiD1yujm_WvWLYL7gZsWMvZyWMg1rfU7dWmnYYc3a7Gsg@mail.gmail.com\nThis week rc release is also quite normal. The \u0026lsquo;fallthought\u0026rsquo; comment conversion made fairly evenly distributed changes. Torvalds says it was quite calm. Indeed, only one patchset got my interest this week. I guess it was maybe due to the Linux Plumbers Conference.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1598334722,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598334722,"objectID":"75e14181740febebb5c9e480f26e00fd","permalink":"/post/lkml_news_v5.9-rc3/","publishdate":"2020-08-25T07:52:02+02:00","relpermalink":"/post/lkml_news_v5.9-rc3/","section":"post","summary":"[RFC -V3 0/5] autonuma: Optimize memory placement for memory tiering system (Huang Ying) https://lkml.kernel.org/r/20200825002354.17038-1-ying.huang@intel.com\nThe third RFC of autonuma for help placing of data items on systems utilizing both DRAM and PMEM as different NUMA nodes.\nLinux 5.9-rc3 https://lkml.kernel.org/r/CAHk-=wiD1yujm_WvWLYL7gZsWMvZyWMg1rfU7dWmnYYc3a7Gsg@mail.gmail.com\nThis week rc release is also quite normal. The \u0026lsquo;fallthought\u0026rsquo; comment conversion made fairly evenly distributed changes. Torvalds says it was quite calm. Indeed, only one patchset got my interest this week.","tags":["linux","kernel","lkml","news"],"title":"LkML New v5.9-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"PROBLEM: Long Workqueue delays. (Jim Baxter) https://lkml.kernel.org/r/71aafe68-7fe0-6b77-ea8e-83edd3f16c8d@mentor.com\nJim Baxter encountered 6.5 seconds delay due to long workqueue delay. He want to ask if this is normal or real problem.\n[RFC PATCH 0/8] memcg: Enable fine-grained per process memory control (Waiman Long) https://lkml.kernel.org/r/20200817140831.30260-1-longman@redhat.com\nThe memory cgroup v2 start reclamation if the amount of the memory of the cgroup exceeds \u0026lsquo;memory.high\u0026rsquo; and start OOM killing if if exceeds \u0026lsquo;memory.max\u0026rsquo;. Problem is, the OOM killer can kill any process. This patchset makes the target of the OOM killing can be selected by user.\n[PATCH v5 0/2] Anonymous VMA naming patches (Sumit Semwal) https://lkml.kernel.org/r/20200819141650.7462-1-sumit.semwal@linaro.org\nThis patchset was originally sent by Colin Cross a long time ago but Sumit Semwal reposting this as he realised that this patchset is needed for Android to boot.\n[PATCH RFC] mm: increase page waitqueue hash size (Nicholas Piggin) https://lkml.kernel.org/r/20200819125349.558249-1-npiggin@gmail.com\nNicholas found the page waitqueue hash is a bit small on his 16 socket 1536 threads POWER9 system. He increased the waitqueue hash size from 256 to 262144 and it made 182% performance improvement.\n[PATCH 0/78] Transparent Huge Pages for XFS (Matthew Wilcox) https://lkml.kernel.org/r/20200821224522.GX17456@casper.infradead.org\nMatthew\u0026rsquo;s THP for file-backed pages now passes xfstests. For this, he made 78 patches. However, because no one really like to review 78 patches, he just want to let people know this and a portion of the patches is already formatted as 5 individual patchsets. He hopes some of the patchsets to be merged in v5.10.\nBiggest change this patchset makes is variable-sized THPs. He made this change because filesystems would prefer a page size between PAGE_SIZE and PMD_SIZE. PMD_SIZE is the only one size for THP now.\nLinux 5.9-rc2 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiy7qFBRVibt+kHoceCwsiPeMRZXDajq1oCsk+AUOU4cg@mail.gmail.com\nThe rc2 for 5.9 came out. Nothing in particular. Many fixes in file systems because ext4 update came in late.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1597727740,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597727740,"objectID":"25e3790757420ed1d3aa859a36cbc6a5","permalink":"/post/lkml_news_v5.9-rc2/","publishdate":"2020-08-18T07:15:40+02:00","relpermalink":"/post/lkml_news_v5.9-rc2/","section":"post","summary":"PROBLEM: Long Workqueue delays. (Jim Baxter) https://lkml.kernel.org/r/71aafe68-7fe0-6b77-ea8e-83edd3f16c8d@mentor.com\nJim Baxter encountered 6.5 seconds delay due to long workqueue delay. He want to ask if this is normal or real problem.\n[RFC PATCH 0/8] memcg: Enable fine-grained per process memory control (Waiman Long) https://lkml.kernel.org/r/20200817140831.30260-1-longman@redhat.com\nThe memory cgroup v2 start reclamation if the amount of the memory of the cgroup exceeds \u0026lsquo;memory.high\u0026rsquo; and start OOM killing if if exceeds \u0026lsquo;memory.max\u0026rsquo;. Problem is, the OOM killer can kill any process.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc2","type":"post"},{"authors":[],"categories":["talks"],"content":"My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers Conference has accepted! Hope to (virtually) see you there. The title of the talk is, \u0026ldquo;DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations\u0026rdquo;.\n","date":1596863432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596863432,"objectID":"1881fcbdfe93fa179c7c03972992a6c1","permalink":"/post/kernelsummit2020_talk/","publishdate":"2020-08-08T07:10:32+02:00","relpermalink":"/post/kernelsummit2020_talk/","section":"post","summary":"My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers Conference has accepted! Hope to (virtually) see you there. The title of the talk is, \u0026ldquo;DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations\u0026rdquo;.","tags":["linux","linux kernel summit","kernel summit","linux plumbers conference 2020","lpc2020","talk"],"title":"I will have a talk at the Linux Kernel Summit 2020","type":"post"},{"authors":[],"categories":["lkml news"],"content":"mm: sort freelist by rank number (Cho KyongHo) https://lkml.kernel.org/r/1596435031-41837-1-git-send-email-pullip.cho@samsung.com\nLPDDR5 has severan ranks and there are ranks switching delay. Therefore, it would be better to do accesses in same ranks if possible. This patch sorts freelist by the rank number so that near future allocation can be done in same rank.\n[RFC-PROTOTYPE 1/1] mm: Add __GFP_FAST_TRY flag (Uladzislau Rezki) https://lkml.kernel.org/r/20200803163029.1997-1-urezki@gmail.com\nThis is the rfc of the patch for the Paul\u0026rsquo;s last ask. The memory objects to be freed by RCU are stored in the per-cpu array. When the array is full, RCU allocates new block of array and link it after the current one. This strategy is taken over the RCU head linked list to improve locality and thus reduce the cache misses. The allocation should be made under atomic context. However, the memory allocator makes lockdep compain if CONFIG_PROVE_RAW_LOCK_NESTING is on. Also, it doesn\u0026rsquo;t allow atomic context memory allocation if CONFIG_PREEMPT_RT is on, as it converts spinlock_t into sleepable variant.\nTo overcome the problem, this patch introduces __GFP_FAST_TRY flag so that the memory allocator can work in the case.\n[PATCH v11 0/6] KASAN-KUnit Integration (David Gow) https://lkml.kernel.org/r/20200805042938.2961494-1-davidgow@google.com\nThis patchset makes KUnit to be able to fail tests wen unexpected KASAN error occurs and vice versa.\n[PATCH v3 0/6] mm / virtio-mem: support ZONE_MOVABLE (David Hildenbrand) https://lkml.kernel.org/r/20200804072408.5481-1-david@redhat.com\nWhile virtio-mem allows to online fully plugged memory blocks to ZONE_MOVABLE, it dows not allow to online partially-plugged memory blocks to ZONE_MOVABLE. This commit makes it available.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20200806231643.a2711a608dd0f18bff2caf2b@linux-foundation.org\nAndrew sent a pull request containing 163 patches to Torvalds.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20200811182949.e12ae9a472e3b5e27e16ad6c@linux-foundation.org\nAnother pull request from Andrew to Torvalds. This pull request contains \u0026ldquo;workingset protection/detection on the anonymous LRU list\u0026rdquo;, and \u0026ldquo;proactive compaction\u0026rdquo;, which also reviewed by this post series.\n[patch 18/39] mm/madvise: check fatal signal pending of target process (Andrew Morton) https://lkml.kernel.org/r/20200815003102.dzZiwVm-K%akpm@linux-foundation.org\nThe madvise_process() series has included in the pull request from Andrew to Linus. It was rejected from v5.8 due to its weird patch sequence regarding its pidfd support. Unfortunately, Torvalds don\u0026rsquo;t like the signal handling of the patch at this time.\nLinux 5.9-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiwfkKp93C+yLqKWAU0ChBdeBDUhgOk09_=UQ8gOKbV3w@mail.gmail.com\nThe merge window for v5.9 has finished, and the first rc released. It was much normal than v5.8. The most interesting changes in my viewpoint are the anonymous pages workingset detection/protection and the proactive compaction.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-07-20 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc1 releases in the last two years.\n","date":1596517707,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596517707,"objectID":"08b6b4f9ebb5c0ad6193f1f67e88454e","permalink":"/post/lkml_news_v5.9-rc1/","publishdate":"2020-08-04T07:08:27+02:00","relpermalink":"/post/lkml_news_v5.9-rc1/","section":"post","summary":"mm: sort freelist by rank number (Cho KyongHo) https://lkml.kernel.org/r/1596435031-41837-1-git-send-email-pullip.cho@samsung.com\nLPDDR5 has severan ranks and there are ranks switching delay. Therefore, it would be better to do accesses in same ranks if possible. This patch sorts freelist by the rank number so that near future allocation can be done in same rank.\n[RFC-PROTOTYPE 1/1] mm: Add __GFP_FAST_TRY flag (Uladzislau Rezki) https://lkml.kernel.org/r/20200803163029.1997-1-urezki@gmail.com\nThis is the rfc of the patch for the Paul\u0026rsquo;s last ask.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.9-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2 0/7] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20200727162935.31714-1-rppt@kernel.org\nThis is the second version of the secretmemfd. In this version, the system call has renamed to \u0026lsquo;memfd_secret\u0026rsquo;.\n[RFC PATCH 0/5] madvise MADV_DOEXEC (Anthony Yznaga) https://lkml.kernel.org/r/1595869887-23307-1-git-send-email-anthony.yznaga@oracle.com\nThis patch introduces another madvise hint, MADV_DOEXEC. It preserves an anonymous memory range across exec.\n[RFC PATCH 0/6] decrease unnecessary gap due to pmem kmem alignment (Jia He) https://lkml.kernel.org/r/20200729033424.2629-1-justin.he@arm.com\nBecause dax pmem as RAM device on arm64 makes the start address aligned with 1G memblock size, the amount of memory space of it is limited. This patch decreases the alignment requirement to solve the problem.\nRaw spinlocks and memory allocation (Paul E. McKenney) https://lkml.kernel.org/r/20200730231205.GA11265@paulmck-ThinkPad-P72\nPaul E. McKenney is asking mm people to add new GFP_ flag for RCU. In case of raw atomic contexts, call_rcu() traditionally traversed a cache cold linked list for the callbacks. Instead, recently Uladzislau has made it to use array instead of the linked list. It showed non subtle benefit. Now, how the array should be allocated? Because it\u0026rsquo;s called within the raw atomic context, it shouldn\u0026rsquo;t hold the non-raw spinlock. However, there is no GFP_ flag for such behavior. Paul, hence, is asking mm people to add another GFP_ flag of the behavior.\n[PATCH] mm: introduce reference pages (Peter Collingbourne) https://lkml.kernel.org/r/20200731203241.50427-1-pcc@google.com\nThis patch introduces a new mmap flag, MAP_REFPAGE. It creates a mapping backed by a reference page, which address is specified using the offset argument to mmap. Thus, reading the region can be done directly from the reference page, and the writing to the region will do copy-on-write.\nLinux 5.8 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj+mDPbj8hXspXRAksh+1TmPjubc9RNEbu8EVpYyypX=w@mail.gmail.com\nI was very curious what the name of this release will be, as the march to v5.8 seemed quite dynamic. Torvalds also says he considered rc8 all the way to the last minute. He finally decided to release v5.8 instead of the v5.8-rc8. I titled this post in my estimation, and it fortunately turned out to be right :)\nTorvalds explains though we had very large rc1 for this release, there were really nothing scary. Though there were header dependency problem last week, Torvalds says it was always there annoying and he says about adoption of some tooling.\nSo in the last week, there were the silly header file noise, dominant networking pull request, and some RCU fixes. And, the big release of 5.8 is here now!\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-07-27 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  ","date":1595912860,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595912860,"objectID":"5d364c0d9fc9518ce3fcdf048df832f2","permalink":"/post/lkml_news_v5.8/","publishdate":"2020-07-28T07:07:40+02:00","relpermalink":"/post/lkml_news_v5.8/","section":"post","summary":"[PATCH v2 0/7] mm: introduce memfd_secret system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20200727162935.31714-1-rppt@kernel.org\nThis is the second version of the secretmemfd. In this version, the system call has renamed to \u0026lsquo;memfd_secret\u0026rsquo;.\n[RFC PATCH 0/5] madvise MADV_DOEXEC (Anthony Yznaga) https://lkml.kernel.org/r/1595869887-23307-1-git-send-email-anthony.yznaga@oracle.com\nThis patch introduces another madvise hint, MADV_DOEXEC. It preserves an anonymous memory range across exec.\n[RFC PATCH 0/6] decrease unnecessary gap due to pmem kmem alignment (Jia He) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/6] mm: introduce secretmemfd system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20200720092435.17469-1-rppt@kernel.org\nThis patchset make another special kind of file for secret memory areas. The file can be opened using secretmemfd(). mmap() of the file creates the secret memory mapping. The mapped pages are marked as not present in the direct map and will have desired protection bits (e..g, uncached).\n[PATCH v7 0/6] workingset protection/detection on the anonymous LRU list (js1304@gmail.com) https://lkml.kernel.org/r/1595490560-15117-1-git-send-email-iamjoonsoo.kim@lge.com\nThe seventh version of the workingset protection code. In this version, some bugs in code and the workingset detection formula fixed.\nLinux 5.8-rc7 https://lkml.kernel.org/r/CAHk-=wgcJ-dtTf+kY1Qj0F786gYqShJU19BguJHruQ2J4vZxOw@mail.gmail.com\nThis release is slightly larger than what Torvalds would like. Nothing seems worrisome, but Torvalds thinks this might mean rc8 isrequired. He will see how this goes one more week and make the final decision.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-07-27 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1595393286,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595393286,"objectID":"15723f241199159193534ad532b2bd6a","permalink":"/post/lkml_news_v5.8-rc7/","publishdate":"2020-07-22T06:48:06+02:00","relpermalink":"/post/lkml_news_v5.8-rc7/","section":"post","summary":"[PATCH 0/6] mm: introduce secretmemfd system call to create \u0026ldquo;secret\u0026rdquo; memory areas (Mike Rapoport) https://lkml.kernel.org/r/20200720092435.17469-1-rppt@kernel.org\nThis patchset make another special kind of file for secret memory areas. The file can be opened using secretmemfd(). mmap() of the file creates the secret memory mapping. The mapped pages are marked as not present in the direct map and will have desired protection bits (e..g, uncached).\n[PATCH v7 0/6] workingset protection/detection on the anonymous LRU list (js1304@gmail.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v3] x86/mm: use max memory block size on bare metal (Daniel Jordan) https://lkml.kernel.org/r/20200714205450.945834-1-daniel.m.jordan@oracle.com\nOn x86, smallest supported block size is 128MiB. This means it needs to create 16,288 sysfs directories for 2TiB memory system. This sysfs creation takes significant amount of the boot time. As the memory hotplug is frequenlty used for the virtualized systems, this commit makes the kernels that aren\u0026rsquo;t running on a hypervisor to use largest block size (2GiB) on big machines.\nThe author says the kernel boot time has been 7% faster after applying this patch on the 2TiB memory system.\n[patch] mm, memcg: provide a stat to describe reclaimable memory (David Rientjes) https://lkml.kernel.org/r/alpine.DEB.2.23.453.2007142018150.2667860@chino.kir.corp.google.com\nUnder memory pressure, some of the memory can be reclaimed, so free memory plus some of reclaimable memory is called available memory. This is provided by /proc/meminfo file, but that for each memcg is not. This patch adds the value in memory.stat file in memcg sysfs.\n[RFC for Linux v4 0/2] virtio_balloon: Add VIRTIO_BALLOON_F_CONT_PAGES to report continuous pages (Hui Zhu) https://lkml.kernel.org/r/1594867315-8626-1-git-send-email-teawater@gmail.com\nThis patchset adds VIRTIO_BALLOON_F_CONT_PAGES to virtio_balloon. If this flag is given, virtio_balloon tries to inflate and deflate with continuous pages.\nLinux 5.8-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wj_gy9xpqFx_aLTtLtFTCTKKLfV9E2bgE5J2GeKit3MCg@mail.gmail.com\nWe have seen some fluctuations in the rcs of this year. Fortunately, this week rc release looks normal to Torvalds, though it is a big release. I guess 5.8 will be released in the normal manner.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-07-20 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1594788600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594788600,"objectID":"5599b7243fce15941dc3b3f92a1dd865","permalink":"/post/lkml_news_v5.8-rc6/","publishdate":"2020-07-15T06:50:00+02:00","relpermalink":"/post/lkml_news_v5.8-rc6/","section":"post","summary":"[PATCH v3] x86/mm: use max memory block size on bare metal (Daniel Jordan) https://lkml.kernel.org/r/20200714205450.945834-1-daniel.m.jordan@oracle.com\nOn x86, smallest supported block size is 128MiB. This means it needs to create 16,288 sysfs directories for 2TiB memory system. This sysfs creation takes significant amount of the boot time. As the memory hotplug is frequenlty used for the virtualized systems, this commit makes the kernels that aren\u0026rsquo;t running on a hypervisor to use largest block size (2GiB) on big machines.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/2] KUnit-Kmemleak Integration (Uriel Guajardo) https://lkml.kernel.org/r/20200706210327.3313498-1-urielguajardojr@gmail.com\nThis patchset makes kunit to use kmemleak to catch memory leak in the test code.\n[PATCH] CodingStyle: Inclusive Terminology (Dan Williams) https://lkml.kernel.org/r/159389297140.2210796.13590142254668787525.stgit@dwillia2-desk3.amr.corp.intel.com\nThis patch adds a new document for inclusive term usage in the kernel tree. It suggests to stop using the terms, \u0026lsquo;slave\u0026rsquo; and \u0026lsquo;blacklist\u0026rsquo; anymore. This patch was revised two times and the third revision is merged in Torvalds\u0026rsquo; tree by the Friday.\n[PATCH V3] mm/vmstat: Add events for THP migration without split (Anshuman Khandual) https://lkml.kernel.org/r/1594080415-27924-1-git-send-email-anshuman.khandual@arm.com\nThis patch adds three new vmstat events for THP migration without split validation. The events are THP_MIGRATION_(SUCCESS|FAILURE|SPLIT).\nLinux kernel in-tree Rust support (Nick Desaulniers) https://lore.kernel.org/lkml/CAKwvOdmuYc8rW_H4aQG4DsJzho=F+djd68fp7mzmBp3-wY--Uw@mail.gmail.com/\nNick is trying to put LLVM micro conference in the Linux Plumbers Conference. In the micro-conference, he wants to have a session for the kernel in-tree Rust support. For this, this mail asks people whether have interest in the topic.\nLinux 5.8-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgX5+Q_trdMPaaQZmko0Og_eqAYoyMa_8S3ie+1Us6rkw@mail.gmail.com\nrc4 was smaller than usual, and Torvalds says rc5 is bigger than usual, though not enormous. Nonetheless, its mainly due to the networking fixes that didn\u0026rsquo;t come in rc4, and Torvalds doesn\u0026rsquo;t hear something really scary sound from real people.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-07-13 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc5 releases in the last two years.\n","date":1594098091,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594098091,"objectID":"ee8f9f2d491e7b2f3c95430afea87ff2","permalink":"/post/lkml_news_v5.8-rc5/","publishdate":"2020-07-07T07:01:31+02:00","relpermalink":"/post/lkml_news_v5.8-rc5/","section":"post","summary":"[PATCH 0/2] KUnit-Kmemleak Integration (Uriel Guajardo) https://lkml.kernel.org/r/20200706210327.3313498-1-urielguajardojr@gmail.com\nThis patchset makes kunit to use kmemleak to catch memory leak in the test code.\n[PATCH] CodingStyle: Inclusive Terminology (Dan Williams) https://lkml.kernel.org/r/159389297140.2210796.13590142254668787525.stgit@dwillia2-desk3.amr.corp.intel.com\nThis patch adds a new document for inclusive term usage in the kernel tree. It suggests to stop using the terms, \u0026lsquo;slave\u0026rsquo; and \u0026lsquo;blacklist\u0026rsquo; anymore. This patch was revised two times and the third revision is merged in Torvalds\u0026rsquo; tree by the Friday.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[Ksummit-discuss] [TECH TOPIC] Inline Encryption Support and new related features (Satya Tangirala) https://lkml.kernel.org/r/20200629092551.GA673684@google.com\nMaybe the last kernel summit proposal. The inline encryption work was presented in the last year LPC and a part of it has merged in the v5.8, being tested in Android. The talk will discuss the todo list of the work.\n[PATCH] mm: define pte_add_end for consistency (Wei Yang) https://lkml.kernel.org/r/20200630031852.45383-1-richard.weiyang@linux.alibaba.com\nThis patch adds a helper to get the address of the next boundary for pte level.\nLinux 5.8-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whaNDpCRkeBGbdTOh84_mqfG7N1qPk8HZXJzbh8TOB_hA@mail.gmail.com\nThe fourth release candidate for the 5.8 is released. Unlike the past week, this week release was smaller than usual. Maybe due to a fluctuation, or due to a July 4th in US, Torvalds says. Anyway, seems not a bad sign.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-06-29 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc4 releases in the last two years.\n","date":1593493068,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593493068,"objectID":"ab65ddf8e96ff245221950e3db1cf98d","permalink":"/post/lkml_news_v5.8-rc4/","publishdate":"2020-06-30T06:57:48+02:00","relpermalink":"/post/lkml_news_v5.8-rc4/","section":"post","summary":"[Ksummit-discuss] [TECH TOPIC] Inline Encryption Support and new related features (Satya Tangirala) https://lkml.kernel.org/r/20200629092551.GA673684@google.com\nMaybe the last kernel summit proposal. The inline encryption work was presented in the last year LPC and a part of it has merged in the v5.8, being tested in Android. The talk will discuss the todo list of the work.\n[PATCH] mm: define pte_add_end for consistency (Wei Yang) https://lkml.kernel.org/r/20200630031852.45383-1-richard.weiyang@linux.alibaba.com\nThis patch adds a helper to get the address of the next boundary for pte level.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[TECH TOPIC] restricted kernel address spaces (Mike Rapoport) https://lkml.kernel.org/r/20200621090539.GM6493@linux.ibm.com\nA new kernel summit talk proposal is made. This topic is recycled from the LSF/MM/BPF, which scheduled but canceled due to the COVID19.\n[PATCH] mm: filemap: clear idle flag for writes (Yang Shi) https://lkml.kernel.org/r/1593020612-13051-1-git-send-email-yang.shi@linux.alibaba.com\nThis patch adds missed idle flag clearing in filemap writing.\n+ mm-madvise-introduce-process_madvise-syscall-an-external-memory-hinting-api-fix-2.patch added to -mm tree https://marc.info/?l=linux-mm-commits\u0026amp;m=159303823314812\u0026amp;w=2\nThe process_madvise() patch has merged in the -mm tree again.\nLinux 5.8-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whNe2Gx=kgK6ucK_Bo0xCXh6g7HLQTHacQqsVZ8G1NPpw@mail.gmail.com\nUnlike the rc2 release, this release is big, as expected by the huge rc1 release. Among the 94 releases in last 2 years, this release has 20th biggest diff. Among the 11 -rc3 releases in the last 2 years, it\u0026rsquo;s 4th biggest diff. That said, Torvalds says this is just the expected result and there is no scary point. This will not make the rc period by itself.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-06-29 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc3 releases in the last two years.\n","date":1592974133,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592974133,"objectID":"4bc04f5984ab71a9b8522b89c8a72d35","permalink":"/post/lkml_news_v5.8-rc3/","publishdate":"2020-06-24T06:48:53+02:00","relpermalink":"/post/lkml_news_v5.8-rc3/","section":"post","summary":"[TECH TOPIC] restricted kernel address spaces (Mike Rapoport) https://lkml.kernel.org/r/20200621090539.GM6493@linux.ibm.com\nA new kernel summit talk proposal is made. This topic is recycled from the LSF/MM/BPF, which scheduled but canceled due to the COVID19.\n[PATCH] mm: filemap: clear idle flag for writes (Yang Shi) https://lkml.kernel.org/r/1593020612-13051-1-git-send-email-yang.shi@linux.alibaba.com\nThis patch adds missed idle flag clearing in filemap writing.\n+ mm-madvise-introduce-process_madvise-syscall-an-external-memory-hinting-api-fix-2.patch added to -mm tree https://marc.info/?l=linux-mm-commits\u0026amp;m=159303823314812\u0026amp;w=2\nThe process_madvise() patch has merged in the -mm tree again.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v7] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200615143614.15267-1-nigupta@nvidia.com\n7th version of the proactive compaction patchset. This version fixes compile error while THP is disabled.\nMaintainers / Kernel Summit 2020 submissions (Theodore Y. Ts\u0026rsquo;o) https://lkml.kernel.org/r/20200615155839.GF2863913@mit.edu\nThere were only 5 submissions for the kernel summit talk, and no submission for the maintainers summit. Ted asks people to submit until this week.\n[PATCH v6 0/6] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1592371583-30672-1-git-send-email-iamjoonsoo.kim@lge.com\nThe sixth version of the workingset protection for the LRU\u0026rsquo;s corner case that comes in when a scanning of large object is made. This version reflects new LRU balance model and updated the performance evaluation setup.\n+ scripts-deprecated_terms-recommend-denylist-allowlist-instead-of-blacklist-whitelist.patch added to -mm tree https://marc.info/?l=linux-mm-commits\u0026amp;m=159242954415572\u0026amp;w=2\nThe patches for stop spreading of the terms, \u0026lsquo;blacklist\u0026rsquo; and \u0026lsquo;whitelist\u0026rsquo;, are finally merged in the \u0026lsquo;-mm\u0026rsquo; tree.\nThe second version of the patchset[1] was merged in there before, but the maintainer of the \u0026lsquo;checkpatch.pl\u0026rsquo; complained about use of \u0026lsquo;spelling.txt\u0026rsquo;. Therefore the author asked \u0026lsquo;-mm\u0026rsquo; tree maintainer, Andrew, to drop the patch and made v3 and v4[2] of the patchset to convince the \u0026lsquo;checkpatch.pl\u0026rsquo; maintainer. After some debates, the patchset has introduced by a recent LWN article[3] and merged again into the \u0026lsquo;-mm\u0026rsquo; tree.\n[1] https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/ [2] https://lore.kernel.org/lkml/20200611062550.20113-1-sjpark@amazon.com/ [3] https://lwn.net/Articles/823224/\n[PATCH] mm: Use unsigned types for fragmentation score https://lkml.kernel.org/r/20200618010319.13159-1-nigupta@nvidia.com\nThis commit is for the proactive compaction. It calculates fragrmen score for the compaction. This commit simply converts the type for it from int to unsigned int.\n[RFC PATCH v3 0/1] Add rwsem \u0026ldquo;contended hook\u0026rdquo; API and mmap_lock histograms https://lkml.kernel.org/r/20200618222225.102337-1-axelrasmussen@google.com\nThis patch adds tracepoints for mmap_lock, to know how badly it is contended.\nLinux 5.8-rc2 https://lkml.kernel.org/r/CAHk-=whXm00G4DJ-L2XSPS+TFU_-mcL0qgcMVq62mCzuUZsCwQ@mail.gmail.com\nThough the 5.8 merge window was biggest merge window of the Linux kernel development history, rc2 release is just as usual. Torvalds says rc2 isn\u0026rsquo;t particularly big or scary, and falls right in the normal range.\nBelow is the diffstat of the releases in the last two years.\nNote that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat and https://github.com/sjp38/lazybox using below command:\n$ relstat.py --since 2018-06-22 | ~/lazybox/gnuplot/plot.py \\ --data_fmt table --type labeled-lines --xtics_rotate -90 \\ --font \u0026quot;Times New Roman, 5pt\u0026quot; --ylog --pointsize 0.3  And, below is the diffstat of the -rc2 releases in the last two years.\n","date":1592284445,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592284445,"objectID":"4a476bb2c15279ff9c7a410084b95a57","permalink":"/post/lkml_news_v5.8-rc2/","publishdate":"2020-06-16T07:14:05+02:00","relpermalink":"/post/lkml_news_v5.8-rc2/","section":"post","summary":"[PATCH v7] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200615143614.15267-1-nigupta@nvidia.com\n7th version of the proactive compaction patchset. This version fixes compile error while THP is disabled.\nMaintainers / Kernel Summit 2020 submissions (Theodore Y. Ts\u0026rsquo;o) https://lkml.kernel.org/r/20200615155839.GF2863913@mit.edu\nThere were only 5 submissions for the kernel summit talk, and no submission for the maintainers summit. Ted asks people to submit until this week.\n[PATCH v6 0/6] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1592371583-30672-1-git-send-email-iamjoonsoo.kim@lge.com","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v6] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200601194822.30252-1-nigupta@nvidia.com\nThis is the sixth version of the proactive compaction patchset. It makes compaction to be able to triggered earlier than final memory pressure using knobs. The goal is better THP allocation success.\n[PATCH] vmalloc: Convert to XArray (Matthew Wilcox) https://lkml.kernel.org/r/20200603171448.5894-1-willy@infradead.org\nThis patchset converts the radix tree for vmap blocks into XArray.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20200608212922.5b7fa74ca3f4e2444441b7f9@linux-foundation.org\nMM-side pull request. It contains the \u0026ldquo;mmap locking API: initial implementation as rwsem wrappers\u0026rdquo; patchset. I believe this would help killing the mmap_sem.\n[Ksummit-discuss] [TECH TOPIC] Documentation (Jonathan Corbet) https://lkml.kernel.org/r/20200609145353.628a342d@lwn.net\nThe 4th kernel summit talk proposal. Jonathan says the conversion of the kernel doc to RST is almost done, and he wants to discuss about the next step in the kernel summit.\n[RFC v6 00/51] Large pages in the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20200610201345.13273-1-willy@infradead.org\nYet another version of the patchset. More bugs are fixed and therefore more of xfstests passes, though not complete.\n[PATCH v2] scripts/spelling: Recommend blocklist/allowlist instead of blacklist/whitelist (SeongJae Park) https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/\nThis patchset adds blacklist/whitelist in the spelling typo file of the kernel so that every patches using the term could get warnings. The patch merged in the -mm tree immediately, but dropped again[1] as the maintainer of the ``checkpatch.pl` required a revisement.\n[1] https://marc.info/?l=linux-mm-commits\u0026amp;m=159182303424009\u0026amp;w=2\n[patch 24/25] mm: use only pidfd for process_madvise syscall (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wgx=-vbxpDqsunkMTqQDD+oqcU9JQeW+MApGQeZD6hr6Q@mail.gmail.com\nThe pull request for process_madvise() patchset finally made, but Torvalds denied it, due to the inconcrete decision of the signature. The author of the patchset, Minchan, promised he will revise it after this merge window finishes.\nLinux 5.8-rc1 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=whfuea587g8rh2DeLFFGYxiVuh-bzq22osJwz3q4SOfmA@mail.gmail.com\nThe merge window is finished and 5.8-rc1 is released. Unexpectedly, this release is the biggest one in the kernel history. There is no other tricks such as pending of the release or some strange script based change. About 20% of all the files in the kernel tree has modified.\nBelow is the diffstat of the releases in the last two years. Note that the y-axis is in logarithm. I draw it using https://github.com/sjp38/relstat.\n","date":1591159501,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591159501,"objectID":"362c595957d43e99b0a1738833da6c69","permalink":"/post/lkml_news_v5.8-rc1/","publishdate":"2020-06-03T06:45:01+02:00","relpermalink":"/post/lkml_news_v5.8-rc1/","section":"post","summary":"[PATCH v6] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200601194822.30252-1-nigupta@nvidia.com\nThis is the sixth version of the proactive compaction patchset. It makes compaction to be able to triggered earlier than final memory pressure using knobs. The goal is better THP allocation success.\n[PATCH] vmalloc: Convert to XArray (Matthew Wilcox) https://lkml.kernel.org/r/20200603171448.5894-1-willy@infradead.org\nThis patchset converts the radix tree for vmap blocks into XArray.\nincoming (Andrew Morton) https://lkml.kernel.org/r/20200608212922.5b7fa74ca3f4e2444441b7f9@linux-foundation.org\nMM-side pull request. It contains the \u0026ldquo;mmap locking API: initial implementation as rwsem wrappers\u0026rdquo; patchset.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.8-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v2 00/16] Introduce kvfree_rcu(1 or 2 arguments) (Uladzislau Rezki) https://lkml.kernel.org/r/20200525214800.93072-1-urezki@gmail.com\nThis is the second version of the rcu-protected kvfree().\n[PATCH v2 0/7] Add histogram measuring mmap_lock contention latency (Axel Rasmussen) https://lkml.kernel.org/r/20200528235238.74233-1-axelrasmussen@google.com\nFor further analysis of the mmap_sem overhead from both kernel space and user space, this commit adds the latency historgram for mmap_sem acquisition time. Actually, mmap_sem is now renamed into mmap_lock, thanks to Michel\u0026rsquo;s patch.\n[PATCH -V4] swap: Reduce lock contention on swap cache from swap slots allocation (Huang, Ying) https://lkml.kernel.org/r/20200529010840.928819-1-ying.huang@intel.com\nFourth version of the swap slot allocation locking contention reduction patch. Previous version was also introduced in my previous posting.\n[PATCH v5 00/39] Large pages in the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20200529025824.32296-1-willy@infradead.org\nFifth version of the page cache large pages work. The previous version was also introduced in my previous posting. It passes a little more test cases in xfstests than v4 did, but seems it still not entirely passes.\nLinux 5.7 https://lkml.kernel.org/r/CAHk-=wiZGrCkiBB1V7bxp8NZH6yWi9mPM4ptMW16OzOiNprBFA@mail.gmail.com\nNothing worrisome happend, and therefore 5.7 has released, as expected. In other words, the merge window for 5.8 is open.\n","date":1590469454,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590469454,"objectID":"0f1a305ef3e5e732c6333bf154b46aa3","permalink":"/post/lkml_news_v5.7/","publishdate":"2020-05-26T07:04:14+02:00","relpermalink":"/post/lkml_news_v5.7/","section":"post","summary":"[PATCH v2 00/16] Introduce kvfree_rcu(1 or 2 arguments) (Uladzislau Rezki) https://lkml.kernel.org/r/20200525214800.93072-1-urezki@gmail.com\nThis is the second version of the rcu-protected kvfree().\n[PATCH v2 0/7] Add histogram measuring mmap_lock contention latency (Axel Rasmussen) https://lkml.kernel.org/r/20200528235238.74233-1-axelrasmussen@google.com\nFor further analysis of the mmap_sem overhead from both kernel space and user space, this commit adds the latency historgram for mmap_sem acquisition time. Actually, mmap_sem is now renamed into mmap_lock, thanks to Michel\u0026rsquo;s patch.\n[PATCH -V4] swap: Reduce lock contention on swap cache from swap slots allocation (Huang, Ying) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v5] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200518181446.25759-1-nigupta@nvidia.com\nThe 5th version of the proactive compaction. This patchset make the compaction more proactive to make THP allocation easily success.\n[PATCH -V2] swap: Reduce lock contention on swap cache from swap slots allocation (Huang Ying) https://lkml.kernel.org/r/20200520031502.175659-1-ying.huang@intel.com\nAfter swap device is fragmented, there\u0026rsquo;s no free swap cluster. Therefore, each swap logic of each CPU will linearly scan each swap cluster to find a free slot. As multiple CPUs can search the slot in same cluster, the swap cache lock contention could increase.\nThis patchset reduces the lock contention by using percpu pointer for next scanning cluster. The pointer is set to random cluster. This change is applied to SSD swap device only.\n[Ksummit-discuss] [TECH TOPIC] seccomp feature development (Kees Cook) https://lkml.kernel.org/r/202005200917.71E6A5B20@keescook\nThe first kernel summit technical topic. Kees Cook want to talk about seccomp.\nLinux 5.7-rc7 https://lkml.kernel.org/r/CAHk-=whan1CiRtcgBt-5SkW-ga_GeLH5+AO26RmK7vOA5yw9ng@mail.gmail.com\nThe rc6 was unexpectedly big, but rc7 is quite normal. Torvalds says the release schedule will not dealyed, unless something happens.\nAlso, Torvalds says he upgraded his main machine for the first time in about 15 years, from Intel machine to the AMD Threadripper 3970x. His build is not 3 times faster!\n","date":1589946747,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589946747,"objectID":"a1190dd5e71fd87c32072f9c7907b938","permalink":"/post/lkml_news_v5.7-rc7/","publishdate":"2020-05-20T05:52:27+02:00","relpermalink":"/post/lkml_news_v5.7-rc7/","section":"post","summary":"[PATCH v5] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200518181446.25759-1-nigupta@nvidia.com\nThe 5th version of the proactive compaction. This patchset make the compaction more proactive to make THP allocation easily success.\n[PATCH -V2] swap: Reduce lock contention on swap cache from swap slots allocation (Huang Ying) https://lkml.kernel.org/r/20200520031502.175659-1-ying.huang@intel.com\nAfter swap device is fragmented, there\u0026rsquo;s no free swap cluster. Therefore, each swap logic of each CPU will linearly scan each swap cluster to find a free slot.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc7","type":"post"},{"authors":[],"categories":["record"],"content":"A DAMON showcase website[1] is open. There are\n the official documentation of DAMON[2], the heatmap format dynamic access pattern of various realistic workloads for heap area[3], mmap()-ed area[4], and stack[5] area, the dynamic working set size distribution[6] and chronological working set size changes[7], and the latest performance test results[8].  [1] https://damonitor.github.io\n[2] https://damonitor.github.io/doc/html/latest\n[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html\n[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html\n[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html\n[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html\n[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html\n[8] https://damonitor.github.io/test/result/perf/latest/html/index.html\n","date":1589862467,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589862467,"objectID":"b3bb11e297134b5d3e9b08b609018980","permalink":"/post/damon_github_page/","publishdate":"2020-05-19T06:27:47+02:00","relpermalink":"/post/damon_github_page/","section":"post","summary":"A DAMON showcase website[1] is open. There are\n the official documentation of DAMON[2], the heatmap format dynamic access pattern of various realistic workloads for heap area[3], mmap()-ed area[4], and stack[5] area, the dynamic working set size distribution[6] and chronological working set size changes[7], and the latest performance test results[8].  [1] https://damonitor.github.io\n[2] https://damonitor.github.io/doc/html/latest\n[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html\n[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html\n[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html\n[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html\n[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html\n[8] https://damonitor.github.io/test/result/perf/latest/html/index.html","tags":["damon","linux","kernel","mm","record","github page"],"title":"Opening a Showcase Website for DAMON","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v4 00/36] Large pages in the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20200515131656.12890-1-willy@infradead.org\nThis is the fourth version of the patchset for the huge pages in the page cache. Still it fails xfstests.\nMaintainers / Kernel Summit 2020 planning kick-off (Theodore Y. Ts\u0026rsquo;o) https://lkml.kernel.org/r/20200515163956.GA2158595@mit.edu\nTed annouced that the Maintainers / Kernel Summit will be held in virtual this year, of course due to the COVID19. With this announcement, the CFP for the kernel summit is also opened.\nLinux 5.7-rc6 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjP9eOr2GEpgtcpN4Hqve6YRiyEF5Pq6ZsKFKHZ_v5Bwg@mail.gmail.com\nIt\u0026rsquo;s rc6, which is supposed to be calming down. But, rc6 was bigger than usual. As rc5 was also bigger than usual, this probably not a good sign for 5.7 release. But, no detailed change seems obviously wrong.\nTorvalds just hope hings calm down.\n","date":1589615720,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589776007,"objectID":"0053247017de068c3c239da5ca0b6363","permalink":"/post/lkml_news_v5.7-rc6/","publishdate":"2020-05-16T09:55:20+02:00","relpermalink":"/post/lkml_news_v5.7-rc6/","section":"post","summary":"[PATCH v4 00/36] Large pages in the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20200515131656.12890-1-willy@infradead.org\nThis is the fourth version of the patchset for the huge pages in the page cache. Still it fails xfstests.\nMaintainers / Kernel Summit 2020 planning kick-off (Theodore Y. Ts\u0026rsquo;o) https://lkml.kernel.org/r/20200515163956.GA2158595@mit.edu\nTed annouced that the Maintainers / Kernel Summit will be held in virtual this year, of course due to the COVID19. With this announcement, the CFP for the kernel summit is also opened.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc6","type":"post"},{"authors":[],"categories":[],"content":"I recently tried to upload the Linux kernel document which is generated in html form using the Sphynx build system[1] on a Github page[2] so that people can read DAMON[3] document from everywhere. The upload was very easy. I simply created the repo, put the generated html doc at Documentation/output/ into the repo and pushed. However, the theme was not applied.\nGithub assumes every Github pages to be based on Jekyll[4], and because every files and directories starting with underscores are handled special in Jekyll, some directories Sphynx created were ignored.\nYou can simply let Github pages to know your site is not generated with Jekyll by putting .nojekyll file with no content on your root of the repo and push. For example,\n$ cd \u0026lt;your github page repo\u0026gt; $ touch .nojekyll $ git add .nojekyll; git commit -m \u0026quot;Add .nojekyll\u0026quot;; git push Note that the file should be located in the root of the repo, not somewhere else.\nAfter this fix, my document[5] also works :)\n[1] https://www.kernel.org/doc/html/latest/doc-guide/sphinx.html#sphinx-build\n[2] https://pages.github.com/\n[3] https://sjp38.github.io/post/damon/\n[4] https://jekyllrb.com/\n[5] https://damonitor.github.io/doc/html/latest/admin-guide/mm/data_access_monitor.html\n","date":1589344803,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589344803,"objectID":"8c17032e2bc45ebef18aee720d8c42b7","permalink":"/post/sphynx_doc_on_github_pages_needs_nojekyll/","publishdate":"2020-05-13T06:40:03+02:00","relpermalink":"/post/sphynx_doc_on_github_pages_needs_nojekyll/","section":"post","summary":"I recently tried to upload the Linux kernel document which is generated in html form using the Sphynx build system[1] on a Github page[2] so that people can read DAMON[3] document from everywhere. The upload was very easy. I simply created the repo, put the generated html doc at Documentation/output/ into the repo and pushed. However, the theme was not applied.\nGithub assumes every Github pages to be based on Jekyll[4], and because every files and directories starting with underscores are handled special in Jekyll, some directories Sphynx created were ignored.","tags":["tip","github","sphynx"],"title":"Sphynx document on Github pages Needs `.nojekyll` File","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga) https://lkml.kernel.org/r/1588812129-8596-1-git-send-email-anthony.yznaga@oracle.com\nThis patchset introduces special memory called PKRAM. It can be used to preserve VM guest memory across kexec boot for fast restart (VMM Fast Restart). Compared to DRAM based PMEM simulation, PKRAM is more flexible as the memory size is not need to be previously fixed.\n[PATCH] mm: Replace zero-length array with flexible-array (Gustavo A. R. Silva) https://lkml.kernel.org/r/20200507185942.GA15193@embeddedor\nThe zero-length array of C90 are widely used in the kernel code base, but the flexible array member of C99 would be better choice. This commit replaces the code to use the flexible array member instead.\nLinux 5.7-rc5 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wi5ziqqgf9dMfwoNLy8A1SX36n1RuDYTyRX6O_Vmcr42g@mail.gmail.com\nLast 4 rc releases were slightly smaller than usual, but this week\u0026rsquo;s rc release is bigger, though it is still in line of average. This is maybe simply due to the delayed pull requests from network and some drivers and thus nothing is worrisome, Torvalds says.\n","date":1588827383,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588827383,"objectID":"e39b072865d46420377bdbd208e9db2e","permalink":"/post/lkml_news_v5.7-rc5/","publishdate":"2020-05-07T06:56:23+02:00","relpermalink":"/post/lkml_news_v5.7-rc5/","section":"post","summary":"[RFC 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga) https://lkml.kernel.org/r/1588812129-8596-1-git-send-email-anthony.yznaga@oracle.com\nThis patchset introduces special memory called PKRAM. It can be used to preserve VM guest memory across kexec boot for fast restart (VMM Fast Restart). Compared to DRAM based PMEM simulation, PKRAM is more flexible as the memory size is not need to be previously fixed.\n[PATCH] mm: Replace zero-length array with flexible-array (Gustavo A. R. Silva) https://lkml.kernel.org/r/20200507185942.GA15193@embeddedor\nThe zero-length array of C90 are widely used in the kernel code base, but the flexible array member of C99 would be better choice.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/7] Record the mm_struct in the page table pages (Matthew Wilcox) https://lkml.kernel.org/r/20200428194449.22615-1-willy@infradead.org\nLiterally, this patchset adds the mm_struct pointer to struct page if it is used for page tables. This will be useful for several cases usch as uncorrectable errors handling and task-page table relation checking, etc.\n[PATCH v4] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200428221055.598-1-nigupta@nvidia.com\nThis patchset makes the compaction to be more proactively done for better THP allocation success and makes user to be able to control the proactiveness using a sysfs file, /sys/kernel/mm/compaction/proactiveness.\nThe main changes from the v3 of this patchset is add of documentations.\n[PATCH v3 00/25] Large pages in the page cache (Matthew Wilcox) https://lkml.kernel.org/r/20200429133657.22632-1-willy@infradead.org\nThis patchset is for use of huge pages in the page cache. This will reduce many of overheads. However, this patchset doesn\u0026rsquo;t pass the xfs test.\nLinux 5.7-rc4 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wjRQPn6zQnR2R2M6rupXq8OZTk7z9xJsUbgEADpZFX+NA@mail.gmail.com\nThe release candidate release of this week is a bit smaller than usual. It\u0026rsquo;s smallest rc4 since the tiny one we had over the Christmas week. Torvalds think this is due to a timing issue and because there was no pull request from network. That said, he also says things are calm.\n","date":1588222644,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588222644,"objectID":"4aca1178f2c1bd81d3e29aa131e2c86d","permalink":"/post/lkml_news_v5.7-rc4/","publishdate":"2020-04-30T06:57:24+02:00","relpermalink":"/post/lkml_news_v5.7-rc4/","section":"post","summary":"[PATCH 0/7] Record the mm_struct in the page table pages (Matthew Wilcox) https://lkml.kernel.org/r/20200428194449.22615-1-willy@infradead.org\nLiterally, this patchset adds the mm_struct pointer to struct page if it is used for page tables. This will be useful for several cases usch as uncorrectable errors handling and task-page table relation checking, etc.\n[PATCH v4] mm: Proactive compaction (Nitin Gupta) https://lkml.kernel.org/r/20200428221055.598-1-nigupta@nvidia.com\nThis patchset makes the compaction to be more proactively done for better THP allocation success and makes user to be able to control the proactiveness using a sysfs file, /sys/kernel/mm/compaction/proactiveness.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc4","type":"post"},{"authors":[],"categories":[],"content":"ACM has decided to allow open access to every article in ACM DL until June 30, to help people doing remote works due to COVID-19. I found this by checking my papers in ACM DL. I believe this is a great decision of ACM.\n","date":1587530720,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587530720,"objectID":"57089519130b4d58fb356ba284296317","permalink":"/post/acmdl_is_open_until_june/","publishdate":"2020-04-22T06:45:20+02:00","relpermalink":"/post/acmdl_is_open_until_june/","section":"post","summary":"ACM has decided to allow open access to every article in ACM DL until June 30, to help people doing remote works due to COVID-19. I found this by checking my papers in ACM DL. I believe this is a great decision of ACM.","tags":["acm","acmdl","academy"],"title":"ACM DL is allowing open access to every article until June","type":"post"},{"authors":[],"categories":["lkml news"],"content":"LSFMMBPF 2020 Cancellation announcement (Josef Bacik) https://lkml.kernel.org/r/0b6d3d6f-99de-3603-4b42-c3db5113633d@toxicpanda.com\nDue to the COVID-19, LSFMM, which was supposed to be help April, has delayed before, and now it has just canceled. What a shame, but this might be the right thing to do. This mail also announce the schedule of next year LSFMM. It will be held in Palm Springs, on May 12-14, 2021 at the Riviera Palm Springs.\n[PATCH 2/2] mm: support vector address ranges for process_madvise (Minchan Kim) https://lkml.kernel.org/r/20200423145215.72666-2-minchan@kernel.org\nThis is a modification of process_madvise() interface for support of multiple address ranges. In Android, the applications usually has thousands of vmas due to the Zygote and thus need a number of process_madvise() calls to adjust their memory. The author has shown about 15% performance improvement by comparing 2000-vma syscall and 1-vector syscall.\nLinux 5.7-rc3 (Linus Torvalds) https://lkml.kernel.org/r/CAHk-=wiDq0imdGHZwCnvWM1bc8r++==fB4BDrfenAB9_CZ45+w@mail.gmail.com\nThe third release candidate is released. Nothing weird, just normal, though this release is bigger than rc2 and bigger than other rc3 of 5.x releases.\nAs always, drivers and tooling are noticeable. In case of tooling, it must be due to the pm-graph update.\n","date":1587530671,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587530671,"objectID":"cd66de19d01d18f192be964a297ee71f","permalink":"/post/lkml_news_v5.7-rc3/","publishdate":"2020-04-22T06:44:31+02:00","relpermalink":"/post/lkml_news_v5.7-rc3/","section":"post","summary":"LSFMMBPF 2020 Cancellation announcement (Josef Bacik) https://lkml.kernel.org/r/0b6d3d6f-99de-3603-4b42-c3db5113633d@toxicpanda.com\nDue to the COVID-19, LSFMM, which was supposed to be help April, has delayed before, and now it has just canceled. What a shame, but this might be the right thing to do. This mail also announce the schedule of next year LSFMM. It will be held in Palm Springs, on May 12-14, 2021 at the Riviera Palm Springs.\n[PATCH 2/2] mm: support vector address ranges for process_madvise (Minchan Kim) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc3","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC] autonuma: Support to scan page table asynchronously (Huang Ying) https://lkml.kernel.org/r/20200414081951.297676-1-ying.huang@intel.com\nAutoNUMA is currently scanning page tables of the processes in the process context and therefore this can increase the latency of the process. This RFC thus makes the page table scanning asynchronous if there are idle CPUs.\n[PATCH v4 00/10] Add a new mmap locking API wrapping mmap_sem calls https://lkml.kernel.org/r/20200415004353.130248-1-walken@google.com\nThis is just a repost of the patch series rebased on v5.7-rc1.\nLinux 5.7-rc2 (Linux Torvalds) https://lkml.kernel.org/r/CAHk-=wiQsJu-ZFjt7+c9FVD5R40khtZiihrT+7O3UaVvHYz=HQ@mail.gmail.com\nAfter a week pass since the rc1 release, rc2 is released. Torvalds says the changes are very normal and clam as always, maybe because rc2 is usually the time for taking breathe after the busy merge window.\n","date":1587098800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587358593,"objectID":"9cf171e8442ab5cab600e185bf3b7622","permalink":"/post/lkml_news_v5.7-rc2/","publishdate":"2020-04-17T06:46:40+02:00","relpermalink":"/post/lkml_news_v5.7-rc2/","section":"post","summary":"[RFC] autonuma: Support to scan page table asynchronously (Huang Ying) https://lkml.kernel.org/r/20200414081951.297676-1-ying.huang@intel.com\nAutoNUMA is currently scanning page tables of the processes in the process context and therefore this can increase the latency of the process. This RFC thus makes the page table scanning asynchronous if there are idle CPUs.\n[PATCH v4 00/10] Add a new mmap locking API wrapping mmap_sem calls https://lkml.kernel.org/r/20200415004353.130248-1-walken@google.com\nThis is just a repost of the patch series rebased on v5.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v5.7-rc2","type":"post"},{"authors":[],"categories":[],"content":"With the upload of the accepted papers list, EuroSys homepage also updated its notice about COVID-19 related notification. It previously tried to reschedule the offline meeting, however seems they changed mind and decided to do virtual (online) conference. It\u0026rsquo;s a bad news for authors and people who planned to participate the offline meetings, but a good new for other people, because they would be allowed to participate in the conference without fee.\n","date":1586070311,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586070311,"objectID":"e4674b32877fa01c84ab1d303cd4f2c6","permalink":"/post/eurosys20_will_be_held_online/","publishdate":"2020-04-05T09:05:11+02:00","relpermalink":"/post/eurosys20_will_be_held_online/","section":"post","summary":"With the upload of the accepted papers list, EuroSys homepage also updated its notice about COVID-19 related notification. It previously tried to reschedule the offline meeting, however seems they changed mind and decided to do virtual (online) conference. It\u0026rsquo;s a bad news for authors and people who planned to participate the offline meetings, but a good new for other people, because they would be allowed to participate in the conference without fee.","tags":["rcx","eurosys"],"title":"Eurosys'20 will be held online","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[GIT PULL] XArray for 5.7-rc1 https://lkml.kernel.org/r/20200331141749.GB21484@bombadil.infradead.org\nMatthew\u0026rsquo;s XArray pull request for 5.7 merge window. Quickly merged by Torvald.\n[PATCH v5 00/10] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1585892447-32059-1-git-send-email-iamjoonsoo.kim@lge.com\nThe fifth version of the workingset protection.\n[PATCH v4 0/2] mm: using CMA for 1 GB hugepages allocation https://lkml.kernel.org/r/20200407010431.1286488-1-guro@fb.com\nThis patchset make hugetlb to use CMA for 1GB hugepage allocations.\n[PATCH RFC] mm: compaction: avoid migrating non-cma pages to a cma area The compaction algorithm doesn\u0026rsquo;t distinguish CMA from other movable pageblocks. In other words, it can move non-cma pages into a cma zone. This patch avoid the problem by preserving non-cma pages from being moved into a cma area.\nLinux 5.7-rc1 https://lkml.kernel.org/r/CAHk-=wh0F0fnOQA3dr_-QCdjc_FTTk3ccPFLU33zr3zLD9FQ7Q@mail.gmail.com\nThe merge window for Linux 5.7 has closed about one or two hours earlier than usual, due to the Easter Sunday.\nTorvalds says the merge window was pretty normal. Not too big, not too small. The distribution of patches also seems quite normal.\nThe kernel technical advisotry board (TAB) asked Torvalds to announce that they would help people struggling their kernel work from COVID-19.\n","date":1586068917,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586068917,"objectID":"891d76d7dd22364c172d78f5bcc5185d","permalink":"/post/lkml_news_v5.7-rc1/","publishdate":"2020-04-05T08:41:57+02:00","relpermalink":"/post/lkml_news_v5.7-rc1/","section":"post","summary":"[GIT PULL] XArray for 5.7-rc1 https://lkml.kernel.org/r/20200331141749.GB21484@bombadil.infradead.org\nMatthew\u0026rsquo;s XArray pull request for 5.7 merge window. Quickly merged by Torvald.\n[PATCH v5 00/10] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1585892447-32059-1-git-send-email-iamjoonsoo.kim@lge.com\nThe fifth version of the workingset protection.\n[PATCH v4 0/2] mm: using CMA for 1 GB hugepages allocation https://lkml.kernel.org/r/20200407010431.1286488-1-guro@fb.com\nThis patchset make hugetlb to use CMA for 1GB hugepage allocations.\n[PATCH RFC] mm: compaction: avoid migrating non-cma pages to a cma area The compaction algorithm doesn\u0026rsquo;t distinguish CMA from other movable pageblocks.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.7-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v5 00/38] Add KernelMemorySanitizer infrastructure (glider) https://lkml.kernel.org/r/20200325161249.55095-1-glider@google.com\nThis is the fifth official patchset for kernel uninitialized memory related error detector, KMSAN.\n[PATCH 1/2] mm: cma: NUMA node interface (Aslan Barikov) https://lkml.kernel.org/r/20200326212718.3798742-1-aslan@fb.com\nCMA provides no way to specify what NUMA node the memory area to be allocated. This commit adds the interface to specify the NUMA node to use for the allocation.\n[PATCH v3 00/10] Add a new mmap locking API wrapping mmap_sem calls (Michel Lespinasse) https://lkml.kernel.org/r/20200327225102.25061-1-walken@google.com\nThis patchset adds new mmap locking API rather than rwsem, but just wrapping it. This is for further step towards rwsem substitution with better one such as range lock. The new interface looks like mmap_init_lock(mm), mmap_write_lock(mm) and mmap_read_lock(mm).\nLinux 5.6 https://lkml.kernel.org/r/CAHk-=wi9ZT7Stg-uSpX0UWQzam6OP9Jzz6Xu1CkYu1cicpD5OA@mail.gmail.com\nAs supposed, v5.6 of Linux has released after rc7. However, the number of changes during last week was a little bit larger than what Torvalds usually likes for official releases. Most of those was from David Miller\u0026rsquo;s network change and David was comfy, and diff was not so scary. So, Torvalds has reeleased 5.6.\n","date":1585383764,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585383764,"objectID":"543ad8429f49b3815f97580fbac4ffc9","permalink":"/post/lkml_news_v5.6/","publishdate":"2020-03-28T09:22:44+01:00","relpermalink":"/post/lkml_news_v5.6/","section":"post","summary":"[PATCH v5 00/38] Add KernelMemorySanitizer infrastructure (glider) https://lkml.kernel.org/r/20200325161249.55095-1-glider@google.com\nThis is the fifth official patchset for kernel uninitialized memory related error detector, KMSAN.\n[PATCH 1/2] mm: cma: NUMA node interface (Aslan Barikov) https://lkml.kernel.org/r/20200326212718.3798742-1-aslan@fb.com\nCMA provides no way to specify what NUMA node the memory area to be allocated. This commit adds the interface to specify the NUMA node to use for the allocation.\n[PATCH v3 00/10] Add a new mmap locking API wrapping mmap_sem calls (Michel Lespinasse) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"Linux 5.6-rc7 https://lkml.kernel.org/r/CAHk-=wipv1y2Z7=CDQ5ajb2OvSyq-0BL9yLRPm1YqW+sjcSDzQ@mail.gmail.com\nThe world is struggling due to the COVID-19, but kernel development seems quite normal. Torvalds released the 7th rc for the Linux 5.6. There is nothing strange or worrysome here. We will get the v5.6 next week, unless something bad happens.\n","date":1584684291,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584684291,"objectID":"2f8ed7f655049fcbef25c320d8f25aeb","permalink":"/post/lkml_news_v5.6-rc7/","publishdate":"2020-03-20T07:04:51+01:00","relpermalink":"/post/lkml_news_v5.6-rc7/","section":"post","summary":"Linux 5.6-rc7 https://lkml.kernel.org/r/CAHk-=wipv1y2Z7=CDQ5ajb2OvSyq-0BL9yLRPm1YqW+sjcSDzQ@mail.gmail.com\nThe world is struggling due to the COVID-19, but kernel development seems quite normal. Torvalds released the 7th rc for the Linux 5.6. There is nothing strange or worrysome here. We will get the v5.6 next week, unless something bad happens.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"LSF/MM/BPF 2020: Postponement announcement (Josef Bacik) https://lkml.kernel.org/r/e4f390c7-3b25-67c8-5d6d-d7e87ba1c072@toxicpanda.com\nCOVID-19 outbreak has finally delayed the LSF/MM/BPF of this year.\nLinux 5.6-rc6 https://lkml.kernel.org/r/CAHk-=whcVTGVPtvdb9SdCcjLawG6tLvbNWfWB_Y6=QhovFy2rg@mail.gmail.com\nSixth rc release, Torvalds says things looks quite normal. I\u0026rsquo;m looking forward for 5.6 official release.\n","date":1584339864,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584339864,"objectID":"048f7cff97a300dd778f957f60b45916","permalink":"/post/lkml_news_v5.6-rc6/","publishdate":"2020-03-16T07:24:24+01:00","relpermalink":"/post/lkml_news_v5.6-rc6/","section":"post","summary":"LSF/MM/BPF 2020: Postponement announcement (Josef Bacik) https://lkml.kernel.org/r/e4f390c7-3b25-67c8-5d6d-d7e87ba1c072@toxicpanda.com\nCOVID-19 outbreak has finally delayed the LSF/MM/BPF of this year.\nLinux 5.6-rc6 https://lkml.kernel.org/r/CAHk-=whcVTGVPtvdb9SdCcjLawG6tLvbNWfWB_Y6=QhovFy2rg@mail.gmail.com\nSixth rc release, Torvalds says things looks quite normal. I\u0026rsquo;m looking forward for 5.6 official release.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc6","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v1 00/11] virtio-mem: paravirtualized memory https://lkml.kernel.org/r/20200302134941.315212-1-david@redhat.com\nAt KVM Forum 2018, virtio-mem\u0026rsquo;s basic idea has presented and now this patchset introduces it. This provides a flexible, cross-architecture memory hot(un)plug solution.\n[PATCH v7 0/7] introduce memory hinting API for external process https://lkml.kernel.org/r/20200302193630.68771-1-minchan@kernel.org\nFinally, this patchset has accepted by Andrew Morton.\n[PATCH v2] mm: Proactive compaction https://lkml.kernel.org/r/20200302213343.2712-1-nigupta@nvidia.com\nThis patchset makes kernel to do compaction proactively instead of THP allocation failures, to minimize the latency spike which comes from the compaction. It significantly reduces THP allocation latency under memory fragmentation. 95th percentile of the latency has reduced from 33,799 to 429!\n[RFC v4 0/7] Implement Data Access Monitoring-based Memory Operation Schemes https://lkml.kernel.org/r/20200303121406.20954-1-sjpark@amazon.com\nMy fourth RFC for DAMON-based Operation Schemes. This time, I updated the evaluation results of ETHP scheme with more reliable data.\nTL;DR: \u0026lsquo;ethp\u0026rsquo; removes 97.61% of \u0026lsquo;thp\u0026rsquo; memory space overhead while preserving 25.40% (up to 88.36%) of \u0026lsquo;thp\u0026rsquo; performance improvement in total.\n[LSFMMBPF TOPIC] Killing LSFMMBPF https://lkml.kernel.org/r/b506a373-c127-b92e-9824-16e8267fc910@toxicpanda.com\nAnother LSF/MM/BPF topic proposal. Author suggests killing LSF/MM/BPF. The main points of problems the author feels are LSF/MM/BPF is invitation only but there are too many people need to be involved so that cannot fully invite every necessary people. The author proposing LSF/MM to be somewhat like LPC instead.\n[LSFMMBPF TOPIC] LSFMMBPF 2020 COVID-19 status update https://lkml.kernel.org/r/20200307185420.GG2236@42.do-not-panic.com\nCOVID-19 is affecting so many conferences. It seems LSF/MM/BPF also not an exception. The committees are trying to figure out what is the right decision for it.\nLinux 5.6-rc5 https://lkml.kernel.org/r/CAHk-=wjie=L9=jO-VKR5u7+5Ekis-VR5m=zUChR9djhAuAN55g@mail.gmail.com\nTorvalds made this release from 28,000 feet, mainly due to flight cancellations and travel trouble. Maybe due to the COVID-19?\nThe release itself shows no worrysome things, but slightly bigger than Torvalds\u0026rsquo; preferred -rc5 size.\n","date":1583212611,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583212611,"objectID":"c3224133060a95c0c513274a6fd183e5","permalink":"/post/lkml_news_v5.6-rc5/","publishdate":"2020-03-03T06:16:51+01:00","relpermalink":"/post/lkml_news_v5.6-rc5/","section":"post","summary":"[PATCH v1 00/11] virtio-mem: paravirtualized memory https://lkml.kernel.org/r/20200302134941.315212-1-david@redhat.com\nAt KVM Forum 2018, virtio-mem\u0026rsquo;s basic idea has presented and now this patchset introduces it. This provides a flexible, cross-architecture memory hot(un)plug solution.\n[PATCH v7 0/7] introduce memory hinting API for external process https://lkml.kernel.org/r/20200302193630.68771-1-minchan@kernel.org\nFinally, this patchset has accepted by Andrew Morton.\n[PATCH v2] mm: Proactive compaction https://lkml.kernel.org/r/20200302213343.2712-1-nigupta@nvidia.com\nThis patchset makes kernel to do compaction proactively instead of THP allocation failures, to minimize the latency spike which comes from the compaction.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[LSF/MM ATTEND]: page fault and mmap_sem scalabity https://lkml.kernel.org/r/e67a9e90-5a64-b3cc-5014-2fd1e5bf3895@linux.ibm.com\nA short mail from Laurent saying he is interested in attending the discussions about the page fault and mmap_sem scalability issue.\nLinux 5.6-rc4 https://lkml.kernel.org/r/CAHk-=wgD3=ryAapzdpcZumMK2RQWBvWVE70qp_ft_cjdRX9htQ@mail.gmail.com\nFourthe rc release. 5.6 official release is not so far. Torvalds says this is fairly reasonsable sized release.\n","date":1583127918,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583127918,"objectID":"c682ed9a097cfa4e8b33b62dd83e3cbb","permalink":"/post/lkml_news_v5.6-rc4/","publishdate":"2020-03-02T06:45:18+01:00","relpermalink":"/post/lkml_news_v5.6-rc4/","section":"post","summary":"[LSF/MM ATTEND]: page fault and mmap_sem scalabity https://lkml.kernel.org/r/e67a9e90-5a64-b3cc-5014-2fd1e5bf3895@linux.ibm.com\nA short mail from Laurent saying he is interested in attending the discussions about the page fault and mmap_sem scalability issue.\nLinux 5.6-rc4 https://lkml.kernel.org/r/CAHk-=wgD3=ryAapzdpcZumMK2RQWBvWVE70qp_ft_cjdRX9htQ@mail.gmail.com\nFourthe rc release. 5.6 official release is not so far. Torvalds says this is fairly reasonsable sized release.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/2] slabinfo: parse all NUMA attributes https://lkml.kernel.org/r/20200217084828.9092-1-tobin@kernel.org\nThe author of this patchset found some information regarding NUMA is missed in slabinfo. This patchset adds the info.\n[PATCH v6 0/7] introduce memory hinting API for external process https://lkml.kernel.org/r/20200219014433.88424-1-minchan@kernel.org\nSixth version of the patchset for new system call, \u0026lsquo;madvise_process()'. Changes are not so big. Support null task argument and requestor\u0026rsquo;s mm for \u0026lsquo;io_madvise()'.\n[PATCH] mm: Stop kswapd early when nothing\u0026rsquo;s waiting for it to free pages https://lkml.kernel.org/r/20200219182522.1960-1-sultan@kerneltoast.com\nOnce kswapd is awaken, it does many things. To avoid that, this patch stops kswapd prematurely if it doesn\u0026rsquo;t need to work to make and allocation succeed anymore.\n[PATCH v2 0/9] workingset protection/detection on the anonymous LRU list The second version of the patchset for workingset in LRU protection. This patchset avoids evicting workingset for scanning data.\nLinux 5.6-rc3 https://lkml.kernel.org/r/CAHk-=whGODQBDqPGcEFU8EVkNAzMK9+gK_sGaUNHSZnB=JL+_Q@mail.gmail.com\nThe third rc3 release was a little bit small. However, there were smaller rc3 and bigger rc3, either. Torvalds says this is fairly normal rc3, though there are too much noise in the signal to be sure about.\n","date":1582522826,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582522826,"objectID":"4a4341bb40f7e9a7638fc75091ff1b20","permalink":"/post/lkml_news_v5.6-rc3/","publishdate":"2020-02-24T06:40:26+01:00","relpermalink":"/post/lkml_news_v5.6-rc3/","section":"post","summary":"[PATCH 0/2] slabinfo: parse all NUMA attributes https://lkml.kernel.org/r/20200217084828.9092-1-tobin@kernel.org\nThe author of this patchset found some information regarding NUMA is missed in slabinfo. This patchset adds the info.\n[PATCH v6 0/7] introduce memory hinting API for external process https://lkml.kernel.org/r/20200219014433.88424-1-minchan@kernel.org\nSixth version of the patchset for new system call, \u0026lsquo;madvise_process()'. Changes are not so big. Support null task argument and requestor\u0026rsquo;s mm for \u0026lsquo;io_madvise()'.\n[PATCH] mm: Stop kswapd early when nothing\u0026rsquo;s waiting for it to free pages https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc3","type":"post"},{"authors":[],"categories":["projects"],"content":"Read-copy update (RCU) can provide ideal scalability for read-mostly workloads, but some believe that it provides only poor performance for updates. This belief is due to the lack of RCU-centric update synchronization mechanisms. RCU instead works with a range of update-side mechanisms, such as locking. In fact, many developers embrace simplicity by using global locking. Logging, hardware transactional memory, or fine-grained locking can provide better scalability, but each of these approaches has limitations, such as imposing overhead on readers or poor scalability on non-uniform memory access (NUMA) systems, mainly due to their lack of NUMA-aware design principles.\nThis project introduces an RCU extension (RCX) that provides highly scalable RCU updates on NUMA systems while retaining RCU’s read-side benefits. RCX combines hardware transactional memory (HTM) and traditional locking based on our NUMA-aware design principles for RCU. Micro-benchmarks on a NUMA system having 144 hardware threads show RCX has up to 22.61 times better performance and up to 145.00 times lower HTM abort rates compared to a state-of-the-art RCU/HTM combination. To demonstrate the effectiveness and applicability of RCX, we have applied RCX to parallelize some of the Linux kernel memory management system and an in-memory database system. The optimized kernel and the database show up to 24 and 17 times better performance compared to the original version, respectively.\nSource Code The source code of RCX is available at: https://github.com/rcx-sync.\nPublications and Presentations  SeongJae Park, Paul E. McKenney, Laurent Dufour, Heon Y. Yeom, An HTM-Based Update-side Synchronization for RCU on NUMA systems. In 15th ACM European Conference on Computer Systems (EuroSys), April 2020. Paper, Video (Short), Video (Long), Slides, Link  News 2020-04-19: The EuroSys'20 paper is uploaded at ACM DL.\n2020-04-04: The accepted papers list of EuroSys'20 has uploaded\n2020-02-14: The paper introducing RCX has accepted to be presented by EuroSys'20.\n","date":1581754315,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588098498,"objectID":"376e88e8447b03092cd268b07f5f5de5","permalink":"/post/rcx/","publishdate":"2020-02-15T09:11:55+01:00","relpermalink":"/post/rcx/","section":"post","summary":"Read-copy update (RCU) can provide ideal scalability for read-mostly workloads, but some believe that it provides only poor performance for updates. This belief is due to the lack of RCU-centric update synchronization mechanisms. RCU instead works with a range of update-side mechanisms, such as locking. In fact, many developers embrace simplicity by using global locking. Logging, hardware transactional memory, or fine-grained locking can provide better scalability, but each of these approaches has limitations, such as imposing overhead on readers or poor scalability on non-uniform memory access (NUMA) systems, mainly due to their lack of NUMA-aware design principles.","tags":["projects","rcx"],"title":"RCX: Read-Copy Transact","type":"post"},{"authors":[],"categories":["publications"],"content":"The last research paper I wrote before joining my current team, has been accepted to be presented by the EuroSys'20. The title of the paper is “An HTM-Based Update-side Synchronization for RCU on NUMA systems”.\n","date":1581705876,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586039906,"objectID":"3872486b4fd0a2ec1674014771231b6c","permalink":"/post/eurosys2020_talk/","publishdate":"2020-02-14T19:44:36+01:00","relpermalink":"/post/eurosys2020_talk/","section":"post","summary":"The last research paper I wrote before joining my current team, has been accepted to be presented by the EuroSys'20. The title of the paper is “An HTM-Based Update-side Synchronization for RCU on NUMA systems”.","tags":["eurosys","paper","talk"],"title":"My paper has accepted to appear in the EuroSys2020","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[RFC PATCH 0/3] DAMON: Implement The Data Access Pattern Awared Memory Management Rules https://lkml.kernel.org/r/20200210150921.32482-1-sjpark@amazon.com\nThis is an RFC patch from me that implementing simple way to run data access pattern awared memory system using DAMON. Proactive reclamation or access awared THP promotion/demotion will be easily available using this change.\n[PATCH 0/9] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1581401993-20041-1-git-send-email-iamjoonsoo.kim@lge.com\nThis patchset is for improving kernel\u0026rsquo;s reclamation scheme in a corner case where pages which used only once evicting hot pages. For example, if there are hot working set and periodically a big region of memory is scanned, the hot working set will be swapped out for each of the scan. This patchset avoid the problem by letting the scanning-like pages to be inserted into the inactive list first.\nOf course, for this change, accurate working set detection is necessary. This patchset detects the working sets mostly based on the previous scheme, but extends it to deal with LRU well.\n[PATCH v4 0/8] introduce memory hinting API for external process https://lkml.kernel.org/r/20200212233946.246210-1-minchan@kernel.org\nThis is the fourth version of the patchset for madvise_common() system call. Seems like the justification for the API itself has finished.\n[LSF/MM/BPF TOPIC] AutoNUMA enhancements to optimize Tiered Memory https://lkml.kernel.org/r/87mu9mhn10.fsf@yhuang-dev.intel.com\nThis is another LSF/MM session proposal. As current kernel reclamation scheme is designed for universal DRAMs, it doesn\u0026rsquo;t work well with tiered memory. Author has worked for AutoNUMA, which can find recently-accessed pages regardless of memory pressure and even frequently-access pages. The authors want to discuss about this in the summit.\n[LFS/MM/BPF Topic] User space OOM management on Chrome OS https://lkml.kernel.org/r/CAPz6YkUci9=d-nkoN9e8pb1eO3Wgchh1GTNSNdWc3kYuvoQdBg@mail.gmail.com\nAnother proposal for LSF/MM. The author wants to share his experience of memory management in Chrom OS development of 8 year, including their use of Zram and per-process reclaim.\n[LSF/MM/BPF TOPIC] Replacing mmap_sem with finer grained locks https://lkml.kernel.org/r/CANN689EippvdwsHuhU-Aq=kNdk8-cAaCzPC7v=zbe6X302NteA@mail.gmail.com\nA lot of LSF/MM proposals this week, maybe because the due is this week. This is old topic, but not solved yet. Authors want to keep the discussion about mmap splitting for multi CPU this year LSF/MM.\n[LSF/MM TOPIC] Guest memory without struct page https://lkml.kernel.org/r/1be38ae3-d51e-2661-d0ab-6ad8baefe804@oracle.com\nstruct page consumes about 1.5% of total memory. Because the structure could be unnecessary for hypervisors, the author want to save the 1.5%.\nLinux 5.6-rc2 https://lkml.kernel.org/r/CAHk-=wgqwiBLGvwTqU2kJEPNmafPpPe_K0XgBU-A58M+mkwpgQ@mail.gmail.com\nrc2 was calm as usual. More than half of the changes are kvm documentation, due to its conversion to ReST format. \u0026lsquo;perf\u0026rsquo; change was also remarkable.\n","date":1581403041,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581403041,"objectID":"896872c31af01942ef26f9d1e37586cb","permalink":"/post/lkml_news_v5.6-rc2/","publishdate":"2020-02-11T07:37:21+01:00","relpermalink":"/post/lkml_news_v5.6-rc2/","section":"post","summary":"[RFC PATCH 0/3] DAMON: Implement The Data Access Pattern Awared Memory Management Rules https://lkml.kernel.org/r/20200210150921.32482-1-sjpark@amazon.com\nThis is an RFC patch from me that implementing simple way to run data access pattern awared memory system using DAMON. Proactive reclamation or access awared THP promotion/demotion will be easily available using this change.\n[PATCH 0/9] workingset protection/detection on the anonymous LRU list https://lkml.kernel.org/r/1581401993-20041-1-git-send-email-iamjoonsoo.kim@lge.com\nThis patchset is for improving kernel\u0026rsquo;s reclamation scheme in a corner case where pages which used only once evicting hot pages.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc2","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[LSF/MM/BPF TOPIC] Memory Tiering discussion https://lkml.kernel.org/r/CAHbLzkqOKtM684SGnCaa9ObHj082KenoPmRXvxMJ1UjcdvrhMQ@mail.gmail.com\nThe author, Yang Shi has posted a patchset for tiered memory management last year, but received no many comments. Meanwhile, Dave posted another similar patch. He wants to discuss about this in LSF/MM this year.\nLinux 5.6-rc1 https://lkml.kernel.org/r/CAHk-=wjVopuAm5Vwa1kK5O1tTzQAGFtCHm8_Hzy3Us1OC=PgUw@mail.gmail.com\nAfter the two weeks, the merge window for 5.6 has finished and therefore the 5.6-rc1 has released.\nThis merge window was slightly smaller than usual. Torvalds think this is the slow effect from the year end holiday season. That said, there were still huge changes (more than 10K commits) and the changes are normal.\n","date":1580278260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580278260,"objectID":"a9869284f6e9fd3ae59645d79e8a6420","permalink":"/post/lkml_news_v5.6-rc1/","publishdate":"2020-01-29T07:11:00+01:00","relpermalink":"/post/lkml_news_v5.6-rc1/","section":"post","summary":"[LSF/MM/BPF TOPIC] Memory Tiering discussion https://lkml.kernel.org/r/CAHbLzkqOKtM684SGnCaa9ObHj082KenoPmRXvxMJ1UjcdvrhMQ@mail.gmail.com\nThe author, Yang Shi has posted a patchset for tiered memory management last year, but received no many comments. Meanwhile, Dave posted another similar patch. He wants to discuss about this in LSF/MM this year.\nLinux 5.6-rc1 https://lkml.kernel.org/r/CAHk-=wjVopuAm5Vwa1kK5O1tTzQAGFtCHm8_Hzy3Us1OC=PgUw@mail.gmail.com\nAfter the two weeks, the merge window for 5.6 has finished and therefore the 5.6-rc1 has released.\nThis merge window was slightly smaller than usual. Torvalds think this is the slow effect from the year end holiday season.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.6-rc1","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH 0/8] Introduce Data Access MONitor (DAMON) https://lkml.kernel.org/r/20200120162757.32375-1-sjpark@amazon.com\nThis is the patchset for the DAMON.\nPaging out when free memory is low but not exhausted (and available memory remains high) https://lkml.kernel.org/r/e994b0a76099437b8edbae925e9ccac8@its-mail-p04.registry.otago.ac.nz\nThis mail introduces an issue on 5.3 and 5.4 kernel that page out is occurred needlessly. The author uses stress and dd to stress memory but still leave some memory in the system. However, the system does swap excessively.\n[LSF/MM/BPF TOPIC] Do not pin pages for various direct-io scheme https://lkml.kernel.org/r/20200122023100.75226-1-jglisse@redhat.com\nAnother talk proposal for the LSF/MM this year. Due to the pinning of the pages for direct I/O, several mm activities including compaction and migration cannot work well. Author want to convert direct io code to obey mmu nitofier to help this situation.\nLinux 5.5 https://lkml.kernel.org/r/CAHk-=wigRZ6TSJU09bMk3Df2DiOw83B7TrQUq+iXroQCK5EVAQ@mail.gmail.com\nUnlike my expectation, Torvalds released 5.5 instead of eighth rc release. There were some changes in network and some of core files, but David told Torvalds the changes are not worth for another rc.\nSo, the merge window has started. That said, Torvalds says that he will have some travel and some things to do during next two weeks, and thus he is hoping those things to go well. Also, he want everybody to understand though he makes soem delay due to the reason.\n","date":1580007137,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580007137,"objectID":"f2c10311c5590ea282d7bee524473154","permalink":"/post/lkml_news_v5.5/","publishdate":"2020-01-26T03:52:17+01:00","relpermalink":"/post/lkml_news_v5.5/","section":"post","summary":"[PATCH 0/8] Introduce Data Access MONitor (DAMON) https://lkml.kernel.org/r/20200120162757.32375-1-sjpark@amazon.com\nThis is the patchset for the DAMON.\nPaging out when free memory is low but not exhausted (and available memory remains high) https://lkml.kernel.org/r/e994b0a76099437b8edbae925e9ccac8@its-mail-p04.registry.otago.ac.nz\nThis mail introduces an issue on 5.3 and 5.4 kernel that page out is occurred needlessly. The author uses stress and dd to stress memory but still leave some memory in the system. However, the system does swap excessively.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5","type":"post"},{"authors":[],"categories":["lkml news"],"content":"REMINDER: LSF/MM/BPF: 2020: Call for Proposals https://lkml.kernel.org/r/20200115215409.5pd4fnoawqzs7rvw@jbacik-mbp\nThis is reminder of the LSF/MM/BPF of this year. It underscores the submitters to also send the mail to the appropriate mailing list as before. Maybe a few of people are missing sending mail but only wite up their proposal to the google form.\n[LSF/MM TOPIC] Free Page Reporting https://lkml.kernel.org/r/4b8671d16573307da09afc56030c2a5f5a9c45bf.camel@linux.intel.com\nIn case of KVM case, as each VM guest receives virtual memory from the host, only when host gets memory pressure the memory being used by guests will be reclaimed. And, the reclaimation could make the guests suffer as the host cannot know what pages are free in the guest and thus could swap out hot data of guests. As an answer, free pages hinting mechanisms has discussed. I think the basic idea is somewhat similar to the proactive reclamation. Author of this mail is working for it and already posting the patchset. He wants to discuss about it in this year LSFMM.\n[PATCH v2 0/5] introduce memory hinting API for external process https://lkml.kernel.org/r/20200116235953.163318-1-minchan@kernel.org\nThe second version of the madvise_process() system call. Modified its interface to support both pid and pidfd.\nLinux 5.5-rc7 https://lkml.kernel.org/r/CAHk-=wjvkH0xJF6yF72VZOF7cifFv3nH9qhGGZh8urLg5xWt=Q@mail.gmail.com\nAs worried, things picked up this week. Half of all merges has arrived to Torvalds during the last two days of the week. That said, Torvalds says he will release 5.5 next week if this was not real picking up of works. If not and it is real pick up due to the holiday season, he will instead release rc8.\nOther than that, things looks fairly normal. Torvalds asks more tests.\n","date":1579338707,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579338707,"objectID":"77defddacc60d7dae716273b6bf20cc0","permalink":"/post/lkml_news_v5.5-rc7/","publishdate":"2020-01-18T10:11:47+01:00","relpermalink":"/post/lkml_news_v5.5-rc7/","section":"post","summary":"REMINDER: LSF/MM/BPF: 2020: Call for Proposals https://lkml.kernel.org/r/20200115215409.5pd4fnoawqzs7rvw@jbacik-mbp\nThis is reminder of the LSF/MM/BPF of this year. It underscores the submitters to also send the mail to the appropriate mailing list as before. Maybe a few of people are missing sending mail but only wite up their proposal to the google form.\n[LSF/MM TOPIC] Free Page Reporting https://lkml.kernel.org/r/4b8671d16573307da09afc56030c2a5f5a9c45bf.camel@linux.intel.com\nIn case of KVM case, as each VM guest receives virtual memory from the host, only when host gets memory pressure the memory being used by guests will be reclaimed.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc7","type":"post"},{"authors":[],"categories":["lkml news"],"content":"OOM killer not nearly agressive enough? https://lkml.kernel.org/r/20200107204412.GA29562@amd\nThe author if this mail, Pavel updated his userspace to x86-64 and encountered chromium\u0026rsquo;s memory hogging. He was required to kill the chromium himself, because OOM killer didn\u0026rsquo;t kill it. He asks whether this means OOM killer is not aggressive enough.\n[PATCH 0/4] introduce memory hinting API for external process https://lkml.kernel.org/r/20200110213433.94739-1-minchan@kernel.org\nMinchan has previously posted the patchset introducing the MADV_COLD, MADV_PAGEOUT and external madvise() able code change. However, he has split the patchset into two part. And, the first part, which adds MADV_COLD and MADV_PAGEOUT has been merged to the mainline. This patchset is the second part of the patchset. Now he aims to let processes to be able to do madvise() to other processes.\nLinux 5.5-rc6 https://lkml.kernel.org/r/CAHk-=wjZRs-nL2SQ3syoyC8-Ycaj-AcH18UHe2b3GV0ayf0ZjQ@mail.gmail.com\nThis release was also very calm. Linus suspects it was due to the holiday. Therefore, he thinks the 5.5 release will be after \u0026lsquo;-rc8\u0026rsquo;, this time. But, it\u0026rsquo;s not fixed plan. If things go well, he might release the 5.5 only after \u0026lsquo;-rc7\u0026rsquo; as usual.\nMost changes for rc6 was for drivers.\n","date":1578724547,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578724547,"objectID":"90e6d4b9ef84742436961dd8287b17a6","permalink":"/post/lkml_news_v5.5-rc6/","publishdate":"2020-01-11T07:35:47+01:00","relpermalink":"/post/lkml_news_v5.5-rc6/","section":"post","summary":"OOM killer not nearly agressive enough? https://lkml.kernel.org/r/20200107204412.GA29562@amd\nThe author if this mail, Pavel updated his userspace to x86-64 and encountered chromium\u0026rsquo;s memory hogging. He was required to kill the chromium himself, because OOM killer didn\u0026rsquo;t kill it. He asks whether this means OOM killer is not aggressive enough.\n[PATCH 0/4] introduce memory hinting API for external process https://lkml.kernel.org/r/20200110213433.94739-1-minchan@kernel.org\nMinchan has previously posted the patchset introducing the MADV_COLD, MADV_PAGEOUT and external madvise() able code change.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc6","type":"post"},{"authors":[],"categories":["git"],"content":"In some case, we need to send patches that made by other people instead. git send-email command can know this situation by itself by comparing the commit author information and mail sender\u0026rsquo;s information. In that case, git send-email automatically add From: line pointing the real author of the patch in the body of the mail so that maintainers applying the patches can set the author information correctly.\nFor example, if \u0026ldquo;Alice alice@abc.com\u0026rdquo; has made a commit and \u0026ldquo;Bob bob@abc.com\u0026rdquo; formats the commit into a patch file and sends it, git send-email automatically adds From: Alice \u0026lt;alice@abc.com\u0026gt; line in the body of the mail. And, when a maintainer is applying the patch using git am, the patch is applied with author \u0026ldquo;Alice alice@abc.com\u0026rdquo;.\nHowever, please note that git send-email knows the situation by comparing the author information and the command caller\u0026rsquo;s git user eamil configuration or given \u0026lsquo;\u0026ndash;from\u0026rsquo; option only, not considering real smtp email account.\nFor example, suppose that Alice has two email accounts, alice@abc.com and alice@def.com. And, Alice wants to use alice@abc.com as her email address in the git history, but needs to send her patches using def.com SMTP server. She might use below commands.\n$ git config sendemail.smtpserver smtp.def.com $ git config sendemail.smtpuser alice@def.com $ git config user.email \u0026quot;alice@abc.com\u0026quot; $ git commit -as -m 'the patch' $ git format-patch HEAD^ $ git send-email 0001_the_patch.patch Because her git config is saying the user.email is alice@abc.com and the patch is authored by alice@abc.com, git send-email thinks same people is sending the patch. Thus, it doesn\u0026rsquo;t add the \u0026lsquo;From:\u0026rsquo; line in the body of the mail. Of course, git send-email tries to set the from of the mail as alice@abc.com, but as the additionally specified \u0026lsquo;from\u0026rsquo; information is usually (at least gmail does) ignored by the SMTP server, the maintainer will receive the mail saying author email as \u0026lsquo;alice@def.com\u0026rsquo; only.\nNote that git send-email considers the email address it tries to use as the from address, not the final one that SMTP server will use. Thus, this problem can be worked around in weird way using the --from option of the git send-email. In the above case, giving --from \u0026quot;Alice \u0026lt;alice@def.com\u0026gt;\u0026quot; option to git send-email makes the command to think the sender is not the author (alice@abc.com) and as a result, it adds the From: line in the body.\nAlso, please note that adding --from option does not always add the From: line in the body. Rather than that, it can even hide the From: line you intended to add, if you give the address that same with the commit\u0026rsquo;s author, regardless of what SMTP server you use. For example,\n$ git config sendemail.smtpserver smtp.def.com $ git config sendemail.smtpuser alice@def.com $ git config user.email \u0026quot;alice@abc.com\u0026quot; $ git commit -as -m 'the patch' $ git format-patch HEAD^ $ git config user.email \u0026quot;alice@def.com\u0026quot; $ git send-email --from alice@abc.com 0001_the_patch.patch If the final command had no --from option, it would added the From: in-body line. However, because it specifies the real author address using --from option, git send-email thinks the real author is sending this mail and omits the From: line in the body.\n","date":1578341405,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578341405,"objectID":"64c49bd057c2017137916aab2db1d0cf","permalink":"/post/git_send_email_multiple_email_caution/","publishdate":"2020-01-06T21:10:05+01:00","relpermalink":"/post/git_send_email_multiple_email_caution/","section":"post","summary":"In some case, we need to send patches that made by other people instead. git send-email command can know this situation by itself by comparing the commit author information and mail sender\u0026rsquo;s information. In that case, git send-email automatically add From: line pointing the real author of the patch in the body of the mail so that maintainers applying the patches can set the author information correctly.\nFor example, if \u0026ldquo;Alice alice@abc.","tags":["git","git send-email","patches"],"title":"A thing you should know if you are using multiple email accounts with `git send-email`","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH v16 QEMU 4/3 RFC] memory: Add support for MADV_FREE as mechanism to lazy discard pages https://lkml.kernel.org/r/20200103212339.29849.99817.stgit@localhost.localdomain\nThis RFC patch modifies QEMU to able to use MADV_FREE for discard of pages to avoid the page zeroing cost.\nLinux 5.5-rc5 https://lkml/kernel.org/r/CAHk-=whwmJQwwMD06VfPapDmc52LFQhG3HP6VyVLXVA=nYi_ow@mail.gmail.com\nTime files, rc5 released. Last week was also another calm week due to the new year holidays, and thus this release is small. Linus expects it will be changed in this upcoming weeks, or 5.5 be the easiest release.\nAlso, Linus is delivering one sad news that Bruce Evans has passed away. He was the developer behind Minix/i386, which Linus has used for early development of Linux. Rest in peace, Bruce.\n","date":1577724863,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577724863,"objectID":"c9fc6d7879276d40e87e6716cc781b74","permalink":"/post/lkml_news_v5.5-rc5/","publishdate":"2019-12-30T17:54:23+01:00","relpermalink":"/post/lkml_news_v5.5-rc5/","section":"post","summary":"[PATCH v16 QEMU 4/3 RFC] memory: Add support for MADV_FREE as mechanism to lazy discard pages https://lkml.kernel.org/r/20200103212339.29849.99817.stgit@localhost.localdomain\nThis RFC patch modifies QEMU to able to use MADV_FREE for discard of pages to avoid the page zeroing cost.\nLinux 5.5-rc5 https://lkml/kernel.org/r/CAHk-=whwmJQwwMD06VfPapDmc52LFQhG3HP6VyVLXVA=nYi_ow@mail.gmail.com\nTime files, rc5 released. Last week was also another calm week due to the new year holidays, and thus this release is small. Linus expects it will be changed in this upcoming weeks, or 5.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc5","type":"post"},{"authors":[],"categories":["git"],"content":"Many communities are using Github nowadays, but some communities still use mailing list based development style. The Linux kernel community would be a good example. In the style, all major communications are made by email only. Patches are submitted to the maintainers and one more open mailing lists as a mail. Reviews are also made as replies to the mail.\nBecause some email clients can distort the original content for so-called ``rich user experience\u0026rsquo;\u0026rsquo; (e.g., changing tabs to spaces or inserting html code), patch submitting people should aware of it and try to keep their mail content to be plain. This can be awful or even impossible on some mail clients.\nGit can help formatting and sending your patch files using SMTP. This post describes how you can use git to send email.\nPackage Install If you installed git using the package manager, you should install not only git package, but also git-email package. If you are using apt package manager, simply type $ sudo apt install git-email on the terminal.\nSMTP Setting Then, set smtp server configurations for you. Of course, you should enable the smtp configuration on your mail accout first. If your mail account is ready for the smtp, now you should let git to know how it can access to your mail account using \u0026lsquo;git config\u0026rsquo;. If you want to use your Gmail account, it will be as below:\n$ git config --global sendemail.smtpserver smtp.gmail.com $ git config --global sendemail.smtpserverport 587 $ git config --global sendemail.smtpencryption tls $ git config --global sendemail.smtpuser \u0026lt;your-gmail-account@gmail.com\u0026gt; You can also set the mail account password as below, but I will recommend you to not store your password in that way, because it can harm your security.\n$ git config --global sendemail.smtppass \u0026lt;your_password\u0026gt; Send Mail Sending mail is so easy. You should first save your mail message in a file. This could be patch file, which can also easily formatted using git format-patch. After that, make sure you know who you want your mail to be sent to. Now, just type below command.\n$ git send-email --to \u0026lt;recipients\u0026gt; \u0026lt;the file containing your message\u0026gt; If you have not set your password (again, I recommend you do not save your password), this command will ask your password. Just type it on the prompt. Then, your mail will delivered to the recipients you specified.\nFor more detail, $ git help send-email.\nConclusion Summarised how you can send email using Git. Install packages, set SMTP, write your mail in a plain file, and git send-email. That\u0026rsquo;s it. :)\n","date":1577523529,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577523529,"objectID":"9492c4f3f178d5c77346e373a690f99b","permalink":"/post/git_email_setup/","publishdate":"2019-12-28T09:58:49+01:00","relpermalink":"/post/git_email_setup/","section":"post","summary":"Many communities are using Github nowadays, but some communities still use mailing list based development style. The Linux kernel community would be a good example. In the style, all major communications are made by email only. Patches are submitted to the maintainers and one more open mailing lists as a mail. Reviews are also made as replies to the mail.\nBecause some email clients can distort the original content for so-called ``rich user experience\u0026rsquo;\u0026rsquo; (e.","tags":["git","git-email","patch","submission"],"title":"Setting Git for email send","type":"post"},{"authors":[],"categories":["projects"],"content":"Modern workloads tend to have huge working sets and low locality. Despite this trend, the capacity of DRAM has not been increased enough to accommodate such huge working sets. Therefore, memory management mechanisms optimized for such modern workloads are widely required today. For such optimizations, knowing the data access pattern of given workloads is essential. However, manually extracting such patterns from huge and complex workloads is exhaustive. Worse yet, existing memory access analysis tools incur unacceptably high overheads for unnecessarily detailed analysis results.\nDAMON is a data access monitoring framework subsystem for the Linux kernel. It mitigates the problems with its core mechanisms (refer to Design for the detail), which make it\n accurate (the monitoring output is useful enough for DRAM level memory management; It might not appropriate for CPU Cache levels, though), light-weight (the monitoring overhead is low enough to be applied online), and scalable (the upper-bound of the overhead is in constant range regardless of the size of target workloads).  Using this framework, therefore, the kernel’s memory management mechanisms can make advanced decisions. Experimental memory management optimization works that incurring high data accesses monitoring overhead could implemented again. In user space, meanwhile, users who have some special workloads can write personalized applications for better understanding and optimizations of their workloads and systems.\nDemo Video   Demo Screenshot Recent News 2021-10-02: DAMOS patchset is merged in the -mm tree.\n2021-09-23: DAMON and DAMOS are presented in the kernel summit. Slides, Video, Link\n2021-09-16: DAMON development tree on kernel.org is created.\n2021-09-08: DAMON patchset is merged in the Linus Torvalds\u0026rsquo; tree, aka mainline\n2021-09-07: DAMON/DAMOS will be presented at the Kernel Summit 2021\nGetting Started You can start using DAMON by\n installing DAMON-enabled kernel and its user-space tool, following the tutorial of the user-space tool, and run the automated tests suite.  By following those, you will be able to check if DAMON works on your machine and know how you can use it.\nInstall DAMON is implemented in the Linux kernel, so you should install DAMON-enabled Linux kernel to use it. To check if you\u0026rsquo;re already running DAMON-enabled kernel, you could:\n$ grep CONFIG_DAMON /boot/config-$(uname -r)  If you are an Amazon Linux 2 user, you can install a DAMON-enabled Linux kernel which based on v5.4 or v5.10 using amazon-linux-extras like below:\n$ sudo yum install -y amazon-linux-extras $ sudo amazon-linux-extras install kernel-\u0026lt;5.4 or 5.10\u0026gt; $ sudo reboot  If your package system doesn\u0026rsquo;t have DAMON-enabled kernel in the list, you can fetch a DAMON-merged Linux kernel source tree, build, and install it. Note that you should enable kernel configuration options for DAMON, depending on your demands. For example:\n$ cd $THE_FETCHED_DAMON_KERNEL_SOURCE_TREE $ make olddefconfig $ echo 'CONFIG_DAMON=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_KUNIT_TEST=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_VADDR=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_PADDR=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_PGIDLE=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_VADDR_KUNIT_TEST=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_DBGFS=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_DBGFS_KUNIT_TEST=y' \u0026gt;\u0026gt; /.config $ echo 'CONFIG_DAMON_RECLAIM=y' \u0026gt;\u0026gt; /.config $ make -j$(nproc) $ sudo make modules_install install  Source Code There are several DAMON-merged Linux kernel source trees for different users. You may pick one among those based on your needs.\nFor users who want only a stable version of DAMON, below trees are available.\n Linus Torvalds\u0026rsquo; mainline tree contains the latest stable version of DAMON. Amazon Linux 2 v5.10.y tree and v5.4.y tree contains more recent version of DAMON, which back-ported on v5.10.y and v5.4.y, respectively.  If you have interest in DAMON features under development, below trees will be appropriate. Those trees contain latest version of DAMON which having features under development.\n damon/master contains the snapshot of the tree for the last release, so relatively stable and only not so frequently updated. damon/next contains the changes for the next release, so likely unstable and frequently updated.  For people who have interst in DAMON features under development and use LTS kernels as their baseline, there are couple of trees that respectively based on two latest LTS kernels. DAMON of the master tree is backported in there.\n damon/for-v5.4.y damon/for-v5.10.y  The source code of DAPTRACE, which is a prototype of DAMON, is also available.\nUser-space Tool A user-space tool for DAMON, which is called DAMO is available. It\u0026rsquo;s also available at PyPi. You may start using DAMON by following the Getting Started of the tool for start.\nTests Package There is an automated tests suite for correctness verification and performance evaluation of DAMON. Those are actively used for the development of DAMON. Using that, you can test DAMON on your machine with only a few simple commands or deeply understand the user interface of DAMON.\nSo, if you finished the tutorial but have no idea about what to do next, running the tests would be a good start. If any test fails, please report that to the maintainer via mail (sjpark@amazon.de) or github.\nOfficial Document The DAMON official document for the next and the latest releases are available online.\nShowcase Website There is a showcase web site that you can get more information of DAMON. The site hosts\n the official documentation of DAMON, the heatmap format dynamic access pattern of various realistic workloads for heap area, mmap()-ed area, and stack area, the dynamic working set size distribution and chronological working set size changes, and the latest performance test results.  Publications and Presentations  SeongJae Park, Writing a fine-grained access pattern oriented lightweight kernel module using DAMON/DAMOS in 10 minutes. In The Linux Kernel Summit, September 2021. Slides, Video, Link Jonathan Corbet, Using DAMON for proactive reclaim. In Linux Weekly News, July 2021. Article SeongJae Park, DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations, In The Linux Kernel Summit, August 2020. Slides, Video, Link Yunjae Lee, Yunhee Kim, and Heon. Y. Yeom, Lightweight Memory Tracing for Hot Data Identification, In Cluster computing, 2020. Paper Jonathan Corbet, Memory-management optimization with DAMON. In Linux Weekly News, February 2020. Article SeongJae Park, Yunjae Lee, Heon Y. Yeom, Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality. In 20th ACM/IFIP International Middleware Conference Industry, December 2019. Paper SeongJae Park, Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy. In The Linux Kernel Summit, September 2019. Slides, Link SeongJae Park, Yunjae Lee, Yunhee Kim, Heon Y. Yeom, Profiling Dynamic Data Access Patterns with Bounded Overhead and Accuracy. In IEEE International Workshop on Foundations and Applications of Self-* Systems (FAS* 2019), June 2019. Paper  News 2021-10-02: DAMOS patchset is merged in the -mm tree.\n2021-09-23: DAMON and DAMOS are presented in the kernel summit. Slides, Video, Link\n2021-09-16: DAMON development tree on kernel.org is created.\n2021-09-08: DAMON patchset is merged in the Linus Torvalds\u0026rsquo; tree, aka mainline\n2021-09-07: DAMON/DAMOS will be presented at the Kernel Summit 2021\n2021-08-31: DAMON user-space tool is uploaded to the official Python packages system, PyPi\n2021-08-06: DAMON patchset is merged in the -mm tree\n2021-07-27: LWN published a second article introducing DAMON patchset series\n2021-06-11: DAMON-based proactive reclamation RFC patchset has shared on the hackernews and introduced by a Phoronix article\n2021-05-31: DAMON-based proactive reclamation RFC patchset has posted\n2021-05-26: DAMON-enabled Amazon Linux 2 kernels have deployed to all users\n2021-05-07: DAMON has merged in the public source tree for Amazon Linux v5.4.y kernel\n2021-04-05: damo now supports heatmap visualization on the terminal\n2021-03-31: DAMON user-space tool (damo) is released as an individual open source project\n2021-03-19: DAMON has merged in the public source tree for Amazon Linux v5.10.y kernel\n2021-03-04: DAMON supports for two latest LTS kernels announced\n2021-03-03: DAMON is merged in v5.10 based public Amazon Linux kernel tree\n2021-02-25: An example usage of DAMON for profiling is shared\n2021-01-07: A runtime system for DAMON-based optimal operation scheme finding is released\n2020-12-03: Further plans around DAMON is shared\n2020-11-17: A real-world user story of DAMON is shared\n2020-09-26: The tests package for DAMON is released under GPL v2 license\n2020-08-19: A demo video is available\n2020-08-05: DAMON will be presented at the Kernel Summit 2020\n2020-06-04: Physical Memory Monitoring is now available\n2020-05-18: DAMON showcase website is announced\n2020-05-13: DAMON official document is uploaded online\n2020-02-20: DAMON has introduced by an LWN article\n2020-02-10: The first RFC of Data Access Monitoring-based Operating Schemes (DAMOS) has posted to LKML\n2020-01-23: The RFC of DAMON has introduced by LWN\u0026rsquo;s \u0026lsquo;Kernel patches of interest\u0026rsquo;\n2020-01-20: The first RFC patchset of DAMON has posted to LKML\n","date":1577467267,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633156101,"objectID":"eab750ba52f55cb86fffdca5731ac34d","permalink":"/post/damon/","publishdate":"2019-12-27T18:21:07+01:00","relpermalink":"/post/damon/","section":"post","summary":"Modern workloads tend to have huge working sets and low locality. Despite this trend, the capacity of DRAM has not been increased enough to accommodate such huge working sets. Therefore, memory management mechanisms optimized for such modern workloads are widely required today. For such optimizations, knowing the data access pattern of given workloads is essential. However, manually extracting such patterns from huge and complex workloads is exhaustive. Worse yet, existing memory access analysis tools incur unacceptably high overheads for unnecessarily detailed analysis results.","tags":["projects","damon"],"title":"DAMON: Data Access Monitor","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCH V11 RESEND] mm/debug: Add tests validating architecture page table helpers https://lkml.kernel.org/r/1577162322-30303-1-git-send-email-anshuman.khandual@arm.com\nThis patchset adds tests for the page table helpers. Those tests covers basic page table entry transformations including old, young, dirty, clean, write, write protect etc. The tests are not using the kselftest or kunit, but implemented as a kernel module with new file, mm/debug_vm_pgtable.c.\nLinux 5.5-rc4 https://lkml.kernel.org/r/CAHk-=wjq2b9GkLzpaDE-Xryu5c0zMM72BqkJKeZVsX+4ymH6aA@mail.gmail.com\nDue to the holidays, last week was unsurprisingly quiet. Torvalds says it was hardly even worth making an rc release. That said, there were some fixes for cifs, io_uring, and kunit/selftest.\n","date":1577264507,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577264507,"objectID":"d45a95202035084bbcf785820f2c712f","permalink":"/post/lkml_news_v5.5-rc4/","publishdate":"2019-12-25T10:01:47+01:00","relpermalink":"/post/lkml_news_v5.5-rc4/","section":"post","summary":"[PATCH V11 RESEND] mm/debug: Add tests validating architecture page table helpers https://lkml.kernel.org/r/1577162322-30303-1-git-send-email-anshuman.khandual@arm.com\nThis patchset adds tests for the page table helpers. Those tests covers basic page table entry transformations including old, young, dirty, clean, write, write protect etc. The tests are not using the kselftest or kunit, but implemented as a kernel module with new file, mm/debug_vm_pgtable.c.\nLinux 5.5-rc4 https://lkml.kernel.org/r/CAHk-=wjq2b9GkLzpaDE-Xryu5c0zMM72BqkJKeZVsX+4ymH6aA@mail.gmail.com\nDue to the holidays, last week was unsurprisingly quiet. Torvalds says it was hardly even worth making an rc release.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc4","type":"post"},{"authors":[],"categories":["lkml news"],"content":"PROBLEM: Large (256MB) CMA allocation fails from time to time when using Intel VT-d https://lkml.kernel.org/r/5e75d900cb50457784ee1d2050b511ec@MAILER13.tech.ceia\nThe author reports a CMA allocation failure that occurs time to time if the system is using Intel VT-d.\n[PATCHv2 0/3] Allow ZRAM to use any zpool-compatible backend https://lkml.kernel.org/r/20191219151928.ad4ccf732b64b7f8a26116db@gmail.com\nZRAM is an in-memory block device that compresses the content. Currently, ZRAM is used only with zsmalloc. However, the zsmalloc is not an optimal selection in some environment. The author gives embedded environment which fast response is important as an example. In such environment, though compress ratio is a little bit less, faster response (e..g, z3fold) is more valuable. Thus, this patchset changes ZRAM to be able to use multiple backend.\n[PATCH RFC v4 00/42] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191220184955.223741-1-glider@google.com\nKMSAN detects errors related to uses of uninitialized memory. With a help from syzkaller, KMSAN has already reported more than 200 bugs in the past two years. This patch aims to be merged in the mainline.\nRegression seen when using MADV_FREE vs MADV_DONTNEED https://lkml.kernel.org/r/CAKgT0UeSs_qy8g5QoXpgcw2685+JtJPY+rehggraoGSYPrP1Aw@mail.gmail.com\nThe author introduced a patch using MADV_FREE instead of MADV_DONTNEED in the QEMU. On next-20191120 kernel, it worked as the author expected. On next-20191120, however, the author was able to encounter an issue. The MADV_FREE has been significantly slower than MADV_DONTNEED.\nLinux 5.5-rc3 https://lkml.kernel.org/r/CAHk-=wiGKfWeUv294FD6bs4cw0m=nO_LdZkLz-vkp-2zwBzLcA@mail.gmail.com\nThis release has delayed a couple of hors due to Christmas preparation, but seems the Christmas has made no big effect to the development. Rather than that, this release is not only bigger than rc2 (rc3 is almost always bigger than rc2), but also bigger than recent few other rc3 releases.\nTorvalds assumes that this is just a normal fluctuation, as the changes are spread around various subsystems. Also, the merge window timing could made some effect. As Santa is coming to the town, Torvalds also believe that next release will be more calm than now. That said, he also asks some tests.\n","date":1576697581,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576697581,"objectID":"bbd3934a77ab934594deba2edfc9b04a","permalink":"/post/lkml_news_v5.5-rc3/","publishdate":"2019-12-18T20:33:01+01:00","relpermalink":"/post/lkml_news_v5.5-rc3/","section":"post","summary":"PROBLEM: Large (256MB) CMA allocation fails from time to time when using Intel VT-d https://lkml.kernel.org/r/5e75d900cb50457784ee1d2050b511ec@MAILER13.tech.ceia\nThe author reports a CMA allocation failure that occurs time to time if the system is using Intel VT-d.\n[PATCHv2 0/3] Allow ZRAM to use any zpool-compatible backend https://lkml.kernel.org/r/20191219151928.ad4ccf732b64b7f8a26116db@gmail.com\nZRAM is an in-memory block device that compresses the content. Currently, ZRAM is used only with zsmalloc. However, the zsmalloc is not an optimal selection in some environment.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc3","type":"post"},{"authors":[],"categories":["setup"],"content":"This post describes how you can build, install, and use QEMU on an Ubuntu machine. I basically refererenced http://wiki.qemu.org/Hosts/Linux. The test has proceeded on an Ubuntu 18.04 server machine.\nQEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \\ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Get an Ubuntu server install image:\n$ wget http://releases.ubuntu.com/18.04/ubuntu-18.04.3-live-server-amd64.iso Make qcow2 format image file:\ncd .. $ ./bin/qemu-img create -f qcow2 qc2img 32G Formatting 'qc2img', fmt=qcow2 size=34359738368 encryption=off cluster_size=65536 lazy_refcounts=off refcount_bits=16 $ ls -alh total 830M drwxrwxr-x 3 sjpark sjpark 4.0K Jun 1 20:34 . drwxr-xr-x 28 sjpark sjpark 4.0K Jun 1 20:15 .. drwxrwxr-x 94 sjpark sjpark 12K Jun 1 20:19 bin -rw-r--r-- 1 sjpark sjpark 193K Jun 1 20:34 qc2img -rw-rw-r-- 1 sjpark sjpark 848M Feb 16 05:37 ubuntu-18.04.3-live-server-amd64.iso And, boot QEMU VM with the install image:\n$ sudo ./bin/x86_64-softmmu/qemu-system-x86_64 -m 8G -enable-kvm \\ -drive if=virtio,file=qc2img,cache=none \\ -cdrom ubuntu-18.04.3-live-server-amd64.iso If your session is connected with X, above command opens QEMU GUI for the booted VM. The VM will be booted with the Ubuntu server install image, as same as when you boot a machine with an install media. As usual, proceed the install of the Ubuntu server on the VM. This post will use ssh to connect to the VM. Install openssh pacakge while the install process.\nNow, you can boot your Ubuntu VM as below:\n$ sudo ./bin/x86_64-softmmu/qemu-system-x86_64 -m 20G -smp 32 -enable-kvm \\ -drive if=virtio,file=qc2img,cache=none \\ -net user,hostfwd=tcp::2242-:22 -net nic -nographic Because of the -nographic option, it will not give you GUI interface but shows Booting from Hard Disk... message only. But, the VM is booted well. You can ssh to the VM via the port, 2242.\n$ ssh localhost -p 2242 Connect Console to Terminal Let\u0026rsquo;s connect the VM\u0026rsquo;s console to the QEMU executing terminal. Modify the /etc/default/grub file\u0026rsquo;s GRUB_CMDLINE_LINUX_DEFAULT to have \u0026quot;console=ttyS0 earlyprintk=ttyS0 ftrace_dump_on_oops\u0026quot;.\nYou may also want to show GRUB when boot. Comment out GRUB_TIMEOUT_STYLE=hidden, give none-zero value to GRUB_TIMEOUT=, and Uncomment GRUB_TERMINAL=console.\nFinally, commit the change by:\n$ sudo update-grub $ sudo shutdown -h now After this, if you start the VM again using the QEMU command, the terminal you executed the QEMU command will be connected with the console of the VM and will show boot log and login prompt.\nReturn to VM Monitor Console If you want to go back to the VM monitor console, which you have seen before connecting the QEMU executed terminal to the VM\u0026rsquo;s console, press Ctrl+a c. If you want to go back to the guest console again, press Ctrl+a c enter.\nReference: https://serverfault.com/questions/471719/how-to-start-qemu-directly-in-the-console-not-in-curses-or-sdl\nBoot with Kernel in Host You can boot the VM to use a kernel image in the file system of the host machine. If you want to keep your development environment on your host machine but use the QEMU as a test target device, this is useful. Give the path to the kernel image file via -kernel option and give the kernel parameter you want to use using -append option. For example:\n$ sudo ../qemu/build/x86_64-softmmu/qemu-system-x86_64 -m 2048 -smp 2 \\ -enable-kvm -drive if=virtio,file=debian.img,cache=none \\ -net user,hostfwd=tcp::2242-:22 -net nic -nographic \\ -kernel /linux.out/arch/x86/boot/bzImage \\ -append “root=/dev/vda1 console=ttyS0 earlyprintk=ttyS0 debug ignore_loglevel ftrace_dump_on_oops” For the root= in the kernel parameter, check which device file is mounted as the rootfs by the guest OS and use it.\nAlso, you cannot use modules built on the host in the VM, unless you send the module binary files into the VM. If you don\u0026rsquo;t want to do that, simply build the modules you need in static. For example, as this post uses the ssh, I statically built the ethernet driver.\nImage Resize The guest os disk might be full soon, if you configured it too small. You can enlarge the qcow2 image\u0026rsquo;s size as below:\n$ qemu-img resize qc2img +160G $ sudo apt install libguestfs-tools $ cp qc2img qc2img.bak $ sudo virt-resize --expand /dev/sda1 qc2img.bak qc2img $ sudo virt-resize --expand /dev/sda1 qc2img.bak qc2img [ 0.0] Examining qc2img.bak ◓ 25% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒═════════════════════════════════════════════════════════════════════⟧ --:-- 100% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒⟧ 00:00 ****** Summary of changes: /dev/sda1: This partition will be resized from 24.0G to 184.0G. The filesystem ext4 on /dev/sda1 will be expanded using the 'resize2fs' method. /dev/sda2: This partition will be left alone. ****** [ 49.9] Setting up initial partition table on qc2img [ 56.7] Copying /dev/sda1 100% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒⟧ 00:00 [ 594.9] Copying /dev/sda2 100% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒⟧ 00:00 100% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒⟧ 00:00 [ 767.4] Expanding /dev/sda1 using the 'resize2fs' method Resize operation completed with no errors. Before deleting the old disk, carefully check that the resized disk boots and works correctly. $ $ $ ./bin/qemu-img info qc2img image: qc2img file format: qcow2 virtual size: 192G (206158430208 bytes) disk size: 32G cluster_size: 65536 Format specific information: compat: 1.1 lazy refcounts: false refcount bits: 16 corrupt: false $ $ $ virt-filesystems --long -h --all -a qc2img libguestfs: warning: current user is not a member of the KVM group (group ID 117). This user cannot access /dev/kvm, so libguestfs may run very slowly. It is recommended that you 'chmod 0666 /dev/kvm' or add the current user to the KVM group (you might need to log out and log in again). Name Type VFS Label MBR Size Parent /dev/sda1 filesystem ext4 - - 184G - /dev/sda2 filesystem unknown - - 1.0K - /dev/sda5 filesystem swap - - 8.0G - /dev/sda1 partition - - 83 184G /dev/sda /dev/sda2 partition - - 05 1.0K /dev/sda /dev/sda5 partition - - 82 8.0G /dev/sda /dev/sda device - - - 192G - After that, if you boot the guest VM again and check, you can use the enlarged space:\n$ df -h Filesystem Size Used Avail Use% Mounted on udev 9.7G 0 9.7G 0% /dev tmpfs 2.0G 8.6M 2.0G 1% /run /dev/vda1 181G 24G 149G 14% / tmpfs 9.8G 0 9.8G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs 9.8G 0 9.8G 0% /sys/fs/cgroup tmpfs 2.0G 0 2.0G 0% /run/user/1000 Reference: https://fatmin.com/2016/12/20/how-to-resize-a-qcow2-image-and-filesystem-with-virt-resize/\nQCOW2 Image Mount You might want to access to the guest VM image directly from the host. It is available using qemu-nbd tool. For that, load the nbd kernel module and connect the qcow2 format VM image via qemu-nbd:\n$ cd qemu.sandbox $ sudo modprobe nbd max_part=8 $ sudo ./bin/qemu-nbd --connect=/dev/nbd0 ./qc2img.bak Now you can see the partitions in the image using fdisk as below:\n$ sudo fdisk -l /dev/nbd0 Disk /dev/nbd0: 192 GiB, 206158430208 bytes, 402653184 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xe513ef69 Device Boot Start End Sectors Size Id Type /dev/nbd0p1 * 2048 385877631 385875584 184G 83 Linux /dev/nbd0p2 385877632 402650753 16773122 8G 5 Extended /dev/nbd0p5 385877634 402650753 16773120 8G 82 Linux swap / Solaris Mount a partition you want to access:\n$ sudo mount /dev/nbd0p1 ./mnt/ $ cd mnt/ $ ls bin etc initrd.img.old lib64 media proc sbin sys var boot home lib libx32 mnt root snap tmp vmlinuz dev initrd.img lib32 lost+found opt run srv usr vmlinuz.old If you are done, unmount and disconnect the device using qemu-nbd.\n$ sudo umount ./mnt $ sudo ./bin/qemu-nbd --disconnect /dev/nbd nbd0 nbd0p2 nbd1 nbd11 nbd13 nbd15 nbd3 nbd5 nbd7 nbd9 nbd0p1 nbd0p5 nbd10 nbd12 nbd14 nbd2 nbd4 nbd6 nbd8 $ sudo ./bin/qemu-nbd --disconnect /dev/nbd0 /dev/nbd0 disconnected $ ","date":1576107965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576107965,"objectID":"5d1f025896b32805bc0549618442d5af","permalink":"/post/qemu_setup_on_ubuntu/","publishdate":"2019-12-12T00:46:05+01:00","relpermalink":"/post/qemu_setup_on_ubuntu/","section":"post","summary":"This post describes how you can build, install, and use QEMU on an Ubuntu machine. I basically refererenced http://wiki.qemu.org/Hosts/Linux. The test has proceeded on an Ubuntu 18.04 server machine.\nQEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \\ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Get an Ubuntu server install image:","tags":["qemu","kvm","tips","virtualization","setup"],"title":"Build, Install, and Use QEMU on Ubuntu","type":"post"},{"authors":[],"categories":["lkml news"],"content":"[PATCHSET 0/5] Support for RWF_UNCACHED https://lkml.kernel.org/r/20191210162454.8608-1-axboe@kernel.dk\nAs the buffered IO uses the page cache, an intensive buffered IO workload using very huge file can cause memory pressure by inflating the page cache. Changing the workload to do direct IO can solve this problem, but the modification is not so simple. Jens Axboe thus implemented RWF_UNCACHED flag, which skips use of the page cache if the given IO target is not in the page cache already. Jonathan Corbet has also introduced this patchset in LWN (https://lwn.net/Articles/806980/).\nLinux 5.5.-rc2 https://lkml.kernel.org/r/CAHk-=wgF1O8oPL9HRwRSrHt7NeLATtE5eZjcmP1QZfkcqE-+0g@mail.gmail.com\nThe first release right after the close of the merge window, namely rc2, is usually calm because it is too early to find bugs. This release was also did. It\u0026rsquo;s calm and normal. Torvalds asks us for test.\n","date":1575914068,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575914068,"objectID":"b8572e28e6db1309339048ac0111e832","permalink":"/post/lkml_news_v5.5-rc2/","publishdate":"2019-12-09T18:54:28+01:00","relpermalink":"/post/lkml_news_v5.5-rc2/","section":"post","summary":"[PATCHSET 0/5] Support for RWF_UNCACHED https://lkml.kernel.org/r/20191210162454.8608-1-axboe@kernel.dk\nAs the buffered IO uses the page cache, an intensive buffered IO workload using very huge file can cause memory pressure by inflating the page cache. Changing the workload to do direct IO can solve this problem, but the modification is not so simple. Jens Axboe thus implemented RWF_UNCACHED flag, which skips use of the page cache if the given IO target is not in the page cache already.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc2","type":"post"},{"authors":[],"categories":["publications"],"content":"A research paper, which I wrote before joining Amazon, will be presented at the Industry session of the ACM/IFIP MIDDLEWARE'19. The title of the paper is \u0026ldquo;Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality\u0026rdquo;.\n","date":1575478827,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575478827,"objectID":"76741f204e9bcb55b119abcf5a0ab302","permalink":"/post/middleware19_paper/","publishdate":"2019-12-04T18:00:27+01:00","relpermalink":"/post/middleware19_paper/","section":"post","summary":"A research paper, which I wrote before joining Amazon, will be presented at the Industry session of the ACM/IFIP MIDDLEWARE'19. The title of the paper is \u0026ldquo;Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality\u0026rdquo;.","tags":["usenix","middleware19","acm","ifip","talk"],"title":"My recent research will be presented at the MIDDLEWARE'19","type":"post"},{"authors":[],"categories":["lkml news"],"content":"Splitting the mmap_sem https://lkml.kernel.org/r/20191203222147.GV20752@bombadil.infradead.org\nThe mmap_sem is a big scalability bottleneck and there are several projects for solving it. In this mail, Matthew Wilcox suggests his plan for his solution and asks whether a exceptional case in his solution is acceptable to other people.\nLinux 5.5-rc1 https://lkml.kernel.org/r/CAHk-=wiEJK=yo9vEhX_4b4ROvCqUA_rjK7g996h-5MbfOMeDrw@mail.gmail.com\nLinux 5.5 merge window closed and the -rc1 has released. It was a tiny bit larger release compared to recent several releases, but fairly regular overall. perf and kselftest was a standout, but Torvalds says it is normal in these days.\nMy favorite new feature in 5.5-rc1 is kunit. Now you can do unit test of the kernel in very fast and convenient way!\n","date":1575242922,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575242922,"objectID":"b03b0c67300e17d9a6ed06d2fc7a1b34","permalink":"/post/lkml_news_v5.5-rc1/","publishdate":"2019-12-02T00:28:42+01:00","relpermalink":"/post/lkml_news_v5.5-rc1/","section":"post","summary":"Splitting the mmap_sem https://lkml.kernel.org/r/20191203222147.GV20752@bombadil.infradead.org\nThe mmap_sem is a big scalability bottleneck and there are several projects for solving it. In this mail, Matthew Wilcox suggests his plan for his solution and asks whether a exceptional case in his solution is acceptable to other people.\nLinux 5.5-rc1 https://lkml.kernel.org/r/CAHk-=wiEJK=yo9vEhX_4b4ROvCqUA_rjK7g996h-5MbfOMeDrw@mail.gmail.com\nLinux 5.5 merge window closed and the -rc1 has released. It was a tiny bit larger release compared to recent several releases, but fairly regular overall.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.5-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH RFC v3 00/36] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191122112621.204798-1-glider@google.com\nGoogle\u0026rsquo;s third KMSAN RFC patchset that detects errors caused by accessing uninitialized memory areas. Like other SAN series, it has been used in Google syzkaller and found over 200 bugs in the last two years.\nLSF/MM/BPF: 2020: Call for Proposals https://lkml.kernel.org/r/20191122172502.vffyfxlqejthjib6@macbook-pro-91.dhcp.thefacebook.com\nLSF/MM\u0026rsquo;s CFP for the next year was released. From next year, BPF sessions will be added to LSF/MM, so the name has changed to LSF/MM/BPF. I can feel the phase of BPF again!\nLinux 5.4 https://lkml.kernel.org/r/CAHk-=wjmzaD=BZ1hjUYu+RTnSGDLfCRwCdg99GeQpCjEwo9uzw@mail.gmail.com\nAt the end of the eight rc releases, the 5.4 official version is finally released. Fortunately, the past week was really calm. Most of the pull requests for 5.5 came early for Thanksgiving, and some updates to networking and GPUs.\nIn this way 5.5 merge window is open, but I\u0026rsquo;m a little worried that there\u0026rsquo;s Thanksgiving in the merge window, but Torvalds believes it won\u0026rsquo;t be a big deal, and it might be a little slow to take care of the children.\n","date":1574201599,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574201599,"objectID":"ace290b97099deae6bc9d7d7e6ce6b45","permalink":"/post/lkml_news_v5.4/","publishdate":"2019-11-19T23:13:19+01:00","relpermalink":"/post/lkml_news_v5.4/","section":"post","summary":"[PATCH RFC v3 00/36] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191122112621.204798-1-glider@google.com\nGoogle\u0026rsquo;s third KMSAN RFC patchset that detects errors caused by accessing uninitialized memory areas. Like other SAN series, it has been used in Google syzkaller and found over 200 bugs in the last two years.\nLSF/MM/BPF: 2020: Call for Proposals https://lkml.kernel.org/r/20191122172502.vffyfxlqejthjib6@macbook-pro-91.dhcp.thefacebook.com\nLSF/MM\u0026rsquo;s CFP for the next year was released. From next year, BPF sessions will be added to LSF/MM, so the name has changed to LSF/MM/BPF.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 00/13] Finish off [smp_]read_barrier_depends() https://lkml.kernel.org/r/20191108170120.22331-1-will@kernel.org\nThe memory model element which is depends only on Alpha, smp_read_barrier_depends() is built into READ_ONCE(), so that you don\u0026rsquo;t have to worry about Alpha in non-alpha-specific kernel code. Nevertheless, the author of this patchset concerned about the continuing uploads of the code that cares it. This patchset removes the description of the feature from all documentation and comments in the kernel code.\n[PATCH v4 00/10] Add Kernel Concurrency Sanitizer (KCSAN) https://lkml.kernel.org/r/20191114180303.66955-1-elver@google.com\nThis is the Google\u0026rsquo;s KCSAN patch that catches concurrency bugs. This version is for x86 only, but will add ARM64 and POWER support soon. This fourth version has a 33% performance improvement over previous versions.\nLinux 5.4-rc8 https://lkml.kernel.org/r/CAHk-=wiyR4Np_n5O6=rbf1GVNdr_zUd1WAC_GJDnc_hUhHqwWg@mail.gmail.com\nIt\u0026rsquo;s been a week of thrilling to see if the full version or rc8 will be available. But it wasn\u0026rsquo;t just a problem. It\u0026rsquo;s been a quiet week, even though it\u0026rsquo;s been a week since the bustling Intel vulnerability patch.\nNext week is Thanksgiving. With that in mind, next week we hope to have an early pull request for 5.5 merge windows rather than a fix for 5.4.\n","date":1573585690,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573585690,"objectID":"c8ffded7f6d5c4bb2fe363f55fc81912","permalink":"/post/lkml_news_v5.4-rc8/","publishdate":"2019-11-12T20:08:10+01:00","relpermalink":"/post/lkml_news_v5.4-rc8/","section":"post","summary":"[PATCH 00/13] Finish off [smp_]read_barrier_depends() https://lkml.kernel.org/r/20191108170120.22331-1-will@kernel.org\nThe memory model element which is depends only on Alpha, smp_read_barrier_depends() is built into READ_ONCE(), so that you don\u0026rsquo;t have to worry about Alpha in non-alpha-specific kernel code. Nevertheless, the author of this patchset concerned about the continuing uploads of the code that cares it. This patchset removes the description of the feature from all documentation and comments in the kernel code.\n[PATCH v4 00/10] Add Kernel Concurrency Sanitizer (KCSAN) https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc8","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 5.4-rc7 https://lkml.kernel.org/r/CAHk-=wivmGEOTha5XkRHgH6VwfiroiN+PFVMNK3B0r-d0eFLPQ@mail.gmail.com\n일곱번째 rc 버전이 릴리즈 되었습니다. 지난 rc6 때도 변경량이 생각보다 많아 토발즈가 고민했는데, 이번주도 토발즈가 원했던 것보단 변경량이 많았다고 하는군요. 다음주에 rc8 을 낼지 5.4 정식 버전을 낼지는 좀 더 고민해 봐야겠다고 합니다.\n","date":1573453020,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573453020,"objectID":"6acade9b10ebe598e1ee7788c3301053","permalink":"/post/lkml_news_v5.4-rc7/","publishdate":"2019-11-11T07:17:00+01:00","relpermalink":"/post/lkml_news_v5.4-rc7/","section":"post","summary":"Linux 5.4-rc7 https://lkml.kernel.org/r/CAHk-=wivmGEOTha5XkRHgH6VwfiroiN+PFVMNK3B0r-d0eFLPQ@mail.gmail.com\n일곱번째 rc 버전이 릴리즈 되었습니다. 지난 rc6 때도 변경량이 생각보다 많아 토발즈가 고민했는데, 이번주도 토발즈가 원했던 것보단 변경량이 많았다고 하는군요. 다음주에 rc8 을 낼지 5.4 정식 버전을 낼지는 좀 더 고민해 봐야겠다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH V8] mm/debug: Add tests validating architecture page table helpers https://lkml.kernel.org/r/1572240562-23630-1-git-send-email-anshuman.khandual@arm.com\n아키텍쳐별 페이지 테이블 헬퍼 등을 테스트 하는 코드를 추가하는 패치입니다. CONFIG_DEBUG_VM_PGTABLE 컨피규레이션이 켜져 있으면 동작합니다.\n[PATCH RFC v2 00/25] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191030142237.249532-1-glider@google.com\n초기화 되지 않은 메모리 영역에 액세스 하는 에러를 찾아주는 KMSAN 을 커널에 추가하는 패치입니다. KCSAN 과 비슷하게 syzkaller 를 통해 돌아가게끔 되어 있군요.\nFalse positive 문제가 존재할 수는 있는 모양입니다만, 구글 내부에서 syzbot 을 통해 테스트 한 환경에서는 중요한 false positive 는 나오지 않은 모양입니다. 구글 외부에서는 또 모른다는 거죠.\n요즘 커널 개발 프로세스를 개선하자는 이야기가 있고, 그 중에는 패치의 히스토리를 알고 싶다는 이야기가 많죠. 그래서인지 이 메일은 구글 내부 리뷰 시스템인 Gerrit 으로의 링크를 포함시켰네요.\n[RFC v2] mm: Proactive compaction https://lkml.kernel.org/r/20191031005127.8037-1-nigupta@nvidia.com\nHuge page 할당을 위해선 연속된 메모리 할당이 필요합니다. Fragmentation 이 심한 시스템에선 이 할당이 어렵죠. 리눅스는 그래서 compaction 기법을 사용하는데요, 이걸 좀 더 적극적으로 하자는 패치입니다. 이를 통해 latency 가 개선될 수 있죠.\n단순히 hugepage 를 최대한, compaction 을 요청해가며 할당받는 드라이버를 통해 성능을 테스트 했군요. 80th percentile latency 까지는 몇십배 넘게 할당 응답시간을 줄였는데, 90th percentile 부턴 별 차이 없군요.\n[RFC 00/10] autonuma: Optimize memory placement in memory tiering system https://lkml.kernel.org/r/20191101075727.26683-1-ying.huang@intel.com\nDRAM 과 PMEM 등으로 구성되어 PMEM 을 NUMA node 로 간주하는 multi-tiering memory system 을 염두에 두고 hot page / cold page 를 구분할 수 있게 해주는 패치셋입니다.\nLinux 5.4-rc6 https://lkml.kernel.org/r/CAHk-=wg+8=w=sEx9WBF0OJj0SumQ4p-LuP8waRH=TSdAYDeqGg@mail.gmail.com\nOSSEU 가 종료되고 토발즈는 집에 잘 도착했고, 시차 적응도 큰 문제는 없었기에 평소대로의 타이밍에 릴리즈가 가능했다고 합니다. 지난 rc5 도 큰 크기였고, rc6 는 이제 슬슬 변경사항이 줄어들어야 할, 토발즈 말로는 그러길 바라는 시점인데, 그렇지 못했습니다. 네트워킹 쪽에서 시점을 맞추지 못한 뒤늦은 풀리퀘스트들이 있었기 때문인데, 딱히 급작스런 문제가 있는 건 아니라는군요. 그렇다곤 해도 토발즈는 조금 찜찜한 모양입니다. 다음주까지 동향을 지켜봐야겠지만 다음주까지도 충분히 변경사항이 줄어들지 않는다면 rc8 까지 가야할 수도 있겠다고 합니다.\n","date":1572683061,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572683061,"objectID":"4e36d9e987c89aed1914f2304d57de52","permalink":"/post/lkml_news_v5.4-rc6/","publishdate":"2019-11-02T09:24:21+01:00","relpermalink":"/post/lkml_news_v5.4-rc6/","section":"post","summary":"[PATCH V8] mm/debug: Add tests validating architecture page table helpers https://lkml.kernel.org/r/1572240562-23630-1-git-send-email-anshuman.khandual@arm.com\n아키텍쳐별 페이지 테이블 헬퍼 등을 테스트 하는 코드를 추가하는 패치입니다. CONFIG_DEBUG_VM_PGTABLE 컨피규레이션이 켜져 있으면 동작합니다.\n[PATCH RFC v2 00/25] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191030142237.249532-1-glider@google.com\n초기화 되지 않은 메모리 영역에 액세스 하는 에러를 찾아주는 KMSAN 을 커널에 추가하는 패치입니다. KCSAN 과 비슷하게 syzkaller 를 통해 돌아가게끔 되어 있군요.\nFalse positive 문제가 존재할 수는 있는 모양입니다만, 구글 내부에서 syzbot 을 통해 테스트 한 환경에서는 중요한 false positive 는 나오지 않은 모양입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 00/12] mm: remove __ARCH_HAS_4LEVEL_HACK https://lkml.kernel.org/r/1571822941-29776-1-git-send-email-rppt@kernel.org\n서로 다른 아키텍쳐 간의 페이지 테이블 구조로 인해 사용해야 했던 __ARCH_HAS_4LEVEL_HACK 을 제거하는 패치입니다. Alpha, arm, c6x 등의 아키텍쳐가 변경되는군요. UML, qemu 등에서 부팅 테스트를 거쳤군요.\nLinux 5.4-rc5 https://lkml.kernel.org/r/CAHk-=wgpewLxHxnO71tFHh=M4C4iUofJykMqq3r=eRyxUyVsiw@mail.gmail.com\n다섯번째 rc 버전 릴리즈입니다. 하지만 안타깝게도 이번 릴리즈는 마냥 조용하진 않았다는군요. 최근의 다른 rc5 들에 비하면 조금 큰 크기의 릴리즈가 되었습니다. 그렇다곤 해도 아주 특이할 만한 정도는 아니라 토발즈도 큰 걱정은 없다는군요.\n","date":1572176910,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572176910,"objectID":"7606eebf79d8520a0a2eefd7cc8cb532","permalink":"/post/lkml_news_v5.4-rc5/","publishdate":"2019-10-27T12:48:30+01:00","relpermalink":"/post/lkml_news_v5.4-rc5/","section":"post","summary":"[PATCH 00/12] mm: remove __ARCH_HAS_4LEVEL_HACK https://lkml.kernel.org/r/1571822941-29776-1-git-send-email-rppt@kernel.org\n서로 다른 아키텍쳐 간의 페이지 테이블 구조로 인해 사용해야 했던 __ARCH_HAS_4LEVEL_HACK 을 제거하는 패치입니다. Alpha, arm, c6x 등의 아키텍쳐가 변경되는군요. UML, qemu 등에서 부팅 테스트를 거쳤군요.\nLinux 5.4-rc5 https://lkml.kernel.org/r/CAHk-=wgpewLxHxnO71tFHh=M4C4iUofJykMqq3r=eRyxUyVsiw@mail.gmail.com\n다섯번째 rc 버전 릴리즈입니다. 하지만 안타깝게도 이번 릴리즈는 마냥 조용하진 않았다는군요. 최근의 다른 rc5 들에 비하면 조금 큰 크기의 릴리즈가 되었습니다. 그렇다곤 해도 아주 특이할 만한 정도는 아니라 토발즈도 큰 걱정은 없다는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 0/8] Add Kernel Concurrency Sanitizer (KCSAN) https://lkml.kernel.org/r/20191016083959.186860-1-elver@google.com\n구글에서 만든 동시성 버그 탐색기능, KCSAN 을 추가하는 패치셋입니다. 처음 세상에 모습을 드러낸건 9월이었고, 최근 컨퍼런스들에서도 발표가 있었죠. 메커니즘은 간단하다면 간단한, 샘플링 기반입니다. 구글 내부 fuzzing tester 인 syzkaller 는 이미 이 기능을 켠채 돌아간다는군요.\n[PATCH 2/2] mm, zswap: Support THP https://lkml.kernel.org/r/1571111349-5041-2-git-send-email-teawater@gmail.com\nZswap 이THP 를 지원하도록 수정하는 패치입니다. 그냥 zswap_frontswap_store() 함수가 THP 페이지를 연속적인 4 KiB 페이지로 인식하고 처리하게끔 했군요.\n[PATCH RFC v1 00/26] Add KernelMemorySanitizer infrastructure https://lkml.kernel.org/r/20191018094304.37056-1-glider@google.com\n구글에서 만든 또다른 sanitizer, KMSAN 입니다. 자매품으로 address sanitizer 등이 있고, 앞서 소개한 concurrency sanitizer 도 있죠. KMSAN 은 초기화 안된 메모리에의 접근 문제를 찾아내는 Sanitizer 입니다. Syzkaller 에 적용되어 지난 2년간 무려 200개가 넘는 문제를 발견했다고 합니다.\n이 패치셋은 KMSAN 을 적용한 커널을 QEMU 에서 부팅시킬 수 있게 해줍니다. 알려진 false positive 는 없지만 실제로 적용해보면 있을수도 있다고 하는군요.\nLinux 5.4-rc4 https://lkml.kernel.org/r/CAHk-=wh3jhffc0u7s5n=-zUFpztuh+0Hfth4vwuyfc5SpBmvSA@mail.gmail.com\n네번째 rc 버전 릴리즈입니다. 딱히 특별한 일 없이 평범한 릴리즈라고 자평하는군요. 토발즈는 이번주에 OSSummit Europe 참가를 위해 프랑스로 가는 모양입니다. 하지만 지금처럼 조용하면 큰일은 없을 것 같다고 하네요.\n","date":1571250540,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571250540,"objectID":"3a0bd028ca721443aac7e2705b4b9cbd","permalink":"/post/lkml_news_v5.4-rc4/","publishdate":"2019-10-16T20:29:00+02:00","relpermalink":"/post/lkml_news_v5.4-rc4/","section":"post","summary":"[PATCH 0/8] Add Kernel Concurrency Sanitizer (KCSAN) https://lkml.kernel.org/r/20191016083959.186860-1-elver@google.com\n구글에서 만든 동시성 버그 탐색기능, KCSAN 을 추가하는 패치셋입니다. 처음 세상에 모습을 드러낸건 9월이었고, 최근 컨퍼런스들에서도 발표가 있었죠. 메커니즘은 간단하다면 간단한, 샘플링 기반입니다. 구글 내부 fuzzing tester 인 syzkaller 는 이미 이 기능을 켠채 돌아간다는군요.\n[PATCH 2/2] mm, zswap: Support THP https://lkml.kernel.org/r/1571111349-5041-2-git-send-email-teawater@gmail.com\nZswap 이THP 를 지원하도록 수정하는 패치입니다. 그냥 zswap_frontswap_store() 함수가 THP 페이지를 연속적인 4 KiB 페이지로 인식하고 처리하게끔 했군요.\n[PATCH RFC v1 00/26] Add KernelMemorySanitizer infrastructure https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 5.4-rc3 https://lkml.kernel.org/r/CAHk-=wjOhveT=qrq8HHyL7gpA5fmBtDa2ue7sO5ZSEBrrcY6Vg@mail.gmail.com\n세번째 rc 릴리즈입니다. 실제 문제가 발견되고 그에 대한 수정이 본격적으로 시작되는 시즌이라 rc2보단 당연히 크지만 역대 rc3 들과 비교하면 작은 편의 릴리즈라는군요. staging driver 일부가 사라진 게 조금 릴리즈 크기를 크게 보이게 만들 수 있다는게 그나마 유의할 점일까요.\n","date":1570962170,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570962170,"objectID":"587fd7675c4cf00a4186a52c6e92f33e","permalink":"/post/lkml_news_v5.4-rc3/","publishdate":"2019-10-13T12:22:50+02:00","relpermalink":"/post/lkml_news_v5.4-rc3/","section":"post","summary":"Linux 5.4-rc3 https://lkml.kernel.org/r/CAHk-=wjOhveT=qrq8HHyL7gpA5fmBtDa2ue7sO5ZSEBrrcY6Vg@mail.gmail.com\n세번째 rc 릴리즈입니다. 실제 문제가 발견되고 그에 대한 수정이 본격적으로 시작되는 시즌이라 rc2보단 당연히 크지만 역대 rc3 들과 비교하면 작은 편의 릴리즈라는군요. staging driver 일부가 사라진 게 조금 릴리즈 크기를 크게 보이게 만들 수 있다는게 그나마 유의할 점일까요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v18 00/19] kunit: introduce KUnit, the Linux kernel unit testing framework https://lkml.kernel.org/r/20190923090249.127984-1-brendanhiggins@google.com\n어떻게 보면 별거 아닌 이유로 5.4 머지윈도우에서 튕겨나가고 만 kunit. 요청받은대로 파일 위치를 하위 디렉토리로 변경한 kunit 새 버전의 패치셋이 올라왔습니다. \u0026lsquo;kunit/\u0026rsquo; 디렉토리와 kunit 을 위한 \u0026lsquo;Kconfig\u0026rsquo; 파일을 \u0026lsquo;lib/\u0026rsquo; 아래로 옮겼군요.\n이후 벌어진 대화가 재미있는데요, 토발즈는 이걸 5.5에 넣을 예정인데, 가능하면 그동안 실제 테스트 코드도 추가되면 좋겠다고 했습니다. 근데 테스트 프레임웍이 머지안되었는데 테스트 코드를? 메인테이너 간에 일이 복잡해지고 컨플릭 날 확률이 높아지니 이걸로 꽤 많은 이야기가 있었습니다.\n[PATCH v2] perf script python: integrate page reclaim analyze script https://lkml.kernel.org/r/1569899984-16272-1-git-send-email-laoar.shao@gmail.com\nPage reclaim 을 좀더 잘 분석하기 위한 perf script 를 추가하는 패치셋의 두번째 버전입니다. 첫번째 버전은 이 블로그에서도 소개한 바 있죠. 첫번째 버전 이후로의 변화 중 눈에 띄는 건 파이썬 2.7 과 3.6 에서 모두 돌아가게끔 한 것이군요.\n[PATCH v5 00/11] Introduces new count-based method for tracking lockless pagetable walks https://lkml.kernel.org/r/20191003013325.2614-1-leonardo@linux.ibm.com\nTHP promotion/demotion 과 동시에 page table 조작이 일어나는 걸 막기 위해 존재하는 serialize_against_pte_lookup() 함수로 인해 발생하는 munmap() 레이턴시 문제를 동시의 page table walk 존재 여부를 카운트 기반으로 추적해, 필요없을 땐 락을 잡지 않게 함으로써 레이턴시를 놀랍게 개선한 패치셋의 다섯번째 버전입니다. 이 블로그에서도 소개했죠. 지난 버전 이후로 인터럽트 처리 부분을 포함한 일부 부분이 조금 수정되었군요.\n[PATCH] mm: export cma alloc and release https://lkml.kernel.org/r/20191002212257.196849-1-salyzyn@android.com\ncma_alloc() 과 cma_release() 함수를 드라이버에서도 쓸 수 있게 export 해주는 패치셋입니다. 안드로이드 ION 이라던지 RDMA, Camera 모듈들이 이에 의존적이어서 드라이버 레벨로 빌드가 안되기 때문에 이런 변경을 제안했다네요.\nLinux 5.4-rc2 https://lkml.kernel.org/r/CAHk-=wiNT4Yk+36OXMyPuesrU88cFyDG_XnjRiKwaac09PJpQw@mail.gmail.com\n다시 일요일 오후 릴리즈로 돌아왔습니다. 큰 변화는 없고 그저 소소한 수정 사항들 뿐이었다는군요. 일반적으로 진짜 regression 에 대한 파악이 이루어지고 그에 대한 수정이 시작되는건 rc2 후라는 걸 감안하면 매우 평범한 릴리즈라고 합니다.\n","date":1570268767,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570268767,"objectID":"6f23a25558a46cec17c03f7e53eb9479","permalink":"/post/lkml_news_v5.4-rc2/","publishdate":"2019-10-05T11:46:07+02:00","relpermalink":"/post/lkml_news_v5.4-rc2/","section":"post","summary":"[PATCH v18 00/19] kunit: introduce KUnit, the Linux kernel unit testing framework https://lkml.kernel.org/r/20190923090249.127984-1-brendanhiggins@google.com\n어떻게 보면 별거 아닌 이유로 5.4 머지윈도우에서 튕겨나가고 만 kunit. 요청받은대로 파일 위치를 하위 디렉토리로 변경한 kunit 새 버전의 패치셋이 올라왔습니다. \u0026lsquo;kunit/\u0026rsquo; 디렉토리와 kunit 을 위한 \u0026lsquo;Kconfig\u0026rsquo; 파일을 \u0026lsquo;lib/\u0026rsquo; 아래로 옮겼군요.\n이후 벌어진 대화가 재미있는데요, 토발즈는 이걸 5.5에 넣을 예정인데, 가능하면 그동안 실제 테스트 코드도 추가되면 좋겠다고 했습니다. 근데 테스트 프레임웍이 머지안되었는데 테스트 코드를? 메인테이너 간에 일이 복잡해지고 컨플릭 날 확률이 높아지니 이걸로 꽤 많은 이야기가 있었습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 0/2] introduce new perf-script page-reclaim https://lkml.kernel.org/r/1568817522-8754-1-git-send-email-laoar.shao@gmail.com\nPage reclaim 관련 성능 메트릭을 분석하기 위한 perf script 커맨드를 추가하는 패치입니다. Direct reclaim 으로 인한 응답시간 폭증, page reclaim 이 왜 일어났는지, page reclaim 의 효과는 어땠는지 등을 알 수 있다는군요.\n구체적으로는 direct reclaim 이 몇번 일어났는지, 그 latency 분포는 어땠는지, file / anon page 별로 reclaim, scan, sync write, async write 이 몇번 일어났는지, kswapd 는 몇번 일어났는지, kswapd latency 는 어땠는지 등등을 보입니다.\n $ perf script report page-reclaim Direct reclaims: 4924 Direct latency (ms) total max avg min 177823.211 6378.977 36.114 0.051 Direct file reclaimed 22920 Direct file scanned 28306 Direct file sync write I/O 0 Direct file async write I/O 0 Direct anon reclaimed 212567 Direct anon scanned 1446854 Direct anon sync write I/O 0 Direct anon async write I/O 278325 Direct order 0 1 3 4870 23 31 Wake kswapd requests 716 Wake order 0 1 715 1 Kswapd reclaims: 9 Kswapd latency (ms) total max avg min 86353.046 42128.816 9594.783 120.736 Kswapd file reclaimed 366461 Kswapd file scanned 369554 Kswapd file sync write I/O 0 Kswapd file async write I/O 0 Kswapd anon reclaimed 362594 Kswapd anon scanned 693938 Kswapd anon sync write I/O 0 Kswapd anon async write I/O 330663 Kswapd order 0 1 3 3 1 5 Kswapd re-wakes 705 Per process latency (ms): pid[comm] total max avg min timestamp latency(ns) 1[systemd] 276.764 248.933 21.29 0.293 3406860552338: 16819800 3406877381650: 5532855 3407458799399: 929517 3407459796042: 916682 3407460763220: 418989 3407461250236: 332355 3407461637534: 401731 3407462092234: 449219 3407462605855: 292857 3407462952343: 372700 3407463364947: 414880 3407463829547: 949162 3407464813883: 248933444 163[kswapd0] 86353.046 42128.816 9594.783 120.736 3357637025977: 1026962745 3358915619888: 41268642175 3400239664127: 42128816204 3443784780373: 679641989 3444847948969: 120735792 3445001978784: 342713657 ... [GIT PULL] Kselftest update for Linux 5.4-rc1 https://lkml.kernel.org/r/be8059f4-8e8f-cd18-0978-a9c861f6396b@linuxfoundation.org\n이블로그에서도 여러차례 소개했던 kunit 은 제가 오랫동안 메인라인에 머지되기를 기다려 왔던 기능입니다. 이번 kernel summit 에서 발표한 제 damon 이란 프로젝트도 kunit 을 이용해 test driven development 기법을 적용했고, 그 효과를 톡톡히 봤죠. 이 패치셋이 4.9에 들어갈 예정이었고, Shuah Kahn 이 이번 머지 윈도우에 풀리퀘스트에 이 패치셋을 포함해 보냈는데요. 토발즈가 바로 퉤에엣 을 시전했습니다.\n이유가 재미있습니다, kunit 패치는 리눅스 소스코드 루트 디렉토리에 kunit/ 디렉토리를 추가하는데, 이게 토발즈 마음에 들지 않았습니다. 토발즈의 tab 키를 활용한 자동완성 기능을 부셨기 때문이죠. kernel/ 디렉토리로 이용하기 위해 k 만 타이핑 하고 탭키를 누르면 되었는데, 이제 kunit/ 디렉토리 때문에 이게 안되는 거죠.\n생각하기에 따라선 좀 억지 아니냐고 생각할 수 있고 저도 kunit 의 오랜 팬으로써 좀 아쉬운 마음이 있었는데요. 또 이제와서 생각해 보면 저도 kernel/ 넘어가기 위해 한번 더 키보드에 손대야 하는게 좀 불쾌했던 거 같기도 하네요. ;)\n[PATCH v4 00/11] Introduces new count-based method for monitoring lockless pagetable walks https://lkml.kernel.org/r/20190927234008.11513-1-leonardo@linux.ibm.com\n128개 vcpu 의 qemu 가 THP 로 매핑된 496 GiB 메모리 영역을 munmap() 완료하는데 무려 275초가 걸린다고 합니다. 그 원인은 serialize_against_pte_lookup() 함수였다고 하는군요. 이 함수는 find_current_mm_pte() 내에서의 pmd_t 에서 pte_t 로의 캐스팅 또는 lockless page table walk 이 THP promotion/demotion 과 동시에 이루어지지 않게끔 보호하는 용도로 사용됩니다. 그렇다면, 실제 lockless page table walk 이 없다면 serialize_against_pte_lookup() 은 호출될 필요가 없겠죠.\n이를 위해 이 패치셋은 현재 수행되고 있는 find_current_mm_pte() 함수 갯수를 세고 그 갯수가 0이면 이 오버헤드가 되는 동시성 보호 코드를 생략하게 합니다.\n이 패치를 적용한 후 앞의 문제시 되던 작업에 걸리는 시간이 275초에서 무려 418 ms 으로 줄었다는군요!\nLinux 5.4-rc1 https://lkml.kernel.org/r/CAHk-=wgbGJ-SGeevEcgrThhPp+RwYOUUgWoZ3W27cbUpuB3VgA@mail.gmail.com\n평소보다 하루 늦은 월요일에 5.4 머지윈도우가 닫히고 rc1 릴리즈가 이루어졌습니다. 좀 미뤄진 머지를 처리하느라 늦어져서 하루 늦은 릴리즈가 되긴 했지만 대수로운 일은 아니라는군요.\n전체적인 릴리즈 내용도 평시와 크게 다른 내용은 없습니다. AMD DRM 관련 변경이 많이 있지만 이는 하드웨어 구성에 따른 변화니까 무시하면 되고, 그걸 제외하고 보면 평소와 변경사항들의 분포도 비슷하다는군요.\n","date":1569052848,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569052848,"objectID":"e7833104b1da496416bcbdc76919d1a9","permalink":"/post/lkml_news_v5.4-rc1/","publishdate":"2019-09-21T10:00:48+02:00","relpermalink":"/post/lkml_news_v5.4-rc1/","section":"post","summary":"[PATCH 0/2] introduce new perf-script page-reclaim https://lkml.kernel.org/r/1568817522-8754-1-git-send-email-laoar.shao@gmail.com\nPage reclaim 관련 성능 메트릭을 분석하기 위한 perf script 커맨드를 추가하는 패치입니다. Direct reclaim 으로 인한 응답시간 폭증, page reclaim 이 왜 일어났는지, page reclaim 의 효과는 어땠는지 등을 알 수 있다는군요.\n구체적으로는 direct reclaim 이 몇번 일어났는지, 그 latency 분포는 어땠는지, file / anon page 별로 reclaim, scan, sync write, async write 이 몇번 일어났는지, kswapd 는 몇번 일어났는지, kswapd latency 는 어땠는지 등등을 보입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.4-rc1","type":"post"},{"authors":null,"categories":[],"content":"몇일 전, 리차드 스톨만이 FSF 회장은 물론이고 의장직에서도 사임한다는 소식이 전해졌습니다. 무슨 일이 있었는지 아래의 reddit 코멘트가 가장 잘 설명하고 있다는 LWN 코멘트[1] 를 참고해, 해당 reddit 코멘트를 번역해 봅니다.\n[1] https://lwn.net/Articles/799391/\n 최근 공개된 한 여성의 증언에 따르면 그녀가 17세 때, Epstein 이 그녀에게 Marvin Minsky 와 성관계를 가지라고 했습니다. Minsky 는 MIT Media Lab 창시자이자 A.I 선도자였으며, 2016년에 사망했습니다. 스톨만은 한 메일링 리스트에서 (Minsky 를 성폭행으로 비난하는 어느 시위 주도자의 주장에 대한 답변으로) 이렇게 주장했습니다, 자신도 Epstein 은 비난하지만, Minsky 는 그녀가 강요당한 걸 몰랐을 가능성이 있다구요:\n많은 시나리오를 상상해 볼 수 있겠습니다만, 가장 그럴싸한 시나리오는 그에게는 그녀가 스스로 원해서 그러는듯 보였을 거라는 겁니다. Epstein 이 그녀를 강요했다면, 그는 그가 연관된 것을 그녀가 감추도록 해야 했을 겁니다. 일부 SJW 는 \u0026ldquo;Remove Richard Stallman\u0026rdquo; 이라는 Medium 포스트를 작성했습니다. Vice 와 The Daily Beast 와 같은 미디어 직판장은 Stallman 이 그 여성이 \u0026ldquo;완전히 원했다\u0026rdquo; 그리고 \u0026ldquo;Epstein 을 방어하고 있다\u0026rdquo; 라고 했다고 거짓말하고 그의 발언을 잘못된 의미로 인용했습니다. Stallman 은 이제 MIT 에서 사퇴하라는 압력을 받고 있습니다.\n더 나아가서 이 증언에 그녀가 Minsky 와 성관계를 가졌다는 이야기는 없고, Epstein 이 그녀에게 그러라 했을 뿐이라는 이야기만 있습니다, 그리고 물리학자 Greg Benford 에 따르면 그녀가 Minsky 를 유혹했고 그는 그녀를 거절했다고 합니다:\n내가 알죠, 내가 거기 있었습니다. Minsky 는 그녀를 거절했고, 제게 그 이야기를 했습니다. 그녀는 우리가 이야기 하는걸 보았고 제게 다가오지 않았습니다. 이는 Stallman 의 생각에 대한 완전한 검증 같습니다. Minsky 가 무엇을 알았는지가 중요치 않다면, \u0026ldquo;Minsky 가 한 여성을 성폭행 했다\u0026rdquo; 와 \u0026ldquo;Epstein 이 17살 여성에게 그의 강요를 Minsky 에게 알리지 않은 채 성행위를 가지라 했다\u0026rdquo; 사이에 차이가 없다면, 왜 그는 그녀를 거절했을까요?\n추가 수정: 그는 그가 설립한 Free Software Foundation 에서도 사임했습니다. 자유 소프트웨어에의 우울한 소식입니다, 저는 Stallman 같은 순수한 믿음을 가진 사람이 다양한 종류의 피해야할 선택을 막는데 필수적이라 생각하거든요.\n Context: In a recently unsealed deposition a woman testified that, at the age of 17, Epstein told her to have sex with Marvin Minsky. Minsky was a founder of the MIT Media Lab and pioneer in A.I. who died in 2016. Stallman argued on a mailing list (in response to a statement from a protest organizer accusing Minsky of sexual assault) that, while he condemned Epstein, Minsky likely did not know she was being coerced:\nWe can imagine many scenarios, but the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to tell her to conceal that from most of his associates. Some SJW responded by writing a Medium post called \u0026ldquo;Remove Richard Stallman\u0026rdquo;. Media outlets like Vice and The Daily Beast then lied and misquoted Stallman as saying that the woman was likely \u0026ldquo;entirely willing\u0026rdquo; and as \u0026ldquo;defending Epstein\u0026rdquo;. He has now been pressured to resign from MIT\nFurthermore the deposition doesn\u0026rsquo;t say she had sex with Minsky, only that Epstein told her to do so, and according to physicist Greg Benford she propositioned Minsky and he turned her down:\nI know; I was there. Minsky turned her down. Told me about it. She saw us talking and didn’t approach me. This seems like a complete validation of the distinction Stallman was making. If what Minsky knew doesn\u0026rsquo;t matter, if there\u0026rsquo;s no difference between \u0026ldquo;Minsky sexually assaulted a woman\u0026rdquo; and \u0026ldquo;Epstein told a 17-year-old to have sex with Minsky without his knowledge or consent\u0026rdquo;, then why did he turn her down?\nEdit: He has also resigned from the Free Software Foundation, which he founded. Grim news for free software, since I think true-believing purists like Stallman are vital to prevent various kinds of co-option.\n","date":1568923021,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568923021,"objectID":"2d5e23a9f603d3aa4acf146409962ef4","permalink":"/post/rms_resigns/","publishdate":"2019-09-19T21:57:01+02:00","relpermalink":"/post/rms_resigns/","section":"post","summary":"몇일 전, 리차드 스톨만이 FSF 회장은 물론이고 의장직에서도 사임한다는 소식이 전해졌습니다. 무슨 일이 있었는지 아래의 reddit 코멘트가 가장 잘 설명하고 있다는 LWN 코멘트[1] 를 참고해, 해당 reddit 코멘트를 번역해 봅니다.\n[1] https://lwn.net/Articles/799391/\n 최근 공개된 한 여성의 증언에 따르면 그녀가 17세 때, Epstein 이 그녀에게 Marvin Minsky 와 성관계를 가지라고 했습니다. Minsky 는 MIT Media Lab 창시자이자 A.I 선도자였으며, 2016년에 사망했습니다. 스톨만은 한 메일링 리스트에서 (Minsky 를 성폭행으로 비난하는 어느 시위 주도자의 주장에 대한 답변으로) 이렇게 주장했습니다, 자신도 Epstein 은 비난하지만, Minsky 는 그녀가 강요당한 걸 몰랐을 가능성이 있다구요:","tags":["FSF","Free Software Foundation","rms","Richard Stallman"],"title":"Richard Stallman Resigns","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH] x86/mm: Enable 5-level paging support by default https://lkml.kernel.org/r/20190913095452.40592-1-kirill.shutemov@linux.intel.com\n5 레벨 페이지 테이블 기능이 들어간지도 어느덧 시간이 지났죠. 인텔 내부적 테스트 상으론 이 기능을 켰을 때 4 레벨 페이지 테이블 기계에서도 딱히 리그레션 등은 나타나지 않았고, 주요 배포판들은 5 레벨 페이지 테이블 서포트를 기본으로 켤것으로 보인다고 합니다. 따라서 이 기능을 아예 디폴트로 켜져있게 하는 패치입니다.\nv5.4 에 들어가기엔 좀 늦은 관계로, v5.5 에 들어갈 것 같다는군요.\nLinux 5.3 https://lkml.kernel.org/r/CAHk-=wiP4K8DRJWsCo=20hn_6054xBamGKF2kPgUzpB5aMaofA@mail.gmail.com\nLPC 와 커널 서밋 등으로 인해 한주 늦춰진 5.3 릴리즈가 이뤄졌습니다. 지난 일주일은 고요했을 뿐더러, 이 늦춰진 일정 덕에 몇가지 수정도 더 이뤄질 수 있었다고 토발즈는 평하는군요.\n","date":1568303965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568303965,"objectID":"9124bc77dd725d01878a46b5f583a448","permalink":"/post/lkml_news_v5.3/","publishdate":"2019-09-12T17:59:25+02:00","relpermalink":"/post/lkml_news_v5.3/","section":"post","summary":"[PATCH] x86/mm: Enable 5-level paging support by default https://lkml.kernel.org/r/20190913095452.40592-1-kirill.shutemov@linux.intel.com\n5 레벨 페이지 테이블 기능이 들어간지도 어느덧 시간이 지났죠. 인텔 내부적 테스트 상으론 이 기능을 켰을 때 4 레벨 페이지 테이블 기계에서도 딱히 리그레션 등은 나타나지 않았고, 주요 배포판들은 5 레벨 페이지 테이블 서포트를 기본으로 켤것으로 보인다고 합니다. 따라서 이 기능을 아예 디폴트로 켜져있게 하는 패치입니다.\nv5.4 에 들어가기엔 좀 늦은 관계로, v5.5 에 들어갈 것 같다는군요.\nLinux 5.3 https://lkml.kernel.org/r/CAHk-=wiP4K8DRJWsCo=20hn_6054xBamGKF2kPgUzpB5aMaofA@mail.gmail.com\nLPC 와 커널 서밋 등으로 인해 한주 늦춰진 5.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH RFC 00/14] The new slab memory controller https://lkml.kernel.org/r/20190905214553.1643060-1-guro@fb.com\n슬랩 할당자의 실제 메모리 활용률이 대부분 45-65 퍼센트에 불과했다고 합니다. 이는 슬랩 페이지가 각 메모리 cgroup 마다 배타적으로 사용되기 때문입니다. 적은 메모리만 사용하는 cgroup 여러개가 존재하면 슬랩에서 크게 받아놓은 메모리에서 조금씩만 실제 사용되니까 전체 활용률은 낮게 되는거죠. 이 RFC 패치셋은 서로 다른 cgroup 들이 슬랩 페이지를 공유할 수 있게 함으로써 이 문제를 해결합니다.\nLinux 5.3-rc8 https://lkml.kernel.org/r/CAHk-=whBQ+6c-h+htiv6pp8ndtv97+45AH9WvdZougDRM6M4VQ@mail.gmail.com\n평소대로라면 5.3 정식 릴리즈가 되었을테고 별다른 문제는 없었지만, rc7 릴리즈에서 이야기된대로 LPC 와 커널 서밋도 있고 한 이유로, -rc8 이 릴리즈 되었습니다. 그렇다보니 특기할 만한 사항은 없습니다만, 정식 릴리즈를 늦춘 덕에 stable 트리로 넘어갈 뻔한 수정사항 몇가지를 이번 릴리즈 내에 넣을 수 있게 되었다는군요.\n","date":1567634219,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567634219,"objectID":"e7a7620c0487eecc48aedb90f996ec30","permalink":"/post/lkml_news_v5.3-rc8/","publishdate":"2019-09-04T23:56:59+02:00","relpermalink":"/post/lkml_news_v5.3-rc8/","section":"post","summary":"[PATCH RFC 00/14] The new slab memory controller https://lkml.kernel.org/r/20190905214553.1643060-1-guro@fb.com\n슬랩 할당자의 실제 메모리 활용률이 대부분 45-65 퍼센트에 불과했다고 합니다. 이는 슬랩 페이지가 각 메모리 cgroup 마다 배타적으로 사용되기 때문입니다. 적은 메모리만 사용하는 cgroup 여러개가 존재하면 슬랩에서 크게 받아놓은 메모리에서 조금씩만 실제 사용되니까 전체 활용률은 낮게 되는거죠. 이 RFC 패치셋은 서로 다른 cgroup 들이 슬랩 페이지를 공유할 수 있게 함으로써 이 문제를 해결합니다.\nLinux 5.3-rc8 https://lkml.kernel.org/r/CAHk-=whBQ+6c-h+htiv6pp8ndtv97+45AH9WvdZougDRM6M4VQ@mail.gmail.com\n평소대로라면 5.3 정식 릴리즈가 되었을테고 별다른 문제는 없었지만, rc7 릴리즈에서 이야기된대로 LPC 와 커널 서밋도 있고 한 이유로, -rc8 이 릴리즈 되었습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc8","type":"post"},{"authors":null,"categories":["lkml news"],"content":"평소보다 늦은 월요일 아침 릴리즈가 이뤄졌습니다. 일요일에 토발즈가 컴퓨터로부터 떨어져 있었다는군요.\n늦어진 릴리즈 덕분에 뒤늦게 들어온 풀리퀘스트를 더 받을 수 있었고, 이로 인해 이번 rc 릴리즈는 평소보다 좀 사이즈가 큽니다. 따라서 이번 릴리즈의 크기가 불안정성을 의미하는 게 아니라 5.3 정식 릴리즈를 늦출 필요는 없습니다만, 공교롭게도 또한 다음주는 LPC 와 커널 서밋이 있죠. 토발즈도 그렇고 많은 다른 개발자들도 이때 LPC 와 커널 서밋에 참가할 거라, rc7 을 마지막으로 5.3 릴리즈를 하면 5.4 머지 윈도우의 많은 시간을 여행에 보내게 되므로, 그냥 rc8 을 릴리즈 하겠다고 합니다.\n","date":1567414664,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567414664,"objectID":"09a03de0d4748132a85af8d893437fc4","permalink":"/post/lkml_news_v5.3-rc7/","publishdate":"2019-09-02T10:57:44+02:00","relpermalink":"/post/lkml_news_v5.3-rc7/","section":"post","summary":"평소보다 늦은 월요일 아침 릴리즈가 이뤄졌습니다. 일요일에 토발즈가 컴퓨터로부터 떨어져 있었다는군요.\n늦어진 릴리즈 덕분에 뒤늦게 들어온 풀리퀘스트를 더 받을 수 있었고, 이로 인해 이번 rc 릴리즈는 평소보다 좀 사이즈가 큽니다. 따라서 이번 릴리즈의 크기가 불안정성을 의미하는 게 아니라 5.3 정식 릴리즈를 늦출 필요는 없습니다만, 공교롭게도 또한 다음주는 LPC 와 커널 서밋이 있죠. 토발즈도 그렇고 많은 다른 개발자들도 이때 LPC 와 커널 서밋에 참가할 거라, rc7 을 마지막으로 5.3 릴리즈를 하면 5.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 5.3-rc6 https://lkml.kernel.org/r/CAHk-=wgAKCTq+t5YnG6HzrF62=rr9H=q3LqokEP0_bQRHLwYNw@mail.gmail.com\n오늘은 리눅스의 28번째 생일입니다. 따라서 오늘 rc6 릴리즈는 28년만의 릴리즈이기도 하군요. 토발즈도 감회가 깊었는지 오늘의 릴리즈 메일엔 최초 릴리즈 메일에 적었던 내용과 비슷하게 시작 부분을 꾸몄네요. 감회 깊은 날, 감회 깊은 릴리즈입니다.\n리눅스를 사용하는 여러분들 안녕하세요, 저는 486 AT 클론과 그외의 많은 다른 하드웨어를 위한 (자유) 운영체제를 (취미보단 더 진지하게) 만들고 있습니다. 이 일은 28년째 지속되고 있고, 아직도 끝나지 않았습니다. 이 릴리즈에 의해 만들어진 (또는 그보다 오래된) 모든 버그에 대한 피드백을 부탁드립니다. 어쨌건, 아주 특별할 건 없는 릴리즈였습니다만, 토발즈가 원하던 것에 비하면 변경사항이 좀 많았다는군요. 다음주에 확실히 변경사항이 줄지 않는다면 rc8 을 만들어야 할 것 같다고 합니다.\n","date":1566480654,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566480654,"objectID":"d4e321ecde8c91362f952c7cb1bef25a","permalink":"/post/lkml_news_v5.3-rc6/","publishdate":"2019-08-22T15:30:54+02:00","relpermalink":"/post/lkml_news_v5.3-rc6/","section":"post","summary":"Linux 5.3-rc6 https://lkml.kernel.org/r/CAHk-=wgAKCTq+t5YnG6HzrF62=rr9H=q3LqokEP0_bQRHLwYNw@mail.gmail.com\n오늘은 리눅스의 28번째 생일입니다. 따라서 오늘 rc6 릴리즈는 28년만의 릴리즈이기도 하군요. 토발즈도 감회가 깊었는지 오늘의 릴리즈 메일엔 최초 릴리즈 메일에 적었던 내용과 비슷하게 시작 부분을 꾸몄네요. 감회 깊은 날, 감회 깊은 릴리즈입니다.\n리눅스를 사용하는 여러분들 안녕하세요, 저는 486 AT 클론과 그외의 많은 다른 하드웨어를 위한 (자유) 운영체제를 (취미보단 더 진지하게) 만들고 있습니다. 이 일은 28년째 지속되고 있고, 아직도 끝나지 않았습니다. 이 릴리즈에 의해 만들어진 (또는 그보다 오래된) 모든 버그에 대한 피드백을 부탁드립니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[RFC PATCH 0/2] Add predictive memory reclamation and compaction https://lkml.kernel.org/r/20190813014012.30232-1-khalid.aziz@oracle.com\n커널의 page reclamation 과 compaction 등은 기본적으로 시스템 메모리 잔여량이 부족할 때 시작됩니다. 하지만 이땐 이미 때가 늦었습니다. reclamation 과 compaction 을 열심히 하긴 하지만 어플리케이션은 이미 메모리 부족으로 인한 응답시간 폭증 등을 겪게 됩니다.\n이 패치셋은 시스템의 메모리 부족을 미리 예측하고 reclamation 과 compaction 을 시작하기 위한 패치셋입니다. 시간축에 따라 메모리 사용량 변화 추세를 보면 이걸 예측할 수 있지 않겠냐는 것이죠.\n이 패치셋은 이런 아이디어에 기반해 시스템의 메모리 부족을 예측하고 kswapd 를 깨울지 재울지를 결정합니다. 간단한 dd 기반의 테스트를 통해 그 성능을 측정한 결과도 있습니다.\n[PATCH] kbuild: Change fallthrough comments to attributes https://lkml.kernel.org/r/20190812214711.83710-1-nhuck@google.com\nC 언의 switch 구문의 fall-through 기능은 복잡한 기능을 구현하기 좋긴 한데 암묵적으로 이루어지는 fall-through 를 방지하기 위해 break; 를 추가하는 걸 깜박하곤 하는 경우가 많습니다. GCC 는 주석으로 이 부분은 fall-through 가 맞다, 라는걸 지정할 수 있게 하고 이 주석이 없는 경우는 모두 fall-through 를 막아버림으로써 switch 의 명시적 fall-through 기능이 가능하게 합니다.\n리눅스 커널 역시 이런 방식으로 암묵적 fall-through 에 의한 버그를 극복하려 노력하는데요, clang 은 이걸 주석 형태가 아니라 attribute 형태로 지원합니다. 이 패치는 이런 차이를 어드레스 하기 위한 패치입니다.\n[RFC] mm: Proactive compaction https://lkml.kernel.org/r/20190816214413.15006-1-nigupta@nvidia.com\nHuge page 등의 할당 시간은 fragmentation 이 심한 메모리에선 길어지거나 아예 실패할 수 있죠. Huge page 에 성능이 의존적인 어플리케이션에겐 큰 문제입니다.\n이 패치는 page order 별 fragmentation threshold 를 두고 이에 맞춰 page order 별로 다른 compaction 을 수행하자는 겁니다.\nLinux 5.3-rc5 https://lkml.kernel.org/r/CAHk-=wiO5-puMa30fCwtgze57MH2JOzedVcEVotEviYmmQNihQ@mail.gmail.com\n다섯번째 rc 릴리즈입니다. 노드 로컬 할당 대 huge page 할당 관련 커밋 일부가 리버트 시키지 않는 등의 몇가지 문제를 제외하면 조용한 릴리즈 주간이었다는군요. 잘 안정화 되어가고 있다는 증거겠지요.\n","date":1566191998,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566191998,"objectID":"a8b7478e6203e2e96d501804b210126b","permalink":"/post/lkml_news_v5.3-rc5/","publishdate":"2019-08-19T14:19:58+09:00","relpermalink":"/post/lkml_news_v5.3-rc5/","section":"post","summary":"[RFC PATCH 0/2] Add predictive memory reclamation and compaction https://lkml.kernel.org/r/20190813014012.30232-1-khalid.aziz@oracle.com\n커널의 page reclamation 과 compaction 등은 기본적으로 시스템 메모리 잔여량이 부족할 때 시작됩니다. 하지만 이땐 이미 때가 늦었습니다. reclamation 과 compaction 을 열심히 하긴 하지만 어플리케이션은 이미 메모리 부족으로 인한 응답시간 폭증 등을 겪게 됩니다.\n이 패치셋은 시스템의 메모리 부족을 미리 예측하고 reclamation 과 compaction 을 시작하기 위한 패치셋입니다. 시간축에 따라 메모리 사용량 변화 추세를 보면 이걸 예측할 수 있지 않겠냐는 것이죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[RFC PATCH v6 00/92] VM introspection https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com\n호스트 또는 별도 VM 에서 돌아가는 어플리케이션이 다른 VM들을 제어하거나 상태를 알아보거나 shadow 페이지 테이블을 조정하거나 특정 이벤트 발생시 알림을 받거나 할 수 있게 해주는 KVM introspection 서브시스템을 제안하는 패치입니다. 무려 92개짜리의 거대한 패치군요.\n[PATCH v4 1/5] mm/page_idle: Add per-pid idle page tracking using virtual indexing https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org\n페이지 액세스 여부를 알아볼 수 있는 page_idle 기능을 프로세스별로 트래킹 하기 편하게 만들어 주는 패치의 네번째 버전입니다. 저자는 구글 직원으로, 안드로이드의 heap profiler 가 이 기능을 쓰나봅니다. 이전 버전과의 차이는\u0026hellip; Swap pte 처리가 추가되었군요.\n다섯번째 버전도 바로 올라왔습니다만, 큰 차이는 없어 보이는군요: https://lkml.kernel.org/r/20190807171559.182301-1-joel@joelfernandes.org\nLinux 5.3-rc4 https://lkml.kernel.org/r/CAHk-=whWJ7Dv9yZBZpxWd1zcAMwokjt7c8YOp-FOf1PXDKGrmQ@mail.gmail.com\n세번째 rc 는 어째선지 작은 크기였다 말했었죠, 그냥 pull request 들이 천천히 왔기 때문이 맞는 것 같다고 합니다. 이번 rc 릴리즈는 평소 크기에 rc3 에 안들어간 내용이 들어간 만큼 크다고 합니다. 덕분에 최근 2년 사이의 rc4 중 가장 크다고 하네요. rc3 에 안들어갔다가 rc4 에 뒤늦게 들어온 변경사항은 대부분 network 쪽 코드라는군요.\n이번 변경 중 개인적으로 눈에 띄는건 switch-case 구문의 fall-through 코멘트 업데이트입니다. LWN 에도 관련 글이 올라왔으니 한번 읽어보는 것도 좋을 겁니다: https://lwn.net/Articles/794944/\n이번 rc 릴리즈 개발 과정 시각화 동영상을 아래 링크에서 보실 수 있습니다: https://youtu.be/EB3i8iBuuHM\n","date":1565541613,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565541613,"objectID":"2a2ddd2fae753c391316e97ce625e6de","permalink":"/post/lkml_news_v5.3-rc4/","publishdate":"2019-08-12T01:40:13+09:00","relpermalink":"/post/lkml_news_v5.3-rc4/","section":"post","summary":"[RFC PATCH v6 00/92] VM introspection https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com\n호스트 또는 별도 VM 에서 돌아가는 어플리케이션이 다른 VM들을 제어하거나 상태를 알아보거나 shadow 페이지 테이블을 조정하거나 특정 이벤트 발생시 알림을 받거나 할 수 있게 해주는 KVM introspection 서브시스템을 제안하는 패치입니다. 무려 92개짜리의 거대한 패치군요.\n[PATCH v4 1/5] mm/page_idle: Add per-pid idle page tracking using virtual indexing https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org\n페이지 액세스 여부를 알아볼 수 있는 page_idle 기능을 프로세스별로 트래킹 하기 편하게 만들어 주는 패치의 네번째 버전입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v5 00/14] Provide generic top-down mmap layout functions https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr\n아키텍쳐별로 다르게 구현되어 있던 mmap 레이아웃 함수들을 범용화 시키는 패치셋, 다섯번째 버전입니다.\n[PATCH v10 00/22] Generic page walk and ptdump https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com\n역시 아키텍쳐별로 다르게 구현되어 있던 page table walk 과 page table dump 기능을 범용화 시키는 패치입니다. 벌써 10번째 버전이군요.\n[PATCH 0/3] address hugetlb page allocation stalls https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com\nsysctl 이나 procfs 를 통한 hugetlb 페이지 할당은 수분이나 수시간까지도 오래 걸릴 수 있습니다. 이 패치셋은 이렇게 느린 할당시간 문제를 유발하는 reclaim 과 compaction 쪽 문제를 해결할 수 있는 수정사항들을 담고 있습니다.\nLinux 5.3-rc3 https://lkml.kernel.org/r/CAHk-=wiW+q32YcUL62XWjAme8giZDo-=kmB9=f_JEgyEgV7eaA@mail.gmail.com\n보통 머지 윈도우가 지난 후에는 사람들이 숨을 고르고 넘어가기 때문에 보통 rc2 가 작고 rc3 부터 변경이 많아집니다. 하지만 이번 릴리즈는 이상하게도 rc2 보다 작았다는군요.\n커밋 기반으로 그린 rc3 개발 시각화 동영상을 다음 링크에서 볼 수 있습니다: https://youtu.be/V1qUa2QXZes\n","date":1564530048,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564530048,"objectID":"3685a05ef12fd58dd550ffe7c0e4def0","permalink":"/post/lkml_news_v5.3-rc3/","publishdate":"2019-07-31T08:40:48+09:00","relpermalink":"/post/lkml_news_v5.3-rc3/","section":"post","summary":"[PATCH v5 00/14] Provide generic top-down mmap layout functions https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr\n아키텍쳐별로 다르게 구현되어 있던 mmap 레이아웃 함수들을 범용화 시키는 패치셋, 다섯번째 버전입니다.\n[PATCH v10 00/22] Generic page walk and ptdump https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com\n역시 아키텍쳐별로 다르게 구현되어 있던 page table walk 과 page table dump 기능을 범용화 시키는 패치입니다. 벌써 10번째 버전이군요.\n[PATCH 0/3] address hugetlb page allocation stalls https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com\nsysctl 이나 procfs 를 통한 hugetlb 페이지 할당은 수분이나 수시간까지도 오래 걸릴 수 있습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc3","type":"post"},{"authors":null,"categories":["lwn translations"],"content":"LWN 의 \u0026ldquo;Memory: the flat, the discontiguous, and the sparse\u0026rdquo; 라는 제목의 글의 한글 번역입니다. 원문은 LWN 에서 볼 수 있습니다: https://lwn.net/Articles/789304/\n May 27, 2019\n이 기사는 Mike Rapoport 에 의해 기여되었습니다.\n컴퓨터 시스템에서 물리 메모리는 소중한 자원이어서, 이를 효율적으로 관리하기 위한 많은 노력이 기울여져왔습니다. 이 일은 현대의 시스템에서의 메모리 구조가 복잡해짐에 따라 더 어려워졌습니다. 물리 메모리가 실제로 어떻게 위치해 있는가를 다루기 위한 여러 계층의 추상화가 존재합니다; 그런 추상화 중 하나는 \u0026ldquo;메모리 모델\u0026rdquo; 이라고 불립니다. 커널은 세개의 모델을 지원하고 있는데, 그 중 하나는 지원이 멈춰져 가고 있습니다. 이 변경을 이해하기 위한 방법으로, 이 기사는 커널의 메모리 모델들의 진화, 현재 상태, 그리고 있을 법한 미래에 대해 자세히 들여다 봅니다.\nFLATMEM 리눅스가 처음 나왔을 때, 메모리는 평평했습니다: 메모리는 0 부터 수 메가바이트의 물리 주소를 갖는 단순한 선형적 배열일 뿐이었습니다. 각 물리 페이지 프레임은 커널의 mem_map 배열에 하나의 원소와 연관되었으며, 이 당시에 이 배열은 해당 페이지가 가진 레퍼런스의 갯수를 세는 하나의 unsigned short 원소로 이루어져 있었습니다. 하지만, 얼마 있지 않아서, 이 mem_map 의 원소들은 스왑 관리를 위한 age 와 dirty counter 를 포함하도록 커졌습니다. Linux 1.3.50 에서 mem_map 의 원소들은 마침내 struct page 로 이름지어졌습니다.\n이 평평한 메모리 매핑은 물리 페이지 프레임 번호 (page-frame number : PFN) 와 그에 대응되는 struct page 사이의 쉽고 빠른 변환을 제공했습니다; 이 변환 작업은 간단한 배열 인덱스 계산 문제였습니다. 이후 struct page 의 레이아웃 변경이 있었는데, 새로운 사용처 (예컨대, page cache) 들과 struct page 의 캐시 성능 최적화를 위한 것이었습니다. 메모리 매핑은 깔끔하고 효율적인 평평한 배열로 유지되었습니다만, 이는 중요한 단점을 가지고 있었습니다: 물리 주소 공간 상의 큰 공백을 처리할 수 없었습니다. 이 메모리 매핑 가운데 공백에 연관된 부분은 낭비되어지거나, ARM 에서처럼, 메모리 매핑 자체가 공백을 가질 수 있었습니다.\nDISCONTIGMEM 상당히 비연속적인 물리 메모리를 효율적으로 처리하기 위한 지원이 리눅스를 NUMA 기계들 위에서 잘 동작하도록 하기 위한 노력의 일환으로 1999년에 메모리 관리 서브시스템으로 들어왔습니다. 이 코드는 CONFIG_DISCONTIGMEM 설정 옵션에 종속적이어서, 이 메모리 모델은 DISCONTIGMEM 이라 이름지어진 첫번째 모델이었습니다.\n이 DISCONTIGMEM 모델은 메모리 노드 (memory node) 라는 개념을 소개했는데, 이 개념은 여전히 NUMA 메모리 관리의 기본으로 남아있습니다. 각 노드는 free-page lists, in-use page lists, least-recently-used (LRU) 정보, 사용 통계 등을 포함한, (대부분) 독립적인 메모리 관리 서브시스템을 갖습니다. 이런 것들 가운데, struct pglist_data (또는 짧게 pg_data_t) 로 표현되는 노드 데이터는 하나의 노드에 대한 메모리 매핑 정보를 가지고 있습니다. 각 노드가 연속적인 물리 메모리를 가지고 있다는 가정 하에, 노드당 하나의 struct page 배열을 갖는 것은 평평한 메모리 매핑 안의 거대한 공백 문제를 해결했습니다.\n하지만 이게 공짜로 된 건 아닙니다. DISCONTIGMEM 에서는, 예를 들면 어떤 PFN 을 그에 연관된 struct page 로 변환하기 위해 특정 페이지를 어떤 노드가 가지고 있는지를 알 수 있어야 합니다. 비슷하게, 페이지를 가지고 PFN 을 구하기 위해 어떤 노드의 메모리 맵이 해당 struct page 를 가지고 있는지도 알 수 있어야 합니다. 긴 진화의 끝에, KVADDR_TO_NID(), LOCAL_MAP_BASE(), ADDR_TO_MAPBASE(), 그리고 LOCAL_BASE_ADDR() 매크로를 처음 정의한 mips64 부터 시작해서 PFN 의 struct page 로의 변환과 그 반대 작업은 include/asm-generic/memory_model.h 안에 정의된, 비교적 간단한 pfn_to_page() 와 page_to_pfn() 매크로로 수행되게 되었습니다.\n하지만, DISCONTIGMEM 은 약점이 있었습니다: 메모리 핫플러그 (hotplug) 와 핫리무브 (hot remove) 입니다. 실제 NUMA 노드는 실제 핫플러그를 지원하기엔 너무 굵은 크기였고, 노드를 쪼개는 것은 불필요한게 많은 단편화와 오버헤드를 가져올 것이었습니다. 각 노드가 독립적인 메모리 관리 구조체들을 연관된 비용과 함께 가짐을 기억해 보세요; 노드를 쪼개는 것은 그런 비용을 상당히 증가시킬 겁니다.\nSPARSEMEM 이 한계는 SPARSEMEM 을 통해 해결되었습니다. 이 모델은 메모리 매핑을 아키텍쳐별로 정의된 임의의 크기의 섹션들의 집합으로 추상화 했습니다. 각 섹션은 struct mem_section 으로 표현되며, (코드에 설명된 바에 따르면): \u0026ldquo;논리적으로, struct page 의 배열로의 포인터입니다. 하지만, 다른 마술을 통해 저장됩니다\u0026rdquo;. 이 섹션들의 배열은 SECTION_SIZE 크기로 효율적으로 쪼개질 수 있는 메타 메모리 매핑입니다. PFN 과 struct page 사이의 효율적인 변환을 위해, PFN 의 상위 비트 몇개는 이 섹션 배열로의 인덱스로 사용됩니다. 반대 방향 변환을 위해선, 이 섹션 넘버가 page 의 flag 로 인코딩 됩니다.\n이 모델이 리눅스 커널에 소개되고 몇달 후, SPARSEMEM 은 SPARSEMEM_EXTREME 으로 확장되었는데, 이 모델은 산재하는 물리 주소 공간을 갖는 시스템에 적합합니다. SPARSEMEM_EXTREME 에서는, 첫번째 레벨은 mem_section 구조체들로의 포인터가 되고, 실제 mem_section 객체는 실제로 꽂힌 물리 메모리에 기반해서 동적으로 할당됩니다.\n2007년에 SPARSEMEM 의 또다른 개선이 이루어졌습니다; 이는 SPARSEMEM 의 일반적인 가상 메모리 매핑 지원 또는 SPARSEMEM_VMEMMAP 이라고 불렸습니다. SPARSEMEM_VMEMMAP 의 아이디어는 전체 메모리 매핑이 가상 연속 공간에 매핑되어 있지만, 활성화된 섹션들만이 물리 페이지로 연결되어 있도록 하자는 것입니다. 이 모델은 32-bit 시스템에서는 물리 메모리의 크기가 가상 주소 공간을 넘을 수 있기 때문에 잘 동작하지 못할 수 있습니다. 하지만, 64-bit 시스템에서 SPARSEMEM_VMEMMAP 은 확실히 우수합니다. 추가적인 페이지 테이블 엔트리 사용이라는 비용 아래, page_to_pfn() 과 pfn_to_page() 는 평평한 모델만큼이나 간단해 졌습니다.\nSPARSEMEM 메모리 모델의 마지막 확장은 꽤 최근 (2016) 이었습니다; 이는 persistent 메모리 디바이스의 사용 증가로 인해 이루어졌습니다. 메모리 매핑을 메인 메모리가 아니라 그런 디바이스들 내에 직접 저장하는 걸 지원하기 위해, 이 가상 메모리 매핑은 struct vmem_altmap 을 사용할 수 있게 되었는데, 이 구조체는 persistent 메모리 안의 페이지 구조체를 제공합니다.\n2005년으로 돌아가보면, SPARSEMEM 은 \u0026ldquo;새로운, 그리고 실험적인 discontiguous memory 의 대체재\u0026rdquo; 로 설명되었습니다. SPARSEMEM_VMEMMAP 을 추가한 커밋은 그것을 \u0026ldquo;우리가 SPARSEMEM 을 대부분의 시스템에 기본 (그리고 유일한) 옵션이 되게 할 가능성이 있다\u0026rdquo; 고 했습니다. 그리고 실제로, 일부 아키텍쳐는 DISCONTIGMEM 에서 SPARSEMEM 으로 옮겨탔습니다. 2008년, SPARSEMEM_VMEMMAP 은 x86-64 를 위한 유일한 메모리 모델이 되었는데, FLATMEM 보단 조금 비싸지만 DISCONTIGMEM 보다는 효율적이기 때문입니다.\n메모리 핫플러그, persistent 메모리 지원, 다양한 성능 최적화와 같은 최근의 메모리 관리 분야 개발은 모두 SPARSEMEM 모델을 타겟으로 하고 있습니다. 하지만 과거의 모델들은 여전히 존재해서, 아키텍쳐와 메모리 관리 코드 상의 많은 #ifdef 블록의 존재와, 관련된 구성 옵션의 특별한 미로의 존재라는 추가비용을 유발하고 있습니다. 남아있는 DISCONTIGMEM 사용자들을 SPARSEMEM 으로 완전히 바꿔타게 하려는 노력들이 있습니다만, ia64 나 mips64 와 같은 아키텍쳐들을 그렇게 변화시키기는 쉬운 작업이 아닐 겁니다. 그리고 ARC 아키텍쳐의 DISCONTIGMEM 사용은 \u0026ldquo;normal\u0026rdquo; 메모리 아래 \u0026ldquo;high memory\u0026rdquo; 영역의 존재를 갖는데, 이는 분명 변경하기 어려울 겁니다.\n","date":1564526717,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564526717,"objectID":"9b100f7f72cd756f45d0974ee1d1b0ec","permalink":"/post/lwn_memory_flat_discontiguous_sparse/","publishdate":"2019-07-31T07:45:17+09:00","relpermalink":"/post/lwn_memory_flat_discontiguous_sparse/","section":"post","summary":"LWN 의 \u0026ldquo;Memory: the flat, the discontiguous, and the sparse\u0026rdquo; 라는 제목의 글의 한글 번역입니다. 원문은 LWN 에서 볼 수 있습니다: https://lwn.net/Articles/789304/\n May 27, 2019\n이 기사는 Mike Rapoport 에 의해 기여되었습니다.\n컴퓨터 시스템에서 물리 메모리는 소중한 자원이어서, 이를 효율적으로 관리하기 위한 많은 노력이 기울여져왔습니다. 이 일은 현대의 시스템에서의 메모리 구조가 복잡해짐에 따라 더 어려워졌습니다. 물리 메모리가 실제로 어떻게 위치해 있는가를 다루기 위한 여러 계층의 추상화가 존재합니다; 그런 추상화 중 하나는 \u0026ldquo;메모리 모델\u0026rdquo; 이라고 불립니다.","tags":["lwn","linux","kernel","memory models","translation","lwn translations"],"title":"Memory: the flat, the discontiguous, and the sparse (Korean)","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v6 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org\n어플리케이션의 메모리를 좀 더 적극적으로 reclaim 시킴으로써 반응성을 높이기 위한 패치셋의 일부를 따로 떼어낸, MADV_COLD 와 MADV_PAGEOUT 힌트를 madvise() 에 추가하는 패치의 여섯번째 버전입니다.\n일곱번째 버전도 빠르게 올라왔군요: https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org 단순히 mmotm 최신 버전 위로 리베이스 한 것 같네요.\n[PATCH v9 00/21] Generic page walk and ptdump https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com\nx86 과 arm64 가 범용적 페이지 테이블 워킹을 하도록 했던 해치셋을 조금 더 확장한 버전입니다. 기존 대비 페이지 테이블 덤프 기능도 일반화 시킨게 차이군요.\n[PATCH v1 1/2] mm/page_idle: Add support for per-pid page_idle using virtual indexing https://lkml.kernel.org/r/20190722213205.140845-1-joel@joelfernandes.org\n리눅스 커널은 page_idle 이라는 인터페이스를 통해 특정 페이지의 액세스 여부를 파악할 수 있게 합니다. 저도 이걸 통해서 wss 를 재거나 하는데 쓸 수 있는 도구를 만들었었죠.\n문제는 이 인터페이스는 쓰기가 조금 복잡합니다. PFN 을 가지고 페이지를 지목할 수 있게 되어 있기 때문에 특정 프로세스의 데이터 액세스를 추적하려면 해당 프로세스가 사용하고 있는 가상 메모리가 어떤 PFN 으로 매핑되어 있는지 알아야 하기 때문이죠. 달리 말하면 page_idle 인터페이스가 글로벌하기 때문에 생기는 문제입니다.\n이 패치셋은 /proc/\u0026lt;pid\u0026gt;/page_idle 파일을 생성하고 이를 통해 프로세스 단위로 virtual page frame number (VFN) 을 통해 페이지 트랙킹을 할 수 있게 합니다. 이로써 이 인터페이스를 사용하는 유저스페이스 도구의 코드가 간단해질 뿐더러 보안 이슈도 좀 더 편리해지죠. 구글에선 내부적으로 이를 통해 heap profiler (heapprofd) 를 좀 더 쉽게 만들었나보군요.\n[PATCH RFC] mm/page_idle: simple idle page tracking for virtual memory https://lkml.kernel.org/r/156388286599.2859.5353604441686895041.stgit@buzz\n앞에서 소개한 패치와 비슷하게 page_idle 을 간편화 시키는 패치셋입니다. 특정 pid 의 모든 mapped page frame 의 access bit 을 한번에 clear 할 수 있게 합니다. 인터페이스는 echo 6 \u0026gt; /proc/\u0026lt;pid\u0026gt;/clear_refs 같은 형태군요. 이후, /proc/\u0026lt;pid\u0026gt;/smaps 파일을 이용해 현재 idle 한 페이지들의 갯수를 알 수 있습니다.\nLinux 5.3-rc2 https://lkml.kernel.org/r/CAHk-=wiiKRJprQDJqJzdcjdaGs73UtVPTM2+jOHWdMgu5Sp2HQ@mail.gmail.com\n두번째 rc 버전이 예정대로 나왔습니다. 변경사항이 많은 머지윈도우였던 만큼 rc2 도 꽤 수정사항이 많은 것 같습니다. 전체적으로 문서, arch 코드, 그리고 드라이버 쪽 수정사항이 대부분인 듯 하군요.\n앞선 rc1 릴리즈부터 이번 릴리즈 사이의 변경 사항의 시각화 비디오를 아래 링크에서 볼 수 있습니다: https://youtu.be/yxtq3-lhebQ\n","date":1564098079,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564098079,"objectID":"1065c07737925eadd75536c18ffc707c","permalink":"/post/lkml_news_v5.3-rc2/","publishdate":"2019-07-26T08:41:19+09:00","relpermalink":"/post/lkml_news_v5.3-rc2/","section":"post","summary":"[PATCH v6 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org\n어플리케이션의 메모리를 좀 더 적극적으로 reclaim 시킴으로써 반응성을 높이기 위한 패치셋의 일부를 따로 떼어낸, MADV_COLD 와 MADV_PAGEOUT 힌트를 madvise() 에 추가하는 패치의 여섯번째 버전입니다.\n일곱번째 버전도 빠르게 올라왔군요: https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org 단순히 mmotm 최신 버전 위로 리베이스 한 것 같네요.\n[PATCH v9 00/21] Generic page walk and ptdump https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com\nx86 과 arm64 가 범용적 페이지 테이블 워킹을 하도록 했던 해치셋을 조금 더 확장한 버전입니다. 기존 대비 페이지 테이블 덤프 기능도 일반화 시킨게 차이군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc2","type":"post"},{"authors":null,"categories":["misc"],"content":"우연히 발견한 글 을 통해 NASA 의 코딩 규칙 10가지 를 알게 되었습니다. 너무 깐깐한 규칙 아닌가 싶기도 하지만 ping 하나 날리는데 40분이 걸리고 물리적으로는 접근할 수 없는 화성에 로봇을 보내야 한다면 이런 규칙은 합리적이라 볼 수 있겠죠. 제가 참고한 저 글은 이걸 파이썬이나 자바스크립트와 같은 곳에서도 어떻게 적용해 볼 수 있을지를 고찰해 보고 있습니다. 이 포스트에선 단순히 이 10개의 규칙을 번역해 봅니다.\n goto 또는 재귀호출과 같은 복잡한 수행 흐름을 피하라.  원문: 모든 코드를 매우 간단한 수행 흐름으로 제한하라 - goto 문, setjmp` 또는 longjmp`` 명령, 그리고 직/간접적 재귀 호출을 사용하지 말라.\n Avoid complex flow constructs, such as goto and recursion.  Restrict all code to very simple control flow constructs – do not use goto statements, setjmp or longjmp constructs, and direct or indirect recursion.\n모든 루프 (반복문) 은 고정된 최대 반복 횟수를 가져야 한다. 이는 무한반복 코드를 방지한다.  모든 루프는 고정된 최대 반복 횟수를 가져야 한다. 코드 체크 도구가 정적으로 어떤 루프의 반복 횟수가 미리 설정된 최대 횟수를 넘는지를 쉽게 검사할 수 있어야 한다. 이 반복 한계가 정적으로 검증될 수 없다면, 이 규칙이 깨어진 것으로 간주한다.\nAll loops must have fixed bounds. This prevents runaway code.  All loops must have a fixed upper-bound. It must be trivially possible for a checking tool to prove statically that a preset upper-bound on the number of iterations of a loop cannot be exceeded. If the loop-bound cannot be proven statically, the rule is considered violated.\n힙 메모리 할당을 피하라.  초기화 단계 후에는 동적 메모리 할당을 사용하지 말라.\nAvoid heap memory allocation.  Do not use dynamic memory allocation after initialization.\n함수의 크기를 한장의 종이에 적힐 수 있게 제한하라.  어떤 함수도 명령문당 한줄, 선언당 한줄을 갖는 표준 레퍼런스 포맷을 지킨 채로 한장의 종이에 프린트 될 수 있는 길이 이상을 가져선 안된다. 보통, 이는 함수당 60줄 이상의 코드를 가져선 안된다는 것을 의미한다.\nRestrict functions to a single printed page.  No function should be longer than what can be printed on a single sheet of paper in a standard reference format with one line per statement and one line per declaration. Typically, this means no more than about 60 lines of code per function.\n최소 함수당 두개의 런타임 단정문을 사용하라.  평균적으로 함수당 최소 두개의 단정문이 있어야 한다. 단정문은 실제 수행 중에 일어나선 안되는 문제가 있는 조건을 검사하는데 사용되어야 한다. 단정문은 항상 사이드 이펙트로부터 자유로워야 하고 Boolean 테스트로 정의되어야 한다. 단정문이 실패한다면 명시적인 복구 동작이 행해져야 하는데, 예를 들면 이 실패한 단정문을 수행한 함수를 호출한 측에 에러 정보를 리턴하는 것이다. 정적 검사 도구가 절대 실패할 수 없거나 항상 성공한다고 증명해내는 단정문은 모두 이 규칙을 어기는 것이다. (예를 들어, 전혀 도움 되지 않을 assert(true) 문을 추가함으로써 이 규칙을 만족시킬 순 없다.)\nUse a minimum of two runtime assertions per function.  The assertion density of the code should average to a minimum of two assertions per function. Assertions are used to check for anomalous conditions that should never happen in real-life executions. Assertions must always be side-effect free and should be defined as Boolean tests. When an assertion fails, an explicit recovery action must be taken, e.g., by returning an error condition to the caller of the function that executes the failing assertion. Any assertion for which a static checking tool can prove that it can never fail or never hold violates this rule. (I.e., it is not possible to satisfy the rule by adding unhelpful \u0026ldquo;assert(true)\u0026rdquo; statements.)\n데이터의 사용 영역을 가능한 작게 잡아라.  데이터 객체는 가능한 가장 작은 단계의 영역에서 선언되어야만 한다.\nRestrict the scope of data to the smallest possible.  Data objects must be declared at the smallest possible level of scope.\n리턴 타입이 void 가 아닌 (non-void) 모든 함수의 리턴값은 검사되거나 리턴값이 무의미하다는 걸 알리기 위해 void 로 캐스팅 되어야 한다.  non-void 함수의 리턴값은 각 호출 함수에 의해 체크되어야 하며, 패러미터의 유효성은 각 함수 안에서 검사되어야 한다.\nCheck the return value of all non-void functions, or cast to void to indicate the return value is useless.  The return value of non-void functions must be checked by each calling function, and the validity of parameters must be checked inside each function.\n전처리기를 아껴 사용하라.  전처리기의 사용은 헤더 파일을 포함하는 용도와 간단한 매그로 정의로 국한되어야만 한다. 토큰 붙이기, 유동적 갯수의 인자 리스트, 그리고 재귀적 매크로 호출은 허용되지 않는다. 모든 매크로는 완전한 구문적 단위로 확장되어야만 한다. 조건적 컴파일 지시어의 사용은 많은 경우 모호하지만, 항상 금지될 수는 없다. 이는 거대한 소프트웨어 개발 노력이 든다 하더라도 동일한 헤더 파일의 중복 포함을 방지하는 상용문 외의 한두개의 조건적 컴파일 지시어를 위한 정당화가 필요하다는 것을 의미한다. 그런 모든 경우에는 도구 기반의 검사를 통한 플래그가 붙어있거나 코드 안에 사용의 정당성에 대한 설명이 있어야 한다.\nUse the preprocessor sparingly.  The use of the preprocessor must be limited to the inclusion of header files and simple macro definitions. Token pasting, variable argument lists (ellipses), and recursive macro calls are not allowed. All macros must expand into complete syntactic units. The use of conditional compilation directives is often also dubious, but cannot always be avoided. This means that there should rarely be justification for more than one or two conditional compilation directives even in large software development efforts, beyond the standard boilerplate that avoids multiple inclusion of the same header file. Each such use should be flagged by a tool-based checker and justified in the code.\n포인터의 사용을 한단계 디레퍼런스로 제한하고, 함수 포인터는 사용하지 말라.  포인터의 사용은 제한되어야 한다. 구체적으로, 두단계 이상의 디레퍼런스는 허용되지 않는다. 포인터 디레퍼런스 오퍼레이션이 매크로 정의나 typedef 선언 안에 숨겨져선 안된다. 함수 포인터는 허용되지 않는다.\nLimit pointer use to a single dereference, and do not use function pointers.  The use of pointers should be restricted. Specifically, no more than one level of dereferencing is allowed. Pointer dereference operations may not be hidden in macro definitions or inside typedef declarations. Function pointers are not permitted.\n모든 가능한 경고를 활성화 한 채 컴파일 하라; 그리고 모든 경고는 해당 소프트웨어의 배포 전에 해결되어야 한다.  모든 코드는 개발을 시작한 첫날부터 모든 컴파일러 경고가 가장 엄중한 설정으로 활성화 된 채 컴파일 되어야만 한다. 모든 코드는 이 설정 아래 아무런 경고 없이 컴파일 되어야 한다. 모든 코드는 최소 하루에 한번, 그러나 가급적 한번 넘게, 최신의 정적 소스 코드 분석도구를 통해 검사되어야 하며 이 검사를 어떤 경고도 없이 통과해야만 한다.\nCompile with all possible warnings active; all warnings should then be addressed before release of the software.  All code must be compiled, from the first day of development, with allcompiler warnings enabled at the compiler’s most pedantic setting. All code must compile with these setting without any warnings. All code must be checked daily with at least one, but preferably more than one, state-of-the-art static source code analyzer and should pass the analyses with zero warnings.\n","date":1563672176,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563672176,"objectID":"ef1fb04ec715a697d28cfbcf7572438d","permalink":"/post/nasa_coding_rules/","publishdate":"2019-07-21T10:22:56+09:00","relpermalink":"/post/nasa_coding_rules/","section":"post","summary":"우연히 발견한 글 을 통해 NASA 의 코딩 규칙 10가지 를 알게 되었습니다. 너무 깐깐한 규칙 아닌가 싶기도 하지만 ping 하나 날리는데 40분이 걸리고 물리적으로는 접근할 수 없는 화성에 로봇을 보내야 한다면 이런 규칙은 합리적이라 볼 수 있겠죠. 제가 참고한 저 글은 이걸 파이썬이나 자바스크립트와 같은 곳에서도 어떻게 적용해 볼 수 있을지를 고찰해 보고 있습니다. 이 포스트에선 단순히 이 10개의 규칙을 번역해 봅니다.\n goto 또는 재귀호출과 같은 복잡한 수행 흐름을 피하라.","tags":["coding","coding rule","coding style"],"title":"NASA's Power of 10 Coding Rules (Korean)","type":"post"},{"authors":null,"categories":["talks"],"content":"My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers has accepted! Hope to see you in Lisbon. The title of the talk is, \u0026ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy\u0026rdquo;.\n","date":1563558106,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563558106,"objectID":"f4f45fb3861d3328bcd2025164b70e81","permalink":"/post/kernelsummit2019_talk/","publishdate":"2019-07-20T02:41:46+09:00","relpermalink":"/post/kernelsummit2019_talk/","section":"post","summary":"My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers has accepted! Hope to see you in Lisbon. The title of the talk is, \u0026ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy\u0026rdquo;.","tags":["linux","linux kernel summit","kernel summit","linux plumbers conference 2019","lpc2019","talk"],"title":"I will have a talk at the Linux Kernel Summit 2019","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v5 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org\nMADV_COLD 와 MADV_PAGEOUT 을 구현하는 패치, 어느새 다섯번째 버전입니다. 큰 변경은 없는 것 같군요.\n[PATCH v2 0/3] Make working with compound pages easier https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org\nHuge page 를 다루기 쉽게끔 page_size(), page_shift(), 그리고 compound_nr() 이라는 세개의 helper 함수를 추가하고 이 함수들을 사용하게끔 기존 코드를 다듬는 패치셋입니다.\nPAGE_SIZE \u0026lt;\u0026lt; compound_order(page) 는 page_size(page) 가, PAGE_SHIFT + compound_order(page) 는 page_shift(page) 가, 그리고 1 \u0026lt;\u0026lt; compound_order(page) 는 compound_nr(page) 가 되는 것이죠.\nLinux 5.3-rc1 https://lkml.kernel.org/r/wiVjkTqzP6OppBuLQZ+t1mpRQC4T+Ho4Wg2sBAapKd--Q@mail.gmail.com\n이번 릴리즈 사이의 변경 사항을 시각화 한 비디오를 아래 링크에서 볼 수 있습니다: https://youtu.be/vx_BUvs00u8\n2주일이 지나고 5.3 을 향한 첫번째 rc 릴리즈가 이루어졌습니다.\n이번 rc 릴리즈는 커밋 갯수로 볼 때 꽤 큰 릴리즈입니다. 4.12, 4.15, 4.19 때의 머지 윈도우와 비슷한 정도라는군요. 참고로 가장 큰 머지윈도우는 아직 4.9 의 것이었습니다.\n이번 머지 윈도우는 초기에 두개의 버그가 나와서 토발즈를 괴롭게 했다고 하는데요. 하나는 토발즈의 커널 컨피규레이션이 너무 간단하게 되어 있어 어떤 코드가 테스트 되지 않아 토발즈가 만들어낸 버그였고, 다른 하나는 패치 자체에 존재하는 버그였다고 합니다. 토발즈가 유발한 버그는 토발즈가 고쳤고, 두번째 버그를 일으킨 패치는 그냥 리버트 시켰다고 하는군요.\n그렇다고는 해도 이번 머지 윈도우의 후반부는 충분히 스무스하게 이뤄졌다고 합니다.\n그리고 이번 머지 윈도우에 이름을 올린 개발자는 총 1600명이었다는군요.\n","date":1562780542,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562780542,"objectID":"5747f93d1bac458bc9098087762d7813","permalink":"/post/lkml_news_v5.3-rc1/","publishdate":"2019-07-11T02:42:22+09:00","relpermalink":"/post/lkml_news_v5.3-rc1/","section":"post","summary":"[PATCH v5 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org\nMADV_COLD 와 MADV_PAGEOUT 을 구현하는 패치, 어느새 다섯번째 버전입니다. 큰 변경은 없는 것 같군요.\n[PATCH v2 0/3] Make working with compound pages easier https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org\nHuge page 를 다루기 쉽게끔 page_size(), page_shift(), 그리고 compound_nr() 이라는 세개의 helper 함수를 추가하고 이 함수들을 사용하게끔 기존 코드를 다듬는 패치셋입니다.\nPAGE_SIZE \u0026lt;\u0026lt; compound_order(page) 는 page_size(page) 가, PAGE_SHIFT + compound_order(page) 는 page_shift(page) 가, 그리고 1 \u0026lt;\u0026lt; compound_order(page) 는 compound_nr(page) 가 되는 것이죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.3-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v5 00/12] S.A.R.A. a new stacked LSM https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com\n다양한 보안 측정을 위한 공용 인터페이스를 제공하는 스택 기반의 리눅스 보안 모듈입니다. 이름이 재밌네요. S.A.R.A 는 S.A.R.A is Another Recursive Acronym 의 약자라고 합니다.\nLinux 5.2 https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com\n이번 릴리즈 중간엔 토발즈의 여행이 있었죠. 초반엔 예상 외로 큰 rc 릴리즈도 있었구요. 해서 이번주는 rc8 이 릴리즈 될지 5.2가 릴리즈 될지 저도 좀 궁금했는데, 최종적으로 5.2 릴리즈가 되었습니다. 토발즈도 rc8 을 릴리즈 할까 망설였다고 하네요. 하지만 그래야 할만한 문제가 전혀 없었기에 5.2를 릴리즈 했다고 합니다.\n더불어, 토발즈는 이번 여행 중에도 스쿠버다이빙을 즐겼나보네요. 더크 혼델이 찍은 사진도 공유했습니다: https://hohndel.name/palau-2019\n","date":1561963684,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561963684,"objectID":"ca696df754f0f8fb77b92e70acc85833","permalink":"/post/lkml_news_v5.2/","publishdate":"2019-07-01T15:48:04+09:00","relpermalink":"/post/lkml_news_v5.2/","section":"post","summary":"[PATCH v5 00/12] S.A.R.A. a new stacked LSM https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com\n다양한 보안 측정을 위한 공용 인터페이스를 제공하는 스택 기반의 리눅스 보안 모듈입니다. 이름이 재밌네요. S.A.R.A 는 S.A.R.A is Another Recursive Acronym 의 약자라고 합니다.\nLinux 5.2 https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com\n이번 릴리즈 중간엔 토발즈의 여행이 있었죠. 초반엔 예상 외로 큰 rc 릴리즈도 있었구요. 해서 이번주는 rc8 이 릴리즈 될지 5.2가 릴리즈 될지 저도 좀 궁금했는데, 최종적으로 5.2 릴리즈가 되었습니다. 토발즈도 rc8 을 릴리즈 할까 망설였다고 하네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2","type":"post"},{"authors":null,"categories":["tip"],"content":"프로젝트 a 와 프로젝트 b 를 병렬로 진행하고 있었는데, 두개의 리포지토리를 합치고 싶어지는 경우가 있습니다. 예컨대 프로젝트 a 의 성격이 보다 범용이 되었고 프로젝트 b 는 프로젝트 a 를 위한 도구적 성격이 되는 경우가 있겠죠. a 프로젝트에 \u0026lsquo;b\u0026rsquo; 디렉토리를 만들고 그 아래 기존 프로젝트 b 의 파일들을 위치하고 싶습니다. 하지만 기존 b 프로젝트의 git 히스토리들도 유지하고 싶습니다. 비슷한 사례로 리눅스 커널 메모리 모델 프로젝트는 별도의 리포지토리[1] 로 개발되었지만 리눅스 업스트림 리포지토리의 tools/ 디렉토리 아래로 머지[2] 되었는데, 이 때 기존 개발 히스토리를 유지했죠.\n이 포스트는 이렇게 특정 git 리포지토리를 그 히스토리를 유지한 채 다른 git 리포지토리의 하위 디렉토리로 옮기는 법을 설명합니다.\n[1] https://github.com/aparri/memory-model\n[2] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/memory-model\n초기 상황과 목표 먼저 현재 디렉토리 아래에 a 리포지토리와 b 리포지토리가 있다고 가정합니다:\n$ ls a b $ 우리는 a 리포지토리 아래 b/ 디렉토리를 만들고 그 아래 b 리포지토리를 넣고 싶습니다.\n전략 b 리포지토리가 b/ 디렉토리 아래 모든 파일을 위치하도록 변경한 후, 이 리포지토리를 a 리포지토리에서 --allow-unrelated-histories 옵션을 사용해 머지하도록 하겠습니다.\n합쳐질 리포지토리 파일 구조 변경 먼저 b 리포지토리의 파일들이 b/ 디렉토리 아래 위치하도록 만듭니다:\n$ cd b $ mkdir b $ git mv !(b) b $ git commit -a -m \u0026quot;Relocate files for inclusion\u0026quot; 리포지토리 병합 이제 b 리포지토리를 임시 remote 리포지토리로 등록하고 머지합니다:\n$ cd ../a $ git remote add temp ../b $ git fetch temp $ git merge --allow-unrelated-histories temp/master --allow-unrelated-histories 는 경로가 다른 파일에 대한 커밋들도 머지가 될 수 있게 해줍니다.\n임시로 등록한 remote 리포지토리는 지워줍시다:\n$ git remote rm temp 정리 이상과 같이 기존의 개발 히스토리를 유지하면서 특정 git 리포지토리를 다른 git 리포지토리의 하위 디렉토리로 병합하는 방법을 알아보았습니다.\n","date":1561622569,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561622569,"objectID":"b9047029ac41e910338cf654e633a94a","permalink":"/post/integrate_external_git_repository_with_history/","publishdate":"2019-06-27T17:02:49+09:00","relpermalink":"/post/integrate_external_git_repository_with_history/","section":"post","summary":"프로젝트 a 와 프로젝트 b 를 병렬로 진행하고 있었는데, 두개의 리포지토리를 합치고 싶어지는 경우가 있습니다. 예컨대 프로젝트 a 의 성격이 보다 범용이 되었고 프로젝트 b 는 프로젝트 a 를 위한 도구적 성격이 되는 경우가 있겠죠. a 프로젝트에 \u0026lsquo;b\u0026rsquo; 디렉토리를 만들고 그 아래 기존 프로젝트 b 의 파일들을 위치하고 싶습니다. 하지만 기존 b 프로젝트의 git 히스토리들도 유지하고 싶습니다. 비슷한 사례로 리눅스 커널 메모리 모델 프로젝트는 별도의 리포지토리[1] 로 개발되었지만 리눅스 업스트림 리포지토리의 tools/ 디렉토리 아래로 머지[2] 되었는데, 이 때 기존 개발 히스토리를 유지했죠.","tags":["git","tip","version control"],"title":"Integrate external git repository with its history","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v7 0/4] THP aware uprobe https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com\nuprobe 가 THP 로 받쳐지고 있는 코드에 적용되면 이 THP 는 regular page 로 쪼개집니다. 이 패치셋은 이 문제를 해결합니다.\n[PATCH v9 0/6] Enable THP for text section of non-shmem files https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com\n어플리케이션의 텍스트 섹션을 THP 로 지원해 줌으로써 iTLB 미스를 줄이고 성능을 높이고자 하는 패치셋입니다.\nLinux 5.2-rc7 https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com\n여전히 토발즈의 여행 탓에 릴리즈가 평소와 조금 다른 시간대에 이뤄졌습니다, 토발즈 자신의 시점으로는 평소와 같은 일요일 오후지만요. 아마도 아시아 쪽에 있는 것 같군요. 이번 릴리즈는 심지어 바다 위에서의 릴리즈라네요. 인터넷 안될 줄 알았는데 Dirk Hohndel 이 핸폰 핫스팟을 빌려줬다고 ;)\n이번 릴리즈는 고요했고, 별 문제 없었다고 합니다. 다음주엔 정식 릴리즈일까요?\n","date":1561617312,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561617312,"objectID":"9726b1e4ab9d1cd9463030ebc6b9c4d9","permalink":"/post/lkml_news_v5.2-rc7/","publishdate":"2019-06-27T15:35:12+09:00","relpermalink":"/post/lkml_news_v5.2-rc7/","section":"post","summary":"[PATCH v7 0/4] THP aware uprobe https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com\nuprobe 가 THP 로 받쳐지고 있는 코드에 적용되면 이 THP 는 regular page 로 쪼개집니다. 이 패치셋은 이 문제를 해결합니다.\n[PATCH v9 0/6] Enable THP for text section of non-shmem files https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com\n어플리케이션의 텍스트 섹션을 THP 로 지원해 줌으로써 iTLB 미스를 줄이고 성능을 높이고자 하는 패치셋입니다.\nLinux 5.2-rc7 https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com\n여전히 토발즈의 여행 탓에 릴리즈가 평소와 조금 다른 시간대에 이뤄졌습니다, 토발즈 자신의 시점으로는 평소와 같은 일요일 오후지만요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH NOTFORMERGE 0/5] Extend remote madvise API to KSM hints https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com\n이 블로그에서도 여러번 소개한 remote madvise() 에 대한 관심이 많이 있는 것 같네요. 이 패치셋은 MADV_MERGEABLE, MADV_UNMERGEABLE 을 추가해서 KSM 힌트도 madvise() 를 통해 줄 수 있게 합니다.\n논의를 위한 패치라 이대로 머지되진 않겠지만, 사용처가 많이 늘어날 것 같네요.\nLinux 5.2-rc6 https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com\n안타깝게도 기대와 달리 이번 릴리즈는 조용하지 않았습니다. 이번 5.2 개발을 위한 릴리즈 중 머지 윈도우와 rc1 을 제외하면 rc6 가 오히려 가장 많은 변화를 담고 있다는군요. TCP SACK/fragmentation/mss 수정이 영향을 끼친 것들 중 하나라고 합니다.\n또, 이번에도 릴리즈가 빨라진 건 내일 토발즈가 비행기 타기 때문이랍니다. 컨퍼런스도 참여해야하고 휴양도 취하는 모양입니다. 이 때문에 rc7 은 조금 늦어질 수 있다는군요. 보통은 rc6 가 가장 안정화 되었을 무렵이라 이렇게 일정을 잡았다고 합니다만, 일이 복잡해졌네요. 자신에게 무슨 일이 있으면 Greg 이 대신할 거라고 합니다.\n뭐, 그렇다곤 해도 5.2 릴리즈 진행은 예정대로 진행될 것 같다고도 합니다. 이번 릴리즈의 주요 변경은 SPDX 제외하면 네트워킹, 셀프테스트 그리고 문서화였군요.\n","date":1560766968,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560766968,"objectID":"63b218f3d2e7fa9fd0ca1c0ea062b111","permalink":"/post/lkml_news_v5.2-rc6/","publishdate":"2019-06-17T19:22:48+09:00","relpermalink":"/post/lkml_news_v5.2-rc6/","section":"post","summary":"[PATCH NOTFORMERGE 0/5] Extend remote madvise API to KSM hints https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com\n이 블로그에서도 여러번 소개한 remote madvise() 에 대한 관심이 많이 있는 것 같네요. 이 패치셋은 MADV_MERGEABLE, MADV_UNMERGEABLE 을 추가해서 KSM 힌트도 madvise() 를 통해 줄 수 있게 합니다.\n논의를 위한 패치라 이대로 머지되진 않겠지만, 사용처가 많이 늘어날 것 같네요.\nLinux 5.2-rc6 https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com\n안타깝게도 기대와 달리 이번 릴리즈는 조용하지 않았습니다. 이번 5.2 개발을 위한 릴리즈 중 머지 윈도우와 rc1 을 제외하면 rc6 가 오히려 가장 많은 변화를 담고 있다는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc6","type":"post"},{"authors":null,"categories":["record"],"content":"이번 여름 졸업을 앞두고 구직 활동을 한 결과, 얼마전 운좋게도 미국에 본사를 두고 있는 한 글로벌 IT 기업의 커널/하이퍼바이저 팀으로부터 잡 오퍼를 받았습니다. 취업을 향한 한걸음 한걸음이 어둠 속을 더듬더듬, 때로는 막무가내로 헤쳐나가는 느낌이었는데, 이런 저의 경험을 공유하는게 어떤 분들께는 도움이 되지 않을까 싶어 공유해 봅니다.\n목표설정 취업을 할까 포닥을 할까 모호한 고민만 하다가 어느새 4월 중순이 되어서야 해외 IT 회사로 직장을 구하겠다는 목표가 설정되었습니다. 그제서야 든 생각은 너무 늦었다, 준비가 부족하다, 하는 것이었습니다. 취업을 위해 뭐 하나 준비한게 없더라구요.\n일단은 졸업 후 국내에서 취업 준비를 탄탄히 해서 내년 봄 시즌에 해외 글로벌 IT 기업에 취업하는걸 목표로 하되, 당장 취업 준비를 시작하고 붙을 가능성은 없겠지만 볼 수 있는 면접은 연습삼아서라도 보기로 마음을 먹었습니다.\n취업을 위한 준비 가장 시급한 건 영어 듣기 능력이었습니다. 토발즈의 인터뷰와 키노트, 리눅스 파운데이션 주최 컨퍼런스 발표들과 리눅스를 주제로 한 팟캐스트 등을 mp3 로 추출해 매일 출퇴근 길에 들었습니다.\n코딩 테스트를 연습하기 위해서는 유명한 cracking the coding interview 책도 읽어보고, 이 즈음에 우연히 지인에게 소개받은 leetcode 라는 사이트를 통해 코딩 문제도 풀어보기 시작했습니다. 작년 무렵 지인을 통해 cracking the coding interview 책을 이용한 오프라인 스터디도 진행했는데, 그 경험이 큰 도움이 되었습니다. Leetcode 는 왜 이제 알게 됐나 싶은 생각이 들 정도로 도움이 되었습니다.\n링크드인 및 이력서 지인들과의 대화 도중, 링크드인은 내가 지금 직업을 구하고 있는지 아닌지를 알리는 기능이 있다는 걸 우연히 알게 되었습니다. 이걸 켜니 몇몇 회사의 리크루터들이 연락을 줬습니다. 이 회사도 마찬가지였습니다. 채용하는 포지션에 대한 아주 짧막한 설명과 함께, 관심 있으면 이력서를 보내달라는 연락이 왔고, 이력서를 보내니 회사의 해당 포지션 채용 링크를 보내주며 시스템을 통해 지원해 달라고 했습니다.\n온라인 코딩 사흘만에 이 회사에서 구축한 코딩 테스트 시스템으로의 초대장이 왔습니다. Leetcode 와 같은 여타 코딩 테스트 사이트랑 비슷하게 되어 있는데, 네개 정도의 문제가 있습니다. 편한 시간을 골라서 문제를 풀 수 있으며, 테스트를 시작하면 중단은 못하고 두시간 내에 테스트를 반드시 끝내야 합니다. 실제 인터뷰어와 전화를 통해 진행하는게 아니다보니 내가 편한 시간을 고를 수 있고, 영어 듣기가 부족한 저로썬 문제가 글로 써져 있어 좋더군요. 제출하고 나면 곧바로 풀이에 대한 전체 테스트 결과도 볼 수 있었습니다.\n아주 어려운 문제는 없었고 간단한 자료구조와 알고리즘 위주였기에 무난하게 문제를 풀 수 있었습니다. 하지만 마지막 한문제는 일부 corner case 를 제대로 풀지 못해 점수가 만족스럽지는 않았습니다.\n전화 인터뷰 몇일 후, 전화 인터뷰 하고 싶으니 일정을 잡자는 메일이 왔습니다. 적당히 일정을 잡고 인터뷰를 진행했습니다.\n애초에 외국 회사는 온사이트 인터뷰까지 진행되면 후보에게 비행기표 등을 지불해야 되니 이 단계에서 가급적 많은 후보자를 탈락시킨다고 합니다. 전화 통화는 바디랭귀지가 일체 허용되지 않거니와 통화품질, 인터뷰어의 독특한 억양 등의 문제가 있을 수 있기에 저처럼 영어가 약한 사람에게는 정말 죽을 맛입니다. 다행히도 이번 인터뷰는 통화품질도 좋았고 인터뷰어의 발음도 제 귀에 또렷하게 들리는 억양이라 큰 문제는 없었습니다. 그래도 역시 기본 실력이 어디가진 않아서, 몇번은 못알아듣고 버벅이긴 했습니다.\n인터뷰는 약 한시간 정도 분량으로, 제가 채용되면 함께 일하게 될 팀과 업무, 그리고 인터뷰어 자신에 대한 간단한 소개를 시작으로, 제 소개와 그에 대한 문답, 업무적 경험에 대한 질문, 기술적 질문으로 이어졌고, 막판에 약 5분 정도 제가 회사에 대해 질문할 수 있는 시간으로 구성되었습니다.\n소개 후의 문답은 제가 소개한 제 연구들에 대해 깊은 질문이 왔는데, 평소 하는 일이라 쉽게 대답할 수 있었습니다.\n업무적 경험에 대한 문답에서는 어떤 특정 상황에 처했던 경험을 이야기 해달라고 하는데, 이게 꽤 어려웠습니다. 질문받은 경우에 처한 경험이야 많지만 그 중 어떤 걸 골라서 이야기해야 좋은 인상을 얻을까 고민하게 되거든요. 팀원의 반대 의견에 부딪혔을 때에 대한 경험도 요청받았는데, 재밌게도 그날 아침에 함께 연구를 진행하고 있는 친구와 격렬하게 토론했던 즐거운 경험이 있어 그걸 이야기 했습니다. 다른 질문들에는 오픈소스 활동과 개인 프로젝트에 대한 경험도 이야기 했습니다.\n기술적 질문은 커널의 동작 구조 및 원리에 대한 몇가지 질문이 있었습니다. 역시 밥먹고 하는 일이다 보니 어렵지 않게 답할 수 있었습니다.\n마지막 질답 시간엔 무슨 질문했는지 기억이 잘 안나는데, 내가 이 면접 통과하고 함께 일하게 되면 어떤 일을 하게 될지, 내가 소개한 연구들 중 어떤 내용이 회사에 도움 될 수 있을거라 생각하는지 뭐 그런 질문을 한 것 같습니다.\n전화 중에도 코딩 테스트가 있을 줄 알았는데, 없었습니다. 다행이었죠.\n온사이트 인터뷰 제의 다시 몇일 후, 2차 전화 인터뷰가 있겠거니 하고 있었는데, 온사이트 인터뷰를 보자는 메일이 왔습니다! 예전에 모 회사와는 대략 네다섯번까지 이어지는 전화 인터뷰를 하면서 파김치가 되었던 기억이 있는데, 이번엔 한번의 전화 인터뷰만에 스크리닝이 끝나서 정말 기뻤습니다. 메일은 온사이트 인터뷰 가능한 일정 (3주의 기한을 줬습니다), 일하게 된다면 언제부터 일할 수 있는지, 원하는 연봉은 얼마인지, 인터뷰 보러 오는데 비자 필요한지 등을 물어왔습니다.\n적당적당히 일정이 잡혔고, 회사에서 비행기표와 호텔을 예약해 줬습니다. 호텔은 이틀을 예약해 줬습니다. 앞에서 이야기했듯 사실 이때까지만 해도 전 이 회사에 붙을 거라는 생각은 없었습니다. 회사가 면접 통과하기 어렵기로 유명한 회사이기도 하고 준비가 부족하다고 생각했으니까요. 이 시점까지만 해도 그저 공짜로 외국여행 하는구나 싶었죠.\n온사이트 인터뷰 온사이트 인터뷰는 채용되면 실제 제가 일하게 될 오피스에서 아침 10시부터 오후 4시까지 6시간동안 이루어졌습니다. 한시간마다 한명씩 다른 인터뷰어가 들어왔는데, 중간에 한번은 두 인터뷰어가 함께 들어왔습니다. 따라서 총 여섯번의 인터뷰를 본 셈이며, 매 인터뷰마다 형식은 전화 인터뷰와 비슷했습니다. 인터뷰어의 회사와 자기 자신에 대한 소개, 제 소개와 그에 대한 문답, 업무적 경험 질문, 기술적 질문, 마지막으로 제가 질문하는 시간.\n붙을리가 있냐, 여행이나 하자 하는 생각으로 왔지만 막상 당일이 되자 굉장히 긴장되더군요. 그런데 이날 만난 직원들은 너무나도 친절하고 유쾌했습니다. 막상 면접이 시작되니 면접을 본다기보다는 기술 커뮤니티 밋업에서 만난 사람들이랑 즐거운 기술 이야기 하는 느낌이라 너무 즐거웠습니다.\n오후 12시부터 한시간은 점심시간이라 인터뷰어 한명과 함께 식사했습니다. 식사가 인터뷰의 연장인 셈이죠. 앞서 이야기한대로 어찌나 긴장이 풀렸는지 이 때 인터뷰어 앞에서 맥주까지 한잔 했습니다.\n그 중 두번의 인터뷰는 화이트보드를 사용한 코딩 인터뷰가 포함되었습니다. 그 와중에 가장 긴장한 시간이었긴 한데, 역시 즐겁게 진행되었습니다. 다행히 평범한 자료구조 문제였기에 조금 버벅이긴 했지만 일단 코딩을 하는건 어렵지 않았으며, 이후 관련한 질문에 답하고 개선을 어떻게 할 수 있을지 논의하고 추가 코딩을 했는데 이 과정 역시 즐거웠습니다.\n인터뷰가 끝나고 나선 붙든 떨어지든 상관 없지만 평생 잊지 못할 만큼 즐거운 시간이었고 이런 시간을 앞으로도 갖고 싶다, 떨어져도 여한이 없다는 생각이 들었습니다. 면접을 본게 아니라 커뮤니티 모임 같은데 가서 놀다 온 느낌이었죠.\n오퍼 온사이트 인터뷰가 금요일이었습니다. 현지 시간으로 화요일, 인터뷰에 통과했으니 정식 오퍼를 보내겠다는 연락을 받았습니다.\n정리 준비부터 오퍼를 받기까지의 제 경험을 정리해 봤습니다. 준비도 능력도 부족한데 어디까지나 운이 좋아서 면접을 통과한지라 다른 분들께 이 기록이 얼마나 도움이 될지 모르겠습니다. 그래도 공유하지 않는 것보다는 낫겠죠. 누군가에겐 이 기록이 도움이 되길 빌어봅니다.\n","date":1560762965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560762965,"objectID":"8f29f0392ab5595f5184bbea35cb29c3","permalink":"/post/my_job_interview/","publishdate":"2019-06-17T18:16:05+09:00","relpermalink":"/post/my_job_interview/","section":"post","summary":"이번 여름 졸업을 앞두고 구직 활동을 한 결과, 얼마전 운좋게도 미국에 본사를 두고 있는 한 글로벌 IT 기업의 커널/하이퍼바이저 팀으로부터 잡 오퍼를 받았습니다. 취업을 향한 한걸음 한걸음이 어둠 속을 더듬더듬, 때로는 막무가내로 헤쳐나가는 느낌이었는데, 이런 저의 경험을 공유하는게 어떤 분들께는 도움이 되지 않을까 싶어 공유해 봅니다.\n목표설정 취업을 할까 포닥을 할까 모호한 고민만 하다가 어느새 4월 중순이 되어서야 해외 IT 회사로 직장을 구하겠다는 목표가 설정되었습니다. 그제서야 든 생각은 너무 늦었다, 준비가 부족하다, 하는 것이었습니다.","tags":["record","job interview","coding interview"],"title":"My Job Interview Record (2019 summer)","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v3 0/5] THP aware uprobe https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com\nuprobe 는 THP 로 되어있는 페이지를 쪼갭니다. 이로 인해 성능 향상 효과가 사라지죠. 이 패치셋은 uprobe 가 THP 를 인식하게 해서 이런 문제를 제거합니다.\n[PATCH v2 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org\n기존에도 소개한 MADV_COLD 와 MADV_PAGEOUT 을 madvise() 에 추가하는 패치셋의 두번째 버전입니다. 이 패치셋을 ChromeOS 팀의 Brian Geffon 은 가져다가 탭이 백그라운드로 들어가고 45초 이상 그 상태를 유지하면 이 기능을 사용해서 페이지를 proactively swap out 시켰는데, 그 결과 tab 전환 속도가 25% 나 빨라졌다고 합니다.\n[v3 RFC PATCH 0/9] Migrate mode for node reclaim with heterogeneous memory hierarchy https://lkml.kernel.org/r/1560468577-101178-1-git-send-email-yang.shi@linux.alibaba.com\nNUMA node 로 pmem 을 취급할 수 있게 된 이후, 노드간 migration 을 보다 효율적으로 하기 위한 패치셋의 세번째 버전입니다. LSFMM 에서 이에 대해 토의가 있었는데, 이번 버전은 그에 기반해 수정되었다고 하네요.\nLinux v5.2-rc5 https://lkml.kernel.org/r/CAHk-=whEQPvLpDbx+WR4Q4jf2FxXjf_zTX3uLy_6ZzHtgTV4LA@mail.gmail.com\n지난주는 토발즈의 여행 때문에 릴리즈가 평소보다 조금 빨리 이루어졌는데요, 이번에도 마찬가지입니다. 앞으로도 2주동안 여행ㅇ을 더 한다네요.\n어쨌든 5.2 가 가까워졌습니다. 어느덧 rc5군요. rc4 대비 사이즈도 많이 줄어들었습니다. SPDX 업데이트도 없는 덕에 diff 도 깔끔하게 되었구요.\n","date":1560129449,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560129449,"objectID":"10008d75cf1dee1c5f2699622b1c63a0","permalink":"/post/lkml_news_v5.2-rc5/","publishdate":"2019-06-10T10:17:29+09:00","relpermalink":"/post/lkml_news_v5.2-rc5/","section":"post","summary":"[PATCH v3 0/5] THP aware uprobe https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com\nuprobe 는 THP 로 되어있는 페이지를 쪼갭니다. 이로 인해 성능 향상 효과가 사라지죠. 이 패치셋은 uprobe 가 THP 를 인식하게 해서 이런 문제를 제거합니다.\n[PATCH v2 0/5] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org\n기존에도 소개한 MADV_COLD 와 MADV_PAGEOUT 을 madvise() 에 추가하는 패치셋의 두번째 버전입니다. 이 패치셋을 ChromeOS 팀의 Brian Geffon 은 가져다가 탭이 백그라운드로 들어가고 45초 이상 그 상태를 유지하면 이 기능을 사용해서 페이지를 proactively swap out 시켰는데, 그 결과 tab 전환 속도가 25% 나 빨라졌다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org\n전에도 RFC 패치셋은 여기서도 소개했었죠. Slab 할당자에 할당받은 객체들의 이동이 가능하게끔 하는 패치셋의 정식 패치 버전이 나왔습니다. 변경된 인터페이스는 XArray 와 dcache 에 적용되는군요.\n[PATCH v1 0/4] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org\n바로 지난주에도 소개한 external madvise 패치셋이 쪼개졌네요. MADV_COLD 와 MADV_PAGEOUT 두개의 새로운 advice 기능 추가 버전만 담은 패치셋입니다. 이게 더 일찍 머지될 가능성이 생겼군요.\nLinux 5.2-rc4 https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com\n메일을 받고 깜짝 놀랐습니다, 평소보다 빨랐기 때문이죠. 아시아를 여행중인가? 싶기도 했는데요, 그건 아니고 비행기 여행이 예정되어 있기 때문에 평소보다 일찍 했다는군요.\n지난 rc3 가 좀 작았던 탓인지 이번 rc4 는 덩치가 좀 큽니다. 하지만 그걸 감안하면 별 문제 없어 보인다고 하네요.\n이번 릴리즈에도 SPDX 변경이 많습니다. 변경 자체야 문제가 없긴 한데 diff 를 보기 귀찮게 하는게 조금은 짜증도 나는 것 같네요.\n어쨌든 이렇게 네번째 rc 가 릴리즈 되었습니다. 정식 버전도 많이 남지 않았네요!\n이번 릴리즈의 개발 과정을 시각화 한 비디오를 아래 URL 에서 볼 수 있습니다: https://youtu.be/OooOmr4Z8dw\n","date":1559612940,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559612940,"objectID":"e71b7af7c2f08ee697727533476eb132","permalink":"/post/lkml_news_v5.2-rc4/","publishdate":"2019-06-04T10:49:00+09:00","relpermalink":"/post/lkml_news_v5.2-rc4/","section":"post","summary":"[PATCH 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org\n전에도 RFC 패치셋은 여기서도 소개했었죠. Slab 할당자에 할당받은 객체들의 이동이 가능하게끔 하는 패치셋의 정식 패치 버전이 나왔습니다. 변경된 인터페이스는 XArray 와 dcache 에 적용되는군요.\n[PATCH v1 0/4] Introduce MADV_COLD and MADV_PAGEOUT https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org\n바로 지난주에도 소개한 external madvise 패치셋이 쪼개졌네요. MADV_COLD 와 MADV_PAGEOUT 두개의 새로운 advice 기능 추가 버전만 담은 패치셋입니다. 이게 더 일찍 머지될 가능성이 생겼군요.\nLinux 5.2-rc4 https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com\n메일을 받고 깜짝 놀랐습니다, 평소보다 빨랐기 때문이죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc4","type":"post"},{"authors":null,"categories":["projects"],"content":"I created a Youtube channel[1]. I will upload videos for the git history between each release of the Linux kernel, just for jun. I use gource[2] for the visualization for now. The scripts I use for these videos are available[3] under GPL v3. If you want, you may use the scripts for your own video generation.\n[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg\n[2] https://gource.io/\n[3] https://github.com/sjp38/linux_development_visualization\n","date":1559612673,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559612673,"objectID":"34800cf21ba75fe4ab20c752772e11ed","permalink":"/post/linux_develop_visualization_youtube/","publishdate":"2019-06-04T10:44:33+09:00","relpermalink":"/post/linux_develop_visualization_youtube/","section":"post","summary":"I created a Youtube channel[1]. I will upload videos for the git history between each release of the Linux kernel, just for jun. I use gource[2] for the visualization for now. The scripts I use for these videos are available[3] under GPL v3. If you want, you may use the scripts for your own video generation.\n[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg\n[2] https://gource.io/\n[3] https://github.com/sjp38/linux_development_visualization","tags":["linux","youtube","development","visualization"],"title":"Linux Development History Visualization Youtube Channel","type":"post"},{"authors":null,"categories":["projects"],"content":"Memory pressure is inevitable as the size of working sets is rapidly growing while the capacity of dynamic random access memory (DRAM) is not. Meanwhile, storage devices have evolved so that their speed is comparable to the speed of DRAM while their capacity scales are comparable to that of hard disk drives (HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and high-end storages as swap devices will be common.\nDue to the unique characteristics of these modern storage devices, the swap target decision should be optimal. It is essential to know the exact data access patterns of workloads for such an optimal decision, although underlying systems cannot accurately estimate such complex and dynamic patterns. For this reason, memory systems allow programs to voluntarily hint their data access pattern. Nevertheless, it is exhausting for a human to manually figure out the patterns and embed optimal hints if the workloads are huge and complex.\nThis project introduces a compiler extension that automatically optimizes a program to voluntarily hint its dynamic data access patterns to the underlying swap system using a static/dynamic analysis based profiling result. To our best knowledge, this is the first profile-guided optimization (PGO) for modern swap devices. Our empirical evaluation of the scheme using realistic workloads shows consistent improvement in performance and swap device lifetime up to 2.65 times and 2.98 times, respectively.\nPublications And Presentations  SeongJae Park, Yunjae Lee, Moonsub Kim Heon Y. Yeom, Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability. In 11th USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage), July 2019. Paper, Slides SeongJae Park, Yunjae Lee, Moonsub Kim, Heon Y. Yeom, Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storages. (WiP) In 17th USENIX Conference on File and Storage Technologies (FAST), February 2019. Link  ","date":1559210393,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559210393,"objectID":"dcd4f5424e69951d9a4f7d47cad02fc2","permalink":"/post/daphicx/","publishdate":"2019-05-30T18:59:53+09:00","relpermalink":"/post/daphicx/","section":"post","summary":"Memory pressure is inevitable as the size of working sets is rapidly growing while the capacity of dynamic random access memory (DRAM) is not. Meanwhile, storage devices have evolved so that their speed is comparable to the speed of DRAM while their capacity scales are comparable to that of hard disk drives (HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and high-end storages as swap devices will be common.","tags":["projects","daphicx"],"title":"DAPHICX: Data Access Pattern Hint Injecting Compiler Extension","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH tip/core/rcu 0/12] https://lkml.kernel.org/r/20190530145204.GA28526@linux.ibm.com\nPaul E. McKenney 로부터의 RCU flavor consolidation 관련 추가 작업과 코드 정리를 위한 패치셋입니다.\n[PATCH tip/core/rcu 0/2] Documentation updates for v5.3 https://lkml.kernel.org/r/20190530145504.GA29820@linux.ibm.com\nRCU 문서 업데이트를 담고 있는 패치셋입니다. rcuref 의 실제 예제와 rcu_task_stall_timeout 의 정의에 대한 내용이 추가되었군요!\n[PATCH tip/core/rcu 0/21] Torture-test updates for v5.3 https://lkml.kernel.org/r/20190530151650.GA422@linux.ibm.com\nRCU 와 spinlock 등을 위해 사용되는 torture 테스트 업데이트를 담은 패치셋입니다. 무려 21개 패치네요!\n[RFCv2 0/6] introduce memory hinting API for external process https://lkml.kernel.org/r/20190531064313.193437-1-minchan@kernel.org\n다른 어플리케이션의 virtual memory 에 대해 madvise() 를 할 수 있게 하고 MADV_COLD 등의 힌트를 추가한 패치셋의 두번째 RFC 버전입니다. LWN 에서도 소개되었고 관련 반응이 매우 뜨겁네요. 저도 매우 흥미롭게 보고 있습니다. 두번째 버전에서는 MADV_COOL 은 빠졌습니다. MADV_COLD 와 MADV_PAGEOUT 만 남았군요.\nLinux 5.2-rc3 https://lkml.kernel.org/r/CAHk-=wg1evGTxx-aSNHO+m5xSa1sc6fQe7Y8fH=_ruGcwMyfyA@mail.gmail.com\n상당히 고요한 한 주였고, 그로 인해 rc3 는 rc2 와 사이즈가 비슷했습니다. 이는 조금 이상한 일인데, 보통 rc2 이후로는 사람들이 드디어 문제를 파악하기 시작하고 rc3 주간에 수정을 하느라 조금은 떠들썩해 왔기 때문이랍니다.\n","date":1559053717,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559053717,"objectID":"8ef63dea0e5ff3d877dedb7e04bb6642","permalink":"/post/lkml_news_v5.2-rc3/","publishdate":"2019-05-28T23:28:37+09:00","relpermalink":"/post/lkml_news_v5.2-rc3/","section":"post","summary":"[PATCH tip/core/rcu 0/12] https://lkml.kernel.org/r/20190530145204.GA28526@linux.ibm.com\nPaul E. McKenney 로부터의 RCU flavor consolidation 관련 추가 작업과 코드 정리를 위한 패치셋입니다.\n[PATCH tip/core/rcu 0/2] Documentation updates for v5.3 https://lkml.kernel.org/r/20190530145504.GA29820@linux.ibm.com\nRCU 문서 업데이트를 담고 있는 패치셋입니다. rcuref 의 실제 예제와 rcu_task_stall_timeout 의 정의에 대한 내용이 추가되었군요!\n[PATCH tip/core/rcu 0/21] Torture-test updates for v5.3 https://lkml.kernel.org/r/20190530151650.GA422@linux.ibm.com\nRCU 와 spinlock 등을 위해 사용되는 torture 테스트 업데이트를 담은 패치셋입니다. 무려 21개 패치네요!\n[RFCv2 0/6] introduce memory hinting API for external process https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc3","type":"post"},{"authors":null,"categories":[],"content":"$ git clone https://go.googlesource.com/go go1.4; cd go1.4 $ git checkout release-branch.go1.4; cd src $ ./make.bash $ cd ../../ $ git clone https://github.com/mit-pdos/biscuit.git; cd biscuit/src $ ./make.bash $ cd ../biscuit/ $ make qemu CPUS=2 ","date":1558880864,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558880864,"objectID":"a567c02404bd2aa692f155d248167464","permalink":"/post/biscuit_os_install/","publishdate":"2019-05-26T23:27:44+09:00","relpermalink":"/post/biscuit_os_install/","section":"post","summary":"$ git clone https://go.googlesource.com/go go1.4; cd go1.4 $ git checkout release-branch.go1.4; cd src $ ./make.bash $ cd ../../ $ git clone https://github.com/mit-pdos/biscuit.git; cd biscuit/src $ ./make.bash $ cd ../biscuit/ $ make qemu CPUS=2 ","tags":[],"title":"Biscuit (OS Written in Go) Install","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[RFC PATCH v5 00/16] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190520054017.32299-1-tobin@kernel.org\n이 블로그에서도 소개한 Slab movable objects 패치셋의 다섯번째 버전입니다. RFC 로는 아마도 마지막 버전이 될거라는군요.\n[RFC PATCH 00/14] mmap_sem range locking https://lkml.kernel.org/r/20190521045242.24378-1-dave@stgolabs.net\n이번 LSFMM 에서 개인적으로 가장 기대했던 세션이 mmap_sem 해결에 대한 세션이었습니다. 해당 세션에서는 예전부터 이야기가 나온 range locking 에 대해서도 이야기가 있었는데요, 이 패치셋은 이 range locking 을 사용한 mmap_sem 문제 해결 시도를 다시 정리해 RFC 의 형태로 올린 것입니다.\nRFC 라는 데서 알 수 있겠지만 이 패치 자체에도 문제가 많지만, 코드 자체보다는 이 range locking 이라는 아이디어가 갖는 한계와 그에 대한 대책 등을 논의해 보고자 올린 것이라고 합니다.\n[RFC 0/7] introduce memory hinting API for external process https://lkml.kernel.org/r/20190520035254.57579-1-minchan@kernel.org\n앞서 여기서도 다룬 구글의 proactive swap 의 안드로이드 버전과 비슷한 일을 위한 패치셋입니다. 안쓰는 데이터 잔뜩 쥐고서는 스왑도 안당하고 있는 앱이 문제죠. 이런 데이터를 madvise() 에 MADVISE_COLD 와 MADVISE_COOL 이라는 추가 힌트를 줘서 어플리케이션 레벨에서 이런 스왑하는게 좋을 데이터를 알려주는 형태입니다. 기존의 MADVISE_WONTNEED 는 스왑을 하는게 아니라 걍 데이터를 버려버리기 때문에 이런 두개의 힌트를 추가한거죠.\n인공적 벤치마크가 아니라 수백명의 진짜 사용자를 통해 성능 실험을 했다고 하는데요, 구글에서 고용한 테스트 집단일까요?\n[PATCH v4 00/14] Provide generic top-down mmap layout functions https://lkml.kernel.org/r/20190526134746.9315-1-alex@ghiti.fr\n각 아키텍쳐별로 존재하는 중복 코드를 제거하기 위해 만들어진 범용 top-down mmap 을 위한 패치의 네번째 버전입니다.\n[PATCH 0/3] remove tmem and code depending on it https://lkml.kernel.org/r/20190527103207.13287-1-jgross@suse.com\nXen 의 tmem 기능이 제거되었군요. 관련 코드를 리눅스 커널에서도 제거하는 패치셋입니다. 덕분에 cleancache 가 아예 사라질 모양입니다. Cleancache 에 의존하는 GCMA 를 만들고 있는 제 입장에선 쇼킹한 일입니다.\nLinux 5.2-rc2 https://lkml.kernel.org/r/CAHk-=wgob1t2g9iQZCuZ8My39CY26xGb6nqjVhCtb1nTirsR2Q@mail.gmail.com\n일정대로 두번째 rc2 가 릴리즈 되었습니다. 이번엔 그야말로 특기할 만한 점이 없다는군요. 그나마 큰 변화는 SPDX 관련 변경들 뿐이었다고 합니다.\n","date":1558369667,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558369667,"objectID":"57e000cb57e83a26e67cc7635d24cd84","permalink":"/post/lkml_news_v5.2-rc2/","publishdate":"2019-05-21T01:27:47+09:00","relpermalink":"/post/lkml_news_v5.2-rc2/","section":"post","summary":"[RFC PATCH v5 00/16] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190520054017.32299-1-tobin@kernel.org\n이 블로그에서도 소개한 Slab movable objects 패치셋의 다섯번째 버전입니다. RFC 로는 아마도 마지막 버전이 될거라는군요.\n[RFC PATCH 00/14] mmap_sem range locking https://lkml.kernel.org/r/20190521045242.24378-1-dave@stgolabs.net\n이번 LSFMM 에서 개인적으로 가장 기대했던 세션이 mmap_sem 해결에 대한 세션이었습니다. 해당 세션에서는 예전부터 이야기가 나온 range locking 에 대해서도 이야기가 있었는데요, 이 패치셋은 이 range locking 을 사용한 mmap_sem 문제 해결 시도를 다시 정리해 RFC 의 형태로 올린 것입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH] mm: Introduce page_size() https://lkml.kernel.org/r/20190510181242.24580-1-willy@infradead.org\nHuge page 등의 경우를 위해 페이지의 실제 크기를 구하려면 PAGE_SIZE \u0026lt;\u0026lt; compound_order(page) 를 해야 하는게 짜증난 Matthew Wilcox 가 별도의 함수를 만들고 기존 코드들을 이 함수를 사용하도록 변경한 패치입니다.\n[PATCH v2 00/15] Remove \u0026lsquo;order\u0026rsquo; argument from many mm functions https://lkml.kernel.org/r/20190510135038.17129-1-willy@infradead.org\nmm 쪽 함수들은 order 를 인자로 많이 받죠. 어차피 gfp_t 는 무조건 받으니까 이 타입의 상위 bit 을 order 목적으로 사용하자는 패치입니다. 이 패치의 장점은? 커널 텍스트 사이즈를 줄인다는 것입니다 :)\nMaintainer\u0026rsquo;s / Kernel Summit 2019 planning kick-off https://lkml.kernel.org/r/20190513230643.GA4347@mit.edu\n올해의 커널 서밋 / 메인테이너 서밋을 위한 안내 메일입니다. 작년엔 커널 서밋은 LPC 와, 메인테이너 서밋은 OSSEU 와 함께 열렸었죠. 올해는 둘 다 LPC 와 함께 합니다.\n메인테이너 서밋은 올해는 아예 30명으로 더욱 작게 모이는군요.\n커널 서밋 발표 주제는 5월 31일까지 받습니다. 발표주제 선정되면 LPC 티켓도 준다는군요!\nLinux 5.2-rc1 https://lkml.kernel.org/r/CAHk-=wgxi6fnxZ+p5Zdqr-i4s=xhOCBJL6s_RauYkjxM2CpXeA@mail.gmail.com\n5.2 릴리즈를 위한 머지윈도우가 끝나고 rc1 버전이 릴리즈 되었습니다. 이번 머지 윈도우 중간에 토발즈의 개인적 여행이 있다고 했지만 다행히 잘 정리되었나보군요. 별다른 건은 없었다고 합니다.\n","date":1557278525,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557278525,"objectID":"69276d8a5b56d7a6471935247c0f4717","permalink":"/post/lkml_news_v5.2-rc1/","publishdate":"2019-05-08T10:22:05+09:00","relpermalink":"/post/lkml_news_v5.2-rc1/","section":"post","summary":"[PATCH] mm: Introduce page_size() https://lkml.kernel.org/r/20190510181242.24580-1-willy@infradead.org\nHuge page 등의 경우를 위해 페이지의 실제 크기를 구하려면 PAGE_SIZE \u0026lt;\u0026lt; compound_order(page) 를 해야 하는게 짜증난 Matthew Wilcox 가 별도의 함수를 만들고 기존 코드들을 이 함수를 사용하도록 변경한 패치입니다.\n[PATCH v2 00/15] Remove \u0026lsquo;order\u0026rsquo; argument from many mm functions https://lkml.kernel.org/r/20190510135038.17129-1-willy@infradead.org\nmm 쪽 함수들은 order 를 인자로 많이 받죠. 어차피 gfp_t 는 무조건 받으니까 이 타입의 상위 bit 을 order 목적으로 사용하자는 패치입니다. 이 패치의 장점은? 커널 텍스트 사이즈를 줄인다는 것입니다 :)","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.2-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[RFC PATCH v4 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org\n앞서 이 블로그에서도 공유한 SMO 패치의 새 버전입니다. 이번 버전은 dcache 쪽 코드를 많이 수정했군요.\nLinux 5.1 https://lkml.kernel.org/r/CAHk-=whsbDxdapMJGvy9OkVSrKMsKRJBTrH-Qj-qTbkMUGnWUw@mail.gmail.com\n5.1 릴리즈입니다. 일요일 오후 릴리즈란 점은 평소와 같지만 평소보다 조금 늦은 시간이긴 했는데요, 오늘 갑자기 받은 풀 리퀘스트도 있었고, 이번 머지윈도우 기간에 졸업식에 참석해야 해서 조금 망설였다는군요.\n하지만 풀리퀘스트도 그렇게 크진 않고, 몇일 머지윈도우에 자리 비우는 정도는 어떻게든 할 수 있을거라 생각해서 5.1 릴리즈가 이뤄졌습니다!\n이제 5.2 머지윈도우의 시작이군요!\n","date":1556601409,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556601409,"objectID":"46d29af139c8bb8eb53709774afbf096","permalink":"/post/lkml_news_v5.1/","publishdate":"2019-04-30T14:16:49+09:00","relpermalink":"/post/lkml_news_v5.1/","section":"post","summary":"[RFC PATCH v4 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org\n앞서 이 블로그에서도 공유한 SMO 패치의 새 버전입니다. 이번 버전은 dcache 쪽 코드를 많이 수정했군요.\nLinux 5.1 https://lkml.kernel.org/r/CAHk-=whsbDxdapMJGvy9OkVSrKMsKRJBTrH-Qj-qTbkMUGnWUw@mail.gmail.com\n5.1 릴리즈입니다. 일요일 오후 릴리즈란 점은 평소와 같지만 평소보다 조금 늦은 시간이긴 했는데요, 오늘 갑자기 받은 풀 리퀘스트도 있었고, 이번 머지윈도우 기간에 졸업식에 참석해야 해서 조금 망설였다는군요.\n하지만 풀리퀘스트도 그렇게 크진 않고, 몇일 머지윈도우에 자리 비우는 정도는 어떻게든 할 수 있을거라 생각해서 5.1 릴리즈가 이뤄졌습니다!","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1","type":"post"},{"authors":null,"categories":["tips"],"content":"어느날부터 Fedora 터미널에서 한글 입력이 매우 불편해졌습니다. 한글 모드에서는 backspace, enter, esc 등의 특수키가 하나도 안먹힙니다. Vim 을 쓰는 입장에선 매우 불편하죠. 알고보니 ibus-hangul 버그인 것 같습니다[1]. 아래 커맨드로 ibus-hangul 을 문제 없던 버전으로 다운그레이드 시키고 세션을 재시작 하면 문제가 사라집니다.\nsudo dnf downgrade ibus-hangul-1.5.0-12.fc28.x86_64 [1] http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3\u0026amp;boardNo=153170459823549\u0026amp;command=READ\u0026amp;page=1\u0026amp;categoryId=-1\n","date":1556244359,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556244359,"objectID":"d67af8209f398f79dea26c296f705c91","permalink":"/post/fedora28_hangul_problem/","publishdate":"2019-04-26T11:05:59+09:00","relpermalink":"/post/fedora28_hangul_problem/","section":"post","summary":"어느날부터 Fedora 터미널에서 한글 입력이 매우 불편해졌습니다. 한글 모드에서는 backspace, enter, esc 등의 특수키가 하나도 안먹힙니다. Vim 을 쓰는 입장에선 매우 불편하죠. 알고보니 ibus-hangul 버그인 것 같습니다[1]. 아래 커맨드로 ibus-hangul 을 문제 없던 버전으로 다운그레이드 시키고 세션을 재시작 하면 문제가 사라집니다.\nsudo dnf downgrade ibus-hangul-1.5.0-12.fc28.x86_64 [1] http://www.fedoralinux.or.kr/board-read.do?boardId=bbs3\u0026amp;boardNo=153170459823549\u0026amp;command=READ\u0026amp;page=1\u0026amp;categoryId=-1","tags":["fedora","hangul","ime"],"title":"Fedora28 ibus-hangul input problem","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Re: [LSF/MM] Preliminary agenda ? Anyone \u0026hellip; anyone ? Bueller ? https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk\n올해의 LSFMM 스케쥴이 구글 문서로 공유되고 있었군요: https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0\n[LSF/MM TOPIC] Proactive Memory Reclaim https://lkml.kernel.org/r/CALvZod4V+56pZbPkFDYO3+60Xr0_ZjiSgrfJKs_=Bd4AjdvFzA@mail.gmail.com\n이제 LSFMM 이 얼마 안남았습니다만, 또하나의 주제 제안이 올라왔습니다.\n메모리 오버커밋으로 인해 direct reclaim 이 발생하고, 이는 latency sensitive 어플리케이션의 latency 를 크게 저하시키니, 시스템이 좀 더 적극적으로 memory reclaim 을 해서 direct reclaim 을 최소화 시켜보자는 건데요. 잘 접근되지 않는 cold memory 를 추적해서 미리미리 reclaim 시키자는 겁니다. 챌린지는 물론 cold memory 를 어떻게 잘 추적하냐는 거지요. 이와 함께 커널의 idle_page_tracking 의 비효율성도 이야기 했습니다.\n이 주제로 올해 ASPLOS 에 논문도 냈군요: https://youtu.be/aKddds6jn1s 개인적으로 최근 연구하고 있는 주제와도 관계 있을 수 있어서 흥미롭습니다.\n[PATCH] docs/vm: add documentation of memory models https://lkml.kernel.org/r/1556101715-31966-1-git-send-email-rppt@linux.ibm.com\nFLAT, DISCONTIG, SPARSE 등의 다양한 메모리 모델에 대한 문서화 추가 패치입니다. 처음 코드 들여다 볼 때 조금 헷갈리던 부분인데 잘 설명되었군요.\n[LSF/MM TOPIC] Lightning round? https://lkml.kernel.org/r/20190425211906.GH4739@mit.edu\n이번 LSFMM 에는 라이트닝 토크 세션이 있는데요, 거기서 block layer 에 암호화 레이어를 추가하는 방안에 대해 이야기 해보자는 Ted 의 의견입니다. 안드로이드 쪽에서 이걸 열심히 해보고 있나보군요.\n[PATCH 0/4] tools/vm/slabinfo: Add fragmentation output https://lkml.kernel.org/r/20190426022622.4089-1-tobin@kernel.org\nSLAB vs SLUB 토론 중 현재 slab allocator 의 fragmentation 정도를 알려주는 도구가 있으면 좋겠다는 이야기가 있었는데, 이를 위한 기능을 추가한 패치입니다.\nLinux 5.1-rc7 https://lkml.kernel.org/r/CAHk-=whvWQbP20g77U4QRXQDS5w+kf=V-P2QjMkgA-OwJJjHtg@mail.gmail.com\n지난번 rc6 가 거대했던 건 역시 풀 리퀘스트 타이밍 때문이었는지, 이번 rc7 은 다행히도 크기가 작은 편이라고 합니다. 네트워킹 쪽 변경이 좀 있고, 나머진 평소같이 아키텍쳐, 파일 시스템, 그외 드라이버 등의 변경이 내용을 차지했네요. 따라서 다음주엔 5.1이 예정대로 나올 것 같다고 합니다!\n","date":1556244144,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556244144,"objectID":"80d34228be184349a4a48082b0f6dcf9","permalink":"/post/lkml_news_v5.1-rc7/","publishdate":"2019-04-26T11:02:24+09:00","relpermalink":"/post/lkml_news_v5.1-rc7/","section":"post","summary":"Re: [LSF/MM] Preliminary agenda ? Anyone \u0026hellip; anyone ? Bueller ? https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk\n올해의 LSFMM 스케쥴이 구글 문서로 공유되고 있었군요: https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0\n[LSF/MM TOPIC] Proactive Memory Reclaim https://lkml.kernel.org/r/CALvZod4V+56pZbPkFDYO3+60Xr0_ZjiSgrfJKs_=Bd4AjdvFzA@mail.gmail.com\n이제 LSFMM 이 얼마 안남았습니다만, 또하나의 주제 제안이 올라왔습니다.\n메모리 오버커밋으로 인해 direct reclaim 이 발생하고, 이는 latency sensitive 어플리케이션의 latency 를 크게 저하시키니, 시스템이 좀 더 적극적으로 memory reclaim 을 해서 direct reclaim 을 최소화 시켜보자는 건데요. 잘 접근되지 않는 cold memory 를 추적해서 미리미리 reclaim 시키자는 겁니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc7","type":"post"},{"authors":null,"categories":["publications"],"content":"HotStorage'19 에 제출한 제 최근 연구에 대한 논문이 accept 되어 7월에 해당 워크샵에서 이에 대한 내용을 발표하게 되었습니다. 논문 제목은 \u0026ldquo;Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability\u0026rdquo; 입니다.\n","date":1555547824,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555547824,"objectID":"7a416745fac8154fc508d196d9d26794","permalink":"/post/hotstorage2019_talk/","publishdate":"2019-04-18T09:37:04+09:00","relpermalink":"/post/hotstorage2019_talk/","section":"post","summary":"HotStorage'19 에 제출한 제 최근 연구에 대한 논문이 accept 되어 7월에 해당 워크샵에서 이에 대한 내용을 발표하게 되었습니다. 논문 제목은 \u0026ldquo;Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability\u0026rdquo; 입니다.","tags":["usenix","hotstorage","hotstorage19","paper","talk"],"title":"I will have a talk at the Hotstorage'19","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v12 00/31] Speculative page faults https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com\n오랫만에 업데이트 된 SPF 패치셋으로, 이번 패치셋은 v5.1 위로 리베이스 되었습니다. RCU 에서 Fine-grained reader-writer locking 으로 옮겼던 vma 보호를 다시 RCU 로 되돌린 게 눈에 띄는군요. 기존엔 패치셋만 공개했는데, 이젠 패치셋이 적용된 코드 트리를 github 으로도 제공합니다: https://github.com/ldu4/linux/tree/spf-v12\n[PATCH v3 00/11] Provide generic top-down mmap layout functions https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr\n아키텍쳐별로 별도 구현을 하지 않고도 전체 mmap 레이아웃을 접근할 수 있게 해주는 범용 함수들을 구현하는 패치셋입니다.\nLinux v5.1-rc6 https://lkml.kernel.org/r/CAHk-=wii=Ym24FWf7J2s1CEwCXU3hjVXeHSkV3A8X5iAj6eT8Q@mail.gmail.com\n부활절이었군요. 어쨌건 토발즈는 그런 사소한 휴일에 릴리즈 일정을 바꾸진 않았습니다.\n이번 rc6 는 평소보다 조금 커다란 릴리즈였고, 때문에 토발즈도 다시 한번 꼼꼼히 살펴봤지만 그렇게까지 이상한 일은 아니라는군요. 4.18 때와 5.0 때도 이정도였답니다.\n네트워킹 쪽 변경이 좀 컸고, 드라이버, arch, selftests 와 perf 쪽에 변경이 있었으며, core mm, filesystem, scheduler, tracing 쪽에도 변경이 조금씩 있었다고 하는군요.\n어쨌건 그다지 이상한 건 없다고 합니다. 적어도 아직까진 5.1 을 향한 여정엔 문제가 없어 보이네요!\n","date":1555423337,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555423337,"objectID":"de5599beadc37c0ab3dbe88f387b1762","permalink":"/post/lkml_news_v5.1-rc6/","publishdate":"2019-04-16T23:02:17+09:00","relpermalink":"/post/lkml_news_v5.1-rc6/","section":"post","summary":"[PATCH v12 00/31] Speculative page faults https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com\n오랫만에 업데이트 된 SPF 패치셋으로, 이번 패치셋은 v5.1 위로 리베이스 되었습니다. RCU 에서 Fine-grained reader-writer locking 으로 옮겼던 vma 보호를 다시 RCU 로 되돌린 게 눈에 띄는군요. 기존엔 패치셋만 공개했는데, 이젠 패치셋이 적용된 코드 트리를 github 으로도 제공합니다: https://github.com/ldu4/linux/tree/spf-v12\n[PATCH v3 00/11] Provide generic top-down mmap layout functions https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr\n아키텍쳐별로 별도 구현을 하지 않고도 전체 mmap 레이아웃을 접근할 수 있게 해주는 범용 함수들을 구현하는 패치셋입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc6","type":"post"},{"authors":null,"categories":["programming"],"content":"LD_PRELOAD 환경변수를 사용하면 로더가 프로그램을 로드할 때 동적 로드해야 할 바이너리 코드를 해당 변수의 값의 디렉토리에서부터 뒤지도록 합니다. 따라서 이를 이용해 malloc(), free() 등의 일반적으로 사용하는 라이브러리 함수를 우리의 구현으로 대체하거나 후킹할 수 있습니다. 이 글은 이런 방법으로 malloc() 을 후킹하는 방법을 예제를 통해 간단히 설명합니다.\nOriginal Program 먼저 다음과 같은 프로그램이 있을 수 있을 겁니다:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(void) { char *abc; abc = (char *)malloc(8); printf(\u0026quot;malloced address: %p\\n\u0026quot;, abc); sprintf(abc, \u0026quot;hello\\n\u0026quot;); printf(\u0026quot;%s\\n\u0026quot;, abc); free(abc); return 0; } 단순히 malloc() 을 통해 8바이트 메모리를 할당받아 그 영역을 표시하고 종료하는 프로그램입니다. 위 코드를 program.c 라는 파일로 저장하고, 아래와 같이 컴파일하고 수행해 보면 우리가 익히 아는, 예상대로의 결과가 나옵니다.\n$ gcc -o program program.c $ ./program malloced address: 0x1cc5010 hello malloc Hooking Code 이제 malloc() 함수를 후킹하는 코드를 만들어 봅시다:\n#define _GNU_SOURCE #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; typedef void *(*malloc_t)(size_t size); void *malloc(size_t size) { malloc_t malloc_fn; fprintf(stderr, \u0026quot;malloc(%zu) hooked\\n\u0026quot;, size); malloc_fn = (malloc_t)dlsym(RTLD_NEXT, \u0026quot;malloc\u0026quot;); return malloc_fn(size); } 이 코드는 우리가 아는 malloc() 함수와 동일한 함수명, signature 의 함수를 구현하고 있습니다. 단순히 우리가 후킹했음을 알리고, 동적 라이브러리 구조를 통해 이 다음으로 검색되는 malloc 이름의 라이브러리 함수 (이게 우리가 익히 아는 그 malloc() 구현이겠죠) 를 찾아, 같은 인자로 수행하고 그 결과를 리턴합니다. 즉, 우리가 아는 malloc() 과 같은 일을 하긴 하지만 malloc() 이 호출되었음을 알리는 것이죠.\n이 코드를 mallochook.c 라는 이름으로 저장 후, 다음과 같이 라이브러리로 빌드합니다:\n$ gcc -shared -fPIC mallochook.c -o mallochook.so -ldl Install The Hook 프로그램이 기존 malloc() 대신 우리가 구현한 malloc() 을 수행하게 하는 건 LD_PRELOAD 를 활용하면 간단합니다.\n$ LD_PRELOAD=./mallochook.so ./program malloc(8) hooked malloc(1024) hooked malloced address: 0x20a5010 hello 두번째, 세번째 줄을 보면 malloc() 이 후킹되어 우리의 메세지가 나오는 걸 볼 수 있습니다. 앞의 program.c 에서는 8 바이트 malloc() 호출만 있었는데 세번째 줄의 1024 바이트 malloc()은 어디서 나온 걸까요? 아마도 뒤의sprintf()` 등의 라이브러리 함수가 호출한 거 아닐까 싶은데 그걸 분석하는 건 여러분의 몫으로 두겠습니다.\nConclusion 자세한 원리는 생략했습니다만, 간단히 주요 라이브러리 함수를 후킹하는 방법을 알아봤습니다. 여기서 사용된 예제 코드와 명령어는 제 [Github repo] (https://github.com/sjp38/mallochook) 에 올려뒀으니 필요하면 참고 바랍니다.\n","date":1554863946,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554863946,"objectID":"b0caf5e47af93ef620caace12c87622b","permalink":"/post/hooking_library_calls/","publishdate":"2019-04-10T11:39:06+09:00","relpermalink":"/post/hooking_library_calls/","section":"post","summary":"LD_PRELOAD 환경변수를 사용하면 로더가 프로그램을 로드할 때 동적 로드해야 할 바이너리 코드를 해당 변수의 값의 디렉토리에서부터 뒤지도록 합니다. 따라서 이를 이용해 malloc(), free() 등의 일반적으로 사용하는 라이브러리 함수를 우리의 구현으로 대체하거나 후킹할 수 있습니다. 이 글은 이런 방법으로 malloc() 을 후킹하는 방법을 예제를 통해 간단히 설명합니다.\nOriginal Program 먼저 다음과 같은 프로그램이 있을 수 있을 겁니다:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(void) { char *abc; abc = (char *)malloc(8); printf(\u0026quot;malloced address: %p\\n\u0026quot;, abc); sprintf(abc, \u0026quot;hello\\n\u0026quot;); printf(\u0026quot;%s\\n\u0026quot;, abc); free(abc); return 0; } 단순히 malloc() 을 통해 8바이트 메모리를 할당받아 그 영역을 표시하고 종료하는 프로그램입니다.","tags":["hooking","programming","binary"],"title":"Hooking Library Function Calls","type":"post"},{"authors":null,"categories":[],"content":"디버깅 과정에선 현재 어떤 코드가 어떤 함수를 거쳐 수행됐는지를 통한 컨텍스트 파악이 중요합니다. Java, Python, Go 등 대부분의 언어가 이를 위해 콜스택을 뽑을 수 있는 기능을 제공하죠. C 언어의 경우 gdb 등을 사용하면 쉽게 이를 볼 수 있지만 경우에 따라선 gdb 를 포기하고 printf() 등에만 의존해야 하기도 합니다. 이를 위한 기능이 c 라이브러리에도 있습니다, backtrace() 함수입니다. man 에도 이에 대한 설명이 있습니다만, 여기서도 간단히 소개해 봅니다.\nExample Source Code 예제로 설명하는게 가장 쉽죠. 간단한 사용법은 아래와 같습니다.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;execinfo.h\u0026gt; void baz(void) { void *callstack[128]; int i, frames; char **strs; frames = backtrace(callstack, 128); strs = backtrace_symbols(callstack, frames); for (i = 0; i \u0026lt; frames; i++) printf(\u0026quot;%s\\n\u0026quot;, strs[i]); free(strs); } void bar(void) { baz(); } void foo(void) { bar(); } int main(void) { foo(); return 0; } Compile 아래와 같이 컴파일 합니다:\n$ gcc -rdynamic -g -o hello ./hello.c -rdynamic 과 -g 옵션을 잊지 맙시다.\n이제 프로그램을 실행해 보면:\n$ ./hello ./hello(baz+0x2e) [0x400964] ./hello(bar+0x9) [0x4009fd] ./hello(foo+0x9) [0x400a09] ./hello(main+0x9) [0x400a15] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f87c51e6830] ./hello(_start+0x29) [0x400869] main(), foo(), bar(), 를 거쳐 baz() 가 수행되었음을 보입니다. 더 나아가서 어떤 소스파일의 몇번 라인인지를 보고 싶다면 addr2line 커맨드를 사용할 수 있습니다.\n$ addr2line -e hello 0x400964 ./hello.c:10 $ addr2line -e hello 0x4009fd ./hello.c:20 $ addr2line -e hello 0x400a09 ./hello.c:25 $ addr2line -e hello 0x400a15 ./hello.c:30 쉽죠? ;)\nConclusion C 프로그램에서 backtrace 를 떠보는 방법을 알아보았습니다. 위의 내용을 여러분의 환경에서도 쉽게 테스트 해 볼 수 있게끔 제 [Github repo] (https://github.com/sjp38/backtrace_example) 에도 정리해 두었습니다. 클론하고, $ make run 해주시면 예제가 자동으로 빌드되고 돌아갈 겁니다.\n","date":1554798830,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554798830,"objectID":"05c6a44f5a069a4ff1f210095f824cda","permalink":"/post/backtrace_c_language/","publishdate":"2019-04-09T17:33:50+09:00","relpermalink":"/post/backtrace_c_language/","section":"post","summary":"디버깅 과정에선 현재 어떤 코드가 어떤 함수를 거쳐 수행됐는지를 통한 컨텍스트 파악이 중요합니다. Java, Python, Go 등 대부분의 언어가 이를 위해 콜스택을 뽑을 수 있는 기능을 제공하죠. C 언어의 경우 gdb 등을 사용하면 쉽게 이를 볼 수 있지만 경우에 따라선 gdb 를 포기하고 printf() 등에만 의존해야 하기도 합니다. 이를 위한 기능이 c 라이브러리에도 있습니다, backtrace() 함수입니다. man 에도 이에 대한 설명이 있습니다만, 여기서도 간단히 소개해 봅니다.\nExample Source Code 예제로 설명하는게 가장 쉽죠.","tags":["c language","c","backtrace"],"title":"Backtrace on C language program","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[v2 RFC PATCH 0/9] Another Approach to Use PMEM as NUMA Node https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com\n본 블로그를 통해 지속적으로 소개하고 있는, PMEM as NUMA node 를 위한, 보다 나은 hotness 기반 page location 을 위한 패치셋입니다. 기존 코멘트에 기반해서 두번째 버전을 내놓았군요.\n[RFC PATCH v3 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org\n최근 LWN 에서도 소개된 (https://lwn.net/Articles/784964/) 패치입니다. Slab allocator 에서 할당된 object 가 free page 가운데에 박혀 있어 page 를 회수할 수 없는 fragmentation 이 발생합니다. 이 패치셋은 slab allocator 로 할당된 object 의 사용자에게 가능하면 해당 object 들을 움직여 달라고 callback 할 수 있게 함으로써 이 fragmentation 을 해결하려 합니다.\n앞의 버전에 비해서 변경된 건 LWN 기사에 달린 코멘트를 기반으로 한 개선들이군요.\n[LSF/MM TOPIC] guarantee natural alignment for kmalloc()? https://lkml.kernel.org/r/790b68b7-3689-0ff6-08ae-936728bc6458@suse.cz\nLSFMM 을 위한 늦은 주제네요. kmalloc() 이 2의 승수 크기 얼라인먼트를 지키도록 하는 패치에 대해서 논의하고 싶어합니다.\nLinux 5.1-rc5 https://lkml.kernel.org/r/CAHk-=wjvcuyCQGnfOhooaL1H4H63qXO=xgo+9yncSOG=eK+kbA@mail.gmail.com\n다섯번째 rc 커널입니다. v5.1이 얼마 남지 않았군요. 이번 릴리즈에선 대부분 드라이버 쪽 변경이 있었으며, 딱히 이상하거나 수상한 움직임은 없다고 합니다.\n","date":1554798781,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554798781,"objectID":"090fb43ff5df8626fb3d9f34749ee75c","permalink":"/post/lkml_news_v5.1-rc5/","publishdate":"2019-04-09T17:33:01+09:00","relpermalink":"/post/lkml_news_v5.1-rc5/","section":"post","summary":"[v2 RFC PATCH 0/9] Another Approach to Use PMEM as NUMA Node https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com\n본 블로그를 통해 지속적으로 소개하고 있는, PMEM as NUMA node 를 위한, 보다 나은 hotness 기반 page location 을 위한 패치셋입니다. 기존 코멘트에 기반해서 두번째 버전을 내놓았군요.\n[RFC PATCH v3 00/15] Slab Movable Objects (SMO) https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org\n최근 LWN 에서도 소개된 (https://lwn.net/Articles/784964/) 패치입니다. Slab allocator 에서 할당된 object 가 free page 가운데에 박혀 있어 page 를 회수할 수 없는 fragmentation 이 발생합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v5.1-rc3 릴리즈 후 Linux v.5.1-rc4 릴리즈 사이 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[PATCH v8 00/20] Convert x86 \u0026amp; arm64 to use generic page walk https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com\n전에 이 블로그에도 공유했던, walk_page_range() 함수가 커널에서 사용하는 페이지 테이블은 지원하지 않아서 아키텍쳐별로 page table walk 기능을 구현한 걸 walk_page_range() 의 개선을 통해 가능하게 하고자 하는 패치의 여덟번째 버전입니다.\n[PATCH] mm: add vm event for page cache miss https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com\nPage cache miss 로 인해 사용중인 데이터베이스에 레이턴시가 증가하는 문제가 있는데, 기존 커널에는 페이지 캐시 미스 카운트를 세는 기능이 없기 때문에 만들어 봤다고 합니다. 반응은\u0026hellip; 별로 좋지 않군요.\n[RFC PATCH 00/25] Accelerate page migration and use memcg for PMEM management https://lkml.kernel.org/r/20190404020046.32741-1-zi.yan@sent.com\n앞서 이 블로그에서도 소개한대로 PMEM 을 좀 많이 느린 NUMA node 로 다룰 수 있게 되었습니다. 따라서 적절한 페이지 마이그레이션이 중요해지죠. 리눅스 자체 page replacement policy 를 이용해 page migration 을 하는 방법이 제기되었지만 그 방법은 충분한 쓰루풋을 제공하지 않고 너무 가끔 replacement 가 일어나 hot / cold 를 제대로 구분하기 어려운 문제가 있다고 이 메일은 주장하고, 자신이 생각하는 해결책을 RFC 의 형태로 제시하고 있습니다.\n실제 기존 방식의 마이그레이션 쓰루풋과 자신이 제안한 방식의 쓰루풋을 비교하면서 설명하는데, 재밌네요.\n[PATCH RFC tip/core/rcu 0/4] Forbid static SRCU use in modules https://lkml.kernel.org/r/20190402142816.GA13084@linux.ibm.com\n로드될 수 있는 모듈 내에서의 DEFINE_SRCU() 와 DEFINE_STATIC_SRCU() 사용을 급지하는 패치셋입니다. 로드 되는 모듈에서 이걸 사용하면 메모리 회수가 안될 것이기 때문이죠. 대신 동적으로 메모리 할당받고 초기화 해서 쓰고, 모듈 exit 될 때 제대로 메모리 해제 시키라고 합니다.\nLinux 5.1-rc4 https://lkml.kernel.org/r/CAHk-=widsb0vN7kqt8ATfNuNW6a54JpKjc6W0XPjt5=LW7UeGQ@mail.gmail.com\n이번 릴리즈는 초반 rc 들이 좀 커서 걱정을 끼쳤었는데, rc4 는 다행히도 작아졌다고 합니다. 딱히 별다른 게 없다는군요.\n","date":1554646675,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554646675,"objectID":"1af86fa09f841c02d059240e5c737f57","permalink":"/post/lkml_news_v5.1-rc4/","publishdate":"2019-04-07T23:17:55+09:00","relpermalink":"/post/lkml_news_v5.1-rc4/","section":"post","summary":"Linux v5.1-rc3 릴리즈 후 Linux v.5.1-rc4 릴리즈 사이 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[PATCH v8 00/20] Convert x86 \u0026amp; arm64 to use generic page walk https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com\n전에 이 블로그에도 공유했던, walk_page_range() 함수가 커널에서 사용하는 페이지 테이블은 지원하지 않아서 아키텍쳐별로 page table walk 기능을 구현한 걸 walk_page_range() 의 개선을 통해 가능하게 하고자 하는 패치의 여덟번째 버전입니다.\n[PATCH] mm: add vm event for page cache miss https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com\nPage cache miss 로 인해 사용중인 데이터베이스에 레이턴시가 증가하는 문제가 있는데, 기존 커널에는 페이지 캐시 미스 카운트를 세는 기능이 없기 때문에 만들어 봤다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH tip/core/rcu 0/4] Documentation updates for v5.2 https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com\nv5.2 에 머지될 목적의 RCU 문서화 업데이트 패치셋입니다.\n[PATCH tip/core/rcu 0/18] Miscellaneous fixes for v5.2 https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com\nv5.2 를 위한 RCU 의 다양한 업데이트 패치셋입니다. rcu 를 위한 메일링 리스트도 추가되었군요. rcu@vger.kernel.org 입니다.\n[PATCH tip/core/rcu 0/9] Torture-test updates for v5.2 https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com\nv5.2 를 위한 torture test 의 업데이트 패치셋입니다. LKMM 이라던지 formal verification 도 많은 발전이 있었지만, torture test 도 없어질 순 없겠죠.\nLinux 5.1-rc3 https://lkml.kernel.org/r/CAHk-=wiHmEqxBvp3dfTqOut+NHzbNaip=BrnBO48SCTfnApLRg@mail.gmail.com\n한국시간으로 만우절 아침, 5.1 을 위한 세번째 rc 버전이 릴리즈 되었습니다. 이번 릴리즈는 다른 rc3 들에 비해 조금 많은 변화가 있었기에 좋은 현상은 아니지만 그렇다 해도 아직 rc3 정도니까 큰 문제는 아닐 거라 하는군요. 전체적으로 코드가 추가된 것보다 제거된 게 많은 것 같습니다. 어쨌건 앞으로는 점점 변경양이 줄었으면 좋겠다는군요.\n","date":1553558021,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553558021,"objectID":"9cbdd2ec0344b179751dd8df6badf748","permalink":"/post/lkml_news_v5.1-rc3/","publishdate":"2019-03-26T08:53:41+09:00","relpermalink":"/post/lkml_news_v5.1-rc3/","section":"post","summary":"[PATCH tip/core/rcu 0/4] Documentation updates for v5.2 https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com\nv5.2 에 머지될 목적의 RCU 문서화 업데이트 패치셋입니다.\n[PATCH tip/core/rcu 0/18] Miscellaneous fixes for v5.2 https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com\nv5.2 를 위한 RCU 의 다양한 업데이트 패치셋입니다. rcu 를 위한 메일링 리스트도 추가되었군요. rcu@vger.kernel.org 입니다.\n[PATCH tip/core/rcu 0/9] Torture-test updates for v5.2 https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com\nv5.2 를 위한 torture test 의 업데이트 패치셋입니다. LKMM 이라던지 formal verification 도 많은 발전이 있었지만, torture test 도 없어질 순 없겠죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc3","type":"post"},{"authors":null,"categories":["kernel"],"content":"Update (2020-01-01): KUnit has merged in v5.5 merge window. From the writing of this post, it had some changes, so below content, especially the test setup and running will not work. Recommend you to refer to the official document in the kernel for detailed tutorial. It also has a python version dependency now, so you would encounter a problem with Ubuntu 16.04. Recommend you to use later Python or Ubuntu 18.04 instead.\nI have attended FAST'19 last February. There was Ted Tso. I saw he hanging out with a few of Redhat people who I met during the lunch and tagged along with them. During the chat, we talked about test and Ted introduced us a testing framework called KUnit. I started using it after return from FAST'19 and felt it is amazing, so I would like to introduce it in this post.\nAs its name intimates, KUnit is a unit test framework for the Linux kernel. Google\u0026rsquo;s Brendan Higgins is developing it and he is also sending RFC patches to LKML so that it can be merged into the mainline. Because he is a Googler, he is hosting a source tree on a Google server and also made a well written Documentation.\nThis post will further briefly summarise how you can use KUnit. I tested this post on my Ubuntu 16.04 server.\nInstall You can receive Kunit development kernel from https://kunit.googlesource.com. Clone it with below simple command. I will use 5.0-rc5 based version which Brendan has recently sent the RFC patches.\n$ git clone -b kunit/rfc/5.0-rc5/v4 https://kunit.googlesource.com/linux Of course, you can get only patches via Patchwork and apply it on your kernel. I got it and applied it on my v5.0 kernel and it worked well.\nNow you should install some packages for KUnit. You need only the packages that required by kernel build. For the list of the packages, refer to the post describing it.\nTest It\u0026rsquo;s almost ready. Let\u0026rsquo;s run the example tests that kunit provides.\nFirst, you should write a file named kunitconfig under the kernel tree root directory. This file specifies what tests you want to run. Just write as below for now:\n$ cd linux $ echo CONFIG_KUNIT=y \u0026gt; kunitconfig $ echo CONFIG_KUNIT_TEST=y \u0026gt;\u0026gt; kunitconfig $ echo CONFIG_KUNIT_EXAMPLE_TEST=y \u0026gt;\u0026gt; kunitconfig Now you can run the KUnit example tests as below:\n$ ./tools/testing/kunit/kunit.py You will see results below on your terminal:\n[11:31:47] Building KUnit Kernel ... [11:32:12] Starting KUnit Kernel ... [11:32:12] ============================== [11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_init_resources [11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_alloc_resource [11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_free_resource [11:32:13] [PASSED] kunit-resource-test:kunit_resource_test_cleanup_resources [11:32:13] ============================== [11:32:13] [PASSED] kunit-try-catch-test:kunit_test_try_catch_successful_try_no_catch [11:32:13] [PASSED] kunit-try-catch-test:kunit_test_try_catch_unsuccessful_try_does_catch [11:32:13] [PASSED] kunit-try-catch-test:kunit_test_generic_try_catch_successful_try_no_catch [11:32:13] [PASSED] kunit-try-catch-test:kunit_test_generic_try_catch_unsuccessful_try_does_catch [11:32:13] ============================== [11:32:13] [PASSED] string-stream-test:string_stream_test_get_string [11:32:13] [PASSED] string-stream-test:string_stream_test_add_and_clear [11:32:13] ============================== [11:32:13] [PASSED] example:example_simple_test [11:32:13] ============================== [11:32:13] Testing complete. 11 tests run. 0 failed. 0 crashed. [11:32:13] Elapsed time: 26.005s total, 0.000s configuring, 25.736s building, 0.268s running. It says example tests including kunit-resource-test, kunit-try-catch-test, string-stream-tets, example has ran, and all of those passed.\nKUnit should also build the kernel for the test, and the build takes a few of time. In this case, it took 26 seconds. That said, this was long because it\u0026rsquo;s first build. It took about only 10 seconds for me when I modified only one file after. Also, it takes very short time only for running actual test. In this case, it took only 0.27 seconds! Therefore, it will not take too huge time even though you have lots of tests.\nRefer to the Kunit official document to know how you can add your unit test. Not so hard :)\nConclusion Introduced the unit test framework for the Linux kernel, KUnit. I am also using it for my recent programming and could feel the advantage of TDD again. Hope this to be merged in the upstream soon!\n","date":1553063549,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553063549,"objectID":"01d48eaea40bedb101948b1d2cd8634f","permalink":"/post/kunit_intro/","publishdate":"2019-03-20T15:32:29+09:00","relpermalink":"/post/kunit_intro/","section":"post","summary":"Update (2020-01-01): KUnit has merged in v5.5 merge window. From the writing of this post, it had some changes, so below content, especially the test setup and running will not work. Recommend you to refer to the official document in the kernel for detailed tutorial. It also has a python version dependency now, so you would encounter a problem with Ubuntu 16.04. Recommend you to use later Python or Ubuntu 18.","tags":["linux","kernel","kunit","test","unit test"],"title":"Unit test for the Linux kernel using Kunit","type":"post"},{"authors":null,"categories":["installations"],"content":"연구실 내부 사용을 위한 Gitlab 을 Docker 를 사용해서 구축하고 사용하고 있습니다만, 하도 예전이라 Gitlab official docker image 가 아니었고, docker 버전도 2.x 대라서 최신 버전으로 바로 업그레이드가 불가능하군요.\n지금은 gitlab 에서 자체적으로 정식 docker 이미지를 제공합니다. 이 포스트에서는 Ubuntu 18.04 서버 위에 gitlab 정식 docker 이미지를 사용해 설치하는 방법을 기록합니다.\nDocker 설치 먼저 Docker 를 설치해야죠. 문서[1]를 참고해서 설치를 진행해 봅니다.\n먼저 apt 업데이트 후 종속 패키지들을 깔아줍니다:\nsudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common 이제 최신 docker 를 깔기 위해 docker repository 를 apt 에 추가해 주고요:\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\u0026quot; sudo apt update 설치합시다:\nsudo apt install docker-ce 잘 깔렸는지 확인해 봅시다:\n$ sudo docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 위와 같이 Hello from Docker! 가 나오면 된겁니다.\n[1] https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04\nGitlab 설치 일단 시작 이제 Gitlab docker image 를 가져오고 돌려보죠. Gitlab 쪽 문서[1]를 참고합니다.\n$ cd $HOME; mkdir data $ sudo docker run --detach --hostname gitlab.example.com \\ --publish 30443:443 --publish 30480:80 --publish 30422:22 \\ --name gitlab --restart always \\ --volume $HOME/data/srv/gitlab/config:/etc/gitlab \\ --volume $HOME/data/srv/gitlab/logs:/var/log/gitlab \\ --volume $HOME/data/srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.8.2-ce.0 이 글 작성 시점 기준으로 가장 마지막 정식 릴리즈가 11.8 이므로 11.8.2 버전을 골랐고, 기존에 웹서버와 ssh 가 깔려있는 관계로 별도의 포트를 사용하게 했습니다.\n조금 기다렸다가 http://gitlab.example.com:30480 으로 들어가면 로그인 됩니다. $ sudo docker ps -a 명령을 통해 만든 컨테이너의 status 가 starting 을 넘어갈 때까지만 기다리면 됩니다. 최초 로그인 시에는 관리자 패스워드를 바로 설정할 수 있습니다. 이후 root 계정에 지금 설정한 패스워드를 입력해 접속할 수 있습니다.\n설정 변경 몇가지 설정을 추가해야 합니다. 설정은 아래 명령으로 지금 띄운 컨테이너에 들어가 설정 파일을 수정하는 것으로 가능합니다:\n$ sudo docker exec -it gitlab /bin/bash # vi /etc/gitlab/gitlab.rb --volume 으로 $HOME/data/srv/gitlab/config 아래로 파일이 링크되어 있으므로 여기서 수정해도 괜찮습니다.\n해당 파일을 변경한 후에는 docker 를 재시작 해야 변경된 설정이 적용됩니다.\n$ sudo docker restart gitlab 포트 변경 적용 호스트의 80 포트, 22 포트, 443 포트를 점유할 수 없는 상황이므로 우린 30480, 30422, 30443 포트를 대신 사용하도록 했습니다. 이 경우 추가적인 설정이 필요합니다. gitlab.rb 파일에 아래 네줄을 추가합시다.\nexternal_url 'http://gitlab.example.com:30480' nginx['listen_port'] = 80 nginx['listen_https'] = false gitlab_rails['gitlab_shell_ssh_port'] = 30422 두번째, 세번째 줄을 추가 안해주면 동작 안합니다[3].\ngmail smtp 설정 이어서 smtp 설정을 해야 합니다.\n우린 gmail smtp 를 사용하겠습니다. 이 설정 파일에 다음과 같은 내용을 추가합니다. 이 내용은 공식 문서의 예제[2]에서 가져왔습니다.\ngitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \u0026quot;smtp.gmail.com\u0026quot; gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \u0026quot;my.email@gmail.com\u0026quot; gitlab_rails['smtp_password'] = \u0026quot;my-gmail-password\u0026quot; gitlab_rails['smtp_domain'] = \u0026quot;smtp.gmail.com\u0026quot; gitlab_rails['smtp_authentication'] = \u0026quot;login\u0026quot; gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' # Can be: 'none', 'peer', 'client_once', 'fail_if_no_peer_cert', see http://api.rubyonrails.org/classes/ActionMailer/Base.html 여기서 my.email 과 my-gmail-password 는 당연히 실제 gmail 계정으로 바꿔야겠죠? 해당 gmail 계정도 gmail 설정에서 smtp 를 사용할 수 있게 설정해 줘야 합니다.\n가입 기능 제거 gitlab 첫페이지는 sign in 과 register 기능이 있습니다. 처음 사용하는 유저는 register 를 사용하면 되는거죠.\n하지만 우린 폐쇄적으로 운영할 꺼라 계정을 관리자 통해서만 만들 수 있게 하고 싶습니다. Admin area -\u0026gt; Settings -\u0026gt; General -\u0026gt; Sign-up restrictions 메뉴에서 Sign-up enabled 를 비활성화 시키고 변경사항 저장 버튼을 누릅니다. 이제 gitlab 첫페이지에 register 기능이 사라져 있을 겁니다.\n[1] https://docs.gitlab.com/omnibus/docker/ [2] https://docs.gitlab.com/omnibus/settings/smtp.html [3] https://gitlab.com/gitlab-org/omnibus-gitlab/issues/3535\n","date":1552981188,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552981188,"objectID":"f01f89ae7a287ef9483d78974c6cc2dd","permalink":"/post/gitlab_docker_install/","publishdate":"2019-03-19T16:39:48+09:00","relpermalink":"/post/gitlab_docker_install/","section":"post","summary":"연구실 내부 사용을 위한 Gitlab 을 Docker 를 사용해서 구축하고 사용하고 있습니다만, 하도 예전이라 Gitlab official docker image 가 아니었고, docker 버전도 2.x 대라서 최신 버전으로 바로 업그레이드가 불가능하군요.\n지금은 gitlab 에서 자체적으로 정식 docker 이미지를 제공합니다. 이 포스트에서는 Ubuntu 18.04 서버 위에 gitlab 정식 docker 이미지를 사용해 설치하는 방법을 기록합니다.\nDocker 설치 먼저 Docker 를 설치해야죠. 문서[1]를 참고해서 설치를 진행해 봅니다.\n먼저 apt 업데이트 후 종속 패키지들을 깔아줍니다:\nsudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common 이제 최신 docker 를 깔기 위해 docker repository 를 apt 에 추가해 주고요:","tags":["gitlab","docker","installation"],"title":"Gitlab docker install","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v5 00/19] Convert x86 \u0026amp; arm64 to use generic page walk https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com\n커널이 walk_page_range() 함수를 제공하긴 하지만 이 함수는 커널에 의해 사용되는 페이지 테이블은 볼수가 없기 때문에 각 아키텍쳐별로 페이지 테이블 순회를 위한 기능을 별도로 만들어 사용하고 있습니다.\n이 패치셋은 walk_page_range() 가 커널의 페이지 테이블을 만질 수 있도록 확장함으로써 그런 불필요한 아키텍쳐별 파편화를 줄이려 합니다.\n[PATCH v6 0/7] psi: pressure stall monitors v6 https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com\n시스템이 어떤 부분의 pressure 를 받는지 쉽게 확인하기 위한 pressure stall monitor 구현 패치의 여섯 번째 버전입니다. 안드로이드는 이미 이 기능을 적용해서 모바일 기기의 메모리 부족 문제를 해결하고 있다는군요.\n파일 기반의 기존 인터페이스는 자주 들여다보면 오버헤드가 있기 때문에 유저가 poll() 할 수 있는 형태로 인터페이스를 개선한 것 같습니다.\n이 패치 기반으로 안드로이드의 low memory killer daemon 을 개선했고, 결과 false positive memory pressure 를 vmpressure signal 대비 약 10배까지 줄일 수 있었다고 합니다.\n[PATCH 0/2] Remove support for deprecated %pf and %pF in vsprintf https://lkml.kernel.org/r/20190322132108.25501-1-sakari.ailus@linux.intel.com\n함수 포인터의 프린트를 위해 사용되는 프린트 포맷 지시어인 %pf 와 %pF 를 거의 같은 일을 하면서 ia64, ppc64, parisc64 아키텍쳐에선 좀 더 많은 일을 해주는 $ps 와 %pS 로 대체하는 패치입니다.\n[RFC PATCH 0/10] Another Approach to Use PMEM as NUMA Node https://lkml.kernel.org/r/1553316275-21985-1-git-send-email-yang.shi@linux.alibaba.com\n앞서 이 블로그에서도 소개한 바 있는 PMEM 을 매우 느린 NUMA node 로 쓰는 패치가 머지되었습니다. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c221c0b0308fd01d9fb33a16f64d2fd95f8830a4\n그럼 이렇게 평범한 NUMA node 로 인식되는 PMEM 을 어떻게 잘 쓸 것인가? 하는 문제가 남아있는데, 이 패치셋은 이를 위한 패치입니다.\n기본적으로 DRAM 을 먼저 쓰게 만들고, 사용자가 기존의 방식대로 명시적으로 NUMA 인터페이스를 사용해 PMEM 을 요청하면 할당해 줍니다. 그리고, 자주 접근되는 페이지는 vma 단위로 조사해서 DRAM 으로 migrate 시킵니다.\nLinux 5.1-rc2 https://lkml.kernel.org/r/CAHk-=wgg_PRWs3a6u2gnFLQjhxOJcrFkqqWVnLw60eQAwD-DNw@mail.gmail.com\n두번째 rc 입니다. 아직 rc 라고 하기엔 고칠 문제도 찾지 못한 상태라고 할 수 있겠지만요. 따라서 토발즈는 열심히 테스트 해달라고 하네요.\n어쨌건 이번 릴리즈도 크게 특이한 사항은 없다고 합니다, 다만 이번 수정사항 중 2/3 가량이 tools/ 쪽에 집중되었다고 하네요. perf 쪽의 변경 때문이라고 합니다.\n","date":1552965071,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552965071,"objectID":"a842d5a8225d5dbf88f903d293e7d64a","permalink":"/post/lkml_news_v5.1-rc2/","publishdate":"2019-03-19T12:11:11+09:00","relpermalink":"/post/lkml_news_v5.1-rc2/","section":"post","summary":"[PATCH v5 00/19] Convert x86 \u0026amp; arm64 to use generic page walk https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com\n커널이 walk_page_range() 함수를 제공하긴 하지만 이 함수는 커널에 의해 사용되는 페이지 테이블은 볼수가 없기 때문에 각 아키텍쳐별로 페이지 테이블 순회를 위한 기능을 별도로 만들어 사용하고 있습니다.\n이 패치셋은 walk_page_range() 가 커널의 페이지 테이블을 만질 수 있도록 확장함으로써 그런 불필요한 아키텍쳐별 파편화를 줄이려 합니다.\n[PATCH v6 0/7] psi: pressure stall monitors v6 https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com\n시스템이 어떤 부분의 pressure 를 받는지 쉽게 확인하기 위한 pressure stall monitor 구현 패치의 여섯 번째 버전입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v5.0 릴리즈 (2019-03-03) 부터 v5.1-rc1 릴리즈 (2019-03-17) 사이의 머지 윈도우 기간 LKML 에 올라온 흥미로운 메일들을 소개합니다.\nCMA allocation failure https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com\n제게도 GCMA 레이턴시 관련 문의를 보냈던 분인데, LKML 에도 관련 도움을 요청하는 메일을 보냈군요.\n왜 CMA 가 할당에 실패하는지 이유를 묻는 메일인데요, 답은 없습니다.\n[LSF/MM TOPIC] Using XArray to manage the VMA https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com\nMM 의 오랜 숙원 중 하나는 mmap_sem 으로 인한 확장성 문제 해결이죠. 기존의 RB tree 대신 XArray 를 사용하는 것으로 새로운 시도를 시작해 보는건 어떨지 LSFMM 에서 토의해보자는, speculative page fault 의 최근 메인테이너인 Laurent 의 메일입니다. 곧바로 XArray 메인테이너인 Matthew 의 답장이 오는군요. 꼭 해보려는 의지가 강력해 보입니다.\nmm/cma.c: High latency for cma allocation https://lkml.kernel.org/r/SG2PR02MB3098E44824F5AA69BC04F935E8470@SG2PR02MB3098.apcprd02.prod.outlook.com\n이어지는 CMA 레이턴시에 대한 문의입니다. 제게 GCMA 레이턴시에 대해 온 문의에 대해서는 제 실험 환경을 보내주고 그쪽 환경에서 돌려본 후 결과를 알려달라 했는데, 아직 답이 없군요. 좀 더 자세한 분석 결과를 달라는 Michal 의 답변이 있습니다.\nLinux 5.1-rc1 https://lkml.kernel.org/r/CAHk-=wj1c_Tb-wwM6qaPLdggXtW3rOh1JzYUOs+O7PsHt-=+jg@mail.gmail.com\nv5.1 머지 윈도우가 종료되고 v5.1-rc1 이 릴리즈 되었습니다. 이번 릴리즈도 크게 다른 건 없고 매우 평범했다고 합니다. 좋은 징조인데요, 변경사항의 60%를 차지한 드라이버 가운데 habanalab 의 AI 가속기 칩 드라이버를 조금 특별한 변경사항으로 토발즈는 꼽네요.\n","date":1551672450,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551672450,"objectID":"1ea6c9880c3a82902655d1ffa90410d0","permalink":"/post/lkml_news_v5.1-rc1/","publishdate":"2019-03-04T13:07:30+09:00","relpermalink":"/post/lkml_news_v5.1-rc1/","section":"post","summary":"Linux v5.0 릴리즈 (2019-03-03) 부터 v5.1-rc1 릴리즈 (2019-03-17) 사이의 머지 윈도우 기간 LKML 에 올라온 흥미로운 메일들을 소개합니다.\nCMA allocation failure https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com\n제게도 GCMA 레이턴시 관련 문의를 보냈던 분인데, LKML 에도 관련 도움을 요청하는 메일을 보냈군요.\n왜 CMA 가 할당에 실패하는지 이유를 묻는 메일인데요, 답은 없습니다.\n[LSF/MM TOPIC] Using XArray to manage the VMA https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com\nMM 의 오랜 숙원 중 하나는 mmap_sem 으로 인한 확장성 문제 해결이죠. 기존의 RB tree 대신 XArray 를 사용하는 것으로 새로운 시도를 시작해 보는건 어떨지 LSFMM 에서 토의해보자는, speculative page fault 의 최근 메인테이너인 Laurent 의 메일입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.1-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v5.0-rc8 릴리즈 (2019-02-24) 부터 Linux v5.0 릴리즈 (2019-03-03) 사이 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[PATCH 0/5] [v5] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com\n앞서 몇번 소개했던, persistent memory 를 좀 많이 느린 numa node 인 것처럼 해서 시스템이 사용할 수 있게 하는 접근법의 패치 다섯번째 버전입니다. 이제 개선은 어느정도 된 것 같으니 슬슬 머지되야하지 않겠냐고 주장하는군요.\nLinux v5.0 https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com\n마침내 5.0 릴리즈입니다! 제 랩톱에도 바로 받아다가 설치했습니다! ;) 물론 5.0 릴리즈에 특별한 기능 추가라던지 하는건 없고 그저 시간이 꽤 지나서 이렇게 된거라곤 하지만 어쨌든 느낌은 새롭군요.\nrc8 릴리즈 후에도 양은 크게 줄었지만 패치가 좀 있었습니다. 그렇게 고쳐진 버그 중 하나로는 uninitialized variable 문제가 있었는데, gcc 가 알아서 초기화를 시켜주다보니 워닝이 안떴었군요. 물론 다른 컴파일러를 사용하면 문제가 생기게 되니 무쓸모한 변경은 아니었다 자평합니다.\n어쨌든, 이렇게 v5.0 커널이 정식으로 나왔고, v5.1 을 향한 여정이 시작되었습니다!\n","date":1551068199,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551068199,"objectID":"f74f747c7de31e29b7395f4fa20bdd69","permalink":"/post/lkml_news_v5.0/","publishdate":"2019-02-25T13:16:39+09:00","relpermalink":"/post/lkml_news_v5.0/","section":"post","summary":"Linux v5.0-rc8 릴리즈 (2019-02-24) 부터 Linux v5.0 릴리즈 (2019-03-03) 사이 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[PATCH 0/5] [v5] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com\n앞서 몇번 소개했던, persistent memory 를 좀 많이 느린 numa node 인 것처럼 해서 시스템이 사용할 수 있게 하는 접근법의 패치 다섯번째 버전입니다. 이제 개선은 어느정도 된 것 같으니 슬슬 머지되야하지 않겠냐고 주장하는군요.\nLinux v5.0 https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com\n마침내 5.0 릴리즈입니다! 제 랩톱에도 바로 받아다가 설치했습니다!","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v5.0-rc7 릴리즈 (2019년 2월 17일) 부터 v5.0-rc8 릴리즈 (2019년 2월 24일) 사이의 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[LSF/MM ATTEND] MM track: NUMA, THP locality, reclaim https://lkml.kernel.org/r/20190218143203.GW9565@techsingularity.net\nMel Gorman 의 LSF/MM 참여 메일입니다. NUMA remote THP vs NUMA local non-THP, NUMA, 메모리 계층 그리고 디바이스 메모리, NUMA rebalancing 과 메모리 reclaim 에 참여하고 싶다고 이야기 하는군요.\n[LSF/MM TOPIC ][LSF/MM ATTEND] Read-only Mapping of Program Text https://lkml.kernel.org/r/379F21DD-006F-4E33-9BD5-F81F9BA75C10@oracle.com\nTHP 를 활용해 read-only text 를 매핑함으로써 성능을 높이려는 시도를 해오고 있는데, 하나의 base page 를 먼저 읽고 이어서 추가적인 page 를 읽는게 진짜로 사용될지 모르는 readahead 때문에 의논을 해보고 싶다고 하네요. 또, 파일시스템에게 컨텐츠가 큰 청크를 필요로 할지 알려주는 인터페이스가 있으면 좋겠다는군요.\nLinux v5.0-rc8 https://lkml.kernel.org/r/CAHk-=wgtNhecfn_nOi0Yuy7XQSswfozz0CvRMn0WsQhk0YZfyw@mail.gmail.com\nrc8 이 나올지 바로 v5.0 이 나올지 궁금했는데, 결국 v5.0 릴리즈는 한주 더 미뤄지게 되었습니다. rc7 때보다도 많은 패치가 이번 기간에 들어왔다는군요.\n그렇다고 아주 특별한 변경이 있었던 건 아니지만 그렇다고 서두를 것도 없으므로 그냥 rc8 을 릴리즈하기로 결정했다고 하네요.\n어쨌건 다음주에는 분명 v5.0 이 나오겠죠!\n","date":1550532817,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550532817,"objectID":"987b254f97410524f261933c18ffd618","permalink":"/post/lkml_news_v5.0-rc8/","publishdate":"2019-02-19T08:33:37+09:00","relpermalink":"/post/lkml_news_v5.0-rc8/","section":"post","summary":"Linux v5.0-rc7 릴리즈 (2019년 2월 17일) 부터 v5.0-rc8 릴리즈 (2019년 2월 24일) 사이의 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.\n[LSF/MM ATTEND] MM track: NUMA, THP locality, reclaim https://lkml.kernel.org/r/20190218143203.GW9565@techsingularity.net\nMel Gorman 의 LSF/MM 참여 메일입니다. NUMA remote THP vs NUMA local non-THP, NUMA, 메모리 계층 그리고 디바이스 메모리, NUMA rebalancing 과 메모리 reclaim 에 참여하고 싶다고 이야기 하는군요.\n[LSF/MM TOPIC ][LSF/MM ATTEND] Read-only Mapping of Program Text https://lkml.kernel.org/r/379F21DD-006F-4E33-9BD5-F81F9BA75C10@oracle.com\nTHP 를 활용해 read-only text 를 매핑함으로써 성능을 높이려는 시도를 해오고 있는데, 하나의 base page 를 먼저 읽고 이어서 추가적인 page 를 읽는게 진짜로 사용될지 모르는 readahead 때문에 의논을 해보고 싶다고 하네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc8","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH V15 00/18] block: support multi-page bvec https://lkml.kernel.org/r/20190215111324.30129-1-ming.lei@redhat.com\n시스템의 RAM 이 커지고 huge page 가 널리 사용되면서 물리적으로 연속된 페이지들의 I/O 가 흔해지고 있습니다. 이를 위해 struct bio_bvec 이 물리적으로 연속된 여러 페이지를 다룰 수 있게 해주는 패치의 15번째 버전입니다.\nMemory management facing a 400Gpbs network link https://lkml.kernel.org/r/01000168e2f54113-485312aa-7e08-4963-af92-803f8c7d21e6-000000@email.amazonses.com\n올해 내로 400Gbps 인피니밴드가 가능해질 거라고 합니다! 이건 프로세서-메모리 사이의 밴드위쓰를 넘길 수 있는 스피드죠! 단일 하드웨어 쓰레드는 20GB/s 이기 때문입니다. 이 재미있는 트렌드를 커널은 어떻게 대처해야 할 것인가 하는 메일입니다.\n[LSF/MM TOPIC] Generating physically contiguous memory https://lkml.kernel.org/r/CEDBC792-DE5A-42CB-AA31-40C039470BD0@nvidia.com\nGPU, FPGA, NIC, RDMA 같은 고성능 디바이스들에게 있어 물리적 연속 메모리는 매우 중요합니다. 이 디바이스들은 내부적으로 고밀도의 computation 을 하는데 tlb miss 와 이어지는 page table walk 로 인한 성능 문제가 CPU 에 비해서도 매우 크기 때문이라는군요.\nBoot time reservation 도, THP 도 유연성이 부족하기 때문에 새로운 패치도 만들고, 관련해서 LSF/MM 에서 논의해 보자는군요.\n[RFC v4 00/17] kunit: introduce KUnit, the Linux kernel unit testing framework https://lkml.kernel.org/r/20190214213729.21702-1-brendanhiggins@google.com\n리눅스 커널은 다양한 테스트를 가지고 있지만 unit test framework 은 아직 없었죠. 그걸 만든 패치입니다!\nLinux 5.0-rc7 https://lkml.kernel.org/r/CAHk-=wgvF18PqBch4=56DFwCamYpy+owngTZXGnjVbFgKq467g@mail.gmail.com\n휴일을 끼고 시작된 머지 윈도우로 이래저래 걱정도 있던 5.0 릴리즈들이었습니다만 이번 rc 릴리즈는 정말 별다른 게 없네요. 매우 고요한 릴리즈였다고 합니다. 아마도 다음주에 5.0 정식 릴리즈가 될 걸로 보이네요!\n","date":1550460624,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550460624,"objectID":"485a80224c4d4001896056e4d4a35411","permalink":"/post/lkml_news_v5.0-rc7/","publishdate":"2019-02-18T12:30:24+09:00","relpermalink":"/post/lkml_news_v5.0-rc7/","section":"post","summary":"[PATCH V15 00/18] block: support multi-page bvec https://lkml.kernel.org/r/20190215111324.30129-1-ming.lei@redhat.com\n시스템의 RAM 이 커지고 huge page 가 널리 사용되면서 물리적으로 연속된 페이지들의 I/O 가 흔해지고 있습니다. 이를 위해 struct bio_bvec 이 물리적으로 연속된 여러 페이지를 다룰 수 있게 해주는 패치의 15번째 버전입니다.\nMemory management facing a 400Gpbs network link https://lkml.kernel.org/r/01000168e2f54113-485312aa-7e08-4963-af92-803f8c7d21e6-000000@email.amazonses.com\n올해 내로 400Gbps 인피니밴드가 가능해질 거라고 합니다! 이건 프로세서-메모리 사이의 밴드위쓰를 넘길 수 있는 스피드죠! 단일 하드웨어 쓰레드는 20GB/s 이기 때문입니다. 이 재미있는 트렌드를 커널은 어떻게 대처해야 할 것인가 하는 메일입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v4 1/1] psi: introduce psi monitor https://lkml.kernel.org/r/20190206023446.177362-1-surenb@google.com\n시스템의 메모리 부족 등의 현상이 어떻게 일어나고 있는지 쉽게 파악할 수 있는 장치를 추가하는 패치입니다.\n[LSF/MM TOPIC] Address space isolation inside the kernel https://lkml.kernel.org/r/20190207072421.GA9120@rapoport-lnx\n리눅스의 어드레스 스페이스 기능은 유저스페이스 프로그램들이 서로에게 영향을 끼치지 못하게 해줘서 컨테이너 등에 쓰이고 있죠. 하지만 커널은 공유하기 때문에 커널 버그는 여전히 영향을 끼칠 수 있습니다. 커널 코드도 어드레스 스페이스를 어느정도 인식하고 코드 분류를 시킴으로써 그 문제를 줄여보자는 LSF/MM 토론 주제 제안입니다.\nLSF/MM 2019: Call for Proposals (UPDATED!) https://lkml.kernel.org/r/4f5a15c1-4f9e-acae-5094-2f38c8eebd96@kernel.dk\n올해 LSF/MM 에는 BPF 트랙이 있을 거라는군요. 이에 따른 공지 업데이트입니다. BPF 의 상승세가 올해도 계속될 것 같군요!\n[LSF/MM TOPIC] BPF for Block Devices https://lkml.kernel.org/r/40D2EB06-6BF2-4233-9196-7A26AC43C64E@raithlin.com\nLSF/MM 에 BPF 라면 당연히 block device 와 BPF 의 결합을 이야기 해야하지 않겠냐는 LSF/MM 토론 제안입니다. Computational Storage 개념을 이야기 하는데요, I/O 레이어에서 간단한 연산을 처리해 줌으로써 성능을 높이자는 거죠. 그러기 위한 연산 요청에 BPF 를 쓰자는 것 같습니다. 말 되네요!\nLinux 5.0-rc6 https://lkml.kernel.org/r/CAHk-=whuSY_-hAU8ugVR7a=xz3uZeRrAPdhsoMZHmZ_7Qc49YQ@mail.gmail.com\n이제 리눅스 5.0 정식 릴리즈가 얼마 남지 않았네요, 여섯번째 rc 가 나왔습니다. 그런데 이번 rc 는 토발즈가 바랬던 것보다는 조금 변경사항이 많았군요. 대부분 네트워킹 쪽 변경이었다고 합니다만, 그래도 나머지는 큰 문제 없어 보인다는군요.\n","date":1549856420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549856420,"objectID":"d2a2f81e53f563cb41cd529ede59b1df","permalink":"/post/lkml_news_v5.0-rc6/","publishdate":"2019-02-11T12:40:20+09:00","relpermalink":"/post/lkml_news_v5.0-rc6/","section":"post","summary":"[PATCH v4 1/1] psi: introduce psi monitor https://lkml.kernel.org/r/20190206023446.177362-1-surenb@google.com\n시스템의 메모리 부족 등의 현상이 어떻게 일어나고 있는지 쉽게 파악할 수 있는 장치를 추가하는 패치입니다.\n[LSF/MM TOPIC] Address space isolation inside the kernel https://lkml.kernel.org/r/20190207072421.GA9120@rapoport-lnx\n리눅스의 어드레스 스페이스 기능은 유저스페이스 프로그램들이 서로에게 영향을 끼치지 못하게 해줘서 컨테이너 등에 쓰이고 있죠. 하지만 커널은 공유하기 때문에 커널 버그는 여전히 영향을 끼칠 수 있습니다. 커널 코드도 어드레스 스페이스를 어느정도 인식하고 코드 분류를 시킴으로써 그 문제를 줄여보자는 LSF/MM 토론 주제 제안입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[LSF/MM TOPIC] Page flags, can we free up space ? https://lkml.kernel.org/r/20190122201744.GA3939@redhat.com\n리눅스 커널의 page 정보는 PG_ 로 시작하는 플래그를 사용해 현재 상태를 알리는데요, 이걸 저장하는데 사용되는 공간을 더 줄일 수 있을지에 대한 논의를 해보고 싶다는 LSF/MM 제안입니다.\n[LSF/MM TOPIC] Use NVDIMM as NUMA node and NUMA API https://lkml.kernel.org/r/f0d66b0c-c9b6-a040-c485-1606041a70a2@linux.alibaba.com\n알리바바에서는 NVDIMM 을 클라우드 고객들에게 싼 비용의 메모리로 제공하려 한다는군요. 이를 위해 여러 필요성이 있고, 현재 NUMA API 로는 모든 경우를 커퍼하기가 어렵다고 합니다. 때문에, LSFMM 에서 어떤 use-case 와 needs 가 있는지 공유하고 더 나은 NUMA API 에 대해 논의하고자 하는군요.\n[LSF/MM TOPIC] memory reclaim with NUMA rebalancing https://lkml.kernel.org/r/20190130174847.GD18811@dhcp22.suse.cz\nNVDIMM 을 싸고 무척 느린 NUMA 노드로 인식되고 사용되게끔 하고자 하는 노력들이 있습니다. 이게 완벽하게 동작하려면 hot page 는 가깝고 빠른 NUMA node 에, cold page 는 멀고 느린 NUMA node 에 위치되도록 커널이 조정해줄 필요가 있겠죠. NUMA balancing 기능이 있긴 하지만 cold page 를 멀고 느린 NUMA node 로 보내는 기능은 현재까지는 없습니다. 이에 대한 논의를 LSF/MM 에서 시작해 보자고 하네요.\nLinux 5.0-rc5 https://lkml.kernel.org/r/CAHk-=wjoGOgYFCbpazT2Fyv=zHaiagU5PhmiAfrZ5DOmE-y0rg@mail.gmail.com\n아무래도 이번 릴리즈들은 머지 윈도우가 길고 연휴와 함께 있었던 탓인지 전체적으로 뭔가 변경사항이 줄지 않는듯 보였는데, 드디어 변경사항이 줄어들고 있다고 합니다. 좋은 신호죠.\n","date":1549239488,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549239488,"objectID":"b87166cb045e40bcf1ec4d6b1d58d664","permalink":"/post/lkml_news_v5.0-rc5/","publishdate":"2019-02-04T09:18:08+09:00","relpermalink":"/post/lkml_news_v5.0-rc5/","section":"post","summary":"[LSF/MM TOPIC] Page flags, can we free up space ? https://lkml.kernel.org/r/20190122201744.GA3939@redhat.com\n리눅스 커널의 page 정보는 PG_ 로 시작하는 플래그를 사용해 현재 상태를 알리는데요, 이걸 저장하는데 사용되는 공간을 더 줄일 수 있을지에 대한 논의를 해보고 싶다는 LSF/MM 제안입니다.\n[LSF/MM TOPIC] Use NVDIMM as NUMA node and NUMA API https://lkml.kernel.org/r/f0d66b0c-c9b6-a040-c485-1606041a70a2@linux.alibaba.com\n알리바바에서는 NVDIMM 을 클라우드 고객들에게 싼 비용의 메모리로 제공하려 한다는군요. 이를 위해 여러 필요성이 있고, 현재 NUMA API 로는 모든 경우를 커퍼하기가 어렵다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc5","type":"post"},{"authors":null,"categories":["publications"],"content":"FAST'19 Work-in-progress 세션 에서 현재 진행중인 연구에 대해 발표하게 되었습니다. 발표 제목은 \u0026ldquo;Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storage\u0026rdquo; 입니다.\n","date":1549073609,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549073609,"objectID":"1bef62bca126ea629738a64f02a21b6c","permalink":"/post/fast2019_talk/","publishdate":"2019-02-02T11:13:29+09:00","relpermalink":"/post/fast2019_talk/","section":"post","summary":"FAST'19 Work-in-progress 세션 에서 현재 진행중인 연구에 대해 발표하게 되었습니다. 발표 제목은 \u0026ldquo;Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storage\u0026rdquo; 입니다.","tags":["usenix","fast","fast19","talk"],"title":"I will have a talk at the FAST'19","type":"post"},{"authors":null,"categories":[],"content":"[PATCH 0/5] [v4] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20190124231441.37A4A305@viggo.jf.intel.com\nPMEM 을 평범한 RAM 처럼 접근할 수 있게 해주는 드라이버를 소개하는 패치셋의 네번째 버전입니다. 인터페이스적 측면에서 개선이 많이 됐고, 패치에 대한 소개도 많이 좋아졌네요.\n이 패치셋이 의도하는 PMEM 은 Intel Optane DC persistent memory 와 같은 NVDIMM 입니다. 휘발성이 없고, flash 보다 빠르고, RAM 에 비해 가격 경쟁력이 좋죠.\nRAM-based NVDIMM 은 의도한 대상이 아닙니다. 그것들은 RAM 대비 가격 경쟁력이 없기 때문이라는군요.\n[LSF/MM TOPIC] NUMA remote THP vs NUMA local non-THP under MADV_HUGEPAGE https://lkml.kernel.org/r/20190129234058.GH31695@redhat.com\n제목 그대로입니다. NUMA remote THP 를 쓰는게 나을까요? THP 를 포기하고 NUMA local regular page 를 쓰는게 나을까요? 이에 대해서 LSF/MM 에서 이야기 하고 싶다는군요.\nLinux 5.0-rc4 https://lkml.kernel.org/r/CAHk-=wgNph26eD1zhP91LQLrwB91QPy4=d82SPfvYmSexV7UpQ@mail.gmail.com\n어느새 네번째 rc. 이제 5.0 이 그리 멀지 않았네요. 주말 쯤에 갑자기 많은 패치가 밀려왔다고 하지만 큰 문제는 없었다고 합니다.\n","date":1548634885,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548634885,"objectID":"34507bf168342b4e7951347322b5cb17","permalink":"/post/lkml_news_v5.0-rc4/","publishdate":"2019-01-28T09:21:25+09:00","relpermalink":"/post/lkml_news_v5.0-rc4/","section":"post","summary":"[PATCH 0/5] [v4] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20190124231441.37A4A305@viggo.jf.intel.com\nPMEM 을 평범한 RAM 처럼 접근할 수 있게 해주는 드라이버를 소개하는 패치셋의 네번째 버전입니다. 인터페이스적 측면에서 개선이 많이 됐고, 패치에 대한 소개도 많이 좋아졌네요.\n이 패치셋이 의도하는 PMEM 은 Intel Optane DC persistent memory 와 같은 NVDIMM 입니다. 휘발성이 없고, flash 보다 빠르고, RAM 에 비해 가격 경쟁력이 좋죠.\nRAM-based NVDIMM 은 의도한 대상이 아닙니다. 그것들은 RAM 대비 가격 경쟁력이 없기 때문이라는군요.","tags":[],"title":"LKML News v5.0-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"LSF/MM 2019: Call for Proposals https://lkml.kernel.org/r/51b4b263-a0f2-113d-7bdc-f7960b540929@kernel.dk\n올해의 LSF/MM 을 위한 발표 모집입니다. 올해는 푸에르토리코에서 4월 30일부터 5월 2일까지 열리는군요.\n[LSF/MM TOPIC] NUMA, memory hierarchy and device memory https://lkml.kernel.org/r/20190118174512.GA3060@redhat.com\nLSF/MM 을 위한 발표 지원입니다. NUMA API 가 다계층 메모리에 적용될 때의 단점에 대해서 이야기 해보겠다는군요.\n[PATCH 00/22] Increase success rates and reduce latency of compaction v3 https://lkml.kernel.org/r/20190118175136.31341-1-mgorman@techsingularity.net\nMel Gorman 의 compaction 개선 패치셋 세번째 버전입니다.\nLinux 5.0-rc3 https://lkml.kernel.org/r/CAHk-=whS=6Z_UxzoMjLANupOk3u-8ycERLPnaZxShMTviW0jkQ@mail.gmail.com\n5.0 세번째 릴리즈입니다. 지난 릴리즈에서 여행 중이지만 항상 그렇듯 일요일 릴리즈를 하려 한다고 했는데, 이번에도 성공적이군요. 더불어 어디 여행 중인지도 나왔습니다, LCA 2019 여행 중이었군요. 여담이지만 올해 LCA 도 재밌는 발표가 많은 것 같습니다.\n지난 rc2 에서 머지하는 걸 빼먹은 네트워킹 쪽 풀리퀘스트를 이번에 머지했기 때문에 이번 rc3 는 조금 크다는군요.\n","date":1548030074,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548030074,"objectID":"7197bb3650102f5922a90d4ddfde2ad9","permalink":"/post/lkml_news_v5.0-rc3/","publishdate":"2019-01-21T09:21:14+09:00","relpermalink":"/post/lkml_news_v5.0-rc3/","section":"post","summary":"LSF/MM 2019: Call for Proposals https://lkml.kernel.org/r/51b4b263-a0f2-113d-7bdc-f7960b540929@kernel.dk\n올해의 LSF/MM 을 위한 발표 모집입니다. 올해는 푸에르토리코에서 4월 30일부터 5월 2일까지 열리는군요.\n[LSF/MM TOPIC] NUMA, memory hierarchy and device memory https://lkml.kernel.org/r/20190118174512.GA3060@redhat.com\nLSF/MM 을 위한 발표 지원입니다. NUMA API 가 다계층 메모리에 적용될 때의 단점에 대해서 이야기 해보겠다는군요.\n[PATCH 00/22] Increase success rates and reduce latency of compaction v3 https://lkml.kernel.org/r/20190118175136.31341-1-mgorman@techsingularity.net\nMel Gorman 의 compaction 개선 패치셋 세번째 버전입니다.\nLinux 5.0-rc3 https://lkml.kernel.org/r/CAHk-=whS=6Z_UxzoMjLANupOk3u-8ycERLPnaZxShMTviW0jkQ@mail.gmail.com\n5.0 세번째 릴리즈입니다. 지난 릴리즈에서 여행 중이지만 항상 그렇듯 일요일 릴리즈를 하려 한다고 했는데, 이번에도 성공적이군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH v11 00/26] Speculative page faults https://lkml.kernel.org/r/8b0b2c05-89f8-8002-2dce-fa7004907e78@codeaurora.org\nSPF 패치에서 발견된 버그 레포트입니다. ARM 위에서 데드락 문제가 발견되었군요. 버그 발견자가 패치도 같이 내놓았는데, 이에 대한 토론은 아직도 계속되고 있네요.\n[RFC PATCH v7 00/16] Add support for eXclusive Page Frame Ownership https://lkml.kernel.org/r/cover.1547153058.git.khalid.aziz@oracle.com\n\u0026lsquo;ret2dir\u0026rsquo; 보안 공격[1]에 대비하기 위한 패치입니다. 하지만 이로 인해 tlb 를 좀 많이 flush 해야 하는 문제가 있었고, 이 패치셋은 그에 대한 해결책도 의논하고 있습니다.\n[1] http://www.cs.columbia.edu/~vpk/papers/ret2dir.sec14.pdf\n[PATCH 0/4] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20190116181859.D1504459@viggo.jf.intel.com\nPMEM 을 사용하기 위해선 현재로썬 어플리케이션 코드를 수정해야 합니다. 그냥 평범한, 조금 느린 RAM 처럼 어플리케이션이 기존에 RAM 접근하듯 접근할 수 있게 하면 안될까요? 이 패치셋은 그런 경우를 위한 드라이버를 소개합니다.\n[PATCH v2 0/5] psi: pressure stall monitors v2 https://lkml.kernel.org/r/20190110220718.261134-1-surenb@google.com\nLWN 에서도 소개된 pressure stall monitor 의 두번째 버전입니다.\u0002\nLinux 5.0-rc2 https://lkml.kernel.org/r/CAHk-=wicCXd7nALwEz+022iNesJV3DUmejS+dzVRE0D3UGzs_g@mail.gmail.com\n5.x 로 나아가는 두번째 릴리즈 후보가 나왔습니다. 이번 머지 윈도우가 휴일이 섞여 있었기 때문에 두번째 rc 를 위한 과정에 문제가 있지 않을까 싶었지만 별 문제 없었다는군요. 그리고 지금 토발즈는 여행중이라 현지시간으로는 항상 하는 일요일 릴리즈가 아니라 월요일 릴리즈라 합니다만, 뭐\u0026hellip; 큰 이슈는 아니죠 ;)\n","date":1547510804,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547510804,"objectID":"d8610cd7bd59f794ea0907478066bb57","permalink":"/post/lkml_news_v5.0-rc2/","publishdate":"2019-01-15T09:06:44+09:00","relpermalink":"/post/lkml_news_v5.0-rc2/","section":"post","summary":"[PATCH v11 00/26] Speculative page faults https://lkml.kernel.org/r/8b0b2c05-89f8-8002-2dce-fa7004907e78@codeaurora.org\nSPF 패치에서 발견된 버그 레포트입니다. ARM 위에서 데드락 문제가 발견되었군요. 버그 발견자가 패치도 같이 내놓았는데, 이에 대한 토론은 아직도 계속되고 있네요.\n[RFC PATCH v7 00/16] Add support for eXclusive Page Frame Ownership https://lkml.kernel.org/r/cover.1547153058.git.khalid.aziz@oracle.com\n\u0026lsquo;ret2dir\u0026rsquo; 보안 공격[1]에 대비하기 위한 패치입니다. 하지만 이로 인해 tlb 를 좀 많이 flush 해야 하는 문제가 있었고, 이 패치셋은 그에 대한 해결책도 의논하고 있습니다.\n[1] http://www.cs.columbia.edu/~vpk/papers/ret2dir.sec14.pdf\n[PATCH 0/4] Allow persistent memory to be used like normal RAM https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[RFC v3 0/3] test driver to analyse vmalloc allocator https://lkml.kernel.org/r/20190102085924.14145-1-urezki@gmail.com\nvmalloc 의 성능과 스트레스 테스트를 위한 모듈을 구현한 패치입니다. Selftests 에도 테스트 스크립트를 추가했군요.\n[RFC PATCH 0/1] mm: add a warning about high order allocations https://lkml.kernel.org/r/20181225153927.2873-1-khorenko@virtuozzo.com\n특정 노드의 메모리에 접근이 많이 되고 있는 상황에서 해당 메모리가 fragment 되어 있고 이 시점에서 high order allocation 이 요청되면 이걸 위해 compaction 등이 작동하니까 다른 태스크의 latency 가 떨어질 수 있습니다. 이런 상황을 모니터링 할 수 있게끔, 이 패치는 vm.war_high_order 라는 값을 sysctl 통해 설정하면 이 값을 넘는 order 의 allocation 이 요청되었을 때 워닝을 뱉어 줍니다.\n[PATCH] mm: Introduce page_size() https://lkml.kernel.org/r/20181231134223.20765-1-willy@infradead.org\nHuge page 의 존재로 인해 페이지의 실제 크기는 모두 똑같지가 않기 때문에 이를 판별할 방법이 필요하죠. 이 패치는 단순히 기존에 좀 복잡하게 직접 페이지 크기를 구하던 것을 별도의 wrapper function 으로 대체하기 위한 준비 작업입니다.\nLinux 5.0-rc1 https://lkml.kernel.org/r/wgKYnrL3LjhVkH2Fp+ecmWhLqezT9zmR6CzfcpwcJX0qA@mail.gmail.com\n리눅스 커널 버전의 숫자가 큰 의미 없게 된지도 오래이긴 합니다만 그래도 메이저 버전 변경은 항상 뭔가 들뜨게 마련이죠. 드디어 5.x 커널의 시대가 시작되었습니다.\n연말/연처 휴일이 섞여 있는 덕에 꽤 오랫만의 릴리즈가 되었고, 그덕에 좀 늦게 풀리퀘스트가 온 것들도 있었지만 큰 문제는 없었다고 하네요.\n메이저 버전이 4.x 에서 5.x 로 바뀌긴 했지만 손가락 발가락 다 써도 4.21 의 버전은 셀수가 없기 때문에 5.x 로 바뀌었을 뿐 특별한 변경이나 새로운 기능은 없다는 점도 한번 더 공지합니다. 하지만 많은 기능들이 추가된 것도 사실이니 원하면 하나 꼽아들고 이거 때문에 5.x 로 업데이트 되었다고 생각해도 좋다고 하는군요.\n이번 릴리즈는 총 11000여개의 커밋을 받아들인 긴 머지 윈도우를 거쳤지만, 그렇다고 유별날 건 없다는군요. 절반 가량이 드라이버, 20%는 아키텍쳐, 10% 툴링, 나머진 여기저기.\n","date":1546827530,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546827530,"objectID":"ddcf40ffd9747bc031c248683014ca5c","permalink":"/post/lkml_news_v5.0-rc1/","publishdate":"2019-01-07T11:18:50+09:00","relpermalink":"/post/lkml_news_v5.0-rc1/","section":"post","summary":"[RFC v3 0/3] test driver to analyse vmalloc allocator https://lkml.kernel.org/r/20190102085924.14145-1-urezki@gmail.com\nvmalloc 의 성능과 스트레스 테스트를 위한 모듈을 구현한 패치입니다. Selftests 에도 테스트 스크립트를 추가했군요.\n[RFC PATCH 0/1] mm: add a warning about high order allocations https://lkml.kernel.org/r/20181225153927.2873-1-khorenko@virtuozzo.com\n특정 노드의 메모리에 접근이 많이 되고 있는 상황에서 해당 메모리가 fragment 되어 있고 이 시점에서 high order allocation 이 요청되면 이걸 위해 compaction 등이 작동하니까 다른 태스크의 latency 가 떨어질 수 있습니다. 이런 상황을 모니터링 할 수 있게끔, 이 패치는 vm.","tags":["linux","kernel","lkml","news"],"title":"LKML News v5.0-rc1","type":"post"},{"authors":null,"categories":["linux kernel"],"content":"4.19 커널에서 오랫만에 perf 를 다시 빌드하고 써보려고 하니, perf report 가 아래와 같이 제대로 된 symbol name 을 찾질 못합니다.\n$ sudo perf record -g ls arch builtin-ftrace.c builtin-report.c Documentation perf.data.old bench builtin.h builtin-sched.c examples perf.h Build builtin-help.c builtin-script.c include perf-read-vdso.c builtin-annotate.c builtin-inject.c builtin-stat.c jvmti perf-sys.h builtin-bench.c builtin-kallsyms.c builtin-timechart.c Makefile perf-with-kcore.sh builtin-buildid-cache.c builtin-kmem.c builtin-top.c Makefile.config pmu-events builtin-buildid-list.c builtin-kvm.c builtin-trace.c Makefile.perf python builtin-c2c.c builtin-list.c builtin-version.c MANIFEST scripts builtin-config.c builtin-lock.c check-headers.sh perf-archive.sh tests builtin-data.c builtin-mem.c command-list.txt perf.c trace builtin-diff.c builtin-probe.c CREDITS perf-completion.sh ui builtin-evlist.c builtin-record.c design.txt perf.data util [ perf record: Woken up 1 times to write data ] [ perf record: Captured and wrote 0.025 MB perf.data (21 samples) ] sjpark@hydra:~/linux/tools/perf$ sudo perf report --stdio # To display the perf.data header info, please use --header/--header-only options. # # # Total Lost Samples: 0 # # Samples: 21 of event 'cycles:ppp' # Event count (approx.): 2712237 # # Children Self Command Shared Object Symbol # ........ ........ ....... ................. ................................. # 59.39% 0.00% ls [unknown] [k] 0xffffffffa8a00088 | ---0xffffffffa8a00088 | |--51.91%--0xffffffffa8004185 | | | |--17.13%--0xffffffffa8212c8b | | 0xffffffffa8212afe | | 0xffffffffa821274a | | 0xffffffffa81bb3c5 왜이러지 하고 삽질하다가 알고보니 perf 쪽 최신 커밋인 edeb0c90df35 (\u0026ldquo;perf tools: Stop fallbacking to kallsyms for vdso symbols lookup\u0026rdquo;) 이 만든 버그군요. 해당 커밋만 revert 하고 perf 를 다시 빌드하면 다시 잘 됩니다.\n저만 겪는 문제는 아닌지 버그질라에도 이에 대한 이슈가 올라와 있네요: https://bugzilla.kernel.org/show_bug.cgi?id=201551\n","date":1545379222,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545379222,"objectID":"c5e8e82b9618d9c97118f3899488c01b","permalink":"/post/perf_symbol_problem_4.19/","publishdate":"2018-12-21T17:00:22+09:00","relpermalink":"/post/perf_symbol_problem_4.19/","section":"post","summary":"4.19 커널에서 오랫만에 perf 를 다시 빌드하고 써보려고 하니, perf report 가 아래와 같이 제대로 된 symbol name 을 찾질 못합니다.\n$ sudo perf record -g ls arch builtin-ftrace.c builtin-report.c Documentation perf.data.old bench builtin.h builtin-sched.c examples perf.h Build builtin-help.c builtin-script.c include perf-read-vdso.c builtin-annotate.c builtin-inject.c builtin-stat.c jvmti perf-sys.h builtin-bench.c builtin-kallsyms.c builtin-timechart.c Makefile perf-with-kcore.sh builtin-buildid-cache.c builtin-kmem.c builtin-top.c Makefile.config pmu-events builtin-buildid-list.c builtin-kvm.c builtin-trace.c Makefile.perf python builtin-c2c.c builtin-list.c builtin-version.c MANIFEST scripts builtin-config.c builtin-lock.c check-headers.sh perf-archive.","tags":["linux","kernel","perf"],"title":"Perf symbol problem on Linux 4.19","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH V5 0/3] mm/kvm/vfio/ppc64: Migrate compound pages out of CMA https://lkml.kernel.org/r/20181219034047.16305-1-aneesh.kumar@linux.ibm.com\nppc64 에서는 guest os page table 을 CMA area 내에 할당하는데, VFIO 를 쓰는 경우 이게 pinning 되어 있다 보니 CMA area 밖으로 migrate 하는데 실패해, guest os page table 할당에 실패하고, 이로 인해 guest 시작조차 불가능하게 되는 문제가 있었습니다.\n이 패치는 compound page 에 대해서도 CMA area 밖으로의 migration 이 가능하게 합니다.\n[RESEND PATCH V3 0/5] arm64/mm: Enable HugeTLB migration https://lkml.kernel.org/r/1545121450-1663-1-git-send-email-anshuman.khandual@arm.com\nHugeTLB 를 통째로 migrate 할 수 있게 하는 패치입니다.\n[PATCH v2 0/2] hugetlbfs: use i_mmap_rwsem for better synchronization https://lkml.kernel.org/r/20181218223557.5202-1-mike.kravetz@oracle.com\nHugetlbfs 와 truncation 사이에 race conditional bug 가 존재해 왔는데, 이 패치는 i_mmap_rwsem 을 사용해 동기화를 적용함으로써 이 race bug 를 제거합니다.\n[RFC PATCH 1/2] mm: swap: check if swap backing device is congested https://lkml.kernel.org/r/1545115948-25467-1-git-send-email-yang.shi@linux.alibaba.com\nSwap readahead 기능이 이미 다른 요청으로 바쁜 storage device 에 행해진다면 swap 자체 성능도 떨어지고 storage 를 더욱 바빠지게 해서 남들에게도 민폐가 됩니다. vma_cluster_radahead() 에서 먼저 storage 의 congestion 을 체크해 보게 하는 패치입니다.\nLinux 4.20 released.. https://lkml.kernel.org/r/CAHk-=wg0zF4wa87Q5rAhFe2es0t0eExX2UjvKD7-Pghvcbt5Vw@mail.gmail.com\n예정대로 4.20 이 정식 릴리즈 되었습니다. 원했던 것보단 조금 시끄러운 주간이었지만 어쨌건 연말 휴일을 방해하고 싶진 않고 정말 큰 문제가 있는 것 같아 보이진 않기에 릴리즈 했다고 합니다.\n이번 정식 릴리즈에서 개인적으로 눈길 가는건 XArray 입니다. 앞으로도 많은 영역에 쓰이고자 하는 것 같던데, 향후 행보도 궁금합니다.\n","date":1545348903,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545348903,"objectID":"ef737cbe4c5898d1bef546e7d16a4681","permalink":"/post/lkml_news_v4.20/","publishdate":"2018-12-21T08:35:03+09:00","relpermalink":"/post/lkml_news_v4.20/","section":"post","summary":"[PATCH V5 0/3] mm/kvm/vfio/ppc64: Migrate compound pages out of CMA https://lkml.kernel.org/r/20181219034047.16305-1-aneesh.kumar@linux.ibm.com\nppc64 에서는 guest os page table 을 CMA area 내에 할당하는데, VFIO 를 쓰는 경우 이게 pinning 되어 있다 보니 CMA area 밖으로 migrate 하는데 실패해, guest os page table 할당에 실패하고, 이로 인해 guest 시작조차 불가능하게 되는 문제가 있었습니다.\n이 패치는 compound page 에 대해서도 CMA area 밖으로의 migration 이 가능하게 합니다.\n[RESEND PATCH V3 0/5] arm64/mm: Enable HugeTLB migration https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News for v4.20","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH -V9 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181214062754.13723-1-ying.huang@intel.com\n아직 머지되지 못한 THP swap in 패치셋의 아홉번째 버전입니다.\n[RFC 0/3] reduce THP fault thrashing https://lkml.kernel.org/r/20181211142941.20500-1-vbabka@suse.cz\nTHP fault 로 인한 로컬 노드 thrashing 을 해결하기 위한 패치의 RFC 입니다. THP fault 성공률을 낮추는 부작용도 있긴 하군요. 아직 테스트도 안된 첫번째 RFC 이니, 이대로 머지되진 않겠지 싶긴 합니다만 재밌네요.\nLinux 4.20-rc76 https://lkml.kernel.org/r/CAHk-=whv9u9aTEPoCz8h83JJbVK4fmHELJF=GG01ht9=1_MaCQ@mail.gmail.com\n일곱번째 rc 버전의 릴리즈입니다\u0026hellip; 만, 이번엔 릴리즈 메일 제목에 오타가 있었군요. 전체적으로 일곱번째인만큼 변경사항이 적습니다. 릴리즈 하는 토발즈 입장에선 반가운 일이군요. 특히나 연휴가 다가오니까요.\n릴리즈 계획은 기존과 같이, 크리스마스 전에 4.20 버전을 릴리즈하고, 이후에 머지 윈도우를 가질텐데, 가급적이면 연휴 전에 미리미리 풀리퀘스트를 보내달라고 하는군요.\n","date":1545005771,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545005771,"objectID":"1f38518ca9e9406e025757c4fde9a97e","permalink":"/post/lkml_news_v4.20-rc7/","publishdate":"2018-12-17T09:16:11+09:00","relpermalink":"/post/lkml_news_v4.20-rc7/","section":"post","summary":"[PATCH -V9 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181214062754.13723-1-ying.huang@intel.com\n아직 머지되지 못한 THP swap in 패치셋의 아홉번째 버전입니다.\n[RFC 0/3] reduce THP fault thrashing https://lkml.kernel.org/r/20181211142941.20500-1-vbabka@suse.cz\nTHP fault 로 인한 로컬 노드 thrashing 을 해결하기 위한 패치의 RFC 입니다. THP fault 성공률을 낮추는 부작용도 있긴 하군요. 아직 테스트도 안된 첫번째 RFC 이니, 이대로 머지되진 않겠지 싶긴 합니다만 재밌네요.\nLinux 4.20-rc76 https://lkml.kernel.org/r/CAHk-=whv9u9aTEPoCz8h83JJbVK4fmHELJF=GG01ht9=1_MaCQ@mail.gmail.com\n일곱번째 rc 버전의 릴리즈입니다\u0026hellip; 만, 이번엔 릴리즈 메일 제목에 오타가 있었군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH memory-model 0/3] Updates to the formal memory model https://lkml.kernel.org/r/20181203230411.GA27476@linux.ibm.com\n리눅스 커널 메모리 모델의 업데이트 입니다.\nsmp_mb__after_unlock_lock() 을 추가로 모델링했고, github 리트머스 테스트를 체크하기 위한 스크립트가 추가되었으며, -j 옵션을 서포트 하게 되었습니다.\n[tip:core/rcu] tracing: Replace synchronize_sched() and call_rcu_sched() https://lkml.kernel.org/r/tip-7440172974e85b1828bdd84ac6b23b5bcad9c5eb@git.kernel.org\nsynchronize_rcu() 가 이제는 RCU read-side 크리티컬 섹션 만이 아니라 preempt-disable 코드 영역도 기다리므로, synchronize_sched() 를 대체할 수 있고, call_rcu_sched() 도 call_rcu() 로 대체될 수 있습니다. 이 패치는 이 대체를 진행하고 있습니다.\n[PATCH -V8 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181207054122.27822-1-ying.huang@intel.com\n이 블로그를 통해 여러번 공유한 THP 를 통째로 스왑아웃 / 스왑인 하는 패치입니다. Daniel 에 의해 레포트된 버그 하나를 고쳐서 여덟번째 버전이 올라왔습니다.\nLinux 4.20-rc6 https://lkml.kernel.org/r/wgHSX8x6mOB0xZibbg-xc3veqsQEnHZ1+3H2DbO5MU5Rw@mail.gmail.com\n지난 rc5 릴리즈는 평소와 달리 굉장히 규모가 컸기에 걱정이 있었죠. 이번 릴리즈에는 확연히 변경의 양이 줄어들었다고 합니다. 뭔가 다시 정상적으로 간다는 거죠. 토발즈는 어쨌건 4.20 릴리즈 전에 최소한 하나의 rc 릴리즈는 더 있을 거라고 하는군요. 하지만 여전히 크리스마스 휴일 시즌을 위해 크리스마스 전에 릴리즈를 마치고, 이후 일주일은 푹 쉴테니 그전에 풀리퀘스트도 준비해 두라고 하네요.\n","date":1543965636,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543965636,"objectID":"8940a263e5c0da7ee11e233b9844e267","permalink":"/post/lkml_news_v4.20-rc6/","publishdate":"2018-12-05T08:20:36+09:00","relpermalink":"/post/lkml_news_v4.20-rc6/","section":"post","summary":"[PATCH memory-model 0/3] Updates to the formal memory model https://lkml.kernel.org/r/20181203230411.GA27476@linux.ibm.com\n리눅스 커널 메모리 모델의 업데이트 입니다.\nsmp_mb__after_unlock_lock() 을 추가로 모델링했고, github 리트머스 테스트를 체크하기 위한 스크립트가 추가되었으며, -j 옵션을 서포트 하게 되었습니다.\n[tip:core/rcu] tracing: Replace synchronize_sched() and call_rcu_sched() https://lkml.kernel.org/r/tip-7440172974e85b1828bdd84ac6b23b5bcad9c5eb@git.kernel.org\nsynchronize_rcu() 가 이제는 RCU read-side 크리티컬 섹션 만이 아니라 preempt-disable 코드 영역도 기다리므로, synchronize_sched() 를 대체할 수 있고, call_rcu_sched() 도 call_rcu() 로 대체될 수 있습니다. 이 패치는 이 대체를 진행하고 있습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH V12 00/20] block: support multi-page bvec https://lkml.kernel.org/r/20181126021720.19471-1-ming.lei@redhat.com\nstruct bio_bvec 하나가 물리적으로 연속적인 여러개의 페이지를 담을 수 있게 해서 block layer 의 효율성을 높이기 위한 시도입니다.\n[PATCH] aio: Convert ioctx_table to XArray https://lkml.kernel.org/r/20181128183531.5139-1-willy@infradead.org\naio 쪽의 ioctx_table 이라는 자료구조가 스펙터에 취약한 자료구조인데, 인덱스 오버플로 문제가 없는 XArray 로 교체하는 패치입니다. 정말 코드가 깔끔해지는군요.\n[PATCH 0/4][V4] drop the mmap_sem when doing IO in the fault path https://lkml.kernel.org/r/20181130195812.19536-1-josef@toxicpanda.com\nps 등의 도구를 사용해 시스템 상황을 모니터링하는 커다란 어플리케이션을 사용 중인데, 이 과정에서 다른 task 의 mmap_sem 을 down_read() 해야 하는 경우가 종종 생긴다는군요. 문제는 이 mmap_sem 의 쓰기 권한을 얻어오는 과정이 사실상 mutex 와 동일하니 레이턴시가 크게 늘어날 때가 종종 생긴다고 합니다. 이 문제를 해결하기 위해 retry 메커니즘을 적용하는 패치셋입니다.\n[PATCH v2 0/9] Use vm_insert_range https://lkml.kernel.org/r/20181202061707.GA3070@jordon-HP-15-Notebook-PC\n드라이버가 자신의 커널 메모리를 사용자 vma 로 매핑하는 방법은 vm_insert_page() 를 사용하는 방식이었고, 여러 페이지를 매핑하려면 이 함수를 루프를 돌면서 수행해야 했는데요, 이게 좀 귀찮으므로 아예 vm_insert_range() 라는 함수를 추가한 패치입니다.\nLinux 4.20-rc5 https://lkml.kernel.org/r/CAHk-=wizcNrsoyCM1EXQqoswMCYsJaby2iAkZb9wBAzDEhvxNg@mail.gmail.com\n벌써 다섯번째 rc 릴리즈이므로 변경내용이 줄어들어야 할 타이밍이지만, 이상하게도 이번 릴리즈는 -rc1 을 제외하고는 가장 변경이 큰 릴리즈라는군요. 게다가 arch 쪽 변경사항이 꽤 많은데, 아마도 STIPB 쪽 성능 리그레션 때문인 것으로 보인다고 합니다. 아무튼 일반적인 모습은 아니다보니 릴리즈 일정이 변경될 가능성이 생겼는데요, 너무 미루면 연말연초 휴일에 머지 윈도우가 겹치게 되는데 토발즈는 휴일 동안 머지 윈도우 관리하기 싫고, 그렇다고 더 미루면 토발즈도 1월 후반에 여행 갈거고, 남들도 휴일에 머지 윈도우를 준비하기가 싫을 거라 고민이라 하는군요.\n결국 일단은 크리스마스 직전 쯤 4.20 을 릴리즈 하고, 남들도 머지 윈도우 준비를 그 전까지 마치는 걸 제안하고 있습니다. 물론, rc6 에서도 변경사항이 충분히 줄어들지 않는다면 릴리즈 일정은 더 늦춰질 수 있겠죠.\n","date":1543446841,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543446841,"objectID":"50a3b315d5ecd54cd03347e204aebb7d","permalink":"/post/lkml_news_v4.20-rc5/","publishdate":"2018-11-29T08:14:01+09:00","relpermalink":"/post/lkml_news_v4.20-rc5/","section":"post","summary":"[PATCH V12 00/20] block: support multi-page bvec https://lkml.kernel.org/r/20181126021720.19471-1-ming.lei@redhat.com\nstruct bio_bvec 하나가 물리적으로 연속적인 여러개의 페이지를 담을 수 있게 해서 block layer 의 효율성을 높이기 위한 시도입니다.\n[PATCH] aio: Convert ioctx_table to XArray https://lkml.kernel.org/r/20181128183531.5139-1-willy@infradead.org\naio 쪽의 ioctx_table 이라는 자료구조가 스펙터에 취약한 자료구조인데, 인덱스 오버플로 문제가 없는 XArray 로 교체하는 패치입니다. 정말 코드가 깔끔해지는군요.\n[PATCH 0/4][V4] drop the mmap_sem when doing IO in the fault path https://lkml.kernel.org/r/20181130195812.19536-1-josef@toxicpanda.com\nps 등의 도구를 사용해 시스템 상황을 모니터링하는 커다란 어플리케이션을 사용 중인데, 이 과정에서 다른 task 의 mmap_sem 을 down_read() 해야 하는 경우가 종종 생긴다는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News by 4.20-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH -V7 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181120085449.5542-1-ying.huang@intel.com\nTransparent Huge Page 를 쪼개지 않고 swap out / swap in 함으로써 스왑 성능을 최적화 하는 패치의 일곱번째 버전입니다. 이 블로그에서도 소개한 바 있죠. 크게 바뀐 부분은 없지만 최신 버전에 맞춰 리베이스 되었고, Daniel 에 의해 발견된 주소 정렬 관련 문제를 해결했군요.\n[PATCH 0/5] Fragmentation avoidance improvements v5 https://lkml.kernel.org/r/20181123114528.28802-1-mgorman@techsingularity.net\n시스템이 충분히 오래 운영되거나 특정한 패턴의 워크로드가 동작하게 되면 시스템의 메모리는 fragment 되게 마련이어서, 장기적으로 물리적 연속 페이지 할당이 실패하게 됩니다. 이 패치셋은 메모리 분절화를 야기하는 워크로드 (이벤트)를 정의하고 그런 이벤트의 발생을 줄이는 내용을 담고 있습니다.\n최적화 방법은 다음과 같습니다. 먼저, lower id free list 가 사용 가능하면 high order free list 를 쪼개기보다 그걸 먼저 사용합니다. 메모리 분절화 이벤트가 발생하면 임시적으로 워터마크를 높입니다. kswapd 가 일어나서 적은양의 오래된 메모리를 리클레임하고, 이어서 kcompactd 가 일어나서 시스템 메모리 연속성을 복구시킵니다. 물론 이는 오버헤드를 추가합니다. 마지막으로, kswapd 가 진전을 일으킬 수 있도록 일부 movable 페이지 할당을 기다리게 합니다. 이 기다리는 시간 역시 오버헤드와 연관되므로 적절히 맞춰질 필요가 있겠죠.\n이 패치셋을 적용한 결과 94% 이상 메모리 분절화를 줄일 수 있었다고 합니다.\n[GIT PULL] XArray updates https://lkml.kernel.org/r/20181124173209.GZ3065@bombadil.infradead.org\nXArray 는 작년 OSSummit 에서 처음 발표를 들은 후 주의 깊게 보고 있었는데 이번에 머지되었고 커널 서밋에서도 발표를 들었는데 매우 인상적이었습니다. DAX 가 XArray 를 사용하도록 수정한 후 DAX 의 버그가 발견되었고, 그에 대한 수정을 포함한 수정사항들을 담은 풀 리퀘스트입니다.\nLinux 4.20-rc4 https://lkml.kernel.org/r/CAHk-=wgdsXyCaLsFEpyUpAeRqVS69u=xo4rzEN+cS=xwz2gajg@mail.gmail.com\n4.x 의 마지막이 될 예정인 4.20을 향한 네번째 rc 버전 릴리즈입니다. 변경의 60 퍼센트가 드라이버고, 나머진 네트워킹, 파일시스템쪽 수정과 arch, 문서화 업데이트고 xarray 쪽 수정도 있었군요. 평소와 다를바 없어서 평이한 릴리즈라 할 수 있지만, STIBP 수정이라던지 mm 쪽 수정에 대한 논의가 안끝났다던지 하는 부분은 남아있다는군요.\n한가지 지난 릴리즈 때 이야기 할 것을 빼먹은 것도 이야기 하는데, 풀 리퀘스트에 대한 응답 메일을 Konstantin 이 자동화 했기 때문에 더이상 토발즈 자신이 하나하나 답장을 보내지 않는다는 겁니다. 그리고 이 자동화의 구성상 LKML 의 linux-* 그룹을 cc 하지 않으면 ack 을 주지 않는데, 그걸로 인해 혼동이 있을 수 있었겠다고 하는군요.\n","date":1543187200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543187200,"objectID":"92025415f4b20ff27f8bc185380c1179","permalink":"/post/lkml_news_v4.20-rc4/","publishdate":"2018-11-26T08:06:40+09:00","relpermalink":"/post/lkml_news_v4.20-rc4/","section":"post","summary":"[PATCH -V7 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181120085449.5542-1-ying.huang@intel.com\nTransparent Huge Page 를 쪼개지 않고 swap out / swap in 함으로써 스왑 성능을 최적화 하는 패치의 일곱번째 버전입니다. 이 블로그에서도 소개한 바 있죠. 크게 바뀐 부분은 없지만 최신 버전에 맞춰 리베이스 되었고, Daniel 에 의해 발견된 주소 정렬 관련 문제를 해결했군요.\n[PATCH 0/5] Fragmentation avoidance improvements v5 https://lkml.kernel.org/r/20181123114528.28802-1-mgorman@techsingularity.net\n시스템이 충분히 오래 운영되거나 특정한 패턴의 워크로드가 동작하게 되면 시스템의 메모리는 fragment 되게 마련이어서, 장기적으로 물리적 연속 페이지 할당이 실패하게 됩니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.20-rc3 https://lkml.kernel.org/r/CAHk-=wiZmPvR64hDy-pcVJqcxoAwMRd4GrRhRjK04Mhng4nL4g@mail.gmail.com\n리누스 토발즈의 개인적 여행이 있었다는 점을 제외하고는 이상할 것 없는 한주였습니다만, 이번 릴리즈의 변경 사항은 rc3 치고는 상당히 적었다고 하는군요.\n","date":1542613984,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542613984,"objectID":"003bd493ed6fc7dc406e0d812366c6d3","permalink":"/post/lkml_news_v4.20-rc3/","publishdate":"2018-11-19T16:53:04+09:00","relpermalink":"/post/lkml_news_v4.20-rc3/","section":"post","summary":"Linux 4.20-rc3 https://lkml.kernel.org/r/CAHk-=wiZmPvR64hDy-pcVJqcxoAwMRd4GrRhRjK04Mhng4nL4g@mail.gmail.com\n리누스 토발즈의 개인적 여행이 있었다는 점을 제외하고는 이상할 것 없는 한주였습니다만, 이번 릴리즈의 변경 사항은 rc3 치고는 상당히 적었다고 하는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"[PATCH 0/5] Fragmentation avoidance improvements v2 https://lkml.kernel.org/r/20181107183822.15567-1-mgorman@techsingularity.net\n장시간 운영되는 시스템은 결국 메모리가 단편화 (fragmentation) 되게 되어 있습니다. 페이징을 사용하면 단일 페이지 단위 할당은 문제가 없지만, 물리적으로 연속적인 페이지를 할당받기가 어려워지죠. Mel Gorman 의 이 패치는 이런 메모리 분절화를 좀 더 잘 막을 수 있는 방법을 포함하고 있습니다.\n첫번째 패치는 단일 페이지 또는 적은 물리적 연속 페이지들의 할당 시에 불필요하게 higher order free page zone 을 사용하지 않게 하고, 두번째와 세번째 패치는 kswapd 와 kcompactd 를 사용한 defragmentation 을 좀 더 적극적으로 하게 합니다. 네번째 패치는 movable allocation request 시에 kswapd 를 또 깨우고, kswapd 가 일을 마칠 때까지 멈춰서 기다려 줍니다. 마지막으로 다섯번째 패치는 분절화가 발생해야만 하는 경우, kcompactd 가 처리할 블록들로 해당 분절된 영역을 마크해 둡니다.\n물론 분절화를 막는 대신 오버헤드를 가져올 수 있겠고, Mel 은 이 기능들을 tuning 하거나 꺼버릴 수 있게 했군요.\n[PATCH 0/4] Fragmentation avoidance improvements v3 https://lkml.kernel.org/r/20181108091218.32715-1-mgorman@techsingularity.net\nMel 의 분절화 방지 패치셋은 오버헤드를 가질 수밖에 없었죠. 결국 얼마 되지 않아 세번째 버전의 패치셋[1]을 내놓았는데, 여기선 다섯번째 패치를 걍 없애버렸고, 네번째 패치도 그 오버헤드가 덜하게끔 만들었습니다.\n[RFC PATCH] mm: thp: implement THP reservations for anonymous memory https://lkml.kernel.org/r/1541746138-6706-1-git-send-email-anthony.yznaga@oracle.com\nTransparent huge page (THP) 가 켜져 있는 경우, promotion 이 꽤나 급하게 이루어지기 때문에 huge page 를 할당받고는 정작 그 영역을 모두 접근하지 않는 경우엔 메모리 소모가 큽니다. 기존에 이 문제를 해결하기 위한 패치가 있었는데, 그에 대해 Mel Gorman 의 피드백이 있었고, 이 패치는 그 피드백을 받아들여 새로 작성된 패치셋입니다.\nPage fault 가 날 경우 huge page 를 할당할 수 있는 양의 페이지를 할당받되 페이지 한개만 map 해두고 나머지는 reserve 를 해두고, 이후 주변 영역에 fault 가 날 때마다 나머지 페이지들을 계속 map 해주다가 충분히 많은 영역이 fault 났을 경우에 huge page 로 promote 를 해주고, 그 전에 memory pressure 가 발생하면 reserve 해둔 페이지들을 reclaim 하는 형태입니다.\n[PATCH tip/core/rcu 0/20] Documentation updates for v4.21/v5.0 https://lkml.kernel.org/r/20181111195619.GA6958@linux.ibm.com\nRCU 문서 업데이트 패치셋입니다. 생각해 보면 리눅스 커널만큼 문서화 잘 된 프로젝트도 드물죠.\n[PATCH tip/core/rcu 0/8] Automate initrd generation for v4.21/v5.0 https://lkml.kernel.org/r/20181111200127.GA9511@linux.ibm.com\nRCU 테스트 프레임웍인 rcutorture 는 가상머신 환경을 사용하는데, 이를 위한 initrd 생성을 자동화 하는 패치셋입니다.\nLinux v4.20-rc2 https://lkml.kernel.org/r/R7SW0SuwOMMMyRgTFGA@mail.gmail.com\n토발즈가 여행 중이란 걸 제외하고는 별 특이사항 없는 두번째 rc 버전 릴리즈입니다.\n","date":1541979021,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541979021,"objectID":"b7dd5e2a6b9d70c0cd2468462e9c8265","permalink":"/post/lkml_news_v4.20-rc2/","publishdate":"2018-11-12T08:30:21+09:00","relpermalink":"/post/lkml_news_v4.20-rc2/","section":"post","summary":"[PATCH 0/5] Fragmentation avoidance improvements v2 https://lkml.kernel.org/r/20181107183822.15567-1-mgorman@techsingularity.net\n장시간 운영되는 시스템은 결국 메모리가 단편화 (fragmentation) 되게 되어 있습니다. 페이징을 사용하면 단일 페이지 단위 할당은 문제가 없지만, 물리적으로 연속적인 페이지를 할당받기가 어려워지죠. Mel Gorman 의 이 패치는 이런 메모리 분절화를 좀 더 잘 막을 수 있는 방법을 포함하고 있습니다.\n첫번째 패치는 단일 페이지 또는 적은 물리적 연속 페이지들의 할당 시에 불필요하게 higher order free page zone 을 사용하지 않게 하고, 두번째와 세번째 패치는 kswapd 와 kcompactd 를 사용한 defragmentation 을 좀 더 적극적으로 하게 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc2","type":"post"},{"authors":null,"categories":["talks"],"content":"지난 토요일, Theodore Ts\u0026rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.\n[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html\n","date":1541625108,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541625108,"objectID":"75589f992f285bc285e8074cf85f352a","permalink":"/post/ksummit2018_talk/","publishdate":"2018-11-08T06:11:48+09:00","relpermalink":"/post/ksummit2018_talk/","section":"post","summary":"지난 토요일, Theodore Ts\u0026rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.\n[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html","tags":["linux","kernel","conference","kernel summit","ksummit","lpc","lpc2018"],"title":"I will have a talk at the kernel summit","type":"post"},{"authors":null,"categories":["linux kernel"],"content":"리눅스 커널은 Formalised and executable memory consistent model 을 제공합니다. 줄여서 linux kernel memory model (LKMM) 이라고 하죠. 이 글은 4.19 버전을 기준으로 LKMM 을 실제로 수행해 보기 위한 환경 셋업 과정과 간단한 실행 방법을 정리해 봅니다. 글 작성을 위한 테스트는 Ubuntu 16.04 서버가 설치된 가상머신에서 진행되었습니다.\nherd7 install LKMM 은 버전 7.49 의 \u0026ldquo;herd7\u0026rdquo; 과 \u0026ldquo;klitmus7\u0026rdquo; 을 필요로 합니다. 하지만 herd7 은 또 Ocaml 을 위한 패키지 매니저인 OPAM 을 설치할 것을 필요로 하죠. 우분투에선 패키지 시스템이 OPAM 을 지원하므로 아래와 같이 쉽게 설치할 수 있습니다:\n$ sudo apt install opam $ opam init $ sudo opam update $ sudo opam upgrade 두번째 커맨드 수행 중 다음과 같은 질문이 나오는데, 디폴트 선택을 주기 위해 그냥 엔터를 칩니다:\nDo you want OPAM to modify ~/.profile and ~/.ocamlinit? (default is 'no', use 'f' to name a file other than ~/.profile) [N/y/f] 또한 update 와 upgrade 명령 시에 root 권한으로 이 커맨드를 수행하는 걸 권장하지 않는다고 하지만 정작 sudo 없이 하면 권한 없어서 실패합니다.\n이제 다음 명령을 통해 herdtools 의 빌드와 설치를 진행합니다.\n$ git clone https://github.com/herd/herdtools7 \u0026amp;\u0026amp; cd herdtools7 $ git checkout 7.49 $ make all $ make install 빌드에 약 3분 10여초가 소요됐습니다. 설치가 잘 되었는지 아래와 같이 확인해 봅니다:\n$ herd7 -version 7.49, Rev: 93dcbdd89086d5f3e981b280d437309fdeb8b427 LKMM Download LKMM 은 리눅스 소스 트리의 tools/memory-model/ 디렉토리에 있습니다. https://kernel.org 에서 다운받거나 해서 사용하면 됩니다.\n$ ls ~/linux/tools/memory-model/ Documentation linux-kernel.cat linux-kernel.def lock.cat scripts linux-kernel.bell linux-kernel.cfg litmus-tests README Herd7 Based Litmus Tests Execution $ herd7 -conf linux-kernel.cfg litmus-tests/SB+fencembonceonces.litmus Test SB+fencembonceonces Allowed States 3 0:r0=0; 1:r0=1; 0:r0=1; 1:r0=0; 0:r0=1; 1:r0=1; No Witnesses Positive: 0 Negative: 3 Condition exists (0:r0=0 /\\ 1:r0=0) Observation SB+fencembonceonces Never 0 3 Time SB+fencembonceonces 0.01 Hash=d66d99523e2cac6b06e66f4c995ebb48 Klistmus7 Based Litmus Tests Execution $ mkdir klitmus_test $ klitmus7 -o klitmus_test/ litmus-tests/SB+fencembonceonces.litmus $ cd klitmus_test/ $ ls $ make $ sudo sh run.sh $ sudo sh ./run.sh [sudo] password for sjpark: Thu Nov 8 04:55:44 KST 2018 Compilation command: klitmus7 -o klitmus_test/ litmus-tests/SB+fencembonceonces.litmus OPT= uname -r=4.19.0 Test SB+fencembonceonces Allowed Histogram (3 states) 16580117:\u0026gt;0:r0=1; 1:r0=0; 16402936:\u0026gt;0:r0=0; 1:r0=1; 3016947 :\u0026gt;0:r0=1; 1:r0=1; No Witnesses Positive: 0, Negative: 36000000 Condition exists (0:r0=0 /\\ 1:r0=0) is NOT validated Hash=d66d99523e2cac6b06e66f4c995ebb48 Observation SB+fencembonceonces Never 0 36000000 Time SB+fencembonceonces 1.40 Thu Nov 8 04:55:45 KST 2018 ","date":1541619042,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541619042,"objectID":"da53ddec6ebded2e9820820c6ab39c88","permalink":"/post/lkmm-install/","publishdate":"2018-11-08T04:30:42+09:00","relpermalink":"/post/lkmm-install/","section":"post","summary":"리눅스 커널은 Formalised and executable memory consistent model 을 제공합니다. 줄여서 linux kernel memory model (LKMM) 이라고 하죠. 이 글은 4.19 버전을 기준으로 LKMM 을 실제로 수행해 보기 위한 환경 셋업 과정과 간단한 실행 방법을 정리해 봅니다. 글 작성을 위한 테스트는 Ubuntu 16.04 서버가 설치된 가상머신에서 진행되었습니다.\nherd7 install LKMM 은 버전 7.49 의 \u0026ldquo;herd7\u0026rdquo; 과 \u0026ldquo;klitmus7\u0026rdquo; 을 필요로 합니다. 하지만 herd7 은 또 Ocaml 을 위한 패키지 매니저인 OPAM 을 설치할 것을 필요로 하죠.","tags":["linux","kernel","parallel programming","memory model"],"title":"LKMM Setup and Usage","type":"post"},{"authors":null,"categories":["lkml news"],"content":"리눅스 4.19 버전 릴리즈 후부터 4.20-rc1 버전의 릴리즈까지 LKML 에 오간 메일 중 흥미로운 메일들을 소개합니다.\n[RFC PATCH v4 00/13] ktask: multithread CPU-intensive kernel work https://lkml.kernel.org/r/20181105165558.11698-1-daniel.m.jordan@oracle.com\nCPU intensive 한 커널의 일을 여러 work queue 를 이용해 병렬화 시키기 위한 새로운 프레임웍, ktask 구현 및 적용 패치입니다. 이 프레임웍을 이용해 병렬화 시킬 일은 여러가지가 있을텐데, 이 패치는 ktask 프레임웍의 구현과 함께 VFIO 페이지 pinning, 부팅 시점에서의 struct page 초기화, gigantic page 의 초기화, 그리고 HugeTLB 페이지의 할당에 ktask 를 적용하고 있습니다.\n예전에도 올라온 패치인데 이번에 Linux Plumbers Conference 에서 발표할 예정이기에 기존 피드백을 반영한 버전을 올렸군요.\n[PATCH 0/9] Allow persistent memory to be used like normal RAM https://lkml.kernel.org/r/20181022201317.8558C1D8@viggo.jf.intel.com\n기존의 메인 메모리로 쓰이는 DRAM 과 달리 파워가 꺼져도 내용이 날아가지 않는 메모리를 Non-volatile memory 또는 persistent memory 라 하죠. 최근 들어서는 정말 상용으로도 나오고 있는데, 현재로썬 이 pmem 을 쓰려면 어플리케이션을 고쳐야 합니다.\n이 패치는 그러지 않고도 일반 RAM 처럼 pmem 을 사용할 수 있도록 하는 pmem 용 드라이버를 구현했습니다.\n[GIT PULL] XArray for 4.20 https://lkml.kernel.org/r/20181023200825.GA25444@bombadil.infradead.org\n이 블로그에서도 여러번 소개한, XArray 의 4.20 버전을 향한 pull request 입니다. 4.19 때도 시도했지만 들어가지 못했죠.\n이번엔 일단 토발즈에 의해 pull 되었습니다. 그리고 토발즈도 XArray 의 인터페이스 덕에 코드가 한결 간결하고 깔끔해졌음을 이야기 하네요. 특히, dax 쪽 수정사항과 conflict 이 있었는데 이는 dax 쪽의 버그 수정에 의한 것으로, XArray 인터페이스를 쓰면 애초에 그 버그가 발생도 안한다고 합니다.\nLinux 4.20-rc1 https://lkml.kernel.org/r/CAHk-=whDiwASMgw8Q7TNA2MJhf3s=ouK4+_3ioqmobs-yagnkQ@mail.gmail.com\n오랫만에 토발즈가 하는 릴리즈입니다. 3.19 다음 4.0 버전이 릴리즈 되었으니 이번 버전은 5.0 이 될 것인지, 4.20 이 될 것인지 흥미진진한 릴리즈였는데요. 결론적으로 4.20 이 되었습니다. 이제 버전을 셀 손가락도 발가락도 남지 않았으므로 다음 버전은 5.0 이 될 거라고 하는군요.\n꽤 많은 변경 사항이 있던 머지 윈도우였지만 그렇다고 기록적인 수준은 아닙니다.\n한편 2주일로 예정되는 머지 윈도우에서 첫번째 주에는 일반적인 풀리퀘스트를 받고, 좀 시간을 두고 들여다봐야 하겠다 싶은 패치들은 두번째 주까지 미뤄뒀다 천천히 보면서 머지하는게 토발즈의 작업 습관이고 다른 메인테이너들도 이 습관을 알고 암묵적으로 지켜왔던 모양인데, 이번엔 두번째 주 수요일에 새로운 풀 리퀘스트가 들어와 토발즈가 조금 불편했던 모양입니다.\n이걸 명시적인 규칙으로 만들어야 할지도 모르겠다 싶기 시작했는데, 빈번하게 있는 일도 아니므로 아직은 그래야 할 필요성이 있을지도 모르겠다 하는 수준의 이야기군요.\n그리고 이번 머지 윈도우에서는 Greg 이 그랬던 것처럼 토발즈도 풀리퀘스트에 ack 메일을 보냈었죠. 이런 작업 방식에 대해서 고민을 하는 이야기도 있었구요. 하지만 아무래도 몇개는 빼먹은 것 같다고 하는군요. 이런 경우 결론은 자동화. 다음 머지 윈도우까지는 이 ack 메일을 자동화 되길 바란다고 하네요. 물론, 토발즈의 바람대로 자동화가 잘 마무리 되지 않으면 운좋게도 토발즈로부터의 ack 메일을 받을 수 있겠습니다.\n","date":1541569436,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541569436,"objectID":"f5df1d25678b8cf1c0dd454e75cdcfb5","permalink":"/post/lkml_news_v4.20-rc1/","publishdate":"2018-11-07T14:43:56+09:00","relpermalink":"/post/lkml_news_v4.20-rc1/","section":"post","summary":"리눅스 4.19 버전 릴리즈 후부터 4.20-rc1 버전의 릴리즈까지 LKML 에 오간 메일 중 흥미로운 메일들을 소개합니다.\n[RFC PATCH v4 00/13] ktask: multithread CPU-intensive kernel work https://lkml.kernel.org/r/20181105165558.11698-1-daniel.m.jordan@oracle.com\nCPU intensive 한 커널의 일을 여러 work queue 를 이용해 병렬화 시키기 위한 새로운 프레임웍, ktask 구현 및 적용 패치입니다. 이 프레임웍을 이용해 병렬화 시킬 일은 여러가지가 있을텐데, 이 패치는 ktask 프레임웍의 구현과 함께 VFIO 페이지 pinning, 부팅 시점에서의 struct page 초기화, gigantic page 의 초기화, 그리고 HugeTLB 페이지의 할당에 ktask 를 적용하고 있습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News by v4.20-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19 https://lkml.kernel.org/r/20181022073224.GA5658@kroah.com\n드디어 9 주간의 안정화를 거쳐 4.19 버전이 릴리즈 되었습니다. 역시 토발즈가 쉬고 있는 관계로 Greg KroahHartman 이 릴리즈 했습니다. 지난 네번의 릴리즈 가운데 가장 큰 릴리즈군요. 그리고 이 버전은 \u0026ldquo;Long Tern\u0026rdquo; 커널 중 하나가 될 예정입니다.\n이번 릴리즈 메일은 토발즈가 잠시 쉬겠다고 했던 메일을 연상케 할정도로 내용이 긴데요, 꽤 많은 부분은 이번 버전 개발 과정에서 이야기 되었던, 새로운 커뮤니티 참여자들과의 관계와 태도에 대한 내용입니다. Greg 이 매년 발표하고 있는 커널 커뮤니티의 작업 방식 이야기를 예로 들며 설명하네요. 관련해서는 다음주 영국에서 열리는 Maintainers Summit 에서도 좀 더 이야기 할 생각인가 봅니다.\n그리고, 릴리즈 메일의 말미에서 이렇게 이야기 하며 릴리즈 메일을 끝맺는군요:\nAnd with that, Linus, I'm handing the kernel tree back to you. You can have the joy of dealing with the merge window :) 토발즈가 돌아오려나요? 아니면 새로운 대리인이?\nGit pull ack emails.. https://lkml.kernel.org/r/CAHk-=wjS6cjjP+fkZWzzrdZ_fZ1F=PrAGcBc57vKCpNyoD73Vw@mail.gmail.com\n앞서 4.19 릴리즈와 함께 Greg 이 토발즈의 대리인을 그만두기로 했다고 했지만, 그에 대한 토발즈의 공식적 답변은 없었습니다. 때문에 토발즈가 돌아오는건지, 또는 Greg 이 아닌 또다른 사람이 릴리즈 관리를 할지 애매했는데, 토발즈가 돌아왔습니다.\n이 메일을 이렇게 시작하는군요:\n So I\u0026rsquo;ve obviously started pulling stuff for the merge window,\n 마침 Maintainers Summit 이 있었으니, 거의 Summit 직후 돌아왔다고 볼 수 있을 것 같네요.\n이 메일에선 이와 함께 Greg 이 pull request 마다 꼬박꼬박 응답을 보내줬던 걸 지속할지 말지에 대한 이야기를 하고 있습니다. 토발즈는 풀 리퀘스트를 받으면 일단 빌드 테스트를 진행하고, 그동안 다른 풀 리퀘스트를 보고 그 빌드 테스트도 병렬로 진행하는 파이프라인 형태의 작업 형태를 가지고 있는데, Greg 처럼 하나하나 순차적으로 응답하려면 좀 애매하기 때문입니다. 일단은 응답 보내보고, 그게 정말 중요한지 판단해 보겠다는군요.\n아무튼, 잘 돌아왔어요, 리누스!\n","date":1540197908,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540197908,"objectID":"15c2051972a0ffedda459ee2c4470cfe","permalink":"/post/lkml_news_v4.19/","publishdate":"2018-10-22T17:45:08+09:00","relpermalink":"/post/lkml_news_v4.19/","section":"post","summary":"Linux 4.19 https://lkml.kernel.org/r/20181022073224.GA5658@kroah.com\n드디어 9 주간의 안정화를 거쳐 4.19 버전이 릴리즈 되었습니다. 역시 토발즈가 쉬고 있는 관계로 Greg KroahHartman 이 릴리즈 했습니다. 지난 네번의 릴리즈 가운데 가장 큰 릴리즈군요. 그리고 이 버전은 \u0026ldquo;Long Tern\u0026rdquo; 커널 중 하나가 될 예정입니다.\n이번 릴리즈 메일은 토발즈가 잠시 쉬겠다고 했던 메일을 연상케 할정도로 내용이 긴데요, 꽤 많은 부분은 이번 버전 개발 과정에서 이야기 되었던, 새로운 커뮤니티 참여자들과의 관계와 태도에 대한 내용입니다. Greg 이 매년 발표하고 있는 커널 커뮤니티의 작업 방식 이야기를 예로 들며 설명하네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.19-rc8 https://lkml.kernel.org/r/20181015064915.GA10710@kroah.com\n여덟번째 rc 버전입니다. 여전히 그렉이 릴리즈 하는군요. 여덟번째 rc 인만큼, 큰 변화는 없었고, 대부분 앞서 고친 것들에 대한 수정이었군요. 아마도 다음주에는 예상대로 4.19 버전이 나올 것 같다고 합니다.\n[RFC v4 PATCH 0/5] Eliminate zone-\u0026gt;lock contention for will-it-scale/page_fault1 and parallel free https://lkml.kernel.org/r/20181017063330.15384-1-aaron.lu@intel.com\n4 KB 크기 페이지를 위한 will-it-scale/page_fault1 워크로드를 2 소켓 112 코어 인텔 스카이레이크 서버에서 돌려보면 80% 의 CPU 시간이 zone-\u0026gt;lock 을 기다리는데 소모된다고 합니다. 이는 struct page 의 캐시 미스 때문이라는군요. 이 패치셋은 이런 zone-\u0026gt;lock 오버헤드를 없애기 위한 RFC 입니다.\n일단 버디 얼로케이터에서 4 KB 크기 페이지의 머지를 건너뛰게 했는데, 이것만으로도 상기한 워크로드에서 zone-\u0026gt;lock 소모시간이 35% 에서 1.1% 로 줄었다는군요.\n다음으로 페이지 할당 과정에서 free_list 의 페이지들을 하나씩 만지지 않고 cluster 단위로 만지게 해서 zone-\u0026gt;lock 오버헤드를 거의 없앴습니다. 하지만 이 cluster 단위 관리로 인한 오버헤드가 페이지 해제 과정에서의 zone-\u0026gt;lock 경쟁을 0% 에서 25% 까지 증가시켰습니다. 하지만 이어지는 최적화로 이 증가된 오버헤드도 없앴군요.\n","date":1539586757,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539586757,"objectID":"54dd9a24a773fe946f5d6bf9b320547c","permalink":"/post/lkml_news_v4.19-rc8/","publishdate":"2018-10-15T15:59:17+09:00","relpermalink":"/post/lkml_news_v4.19-rc8/","section":"post","summary":"Linux 4.19-rc8 https://lkml.kernel.org/r/20181015064915.GA10710@kroah.com\n여덟번째 rc 버전입니다. 여전히 그렉이 릴리즈 하는군요. 여덟번째 rc 인만큼, 큰 변화는 없었고, 대부분 앞서 고친 것들에 대한 수정이었군요. 아마도 다음주에는 예상대로 4.19 버전이 나올 것 같다고 합니다.\n[RFC v4 PATCH 0/5] Eliminate zone-\u0026gt;lock contention for will-it-scale/page_fault1 and parallel free https://lkml.kernel.org/r/20181017063330.15384-1-aaron.lu@intel.com\n4 KB 크기 페이지를 위한 will-it-scale/page_fault1 워크로드를 2 소켓 112 코어 인텔 스카이레이크 서버에서 돌려보면 80% 의 CPU 시간이 zone-\u0026gt;lock 을 기다리는데 소모된다고 합니다. 이는 struct page 의 캐시 미스 때문이라는군요.","tags":[],"title":"LKML News after v4.19-rc8","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc7 https://lkml.kernel.org/r/20181007154529.GA4493@kroah.com\n토발즈 없이 진행되는 4.19를 위한 일곱번째 rc 릴리즈입니다. 이번에도 그렉이 대신 하는군요. 이번 릴리즈는 후반부임에도 rc6 보다 조금 더 커졌습니다. 하지만 그렇게까지 큰 차이는 아니라고 하는군요.\n일반적이라면 다음 릴리즈가 4.19 정식 릴리즈일텐데, 10월에 컨퍼런스가 많이 있다보니 rc 릴리즈를 한번 더 할 생각이라는군요. 간만에 rc8 을 보겠습니다.\n[PATCH -V6 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181010071924.18767-1-ying.huang@intel.com\nTHP 를 한방에 swap out / swap in 하는 Huang Ying 의 패치, 여섯번째 버전입니다. 기존 버전 대비 달라진 점은 크지 않군요. 좀 더 최신 mmotm/master 위로 rebase 한 정도입니다.\n","date":1538952849,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538952849,"objectID":"ee3a395468a97a4725dbeaf9f47f3528","permalink":"/post/lkml_news_v4.19-rc7/","publishdate":"2018-10-08T07:54:09+09:00","relpermalink":"/post/lkml_news_v4.19-rc7/","section":"post","summary":"Linux 4.19-rc7 https://lkml.kernel.org/r/20181007154529.GA4493@kroah.com\n토발즈 없이 진행되는 4.19를 위한 일곱번째 rc 릴리즈입니다. 이번에도 그렉이 대신 하는군요. 이번 릴리즈는 후반부임에도 rc6 보다 조금 더 커졌습니다. 하지만 그렇게까지 큰 차이는 아니라고 하는군요.\n일반적이라면 다음 릴리즈가 4.19 정식 릴리즈일텐데, 10월에 컨퍼런스가 많이 있다보니 rc 릴리즈를 한번 더 할 생각이라는군요. 간만에 rc8 을 보겠습니다.\n[PATCH -V6 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20181010071924.18767-1-ying.huang@intel.com\nTHP 를 한방에 swap out / swap in 하는 Huang Ying 의 패치, 여섯번째 버전입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc6 https://lkml.kernel.org/r/20180930150308.GA5010@kroah.com\n이번주도 Greg 에 의해 여섯번째 rc 버전이 릴리즈 되었습니다. 평소 일정대로면 2주일 후 4.19 정식 버전이 릴리즈 될텐데, 아마도 그때까지도 Greg 이 릴리즈 하지 않을까 싶기도 하군요. 전체적으로 특이사항은 없고 Greg 의 시스템에서는 잘 동작하고 있으며 별다른 이슈를 보고받지도 못했다는군요.\n","date":1538364027,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538364027,"objectID":"0d53dd72a94afe5aca4233c8188cf92f","permalink":"/post/lkml_news_v4.19-rc6/","publishdate":"2018-10-01T12:20:27+09:00","relpermalink":"/post/lkml_news_v4.19-rc6/","section":"post","summary":"Linux 4.19-rc6 https://lkml.kernel.org/r/20180930150308.GA5010@kroah.com\n이번주도 Greg 에 의해 여섯번째 rc 버전이 릴리즈 되었습니다. 평소 일정대로면 2주일 후 4.19 정식 버전이 릴리즈 될텐데, 아마도 그때까지도 Greg 이 릴리즈 하지 않을까 싶기도 하군요. 전체적으로 특이사항은 없고 Greg 의 시스템에서는 잘 동작하고 있으며 별다른 이슈를 보고받지도 못했다는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc5 https://lkml.kernel.org/r/20180923175547.GA4462@kroah.com\n지난주 토발즈가 휴식을 선언한 이유로 한동안 릴리즈는 Greg 이 맡게 되었죠. 이번 릴리즈는 그래서 Greg 이 합니다.\n사회적으로야 이런저런 일이 많았지만 (토발즈의 휴가, Code of Conduct 머지에 관련해 갑론을박이 많군요.) 기술적으로는 별 일 없었던 한주라 평가되는군요.\n사소하지만 재밌는 건 Greg 의 자기 서명. greg \u0026quot;keeping the seat warm for a few weeks\u0026quot; k-h 라고 하는군요. 토발즈가 휴가 가있는 동안 의자를 뎁혀 두는 역할이라는 겸손함이 눈에 띄네요.\n[PATCH -V5 RESEND 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180925071348.31458-1-ying.huang@intel.com\nTHP 의 Swap in/out 을 regular page 로 쪼개지 않고 한방에 하는 패치의 최신 버전입니다\u0026hellip; 만, 기존 대비 버전업이 되진 않았고 리뷰를 요청하기 위해 다시 한번 보냈군요. 그런데 아직 별다른 리뷰가 없네요\u0026hellip;\n","date":1537751440,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537751440,"objectID":"d73f5cb97f3e4f45fae8ca1ff82af13e","permalink":"/post/lkml_news_v4.19-rc5/","publishdate":"2018-09-24T10:10:40+09:00","relpermalink":"/post/lkml_news_v4.19-rc5/","section":"post","summary":"Linux 4.19-rc5 https://lkml.kernel.org/r/20180923175547.GA4462@kroah.com\n지난주 토발즈가 휴식을 선언한 이유로 한동안 릴리즈는 Greg 이 맡게 되었죠. 이번 릴리즈는 그래서 Greg 이 합니다.\n사회적으로야 이런저런 일이 많았지만 (토발즈의 휴가, Code of Conduct 머지에 관련해 갑론을박이 많군요.) 기술적으로는 별 일 없었던 한주라 평가되는군요.\n사소하지만 재밌는 건 Greg 의 자기 서명. greg \u0026quot;keeping the seat warm for a few weeks\u0026quot; k-h 라고 하는군요. 토발즈가 휴가 가있는 동안 의자를 뎁혀 두는 역할이라는 겸손함이 눈에 띄네요.\n[PATCH -V5 RESEND 00/21] swap: Swapout/swapin THP in one piece https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc4 released, an apology, and a maintainership note https://lkml.kernel.org/r/CA+55aFy+Hv9O5citAawS+mVZO+ywCKd9NQ2wxUmGsz9ZJzqgJQ@mail.gmail.com\n한국시간 새벽 네시 좀 넘어 이 메일을 받았습니다. 평범한 릴리즈 메일이겠거니 했는데 제목이 뭔가 심상치 않군요.\n일단 4.19를 위한 네번째 release candidate 릴리즈가 되었습니다. 약 3주 후 정식 4.19 버전이 릴리즈 되겠군요. 하지만 이 메일은 그보다 많은 내용을 담고 있습니다.\n자유분방하고 형식에 구애되지 않는 해커 문화에 기원을 두고 있는 리눅스 커뮤니티는 조금 거친 언어 문화로 유명했습니다. 예를 들어 이상한 코드를 보내면 리누스 토발즈와 커뮤니티의 일부 사람들이 이 코드를 꾸짖을 수 있는데 그 과정에서 욕설도 있을 수 있다는 거죠. 어느새 5년이 넘게 흐른 사건이지만 토발즈는 공식석상에서 Nvidia 에 가운데 손가락을 펴서 보여주기도 했죠. 이로 인해 마음에 상처를 받았다는 사람도 꽤 되고, 7년간 리눅스에 패치를 올렸던 Sarah Sharp 라는 인텔의 프로그래머는 이를 이유로 들어 결국 리눅스 커뮤니티에서 빠지기로 해서[1] 한때 많은 논란이 있기도 했습니다. 당시 토발즈는 욕설을 멈출 생각이 없다고 강경하게 맞서기도 했죠[2].\n그랬던 토발즈가 생각이 바뀌었다고 합니다. 올해 커널 메인테이너 서밋은 Linux Plumbers Conference 와 함께 열릴 예정이었는데 토발즈가 그걸 깜박하고 가족 휴가를 잡는 바람에 토론이 있었고, 이 토론 과정에서 토발즈는 자신의 행위가 커널 개발에 정말로 악영향을 끼치고 있다고 느낀 것 같습니다. 이로 인해 토발즈는 이 메일을 통해 자신의 행위가 잘못되었음을 인정하고 그로 인해 상처 받은 사람들에게 공식적으로 사과를 하고 있습니다. 또한 앞으로 그런 행위를 반복하지 않기 위해 커널 개발에서 잠시 손을 떼고 거울 속의 자신을 바라보며 더 낫게 행동할 수 있도록 하는 시간을 갖겠다고 하는군요.\n리누스 토발즈가 커널 개발에서 손을 떼는건 과거 git 개발을 위해 손을 뗐던 사건[3] 후 처음입니다. 이 사이의 릴리즈 작업은 Greg Kroah-Hartman 에게 부탁했다고 하니 곧바로 전체 개발 작업이 멈추진 않겠습니다.\n이 휴식 시간이 아주 길지는 않을 거고, 토발즈 자신은 너무 지쳐 더이상 리눅스 커널 개발에 손을 데고 싶지 않다는 의도가 아니라고 합니다. 이건 얼마전 너무 지쳤다며 자비로운 종신 독재자 직을 그만둔 귀도 반 로썸의 예[4]와 비교되기도 하는군요, 토발즈도 이를 조금 의식한 거 아닐까 싶습니다. 토발즈는 자신은 여전히 리눅스 커널 개발을 하고 싶고, 잘하고 싶기 때문에 이 선택을 한 것 뿐이며, 어쩌면 단순히 욕설을 감지해 욕설이 포함된 메일은 자동으로 보내지 않는 메일 클라이언트를 개발하고 복귀하는 간단한 일이 될수도 있을 거라고 합니다.\n개인적인 감상은, 글쎄요. 조금 반갑기도 하고 조금 아쉽기도 합니다. 커널 커뮤니티가 거칠고 모욕적인건 사실이지만 어느정도의 긴장감은 필요하다고 생각하기도 했고, 어떤 면에선 더욱 자유분방한 그 분위기를 저는 좋아했던 것도 같아서일 겁니다. 특히 AOSP 와 같이 악플은 커녕 무플이 심한 프로젝트에 참여했던 경험이 있는 저로썬 무플보단 악플이 낫다는 주의를 가졌던 것도 한 이유겠죠. 분명한 건 이 선언은 리눅스 커뮤니티의 외연 확장을 크게 도울 것 같습니다. 그게 마냥 좋기만 한 일일지, 윤리에 대한 자기검열이 커뮤니티의 토론 열기를 식히지는 않을지 걱정되기도 하지만요. 그리고, 이 선언의 최종 결과가 어떨지를 떠나, 그정도 위치에 있고 과거에 뱉어놓은 말들이 많은 리누스 토발즈가 이렇게 깔끔하게 사과를 하는 것도 대단한 멘탈이라 생각됩니다.\n[1] http://sarah.thesharps.us/2013/07/15/no-more-verbal-abuse/\n[2] https://arstechnica.com/information-technology/2013/07/linus-torvalds-defends-his-right-to-shame-linux-kernel-developers/\n[3] https://sjp38.github.io/post/git_origin_story_ko/\n[4] https://www.i-programmer.info/news/216-python/11967-guido-van-rossum-quits-as-python-bdfl.html\n","date":1537138985,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537138985,"objectID":"4e99be9f56a739c92da988e4158d8cca","permalink":"/post/lkml_news_v4.19-rc4/","publishdate":"2018-09-17T08:03:05+09:00","relpermalink":"/post/lkml_news_v4.19-rc4/","section":"post","summary":"Linux 4.19-rc4 released, an apology, and a maintainership note https://lkml.kernel.org/r/CA+55aFy+Hv9O5citAawS+mVZO+ywCKd9NQ2wxUmGsz9ZJzqgJQ@mail.gmail.com\n한국시간 새벽 네시 좀 넘어 이 메일을 받았습니다. 평범한 릴리즈 메일이겠거니 했는데 제목이 뭔가 심상치 않군요.\n일단 4.19를 위한 네번째 release candidate 릴리즈가 되었습니다. 약 3주 후 정식 4.19 버전이 릴리즈 되겠군요. 하지만 이 메일은 그보다 많은 내용을 담고 있습니다.\n자유분방하고 형식에 구애되지 않는 해커 문화에 기원을 두고 있는 리눅스 커뮤니티는 조금 거친 언어 문화로 유명했습니다. 예를 들어 이상한 코드를 보내면 리누스 토발즈와 커뮤니티의 일부 사람들이 이 코드를 꾸짖을 수 있는데 그 과정에서 욕설도 있을 수 있다는 거죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc3 https://lkml.kernel.org/r/CA+55aFwSxCt0aKkTxcBstthYXqJ5LtxRbO-CDyqgNwU94Ldq+w@mail.gmail.com\n세번째 rc 릴리즈입니다. 어느새 이번 안정화 기간도 중반을 향하는군요. 시간 참 빠릅니다. 전체적으로 평범한 릴리즈입니다. 딱히 언급할 거리가 없군요.\n[RFC PATCH v2 0/8] lru_lock scalability and SMP list functions https://lkml.kernel.org/r/20180911004240.4758-1-daniel.m.jordan@oracle.com\n올해 LSF/MM 서밋에서도 이야기되었던, lru_lock 의 확장성을 개선하기 위한 노력의 정리입니다. LRU 리스트에 여러 쓰레드가 실제 데이터를 겹쳐 쓰지 않는다면 동시에 접근할 수 있는 새로운 오퍼레이션 세개 (smp_list_del(), smp_list_splice(), smp_list_add())을 추가했구요. 두번째로, lru_lock 을 spinlock 에서 rwlock 으로 교체했군요.\nwill-it-scale/page_fault1 이라는 마이크로 벤치마크를 사용해서 성능을 비교했는데, 44 코어 시스템에서 최대 73.8% 더 초당 페이지 폴트 처리량을 늘릴 수 있었다고 합니다.\n[RFC PATCH 0/9] Improve zone lock scalability using Daniel Jordan\u0026rsquo;s list work https://lkml.kernel.org/r/20180911053616.6894-1-aaron.lu@intel.com\n바로 앞에서 설명한, 여러 쓰레드가 동시에 리스트에 접근할 수 있도록 새로 만들어진 메커니즘은 zone lock 에도 도움이 될 수 있다고 LSF/MM 에서 여럿이 생각했다고 합니다. 이 패치셋은 실제로 이 기능들을 이용해 zone lock 의 확장성을 개선했습니다.\n[PATCH -V5 RESEND 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180912004414.22583-1-ying.huang@intel.com\nTHP 를 덩어리째 스왑아웃 / 스왑인 하기 위한 패치, 다섯번째 버전입니다. 생각보다 쉽게 머지되지 못하고 있군요. 리뷰가 많지 않은 것도 한 이유 아닐까 싶습니다.\n","date":1536613309,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536613309,"objectID":"ec6246bdfbd057bcc7c627bbc66f29c3","permalink":"/post/lkml_news_v4.19-rc3/","publishdate":"2018-09-11T06:01:49+09:00","relpermalink":"/post/lkml_news_v4.19-rc3/","section":"post","summary":"Linux 4.19-rc3 https://lkml.kernel.org/r/CA+55aFwSxCt0aKkTxcBstthYXqJ5LtxRbO-CDyqgNwU94Ldq+w@mail.gmail.com\n세번째 rc 릴리즈입니다. 어느새 이번 안정화 기간도 중반을 향하는군요. 시간 참 빠릅니다. 전체적으로 평범한 릴리즈입니다. 딱히 언급할 거리가 없군요.\n[RFC PATCH v2 0/8] lru_lock scalability and SMP list functions https://lkml.kernel.org/r/20180911004240.4758-1-daniel.m.jordan@oracle.com\n올해 LSF/MM 서밋에서도 이야기되었던, lru_lock 의 확장성을 개선하기 위한 노력의 정리입니다. LRU 리스트에 여러 쓰레드가 실제 데이터를 겹쳐 쓰지 않는다면 동시에 접근할 수 있는 새로운 오퍼레이션 세개 (smp_list_del(), smp_list_splice(), smp_list_add())을 추가했구요. 두번째로, lru_lock 을 spinlock 에서 rwlock 으로 교체했군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc3","type":"post"},{"authors":null,"categories":["linux-kernel-hack"],"content":"제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을 정리해 봅니다. 글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3 Server OS 를 설치한 x86_64 가상머신입니다.\nInstall Dependent Packages $ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \\ libelf-dev 커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠. 위 커맨드는 우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다. 커널 트리의 Documentation/process/changes.rst 에도 커널 빌드에 필요한 패키지들이 나열되어 있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.\n페도라라면 아래와 같이 패키지를 깔면 됩니다:\n$ sudo dnf install ncurses-devel bison-devel bison flex-devel flex \\ elfutils-libelf-devel openssl-devel Fetch Linux Kernel Source Code $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git 빌드를 하려면 소스코드를 가져와야죠. 위 커맨드를 통해 토발즈의 리눅스 소스코드를 가져올 수 있습니다. 네트워크를 통해 가져오는데, 소스코드는 물론이고 개발 이력 정보를 모두 담고 있으므로 많은 데이터를 가져와야해 시간이 상당히 걸립니다. 이 글을 쓰는 2018년 9월 초 기준, 버전정보만 약 1.2 GiB 군요.\n토발즈는 github 에 [미러] (https://github.com/torvalds/linux) 를 두고 있으므로, 여길 이용하는 것도 생각해 볼 수 있고, 굳이 버전 정보는 필요하지 않다면 [kernel.org] (https://kernel.org) 에서 tarball 로 소스코드만 받는것도 한 방법입니다.\n저는 아예 .git 디렉토리를 압축해서 별도 저장소에 보관하기도 합니다.\nMake Configuration File $ cd linux $ cp /boot/config-$(uname -r) ./.config $ make menuconfig 리눅스 빌드 설정 파일을 만들어야 합니다. 앞의 커맨드를 통해 배포판에서 제공한 커널을 빌드하는데 사용된 설정 파일을 기반으로 gui 환경에서 필요한 설정을 추가/제거 할 수 있습니다. 별달리 변경할 게 없다면 그냥 저장하고 나오면 됩니다.\n저는 빌드에 많은 시간이 걸리지 않고 저장 공간이 큰 시스템에서는 이 방법을 사용하고, 작은 가상머신 등의 환경에서는 localmodconfig 빌드 타겟을 사용해 가벼운 설정 파일을 만드는 편입니다.\nSeperated Build Directory 이렇게 빌드를 하면 컴파일된 파일들이 소스코드와 같은 디렉토리에 위치하게 되는데, grep 등을 할때 성가시고, 실수로 git 에 이렇게 만들어진 파일들을 추가하는 실수도 흔합니다. 리눅스 커널 빌드 시스템은 make 커맨드에 O 옵션을 제공하는데, 이 옵션의 인자로 빌드 디렉토리를 지정할 수 있습니다. 빌드 과정에서 만들어진 파일들은 이 디렉토리로 저장되므로, 소스코드 디렉토리를 깨끗하게 유지할 수 있습니다. 예를 들어 /foo 라는 디렉토리에 빌드 과정에서 만들어진 파일을 저장하고 싶다면 다음과 같습니다.\n$ make O=/foo menuconfig Build $ make -j $(grep \u0026quot;^processor\u0026quot; /proc/cpuinfo | wc -l) 이 커맨드는 리눅스 커널을 빌드합니다. 이 때 뒤의 -j 옵션을 통해 빌드 과정 작업을 한순간에 최대 몇개까지 수행해도 되는지 지정해주는데, 이 커맨드에선 빌드를 수행하는 시스템에 장착된 논리적 코어의 갯수를 줬습니다. 커널 빌드엔 긴 시간이 걸립니다. 프로세서 3개를 준 제 가상머신에서는 12분 30초 정도 걸렸군요. 이것도 localmodconfig 를 해줬기 때문이고, 이런저런 모듈 다 빌드하라고 했다면 훨씬 많이 걸렸을 겁니다.\nInstall $ sudo make modules_install install 이 커맨드는 빌드한 모듈들과 커널 자체를 설치합니다. 커널 빌드 시스템은 이 과정에서 가장 최신의 커널로 grub 의 디폴트 부트 대상도 바꿔줍니다. 이제 기계를 껐다 켜되, grub 등에서 부트할 커널 버전을 해당 버전으로 선택하면 빌드한 커널로 부팅됩니다. 현재 시스템이 사용중인 커널의 버전은 uname -r 로 알 수 있습니다.\nConclusion 이상으로 Ubuntu 16.04.3 을 기본으로 리눅스 커널을 빌드하고 설치하는 방법을 알아봤습니다. 총 일곱개의 커맨드 뿐. 쉽죠?\n","date":1536303623,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536303623,"objectID":"876e8b0280f5c17417ca3ea315ad0fe6","permalink":"/post/linux-kernel-build/","publishdate":"2018-09-07T16:00:23+09:00","relpermalink":"/post/linux-kernel-build/","section":"post","summary":"제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을 정리해 봅니다. 글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3 Server OS 를 설치한 x86_64 가상머신입니다.\nInstall Dependent Packages $ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \\ libelf-dev 커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠. 위 커맨드는 우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다. 커널 트리의 Documentation/process/changes.rst 에도 커널 빌드에 필요한 패키지들이 나열되어 있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.","tags":["linux","kernel","hack","development","setup"],"title":"Linux Kernel Build","type":"post"},{"authors":null,"categories":["chrome os"],"content":"크롬북을 구매했습니다. 구매 결정 과정부터 사용기까지 내용을 정리해볼까 합니다. 이번 글에서는 크롬북을 구매하기까지의 고민과 과정을 정리합니다.\n기본적으로 저는 글을 읽는걸 좋아하기도 하고 읽어야만 하기도 합니다. 그러다보니 여행을 가더라도 항상 어떤 책을 들고갈까 고르는게 설레기도 하지만 짜증나기도 하고, 마음만 앞서서 캐리어 무게를 책으로 꽉 채우기도 합니다. 그래서 예전부터 이북을 고려해 봤지만 너무 반응속도가 느리기도 하고 인쇄된 것에 비해선 가독성도 떨어지고 그 특유의 책을 넘겨가며 보는 반응은 아닌 것 같아 구매하지 않고 있었습니다. 하지만 슬슬 매번 책을 들고 다니는게 오히려 불편하다는 생각이 점점 늘어나고 있었습니다.\n한편으로는 랩톱만 들고 다니기에는 불편하다는 생각이 들었습니다. 저는 구글 핵페어에 출품을 하면서 넥서스7 1세대와 2세대를 얻게 되어 이 기기들을 사용해 왔습니다. 태블릿의 휴대성은 랩톱과 비교할 수 없는 것이었습니다. 특히 넥서스7 2세대는 해상도가 높아져 글을 읽기에도 편리했습니다. 다만, 7인치의 좁은, 특히 가로대비 세로가 매우 짧게 비디오에 특화된 화면비율은 많이 불편했습니다. 그래도 침대위 인터넷에는 쓸만했는데 작년 프라하에서 숙소에서 떨어뜨렸고, 디스플레이에 금이 가고 터치가 먹통이 되었습니다.\n있을 땐 그렇게 소중한지 몰랐지만 7인치짜리라도 태블릿이 없어지니 랩톱의 불편이 느껴졌습니다. 특히, 컨퍼런스 등에 가서 책상이 없는 자리에 앉을 때, 전원 플러그가 없을때 그렇습니다. 전력 등을 고려해 안쓰고 있을 때엔 랩톱을 닫고 있어야 하는데, 발표를 듣다가 뭔가 흥미로운 사이트 소개 등이 있어 잠시 인터넷을 하고 싶을때 랩톱을 열어야 합니다. 열고 나면 패스워드를 입력하거나 지문 인식을 해야 하는데, 이 짧은 인터럽트가 매우 불쾌하고 생각의 흐름을 끊어버립니다.\n한편, 최신 태블릿과 아이패드들을 만져보니 많이 발전되었다는 생각이 들었습니다. 그래서 하나 사는게 좋겠다 싶어 물건들을 알아보았습니다. 하지만 동시에 단점도 많이 눈에 띄더군요.\n요구사항 가격은 30만원선을 원합니다. 40을 넘어가면 지갑이 버티지 못합니다.\n랩톱과 함께 쓸만한 서브 디바이스를 원합니다. 따라서 커널을 빌드하거나 할 생각은 없으니 컴퓨팅 파워는 크게 중요하지 않습니다. 저장공간도 너무 클 필요 없습니다. 인터넷만 원활한 정도면 되겠습니다.\n책을 보고 싶고, 특히 논문도 볼 수 있길 바라기 때문에 화면이 크고 해상도가 높아야 합니다. 가로 비율이 너무 길어서 비디오에만 최적화 되어 있는 화면은 원치 않습니다. 적당한 pdf 뷰어도 지원이 되어야 합니다.\n오픈소스 운영체제로 돌아가는 기기면 좋겠습니다. 커널은 리눅스여야 합니다. 업스트림 커널을 설치할 수 있어 커널 테스트용으로 사용할 수 있다면 가산점이 크게 올라갑니다. 사실 가장 원하는건 데비안이나 우분투, 페도라 등이 깔린 리눅스 순정 태블릿이지만 적당한 기기가 없어 보입니다.\n리눅스 셸이 제공되면 좋겠습니다. 사실상 거의 모든 일을 거기서 할 수 있습니다.\n아이패드 결코 살 수 없습니다. 폐쇄성 때문입니다. 사용자 레벨에서도 폐쇄적이지만 독점 소프트웨어로 돌아가는 기기를 사고 싶지 않았습니다.\n안드로이드 태블릿 안드로이드 태블릿은 하이엔드 제품의 경우 아이패드와 비슷한 성능이고, 일단은 오픈소스인 안드로이드 운영체제를 사용하고 있습니다. 리눅스 커널 기반이고, 수많은 안드로이드 앱중에는 적절한 pdf 뷰어 앱도 있습니다. Termux 등을 사용하면 셸도 원활하게 사용할 수 있습니다. 업스트림 리눅스 커널을 직접 빌드해 설치하려면 까다롭긴 하지만 불가능한 것도 아니긴 합니다.\n한가지 치명적인 건 운영체제 업데이트가 원활치 않아 보이는군요. 가격을 생각해야 하니 나온지 오래된 모델들을 알아봤는데 하나같이 운영체제 업데이트가 되지 않고 있는 듯 했습니다.\n크롬북 그렇게 이번에도 아이쇼핑만 하고 그만두려던 차에 크롬북이 눈에 들어왔습니다. 크롬북은 안드로이드보다 훨씬 개방적인 정책을 취한 오픈소스 운영체제인 크롬 OS 를 사용하고 있습니다. 리눅스 커널 기반이고, 최근들어 안드로이드 앱과 리눅스 네이티브 앱을 공식 지원하고 있습니다. 구글 정책상 대부분의 크롬 OS 디바이스가 최신 OS로 업데이트 됩니다. 과거에 잠시 셋업만 해봤는데 crouton 등을 사용하면 Ubuntu 등의 리눅스 배포판을 설치할 수 있고 Chrome OS 와의 전환도 키 하나만 누르면 되어서 매우 간편했던 기억이 있습니다. 문제라면 폼팩터가 랩톱의 폼팩터라는 것인데, 요즘 나오는 크롬북은 디스플레이를 360도 전환할 수 있어 태블릿 모드와 텐트 모드를 사용할 수 있는 제품이 대부분입니다. 가격도 매우 저렵한게 특징입니다.\n이거다 싶었습니다!\n크롬북 플러스 그렇게 크롬북 모델들을 찾아보니 삼성 크롬북 플러스[1] 가 눈에 들어왔습니다. 12.3인치 화면에 2400x1600 해상도. 책 읽기에 딱 적절해 보입니다. 스타일러스 펜도 있고, 6코어 프로세서는 ARM 프로세서지만 제게는 차고 넘쳐 보이더군요. 한가지 걸리는건 브랜드와 가격. 삼성에 대해 안좋은 인식이 있습니다. 그리고 가격이 약 450 달러. 한국에서 사려면 대략 50만원을 넘습니다. 40만원 미만을 원하던 걸 생각하면 가격이 조금 셉니다.\n최종 구입 혹시나 하고 아마존에서 크롬북 프로 검색을 해봤습니다. 중고 모델은 350불 정도 하는군요. 어차피 보조 디바이스라 중고인건 괜찮은데 가격이 여전히 좀 그렇군요. 망설이며 며칠을 보내다가 새로고침을 해보니 가격이 250불이 되어 있었습니다. 아마존은 이런식으로 핫딜이 있다고 하는군요. 이때가 아니면 언제 지르랴, 하고 질렀습니다.\n[1] https://www.samsung.com/us/computing/chromebooks/12-14/xe513c24-k01us-xe513c24-k01us/\n","date":1535950320,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535950320,"objectID":"ce902f6243a0c279f48fbe5c8072ab4e","permalink":"/post/chromebook-plus-purchase/","publishdate":"2018-09-03T13:52:00+09:00","relpermalink":"/post/chromebook-plus-purchase/","section":"post","summary":"크롬북을 구매했습니다. 구매 결정 과정부터 사용기까지 내용을 정리해볼까 합니다. 이번 글에서는 크롬북을 구매하기까지의 고민과 과정을 정리합니다.\n기본적으로 저는 글을 읽는걸 좋아하기도 하고 읽어야만 하기도 합니다. 그러다보니 여행을 가더라도 항상 어떤 책을 들고갈까 고르는게 설레기도 하지만 짜증나기도 하고, 마음만 앞서서 캐리어 무게를 책으로 꽉 채우기도 합니다. 그래서 예전부터 이북을 고려해 봤지만 너무 반응속도가 느리기도 하고 인쇄된 것에 비해선 가독성도 떨어지고 그 특유의 책을 넘겨가며 보는 반응은 아닌 것 같아 구매하지 않고 있었습니다.","tags":["chromebook","chrome os","chromebook plus"],"title":"Chromebook Plus Purchase (크롬북 플러스 구매 결정기)","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com\n리눅스 4.19 두번째 릴리즈 후보 버전의 릴리즈입니다. 첫번째 릴리즈 후보 버전 릴리즈 후엔 사람들이 좀 쉬게 마련이고 버그를 찾기엔 시간이 많지 않았기에 큰 변화는 없었습니다. 유럽사람들의 경우 아직 휴가기간인 사람도 많구요. 미국 OSSummit 이 지난주 진행된 것도 한 영향이겠네요.\n[PATCH -V5 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180903072214.24602-1-ying.huang@intel.com\n관심있게 지켜보고 있는, THP swapout/in 패치입니다. 다음 머지 윈도우에선 들어갈 수 있을까요?\nPlumbers 2018 - Performance and Scalability Microconference https://lkml.kernel.org/r/1dc80ff6-f53f-ae89-be29-3408bf7d69cc@oracle.com\n올해 Linux Plumbers Conference 에 \u0026lsquo;Performance and Scalability Microconference\u0026rsquo; 가 열립니다. Huge page, mmap_sem, cpu 병렬화 등등 재밌는 주제가 많네요.\n","date":1535942075,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535942075,"objectID":"f0b10cc8b71502d917c2f80e6d5e94ea","permalink":"/post/lkml_news_v4.19-rc2/","publishdate":"2018-09-03T11:34:35+09:00","relpermalink":"/post/lkml_news_v4.19-rc2/","section":"post","summary":"Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com\n리눅스 4.19 두번째 릴리즈 후보 버전의 릴리즈입니다. 첫번째 릴리즈 후보 버전 릴리즈 후엔 사람들이 좀 쉬게 마련이고 버그를 찾기엔 시간이 많지 않았기에 큰 변화는 없었습니다. 유럽사람들의 경우 아직 휴가기간인 사람도 많구요. 미국 OSSummit 이 지난주 진행된 것도 한 영향이겠네요.\n[PATCH -V5 00/21] swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180903072214.24602-1-ying.huang@intel.com\n관심있게 지켜보고 있는, THP swapout/in 패치입니다. 다음 머지 윈도우에선 들어갈 수 있을까요?\nPlumbers 2018 - Performance and Scalability Microconference https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc2","type":"post"},{"authors":null,"categories":["gcma"],"content":"A paper about GCMA project has accepted to a top-level computer science journal, Transactions on Computers[1]. It will be published soon.\n[1] https://www.computer.org/web/tc\n","date":1535547236,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535547236,"objectID":"67516d59c528cb39066b255e1e8acec6","permalink":"/post/gcma_accepted_to_tc/","publishdate":"2018-08-29T21:53:56+09:00","relpermalink":"/post/gcma_accepted_to_tc/","section":"post","summary":"A paper about GCMA project has accepted to a top-level computer science journal, Transactions on Computers[1]. It will be published soon.\n[1] https://www.computer.org/web/tc","tags":["gcma","paper","academy"],"title":"The Paper about GCMA Accepted to TC","type":"post"},{"authors":null,"categories":["translations"],"content":" 최근 흥미롭게 보았던 Git Origin Story 라는 제목의 LinuxJournal.com 기사를 번역해 봅니다. 원본 기사는 https://www.linuxjournal.com/content/git-origin-story 에서 보실 수 있습니다.\n 수년간 리눅스 커널 개발자들이 사용해온 다양한 리비전 컨트롤 방법, Linus Torvalds가 Bit keeper 를 사용하기로 한 결정과 그에 뒤따른 논쟁, 그리고 어떻게 Git 이 만들어졌는가에 대한 글입니다.\n처음에, Linus Torvalds는 리비전 컨트롤을 아예 사용하지 않았습니다. 커널에 코드를 기여하고자 하는 사람은 Usenet 그룹에, 나중에는 메일링 리스트에 패치를 올렸고, Linus는 자신의 소스 트리에 그걸 적용했습니다. 나중에 Linus는 릴리즈를 통해 패치들 사이의 구분 없이 전체 소스 트리를 공개하는 식이었습니다. Torvalds의 작업 이력을 알아낼 수 있는 유일한 방법은 전체 릴리즈 버전 사이의 거대한 diff 를 통하는 것 뿐이었습니다.\n이는 오픈소스 리비전 컨트롤 시스템이 없기 때문은 아니었습니다. 1980년대부터 CVS 가 있었고, 그 당시에도 가장 유명한 시스템이었습니다. 그 핵심 기능을 사용해서 기여자들이 패치를 중앙 저장소에 보낼 수 있었고 그 저장소로 들어가는 패치의 기록을 조사할 수 있었습니다.\n하지만 CVS 에 대한 많은 불만이 있었습니다. 그 중 하나는 변경 사항을 파일별로 제공하고 커다란 패치는 하나의 버전으로 인식할 수 없어서, 다른 개발자들로부터의 과거의 기여를 해석하기가 어려웠습니다. 또한, 두개의 같은 파일을 수정하는 패치가 동시에 보내졌을 때 발생하는 레이스 컨디션 같은 고치기 어려운 버그들도 일부 있었습니다.\nLinus는 CVS 를 좋아하지 않았는데, 부분적으로는 다른 사람들의 불만과 같은 이유 때문이었고 부분적으로는 후에야 명확해진 그만의 이유 때문이었습니다. 그는 CVS 의 버그와 이상한 기능들을 해결하려는 목표를 가지고 2000년대 초부터 발전되어온 오픈소스 프로젝트인 SVN 도 좋아하지 않았습니다.\n많은 리눅스 커널 개발자들이 적당한 리비전 컨트롤의 부재에 불만족스러 했으며, 따라서 Linus가 사용 가능한 리비전 컨트롤 중에서 뭐든 하나를 고르길 바라는 커뮤니티로부터의 압력이 항상 있었습니다. 그리고, 2002년, Linus는 그렇게 했습니다. 충격적이고 당황스럽게도, Linus는 Larry McVoy 에 의해 운영되는 BitMover 라는 회사에 의해 개발된, 소스코드가 공개되어있지 않은 상업용 시스템인 BitKeeper 를 선택했습니다.\n리눅스 커널은 역사상 가장 중요한 오픈소스 프로젝트였고, Linus 그 스스로가 수십년간 다른 오픈소스 프로젝트들이 따라하게 되었고 지금까지도 그렇게 하고 있는 오픈소스 개발 방법을 처음으로 발견한 사람이었습니다. Linus가 무슨 생각을 하는 거지? 어떻게 그가 그의 커뮤니티와 오픈소스 세계를 이렇게 배신할수가 있지? 이게 Linus가 처음 커널 개발에 BitKeeper 를 사용했을 때 대부분의 반응이었습니다.\n또한, BitMover 는 돈을 받지 않고 BitKeeper 를 사용할 수 있는 라이센스를 제공하는데 대한 대가로 리눅스 커뮤니티에 제한을 걸었습니다. 첫째, 리눅스 개발자들은 BitKeeper 를 사용하는 동안 다른 경쟁 리비전 컨트롤 시스템 개발 프로젝트에 참여할 수 없었습니다. 둘째, BitMover 는 라이센스에 대한 악용을 막기 위해 커널 프로젝트에 관계된 일부 메타데이터를 제어할 수 있었습니다. 이 메타데이터에 대한 접근이 불가능하면, 커널 개발자들은 다른 리비전 컨트롤 시스템에서의 중요한 표준적 기능인, 과거의 커널 버전들 사이의 비교를 할 수 없었습니다.\nLinus가 BitKeeper 를 사용한지 수년이 지나도 논쟁은 줄어들지 않았습니다. 그의 기본적 주장은, 그는 프리 소프트웨어 (Free Software) 광신도가 아니라는 것이었습니다. 그는 오픈소스 도구들이 같은 일을 하는 상업용 도구들에 비해 낫다면 그걸 사용할 거라고 했습니다. 하지만 상업용 도구가 더 낫다면, 그는 다른 도구를 고려하지 않을 거라고요.\n하지만, 많은 커널 개발자들이 실제로 프리 소프트웨어 광신도였습니다. 커뮤니티에 손상을 입히고 리눅스 커널 프로젝트의 fork 를 일으킬 만큼은 아니지만 Linus와 다른 개발자들간의 분노와 긴장이 심해졌습니다. Alan Cox, Al Viro, David Miller, Andrea Arcangeli, Andrew Morton 과 많은 수의 다른 사람들이 경쟁 프로젝트를 이끌만한 기술력을 가지고 있음이 분명했고, 심지어 일부는 상당수 커널 개발자들을 그들 쪽으로 끌어갈 명성을 가지고 있었습니다. 하지만 아무도 그러지 않았습니다. 이 긴장과 적대는 계속 유지되었습니다.\nBitKeeper 의 무엇이 그리 대단했을까요? BitKeeper 에서 자랑한 건 분산시스템을 제공한다는 것으로, 모든 저장소가 쉽게 fork 되고 merge 될 수 있었습니다. 이게 핵심이었습니다. 이를 통해, 특정 하위 그룹의 커널 개발자들은 리비전 컨트롤의 이득을 얻으면서 그룹끼리 독자적으로 협업하고, 준비된 다음에 그들의 변경 사항을 Linus에게 전달할 수 있었습니다. 이를 통해, 전에는 Linus 한명의 어깨에 완전히 매여있던 수많은 작업이 Linus가 믿는 개발자들, 또는 그렇게 작업하기로 한 그룹들에게 분산될 수 있었습니다. 아키텍쳐별 코드, 드라이버, 그리고 커널의 하위 시스템들이 모두 어떻게든 독립적으로 개발되고, 이후 적절한 시점에 한번에 메인 커널에 병합될 수 있었습니다.\n슬슬 하는 이야기가 익숙하게 들릴 겁니다만, 2002년에 이건 새로운 아이디어였습니다. CVS 와 Subversion 같은 당시 존재하던 프로젝트들에서 fork 와 merge 는 주인만 할 수 있고, 죽고 싶도록 시간이 오래 걸리는 작업이었습니다. BitKeeper 를 통해, 이게 사소한 작업이 되었습니다.\n커널 개발 도구의 핵심부에 독점 소프트웨어를 사용하려는 Linus의 의지는 많은 사람들이 대안을 만드는데 더욱 노력하게 만들었습니다. CVS 와 Subversion 프로젝트는 너무 많은 기초적 설계 오류가 있었고, 이미 너무 많이 개발이 진행되어 변경하기가 쉽지 않았습니다. 다른 프로젝트들 모두 마찬가지였습니다. 하지만 이제 그들은 Linus가 정말 원하는걸 알거나 안다고 생각했으므로, 정말로 코딩을 시작할 수 있었습니다. 그 결과 분산 개발 기능을 제공하는 많은 수의 리비전 컨트롤 시스템이 나왔습니다.\n그런 시스템들 중에 arch, darcs, 그리고 monotone 등이 있었습니다. 그들은 Bitkeeper 를 경쟁 상대라고 함으로써, Linus가 Bitkeeper 에 대한 대안으로 그들을 선택하라고 설득했습니다.\n많은 사람들이 시도했지만, 아무도 성공하지 못했습니다. 이는 부분적으로는 Linus가 CVS 와 Subversion 에 뭐가 빠져있는지 모두 이야기 하지 않았듯, 그 프로젝트들에 Linus가 더 필요로 하는 것이 무엇인지 모두 말하지 않았기 때문입니다. 그리고, Linus가 소스가 폐쇄된 도구를 사용하는것도 개의치 않는 것 같았으므로, 어떤 대안이 그에게 받아들여질만 하려면 그 대안은 BitKeeper 보다 훨씬 기술적으로 향상되어 있어야만 할 것이었습니다. 따라서, BitKeeper 전에도 오픈소스 툴의 기능은 충분하지 않았지만, BitKeeper 가 나타남으로써 오픈소스 툴이 맞춰야 할 기능의 목표가 더욱 높아진 셈입니다.\n수년간의 많은 노력 후에도, 어떤 오픈소스 대안도 Linus의 필요를 맞추기엔 CVS 나 Subversion 보다도 크게 나아지지 못했습니다. 만약 Samba 를 만들었고 rsync 의 공동 창시자인 Andrew Tridgell 이 아니었더라면 이 상황은 훨씬 오래 지속될 수 있었을 겁니다. 2005년, Andrew는 프리 소프트웨어인 대안을 만들기 위해 BitKeeper 네트워킹 프로토콜을 리버스 엔지니어링 하려 했습니다. 그가 아니었더라도, 누군가는 시도했을 겁니다 - 그건 그저 시간 문제였습니다. Larry McVoy 는 누구든 이 시도를 했다면 당장 지원을 끊겠다고 리눅스 개발자들에게 경고했고, 실제로 그렇게 했습니다. 결국, 급작스럽게 BitKeeper 를 커널 개발에 사용될 수 없게 되었습니다. 전체 개발 도구와 분산 버전 컨트롤로부터 생겨난 개발 문화는 앞날을 알 수 없는 상황에 놓였습니다.\n이게 무슨 의미일까요? Linus는 그의 과거 방식의 개발로 돌아가서 모든 패치를 그 자신에게 보내라고 했을까요? 그렇지 않다면, BitKeeper 의 오픈소스 대안들 가운데 하나를 선택했을까요? 만약 그가 그랬다면, 어떤 대안을 골랐을까요?\n이 시점에서, 놀라운 일이 발생했습니다. Linus가 리눅스 커널 개발을 1991년 시작한 후 처음으로 작업을 완전히 멈췄습니다. 현존하는 어떤 도구도 그가 원하는 일을 해주지 못했으므로, 그는 자신의 것을 만들기로 결정했습니다.\nLinus의 주요 관심은, 사실 속도였습니다. 이것이 그가 기존에는 완전히, 적어도 현존하는 프로젝트들이 이해할 수 있는 방식으로는 이야기하지 않은 부분이었습니다. 전세계에서 전력을 다해 패치를 보내오는 수천명의 커널 개발자들을 위해, 그는 기존에는 상상할 수 없는 속도로 동작하는 무언가가 필요했습니다. 그는 가장 거대하고 가장 복잡한 작업이라 해도 완료하는데 몇초 이상 기다리는 걸 참을 수 없었습니다. Arch 도, darcs, monotone 도, 그리고 어떤 다른 프로젝트도 이 요구사항을 맞추지 못했습니다.\nLinus는 잠시 은둔한 채 코딩을 했고, 그 후에 그의 새로운 계획을 세상에 알렸습니다. 2005년 6월에 그 프로젝트를 시작한 이래 몇일만에, Linus의 git 리비전 컨트롤 시스템은 git 소스코드의 리비전 컨트롤을 완전히 할 수 있게 되었습니다. 몇주 후, git 은 리눅스 커널 개발의 리비전 컨트롤을 맡을 준비가 되었습니다. 몇달 후, 완전한 기능을 갖추었습니다. 이 시점에서, Linus는 이 프로젝트의 관리 권한을 해당 프로젝트의 가장 열정적인 기여자, Junio C. Hamano 에게 넘기고 리눅스 개발에 다시 전념했습니다.\n이 도구에 놀란 프리 소프트웨어 개발자 커뮤니티는 이 괴상한 작업물을 이해하려 노력했습니다. 이것은 리비전 컨트롤 소프트웨어의 어떤 것도 닮지 않았습니다. 사실, 이것은 리비전 컨트롤 시스템보다는 낮은 단계의 파일시스템 오퍼레이션들의 집합에 가까워 보였습니다. 그리고 다른 시스템들이 패치를 저장하는 것과 달리, 이것은 각각의 변경된 파일의 버전을 모두 저장했습니다. 어떻게 이런 방식이 괜찮을 수 있을까요? 하지만, 이 도구는 fork 와 merge 를 번개같은 속도로 처리할 수 있고, 패치를 요청하자마자 만들어낼 수 있었습니다.\n점진적으로, Junio는 CVS 와 Subversion 의 것들을 닮은 높은 수준의 커맨드 집합을 만들었습니다. Git 의 원래 커맨드들이 \u0026ldquo;배관\u0026rdquo; 이었다면, 새로운 커맨드들은 \u0026ldquo;도자기 제품\u0026rdquo; 이었습니다. 그리고, 결국 사용되게 되었습니다.\nBitKeeper 에 대한 논쟁과 분노가 있었던 만큼이나, git 의 계속된 개발을 향한 열망과 참여 의지가 많았습니다. 포팅, 확장 기능, 그리고 웹사이트들이 모든 것을 현재 상태로 끌어올렸습니다. 몇년만에, 거의 모든 사람들이 git 을 사용하게 되었습니다. 리눅스처럼, git 이 세상을 집어삼켰습니다.\n","date":1535544913,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535544913,"objectID":"5186b5c3323752b2ed5092931d5fb9ab","permalink":"/post/git_origin_story_ko/","publishdate":"2018-08-29T21:15:13+09:00","relpermalink":"/post/git_origin_story_ko/","section":"post","summary":"최근 흥미롭게 보았던 Git Origin Story 라는 제목의 LinuxJournal.com 기사를 번역해 봅니다. 원본 기사는 https://www.linuxjournal.com/content/git-origin-story 에서 보실 수 있습니다.\n 수년간 리눅스 커널 개발자들이 사용해온 다양한 리비전 컨트롤 방법, Linus Torvalds가 Bit keeper 를 사용하기로 한 결정과 그에 뒤따른 논쟁, 그리고 어떻게 Git 이 만들어졌는가에 대한 글입니다.\n처음에, Linus Torvalds는 리비전 컨트롤을 아예 사용하지 않았습니다. 커널에 코드를 기여하고자 하는 사람은 Usenet 그룹에, 나중에는 메일링 리스트에 패치를 올렸고, Linus는 자신의 소스 트리에 그걸 적용했습니다.","tags":["git","open source","version control"],"title":"Git Origin Story in Korean","type":"post"},{"authors":null,"categories":["Raspberry Pi"],"content":"라즈베리 파이를 메인 컴퓨터로 사용하려는게 아니라면, 라즈베리 파이에 모니터와 키보드, 마우스를 연결하고 사용하는게 아무래도 번거롭습니다. ssh 로 붙어서 작업하는 것도 한 방법이지만, 그게 여의치 않은 상황도 있습니다. 그저 터미널만 연결되면 되는 상황이라면, 가장 간단한 건 UART Serial 통신을 사용하는 겁니다.\n라즈베리 파이는 UART 통신을 지원하고 있는데, GPIO 핀 중 14번과 15번이[2] 각각 TX, RX 입니다. 호스트 컴퓨터와 이 두개의 핀을 연결하면 UART 통신을 할 수 있어서 라즈베리 파이의 터미널에 바로 접근할 수 있습니다.\n호스트 머신에 핀을 연결하는게 번거로울 수 있는데, 시리얼-USB 젠더를 여기저기서 저렴한 가격에 팝니다[1]. 이걸 이용해 TX/RX 핀을 라즈베리 파이의 GPIO 14, 15번에 각각 연결하고 USB 를 호스트 머신에 연결합니다.\n이제 호스트 머신의 /dev/ 디렉토리에 ttyUSB 로 시작하는 파일이 생겼을 겁니다. 제 경우 ttyUSB0 라는 이름의 파일이 생겼군요. 이제, 시리얼 통신 프로그램인 minicom 을 사용해서 이 포트로 연결해서 UART 통신을 합시다:\n$ sudo minicom -D /dev/ttyUSB0 이제 라즈베리 파이를 부팅 시키면 부팅 로그부터 터미널에 나오고, 로그인 화면까지 뜹니다.\n라즈베리파이3 시리얼 문제와 해결법 하지만, 라즈베리 파이 3 에서는 내장으로 블루투스와 WiFi 가 들어가면서 GPIO 핀이 겹치게 되어 앞의 과정만으로는 시리얼 통신을 할 수 없습니다. 블루투스를 끄고 시리얼을 켜줘야 합니다.\n먼저, 다음과 같이 /boot/config.txt 파일에 다음 두줄을 추가합니다:\n$ sudo echo \u0026quot;enable_uart=1\u0026quot; \u0026gt;\u0026gt; /boot/config.txt $ sudo echo \u0026quot;dtoverlay=pi3-miniuart-bt\u0026quot; \u0026gt;\u0026gt; /boot/config.txt 그리고 /boot/cmdline.txt 를 열어서 console=tty1 이라는 내용을 추가해줍니다.\n준비가 끝났습니다. 재부팅 하면 minicom 에 라즈비안 콘솔이 연결됩니다.\n[1] https://www.devicemart.co.kr/29565\n[2] https://www.raspberrypi.org/documentation/usage/gpio/\n","date":1535357795,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535357795,"objectID":"2901ff32aeee6b48cb3e9078bc50860f","permalink":"/post/rasp3-serial/","publishdate":"2018-08-27T17:16:35+09:00","relpermalink":"/post/rasp3-serial/","section":"post","summary":"라즈베리 파이를 메인 컴퓨터로 사용하려는게 아니라면, 라즈베리 파이에 모니터와 키보드, 마우스를 연결하고 사용하는게 아무래도 번거롭습니다. ssh 로 붙어서 작업하는 것도 한 방법이지만, 그게 여의치 않은 상황도 있습니다. 그저 터미널만 연결되면 되는 상황이라면, 가장 간단한 건 UART Serial 통신을 사용하는 겁니다.\n라즈베리 파이는 UART 통신을 지원하고 있는데, GPIO 핀 중 14번과 15번이[2] 각각 TX, RX 입니다. 호스트 컴퓨터와 이 두개의 핀을 연결하면 UART 통신을 할 수 있어서 라즈베리 파이의 터미널에 바로 접근할 수 있습니다.","tags":["raspberry","setup","serial"],"title":"Raspberry Pi 3 Serial Connection","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com\n이주일의 머지 윈도우가 끝나고 리눅스 4.19 버전을 향한 안정화 단계가 시작되었습니다.\n토발즈에겐 결코 즐겁지 않은 머지 윈도우였습니다 (frustrating merge window 였다고 표현하는군요). 일단 머지 윈도우 초기부터 L1TF 취약점 이슈가 나왔죠. 하지만 이슈가 처음 발견된 건 아니고 공식 보고된 거다보니 그 전부터 수정은 하고 있었기에 머지만 하면 됐습니다. 토발즈는 -next 트리와 다양한 커널 테스트 시스템들이 잘 갖추어져 있다는 증거라고 이야기 합니다.\n또, TLB 슛다운 버그에 대한 보고가 있었군요. 결국은 큰 문제는 아니었다고 결론났음에도 토발즈의 신경을 많이 긁었다고 합니다. 이 과정에서 관련 코드가 매우 복잡하고 디버깅 하기 어렵다고 이야기 되었기에 차후 정리가 필요할 것 같다는군요.\n또한, 이번 릴리즈는 꽤 많은 변경이 있는 편이라고 합니다, 물론 커밋 수 기반으로요.\n[RFC][PATCH 0/5] introduce /proc/PID/idle_bitmap https://lkml.kernel.org/r/20180901112818.126790961@intel.com\n/sys/kernel/mm/page_idle/bitmap 을 사용하면 시스템의 실제 워킹셋 페이지가 무엇무엇인지 알 수 있는데요, 이걸 /proc/PID/idle_bitmap 으로 옮겨서 좀 더 finer-grained 하게 특정 프로세스의 워킹셋을 추적할 수 있게 하려는 RFC 패치입니다. 기존의 글로벌한 비트맵은 아무래도 사용하기에 오버헤드가 있기 때문이죠. 특히 NVIDMM 을 고려하면 수 테라바이트도 쉽게 보인다는 이야기를 하는군요. 저도 해당 bitmap 을 사용해 워킹셋 추적 프로그램을 만들었다가 오버헤드로 고민이 깊어져서 커널을 좀 고치긴 해야겠다 싶었는데, 잘 머지되면 좋겠습니다.\n이와 함께 인텔의 Apache Pass NVDIMM 에 대한 이야기도 하는군요. 옵테인 기반의 NVDIMM 제품인 거 같은데, NVDIMM 도 현물이 나오기 시작하는군요.\n[PATCH RFC LKMM 1/7] tools/memory-model: Add extra ordering for locks and remove it for ordinary release/acquire 이 락킹 앞뒤의 액세스 순서를 지켜주는게 LKMM 에는 반영되어 있지 않습니다. 이걸로 몇명의 커널 프로그래머들이 항의했나 보네요. 이런 부분들을 추가하는 패치입니다.\n[PATCH tip/core/rcu 0/6] Documentation updates for v4.20/v5.0 https://lkml.kernel.org/r/20180829211637.GA20980@linux.vnet.ibm.com\n다음 리눅스 머지 윈도우를 겨냥하는 RCU 쪽 문서 업데이트입니다. 다음 버전은 4.20이 될지 5.0이 될지 Paul 도 모르겠나보군요.\n[PATCH tip/core/rcu 0/3] SRCU updates for v4.20/v5.0 https://lkml.kernel.org/r/20180829212036.GA22033@linux.vnet.ibm.com\n다음 리눅스 머지 윈도우를 향한 SRCU 업데이트 입니다. call_srcu() 를 부팅 초기부터 사용할 수 있도록 하는군요. 테스트도 작성했습니다.\n[PATCH tip/core/rcu 0/24] Additional RCU-consolidation cleanups for v4.20/v5.0 RCU 는 여러 변종 (flavor) 들이 있는데, 이것들을 최대한 합치려 하고 있는 듯 하군요.\n","date":1535357488,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535357488,"objectID":"3ee7154bd7e5d35ef342ee4f2e081b3a","permalink":"/post/lkml_news_v4.19-rc1/","publishdate":"2018-08-27T17:11:28+09:00","relpermalink":"/post/lkml_news_v4.19-rc1/","section":"post","summary":"Linux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com\n이주일의 머지 윈도우가 끝나고 리눅스 4.19 버전을 향한 안정화 단계가 시작되었습니다.\n토발즈에겐 결코 즐겁지 않은 머지 윈도우였습니다 (frustrating merge window 였다고 표현하는군요). 일단 머지 윈도우 초기부터 L1TF 취약점 이슈가 나왔죠. 하지만 이슈가 처음 발견된 건 아니고 공식 보고된 거다보니 그 전부터 수정은 하고 있었기에 머지만 하면 됐습니다. 토발즈는 -next 트리와 다양한 커널 테스트 시스템들이 잘 갖추어져 있다는 증거라고 이야기 합니다.\n또, TLB 슛다운 버그에 대한 보고가 있었군요. 결국은 큰 문제는 아니었다고 결론났음에도 토발즈의 신경을 많이 긁었다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.19-rc1","type":"post"},{"authors":null,"categories":["Raspberry Pi"],"content":"OSSE 2016 에서 받아온 라즈베리 파이3 셋업을 해봅니다. 셋업에 사용된 호스트 환경은 Ubuntu 16.04 데스크탑입니다.\n라즈베리 파이는 SD 카드를 저장소로 사용합니다. 따라서 여기에 운영체제를 깔아야 합니다. 다만, 라즈베리 파이를 구매하면 SD 카드는 따라오지 않습니다. 각자 알아서 사야 합니다. 전 예전에 사둔 16 GiB 짜리 SD 카드를 사용하겠습니다.\n라즈베리 파이를 지원하는 운영체제는 여러가지 있는데, 데비안 계열의 Raspbian 이 공식 운영체제입니다. 다운로드 페이지 에서 Raspbian stretch lite 를 다운받고 압축을 풀어줍니다.\n$ ls 2018-06-27-raspbian-stretch-lite.zip $ unzip 2018-06-27-raspbian-stretch-lite.zip Archive: 2018-06-27-raspbian-stretch-lite.zip inflating: 2018-06-27-raspbian-stretch-lite.img $ ls 2018-06-27-raspbian-stretch-lite.img 2018-06-27-raspbian-stretch-lite.zip 압축 파일이 350 MiB, 압축 푼 이미지는 1.8 GiB 나 하는군요.\n이제 요걸 SD 카드에 써야하는데요, 일단 SD 카드를 데스크탑에 연결하고, df 명령을 이용해 이게 어떤 디바이스 파일로 인식되었는지 봅시다:\n$ df -h Filesystem Size Used Avail Use% Mounted on udev 7.8G 0 7.8G 0% /dev tmpfs 1.6G 174M 1.4G 11% /run /dev/sda1 222G 127G 84G 61% / tmpfs 7.8G 161M 7.7G 3% /dev/shm tmpfs 5.0M 4.0K 5.0M 1% /run/lock tmpfs 7.8G 0 7.8G 0% /sys/fs/cgroup tmpfs 1.6G 68K 1.6G 1% /run/user/1000 /dev/sdb 917G 541G 330G 63% /media/sjpark/47f422d0-445f-4dfc-86ca-559b801eb9d3 /dev/sdc2 15G 4.7G 9.3G 34% /media/sjpark/f24a4949-f4b2-4cad-a780-a138695079ec /dev/sdc1 56M 24M 33M 42% /media/sjpark/boot 제가 사용한 SD 카드는 기존에 라즈베리파이2 모델 B+ 운영체제가 설치되어 있었습니다. /dev/sdc 로 SD 카드가 잡혔고, /dev/sdc1 으로 부팅 파티션이, /dev/sdc2 로 데이터 파티션이 잡힌 것 같군요.\n이제 마운트된 파티션들을 언마운트하고, dd 명령으로 이미지를 덮어씌웁시다:\n$ sudo umount /media/sjpark/f24a4949-f4b2-4cad-a780-a138695079ec $ sudo umount /media/sjpark/boot $ sudo dd bs=4M if=./2018-06-27-raspbian-stretch-lite.img of=/dev/sdc 444+0 records in 444+0 records out 1862270976 bytes (1.9 GB, 1.7 GiB) copied, 199.44 s, 9.3 MB/s $ sync 처음 두개 커맨드가 언마운트를 하고, 세번째 커맨드가 이미지를 덮어씌우는 커맨드입니다. 혹시 모르니 네번째 커맨드에서 sync 해서 데이터가 확실히 씌워지게 했습니다.\n이제 라즈베리 파이의 HDMI 단자에 모니터를 연결하고 micro USB 포트에 스마트폰 충전하듯이 USB 를 연결해 전원을 인가해주면 라즈베리 파이가 라즈비안으로 부팅됩니다.\n","date":1535353422,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535353422,"objectID":"d5054f3b8a1a0f9764336b93318df00b","permalink":"/post/rasp3-modelb-setup/","publishdate":"2018-08-27T16:03:42+09:00","relpermalink":"/post/rasp3-modelb-setup/","section":"post","summary":"OSSE 2016 에서 받아온 라즈베리 파이3 셋업을 해봅니다. 셋업에 사용된 호스트 환경은 Ubuntu 16.04 데스크탑입니다.\n라즈베리 파이는 SD 카드를 저장소로 사용합니다. 따라서 여기에 운영체제를 깔아야 합니다. 다만, 라즈베리 파이를 구매하면 SD 카드는 따라오지 않습니다. 각자 알아서 사야 합니다. 전 예전에 사둔 16 GiB 짜리 SD 카드를 사용하겠습니다.\n라즈베리 파이를 지원하는 운영체제는 여러가지 있는데, 데비안 계열의 Raspbian 이 공식 운영체제입니다. 다운로드 페이지 에서 Raspbian stretch lite 를 다운받고 압축을 풀어줍니다.\n$ ls 2018-06-27-raspbian-stretch-lite.","tags":["raspberry","setup"],"title":"Raspberry Pi 3 Model B Setup","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com\n자, 오랫만에 rc 버전을 8개나 내며 긴 안정화 기간을 거친 4.18 버전이 릴리즈 되었습니다. 따라서 지난주는 조용해야 했고 실제로 조용했지만 그럼에도 불구하고 vfs 레이스 컨디션 문제 수정 등의 변경도 있긴 했습니다. 이번 정식 릴리즈로 포함된 기능 중 개인적으로는 Restartable Sequence 가 눈에 띄고 흥미롭군요. 아마 2015년? 인가에 서울에서 커널 서밋 열려서 거기서 발표 들었을 때부터 관심있었거든요. 유저스페이스에서 이 기능을 잘 사용하면 멀티코어 성능확장성에 큰 개선이 가능할 것 같습니다.\n어쨌건, 이로써 4.19 버전을 향한 머지 윈도우가 열렸습니다. 5.x 는 언제 시작되려나요?\n[GIT PULL] XArray for 4.19 https://lkml.kernel.org/r/20180813161357.GB1199@bombadil.infradead.org\n이 블로그에서도 몇번 소개한 XArray 의 개발자, Matthew 가 충분히 리뷰도 받고 수정도 했다고 생각하는 것 같습니다. 4.18 릴리즈와 함께 열린 4.19 머지윈도우에 XArray 풀리퀘스트를 리누스 토발즈에게 던졌군요!\n이 풀리퀘스트는 XArray 의 구현과 pagecache 가 XArray 를 사용하도록 하는 변경을 담고 있습니다.\n그러나, 리눅스는 이 패치셋을 받아들이지 않기로 결정했습니다. XArray 자체에 문제가 있어서느 아니고, 이 패치셋이 libnvdimm 소스트리 위에서 만들어졌기 때문입니다. -next 트리 관리자가 그렇게 하자고 조언한 것 같은데, 어쨌든 Mattew 에겐 안됐지만 다음 버전에서 머지되길 기대해야겠군요.\n[PATCH v3 0/3] docs/core-api: add memory allocation guide https://lkml.kernel.org/r/1534517236-16762-1-git-send-email-rppt@linux.vnet.ibm.com\n메모리 관리쪽 커널 문서가 지속적으로 업데이트 되고 있습니다. 개인적으로는 커널을 공부할 때 공식 문서를 선호하는 편이라 반가운 일이군요.\n","date":1534125027,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1534125027,"objectID":"56679e685aa8989d2a3bda5382716ab5","permalink":"/post/lkml_news_v4.18/","publishdate":"2018-08-13T10:50:27+09:00","relpermalink":"/post/lkml_news_v4.18/","section":"post","summary":"Linux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com\n자, 오랫만에 rc 버전을 8개나 내며 긴 안정화 기간을 거친 4.18 버전이 릴리즈 되었습니다. 따라서 지난주는 조용해야 했고 실제로 조용했지만 그럼에도 불구하고 vfs 레이스 컨디션 문제 수정 등의 변경도 있긴 했습니다. 이번 정식 릴리즈로 포함된 기능 중 개인적으로는 Restartable Sequence 가 눈에 띄고 흥미롭군요. 아마 2015년? 인가에 서울에서 커널 서밋 열려서 거기서 발표 들었을 때부터 관심있었거든요. 유저스페이스에서 이 기능을 잘 사용하면 멀티코어 성능확장성에 큰 개선이 가능할 것 같습니다.","tags":["linux","kernel","lkml","news"],"title":"Lkml_news_v4.18","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com\n원래대로라면 오늘 4.18 정식 릴리즈가 있어야 했지만, 지난주 동안 여러 일이 있었고, 결국 여덟번째 rc 버전이 나오고 말았습니다. VM 쪽 이슈가 큰 이유였고, 그것만 문제였으면 그냥 정식 릴리즈를 하려 했지만 네트워킹 쪽에서도 뒤늦은 문제가 터지고 VFS 쪽에도 이슈가 있었던 관계로 정식 릴리즈를 미루기로 결심했다고 합니다.\n8월에 휴가를 많이 떠나는 유럽 개발자들을 고려해서 토발즈는 휴가가 예정되어 있다면 그냥 원래 예상된 스케쥴대로 이번주부터 머지 윈도우 열렸다고 생각하고 풀리퀘스트 보내고 휴가 가라고 대인배라면 대인배 같은 면모를 보이는군요.\n[PATCH RFC 00/10] Introduce lockless shrink_slab() https://lkml.kernel.org/r/153365347929.19074.12509495712735843805.stgit@localhost.localdomain\n이 블로그에서도 이야기 했던 \u0026ldquo;Improve shrink_slab() scalability\u0026hellip;\u0026rdquo; 패치의 머지 후, 성능 병목 지점이 shrink_lab() 에서 down_read_trylock() 으로 넘어갔습니다!\n \u0026gt; I created 255 memcgs, 255 ext4 mounts and made each memcg create a \u0026gt; file containing few KiBs on corresponding mount. Then in a separate \u0026gt; memcg of 200 MiB limit ran a fork-bomb. \u0026gt; \u0026gt; I ran the \u0026quot;perf record -ag -- sleep 60\u0026quot; and below are the results: \u0026gt; + 47.49% fb.sh [kernel.kallsyms] [k] down_read_trylock \u0026gt; + 30.72% fb.sh [kernel.kallsyms] [k] up_read \u0026gt; + 9.51% fb.sh [kernel.kallsyms] [k] mem_cgroup_iter \u0026gt; + 1.69% fb.sh [kernel.kallsyms] [k] shrink_node_memcg \u0026gt; + 1.35% fb.sh [kernel.kallsyms] [k] mem_cgroup_protected \u0026gt; + 1.05% fb.sh [kernel.kallsyms] [k] queued_spin_lock_slowpath \u0026gt; + 0.85% fb.sh [kernel.kallsyms] [k] _raw_spin_lock \u0026gt; + 0.78% fb.sh [kernel.kallsyms] [k] lruvec_lru_size \u0026gt; + 0.57% fb.sh [kernel.kallsyms] [k] shrink_node \u0026gt; + 0.54% fb.sh [kernel.kallsyms] [k] queue_work_on \u0026gt; + 0.46% fb.sh [kernel.kallsyms] [k] shrink_slab_memcg 이 패치셋은 계속해서 shrink_slab() 의 멀티코어 성능 확장성을 위해 lock 을 사용하지 않게끔 경로를 최적화 하고 있습니다.\n먼저 shrink_slab() 과 unregister_shrinker() 사이의 동기화에 SRCU 를 사용하고, 그럴 수 없는 경우에는 percpu_rw_semaphore 를 사용합니다. 그리고 shrinker_rwsem 을 뮤텍스로 교체합니다.\nSRCU 를 사용함으로 인해 커널 바이너리 사이즈가 커지는 문제가 있는데, 과거에도 비슷한 시도가 이런 이유로 취소된 적 있었군요.\n","date":1533545582,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1533545582,"objectID":"3a8064c17b46454651b2b4fb747aeea0","permalink":"/post/lkml_news_v4.18-rc8/","publishdate":"2018-08-06T17:53:02+09:00","relpermalink":"/post/lkml_news_v4.18-rc8/","section":"post","summary":"Linux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com\n원래대로라면 오늘 4.18 정식 릴리즈가 있어야 했지만, 지난주 동안 여러 일이 있었고, 결국 여덟번째 rc 버전이 나오고 말았습니다. VM 쪽 이슈가 큰 이유였고, 그것만 문제였으면 그냥 정식 릴리즈를 하려 했지만 네트워킹 쪽에서도 뒤늦은 문제가 터지고 VFS 쪽에도 이슈가 있었던 관계로 정식 릴리즈를 미루기로 결심했다고 합니다.\n8월에 휴가를 많이 떠나는 유럽 개발자들을 고려해서 토발즈는 휴가가 예정되어 있다면 그냥 원래 예상된 스케쥴대로 이번주부터 머지 윈도우 열렸다고 생각하고 풀리퀘스트 보내고 휴가 가라고 대인배라면 대인배 같은 면모를 보이는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.18-rc8","type":"post"},{"authors":null,"categories":["linux-kernel-hack"],"content":"리눅스 커널의 개발은 커뮤니티 주도입니다. 개발의 한 부분인 테스트 역시 커뮤니티 주도적입니다. 여러 개인 또는 단체가 커널을 각자의 방식으로 테스트 하고 그 결과를 공유합니다. 인텔에서는 0-day 서비스[1] 라는 서비스를 자체적으로 돌리는데, 이 서비스는 최신 리눅스 커널을 가져다가 빌드하고 다양한 기능 / 성능 테스트를 돌리고 그 결과 발견된 regression 을 LKML 에 메일로 보내주는 일을 합니다. 말하자면 Continuous Integration (CI) 이죠.\nLinux Kernel Performance (LKP) Tests[2] 는 0-day 서비스에서 기능 / 성능 테스트를 수행하는데 사용되는 도구입니다. 다양한 테스트를 돌리기 위한 시스템 환경 구성, 테스트 프로그램과 그 종속 프로그램 / 라이브러리의 설치와 환경 구성, 테스트 수행과 결과 정리, 그리고 테스트 진행 사이의 시스템 상태 프로파일링 및 프로파일링 결과 정리를 대신해 줍니다. 0-day 서비스에 연결되어 있지만 lkp-tests 와 0-day 서비스 사이의 종속성이 없으며, 오픈소스 프로젝트로 개발이 진행되고 있어 그 소스코드를 누구나 사용할 수 있으며 개인이 사용하기에도 편리하게 되어 있어서 개인 개발자가 자신의 패치를 테스트할 목적으로 사용하기에도 좋습니다. 이 글에서는 이러한 lkp-tests 의 구조와 사용법을 간단히 설명합니다. 전체적으로 인텔의 관련 블로그 글[3] 을 참고했습니다.\n설치 먼저 다음 커맨드로 lkp-tests 소스코드를 얻어옵니다:\n$ git clone https://github.com/intel/lkp-tests $ cd lkp-tests 그리고 lkp-tests 자체를 설치.\n$ sudo make install 이 커맨드는 단순히 지금 소스코드를 땡겨온 lkp-tests 소스코드 디렉토리의 bin/lkp 파일을 링크하는 /usr/local/bin/lkp 심볼릭 링크를 만들 뿐입니다. 따라서 셸에서 lkp 커맨드를 쓸 수 있게 해주죠. 이 lkp 파일이 결국 lkp-tests 의 대부분의 일을 해주는 핵심 커맨드입니다. 이 프로그램의 간단한 사용법은 다음과 같이 확인할 수 있습니다:\n$ lkp Usage: lkp \u0026lt;command\u0026gt; [options] INSTALLATION install JOB install binary dependencies for JOB JOB split JOB split JOB matrix compile JOB compile JOB into shell script TESTING run JOB run test JOB locally qemu JOB run test JOB in QEMU virtual machine RESULT result|rt|_rt|__rt PATTERNs show result dirs ls|ll PATTERNs ls result dirs rm-path result remove result dirs _rm PATTERNs remove _result dirs stat [options] show result stats compare [options] compare result stats DEBUG irb run irb with lib/*.rb loaded pry run pry with lib/*.rb loaded More commands can be found in /home/sjpark/lkp-tests/{bin,sbin,tools}/ 여기서 \u0026lt;command\u0026gt; 는 lkp-tests 소스코드 디렉토리 아래 bin/, sbin/, tools/, 또는 lkp-exec/ 아래 위치한 실행파일로, lkp 는 단순히 그 실행파일을 수행하면서 인자를 넘길 뿐입니다.\n테스트에 필요한 소프트웨어 설치 다음 커맨드는 lkp-tests 가 의존하고 있는 기본적 소프트웨어 패키지들을 모두 설치합니다:\n$ sudo lkp install Ubuntu 16.04 에서는 다음 패키지들을 까는군요:\nbc gawk gzip kmod time automake bison bsdtar build-essential bzip2 ca-certificates cpio fakeroot flex gcc git libc6-dev libc6-dev:i386 libklibc-dev libtool linux-libc-dev linux-libc-dev:i386 linux-tools-generic make openssl patch rsync ruby ruby-dev wget lkp-tests 내부 벤치마크 실행 이제 lkp-tests 에서 지원하는 벤치마크를 실제로 돌려봅시다.\n테스트 수행에 필요한 환경 설정 실제 테스트를 돌리기 위해선 벤치마크를 깔고, 그 벤치마크가 사용하는 패키지를 깔고, 테스트에 사용될 도구들을 깔고, 여러 설정을 하는등의 작업이 필요합니다.\n다음 명령은 lkp-tests 에서 ebizzy 라는 벤치마크를 사용하는 테스트를 위해 필요한 프로그램들을 설치하고 수행 환경을 준비합니다.\n$ sudo lkp install jobs/ebizzy.yaml job lkp-tests 에서 테스트 수행의 기본 단위는 job 이라고 이야기 하는데, jobs/ 디렉토리 아래에 각 job 을 설명한 yaml 파일이 있습니다. 위의 커맨드에서 인자로 넣은 ebizzy.yaml 은 ebizzy 를 사용한 테스트에 필요한 사항들이 들어있습니다. 이 커맨드는 내부적으로 이 테스트에 필요한 패키지를 설치하고 ebizzy 벤치마크도 소스코드를 인터넷에서 받아다가 컴파일해 설치합니다.\nJob 파일은 또한 해당 테스트가 어떤 시스템 환경들에서 어떤 벤치마크를 어떤 인자를 줘가며 수행해야할지 등에 대한 내용을 담고 있습니다. 예컨대 jobs/aim7-fs-1brd.yaml job 은 xfs, ext4, btrfs, f2fs 파일 시스템 각각에 대해 aim7 을 돌려보도록 되어 있습니다.\n테스트 수행 다음 명령은 ebizzy job 으로 기술된 테스트를 실제 수행시킵니다:\n$ sudo lkp run jobs/ebizzy.yaml job 쪼개기 ebizzy.yaml 은 시스템 소유 CPU 코어 갯수 2배 갯수의 쓰레드를 사용해 ebizzy 를 10초간 돌리는 실험을 100번 반복하도록 되어 있습니다. 즉, 실험의 경우의 수가 하나입니다. 그러나, 앞서 설명한 aim7-fs-1brd 와 같이 다양한 구성을 사용하게 되어 있는 경우, 한가지 구성에 대해서만 반복 실험을 하고 싶을 수 있을 겁니다. 이런 경우 다음 명령으로 job 을 쪼갤 수 있습니다:\n$ sudo lkp split jobs/ebizzy.yaml 이 커맨드는 인자로 넣은 job 파일을 쪼개서 현재 디렉토리에 쪼개진 job 파일들을 저장합니다. 어떤 구성이 쪼개졌는지는 파일 이름으로 볼 수 있습니다. ebizzy.yaml 을 쪼개면 ebizzy-200%-100x-10s.yaml 라는 이름의 한개의 job 파일이 생성됩니다. 앞서 이야기한 aim7-fs-1brd.yaml 을 쪼개면 다음과 같이 많은 수의 job 이 생성됩니다:\naim7-fs-1brd-1BRD_48G-btrfs-creat-clo-4.yaml aim7-fs-1brd-1BRD_48G-f2fs-creat-clo-1500.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_cp-1500.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_cp-3000.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_rd-9000.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_rd-9000.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_rr-1500.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_rr-3000.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_rw-1500.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_rw-3000.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_src-500.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_src-3000.yaml aim7-fs-1brd-1BRD_48G-btrfs-disk_wrt-1500.yaml aim7-fs-1brd-1BRD_48G-f2fs-disk_wrt-3000.yaml aim7-fs-1brd-1BRD_48G-btrfs-sync_disk_rw-10.yaml aim7-fs-1brd-1BRD_48G-f2fs-sync_disk_rw-600.yaml aim7-fs-1brd-1BRD_48G-ext4-creat-clo-1000.yaml aim7-fs-1brd-1BRD_48G-xfs-creat-clo-1500.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_cp-3000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_cp-3000.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_rd-9000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_rd-9000.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_rr-3000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_rr-3000.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_rw-3000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_rw-3000.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_src-3000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_src-3000.yaml aim7-fs-1brd-1BRD_48G-ext4-disk_wrt-3000.yaml aim7-fs-1brd-1BRD_48G-xfs-disk_wrt-3000.yaml aim7-fs-1brd-1BRD_48G-ext4-sync_disk_rw-600.yaml aim7-fs-1brd-1BRD_48G-xfs-sync_disk_rw-600.yaml 테스트 결과 확인 테스트에 사용된 벤치마크 수행의 결과와 테스트 동안의 시스템 프로파일링 결과는 /lkp/result/ 디렉토리 밑에 \u0026lt;job name\u0026gt;/\u0026lt;configuration\u0026gt;/\u0026lt;host name\u0026gt;/\u0026lt;os distribution name\u0026gt;/\u0026lt;kernel config\u0026gt;/\u0026lt;gcc version\u0026gt;/\u0026lt;kernel version\u0026gt;/\u0026lt;unique id\u0026gt; 의 계층 구조로 저장됩니다. 또한, 이 실험 결과를 parsing 할 수 있는 경우엔 .json 파일을 만들어 줘서 parsing 된 결과 값도 보여줍니다.\n또한, 최근의 테스트 결과는 테스트 돌린 디렉토리에 result/ 라는 이름의, /lkp/result/ 아래 해당 디렉토리로의 심볼릭 링크를 만들어 줍니다.\nConclusion 이렇게 lkp-tests 가 무엇인지, 그리고 어떻게 사용할 수 있는지 알아봤습니다. 이제, 리눅스 커널 개발 커뮤니티에서 사용하는 리그레션 테스트를 여러분의 환경에서도 손쉽게 돌려볼 수 있습니다.\nReferences [1] https://01.org/lkp/documentation/0-day-test-service\n[2] https://github.com/intel/lkp-tests\n[3] https://01.org/blogs/jdu1/2017/lkp-tests-linux-kernel-performance-test-and-analysis-tool\n[4] https://wiki.archlinux.org/index.php/makepkg\n","date":1533198010,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1533198010,"objectID":"bc5d549eda5a8be4b4e32705d6f54102","permalink":"/post/lkp-tests/","publishdate":"2018-08-02T17:20:10+09:00","relpermalink":"/post/lkp-tests/","section":"post","summary":"리눅스 커널의 개발은 커뮤니티 주도입니다. 개발의 한 부분인 테스트 역시 커뮤니티 주도적입니다. 여러 개인 또는 단체가 커널을 각자의 방식으로 테스트 하고 그 결과를 공유합니다. 인텔에서는 0-day 서비스[1] 라는 서비스를 자체적으로 돌리는데, 이 서비스는 최신 리눅스 커널을 가져다가 빌드하고 다양한 기능 / 성능 테스트를 돌리고 그 결과 발견된 regression 을 LKML 에 메일로 보내주는 일을 합니다. 말하자면 Continuous Integration (CI) 이죠.\nLinux Kernel Performance (LKP) Tests[2] 는 0-day 서비스에서 기능 / 성능 테스트를 수행하는데 사용되는 도구입니다.","tags":["linux","test","evaluation","benchmark"],"title":"Linux Kernel Performance (LKP) Tests","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com\n2018-09-02 14:45 PDT\nLinux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com\n2018-08-26 14:49 PDT\nLinux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com\n2018-08-12 14:10:49 PDT\nLinux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com\n2018-08-05 12:58 PDT\nLinux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com\n2018-07-29 22:09 UTC\nLinux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com\n2018-07-23 20:46 UTC\nLinux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com\n2018-07-15 20:28 UTC\nLinux 4.18-rc4 https://lore.kernel.org/lkml/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com/T/#u\n2018-07-08 23:57 UTC\nLinux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com\n2018-07-01 23:46 UTC\n","date":1532909648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532909648,"objectID":"31e7b05f758f5fcf8f905159347f8235","permalink":"/post/linux_release_history/","publishdate":"2018-07-30T09:14:08+09:00","relpermalink":"/post/linux_release_history/","section":"post","summary":"Linux 4.19-rc2 https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com\n2018-09-02 14:45 PDT\nLinux 4.19-rc1 https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com\n2018-08-26 14:49 PDT\nLinux 4.18 https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com\n2018-08-12 14:10:49 PDT\nLinux 4.18-rc8 https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com\n2018-08-05 12:58 PDT\nLinux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com\n2018-07-29 22:09 UTC\nLinux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com\n2018-07-23 20:46 UTC\nLinux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com\n2018-07-15 20:28 UTC\nLinux 4.18-rc4 https://lore.kernel.org/lkml/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com/T/#u\n2018-07-08 23:57 UTC\nLinux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com\n2018-07-01 23:46 UTC","tags":[],"title":"Linux Release History","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com\n일곱번째 rc 릴리즈입니다. 별다른 일 없으면 다음주에 4.18이 릴리즈 되겠다고 토발즈도 이야기 하는군요.\n[PATCH v4 0/6] kmalloc-reclaimable caches https://lkml.kernel.org/r/20180731090649.16028-1-vbabka@suse.cz\n내부적으로 SLAB 할당자를 사용하는 kmem cache 들은 SLAB_RECLAIM_ACCOUNT 플래그를 가지고 생성될 경우에 시스템 메모리가 부족한 경우 기존에 할당받은 오브젝트들을 회수해도 좋다고 알리게 됩니다.\n일반적인 kmem cache 들은 이 플래그 없이 생성되서는 시스템의 메모리가 부족한 경우에 회수되어도 좋은 오브젝트의 할당에 사용되기도 하는데, 다양한 크기의 오브젝트들은 SLAB_RECLAIM_ACCOUNT 플래그를 가진 하나의 kmem cache 에서 처리될 수 없기 때문이죠. dcache 의 external name 들이 그 예입니다.\n이와 비슷한 경우들을 해결하기 위해 이 패치셋은 kmalloc cache 에 SLAB_RECLAIM_ACCOUNT 와 비슷한 특성을 갖는 변종을 kmalloc-rcl-x 라는 이름으로 만들었습니다. kmalloc() 시에 __GFP_RECLAIMABLE 플래그를 넣으면 이 캐시에서 메모리가 할당됩니다.\n[PATCH] swap: Use __try_to_reclaim_swap() in free_swap_and_cache() https://lkml.kernel.org/r/20180803123014.15431-1-ying.huang@intel.com\n스왑 엔트리를 회수하는 코드 경로는 free_swap_and_cache() 가 있고 __try_to_reclaim_swap() 이 있는데, 코딩 스타일 빼고는 실제 하는 일이 거의 똑같습니다. 이 패치는 free_swap_and_cache() 에서 내부적으로 __try_to_reclaim_cache() 를 사용하게 함으로써 코드의 가독성을 높이고 잠재적 버그를 줄였습니다.\n","date":1532908152,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532908152,"objectID":"ce87659732138d4d6049ec63a72bfc00","permalink":"/post/lkml_news_v4.18-rc7/","publishdate":"2018-07-30T08:49:12+09:00","relpermalink":"/post/lkml_news_v4.18-rc7/","section":"post","summary":"Linux 4.18-rc7 https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com\n일곱번째 rc 릴리즈입니다. 별다른 일 없으면 다음주에 4.18이 릴리즈 되겠다고 토발즈도 이야기 하는군요.\n[PATCH v4 0/6] kmalloc-reclaimable caches https://lkml.kernel.org/r/20180731090649.16028-1-vbabka@suse.cz\n내부적으로 SLAB 할당자를 사용하는 kmem cache 들은 SLAB_RECLAIM_ACCOUNT 플래그를 가지고 생성될 경우에 시스템 메모리가 부족한 경우 기존에 할당받은 오브젝트들을 회수해도 좋다고 알리게 됩니다.\n일반적인 kmem cache 들은 이 플래그 없이 생성되서는 시스템의 메모리가 부족한 경우에 회수되어도 좋은 오브젝트의 할당에 사용되기도 하는데, 다양한 크기의 오브젝트들은 SLAB_RECLAIM_ACCOUNT 플래그를 가진 하나의 kmem cache 에서 처리될 수 없기 때문이죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.18-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com\n이번 rc는 평소보다 조금 크게 되었는데, 네트워킹 쪽 메인테이너인 David 가 많은 수정사항을 아직 보내지 않았다가 이번에 모아서 보냈기 때문이라는군요. 그렇다 해도 그렇게 큰 양까진 아니라는 토발즈의 설명입니다.\n지난 rc5 작업 주간을 귀찮게 했던 VM 버그에 대한 두줄의 수정이 rc5 에 들어갔었지만 32비트 환경에 대한 고려가 없었기에 이번에 그 수정이 들어갔다는군요.\n[PATCH 0/7] memory management documentation updates https://lkml.kernel.org/r/1532517970-16409-1-git-send-email-rppt@linux.vnet.ibm.com\n메모리 관리 부분 문서화 업데이트입니다. sphinx 기반 문서화 업데이트를 일부 메인테이너들은 반기지 않는 것도 사실이지만, 확실히 가독성이 좋아진 덕에 이런 문서화 노력이 더 활발해 지는 것 아닌가 하는 생각도 드는군요.\n","date":1532380793,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532380793,"objectID":"ccc28e72ed9d1df02c8f34f0f318dbbc","permalink":"/post/lkml_news_v4.18-rc6/","publishdate":"2018-07-24T06:19:53+09:00","relpermalink":"/post/lkml_news_v4.18-rc6/","section":"post","summary":"Linux 4.18-rc6 https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com\n이번 rc는 평소보다 조금 크게 되었는데, 네트워킹 쪽 메인테이너인 David 가 많은 수정사항을 아직 보내지 않았다가 이번에 모아서 보냈기 때문이라는군요. 그렇다 해도 그렇게 큰 양까진 아니라는 토발즈의 설명입니다.\n지난 rc5 작업 주간을 귀찮게 했던 VM 버그에 대한 두줄의 수정이 rc5 에 들어갔었지만 32비트 환경에 대한 고려가 없었기에 이번에 그 수정이 들어갔다는군요.\n[PATCH 0/7] memory management documentation updates https://lkml.kernel.org/r/1532517970-16409-1-git-send-email-rppt@linux.vnet.ibm.com\n메모리 관리 부분 문서화 업데이트입니다. sphinx 기반 문서화 업데이트를 일부 메인테이너들은 반기지 않는 것도 사실이지만, 확실히 가독성이 좋아진 덕에 이런 문서화 노력이 더 활발해 지는 것 아닌가 하는 생각도 드는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.18-rc6","type":"post"},{"authors":null,"categories":[],"content":"리눅스 커널 커뮤니티는 버그 레포팅, 패치 업로드, 리뷰, 릴리즈, 토론 등등 모든 활동은 이메일을 통해 이루어집니다. 이 포스트에서는 리누스 토발즈도 쓰는 이메일 클라이언트인 Alpine 을 gmail 과 연동하는 방법을 알아봅니다.\n먼저 alpine 설치는 대부분 리눅스 배포판의 패키지 시스템에 등록되어 있으므로 해당 패키지 시스템을 사용해 쉽게 설치할 수 있습니다. 데비안 계열이면 apt install alpine, 페도라 계열이면 dnf install alpine 이죠.\ngmail imap 정보 입력 S (Settings) -\u0026gt; L (collectionLists) -\u0026gt; A (Add Cltn)\nNickname: gmail or anything Server: imap.gmail.com/ssl/user=sj@gmail.com\n^X (Commit change) E (Exit Setup)\nSMTP 서버 설정 S (Setup) -\u0026gt; C (config)\nSMTP server: smtp.gmail.com/tls/user=sj@gmail.com\n쓰레드 기반 소팅 [Sort key]: tHread (enter)\n리눅스 커널 커뮤니티에서 요구하는 설정 [Sending Preferences]: Do Not Send Flowed Text, Strip Whitespace Before Sending\nReferences https://harbhag.wordpress.com/2010/07/14/configure-alpine-to-sendreceive-emails-from-gmail/\n","date":1531915794,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531915794,"objectID":"beae6c23edfdab36db04c7410c6b0e8f","permalink":"/post/alpine-for-lkml/","publishdate":"2018-07-18T21:09:54+09:00","relpermalink":"/post/alpine-for-lkml/","section":"post","summary":"리눅스 커널 커뮤니티는 버그 레포팅, 패치 업로드, 리뷰, 릴리즈, 토론 등등 모든 활동은 이메일을 통해 이루어집니다. 이 포스트에서는 리누스 토발즈도 쓰는 이메일 클라이언트인 Alpine 을 gmail 과 연동하는 방법을 알아봅니다.\n먼저 alpine 설치는 대부분 리눅스 배포판의 패키지 시스템에 등록되어 있으므로 해당 패키지 시스템을 사용해 쉽게 설치할 수 있습니다. 데비안 계열이면 apt install alpine, 페도라 계열이면 dnf install alpine 이죠.\ngmail imap 정보 입력 S (Settings) -\u0026gt; L (collectionLists) -\u0026gt; A (Add Cltn)","tags":[],"title":"Alpine for LKML","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com\n다섯번째 rc 릴리즈입니다. 토발즈 개인적으로는 조금 바쁘단 느낌이 있었지만 숫자로 보면 평범한 rc 릴리즈 주간이었다는 평입니다.\n토발즈를 귀찮게 만들었던 건 VM 쪽 버그로, 단 두줄의 수정으로 고쳐졌다는데, 아무래도 아래 패치인 것 같군요: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bce73e4842390f7b7309c8e253e139db71288ac3\n그리고 repeatable sequence 에 대한 cleanup 도 있었군요.\n[GIT PULL rcu/next] RCU commits for 4.19 https://lkml.kernel.org/r/20180716175125.GA4287@linux.vnet.ibm.com\n4.19 리눅스 릴리즈를 위한 RCU 쪽 변경사항들 pull request 입니다.\n","date":1531688853,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531688853,"objectID":"c74747702cbd8233734c72cda5f777c4","permalink":"/post/lkml_news_v4.18-rc5/","publishdate":"2018-07-16T06:07:33+09:00","relpermalink":"/post/lkml_news_v4.18-rc5/","section":"post","summary":"Linux 4.18-rc5 https://lkml.kernel.org/r/CA+55aFwfMr2D2A_yesUyt_Lo3XMRk9epzgeBMt2HxMHiXMDYcg@mail.gmail.com\n다섯번째 rc 릴리즈입니다. 토발즈 개인적으로는 조금 바쁘단 느낌이 있었지만 숫자로 보면 평범한 rc 릴리즈 주간이었다는 평입니다.\n토발즈를 귀찮게 만들었던 건 VM 쪽 버그로, 단 두줄의 수정으로 고쳐졌다는데, 아무래도 아래 패치인 것 같군요: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bce73e4842390f7b7309c8e253e139db71288ac3\n그리고 repeatable sequence 에 대한 cleanup 도 있었군요.\n[GIT PULL rcu/next] RCU commits for 4.19 https://lkml.kernel.org/r/20180716175125.GA4287@linux.vnet.ibm.com\n4.19 리눅스 릴리즈를 위한 RCU 쪽 변경사항들 pull request 입니다.","tags":[],"title":"Lkml_news_v4.18 Rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.18-rc4 https://lkml.kernel.org/r/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com\n어느덧 네번째 RC 버전 릴리즈입니다. 지루할 정도로 평범한 릴리즈라는군요. 대부분 드라이버쪽 업데이트이고, bpf, cifs, ext4, 스케쥴러, 그리고 일부 arch 업데이트가 대부분입니다.\n[PATCH v9 00/17] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n)) https://lkml.kernel.org/r/153112469064.4097.2581798353485457328.stgit@localhost.localdomain\nshrink_slab() 의 compexity 를 O(n^2) 에서 O(n) 으로 낮춰 확장성을 높인 패치의 아홉번째 버전입니다.\n[PATCH 0/2] CMA: remove unsupported gfp mask parameter https://lkml.kernel.org/r/20180709122018eucas1p277147b1e6385d552b5a8930d0a8ba91c~-sqSan6292733527335eucas1p2-@eucas1p2.samsung.com\ncma_alloc() 과 dma_alloc_from_contiguous() 함수는 gfp mask 패러미터를 받지만 실질적으론 __GFP_NORARN 플래그만을 지원하고 있습니다. 이 패치는 따라서 해당 패러미터를 no_warn 이란 이름의 boolean 타입으로 교체합니다.\n[RFC PATCH] mm, page_alloc: double zone\u0026rsquo;s batchsize https://lkml.kernel.org/r/20180711055855.29072-1-aaron.lu@intel.com\n리눅스 커널 페이지 할당자는 잘 알려진 Buddy allocator 입니다만, 멀티 CPU 환경에서의 컨텐션을 줄이기 위해 per-CPU pageset 이란 걸 존별로 가지고 있어서 Buddy allocator 로부터는 한번에 듬뿍 페이지를 할당받아와 CPU 별 pageset 에 넣어두고서 여기서 한동안 할당받고, 이게 텅 비었을 때 buddy allocator 에게 다시 여러개 page 를 할당받습니다. 이런 형태를 batching 이라고 하죠.\n이 batch 크기, 즉 한번에 buddy allocator 에서 할당받는 페이지의 갯수는 적정해야 합니다. 이 값이 10년전에 두배로 커져 31이 된 후 유지되고 있습니다. 따라서 오늘날에는 이 값이 너무 작다는 생각이 있어 다시 한번 두배로 늘리는 (31에서 63 으로) 패치입니다.\nwill-it-scale/page_fault1, ebizzy, oltp, kbuild, pigz, netperf, vm-scalability 등의 벤치마크를 사용했군요.\n전체적으로 성능 향상이 있었지만 batch 크기가 커진만큼 실제 buddy allocator 에게 할당을 요청할 때 반응시간이 느려지는 문제가 있긴 합니다.\n[PATCH v2] kvm/x86: Inform RCU of quiescent state when entering guest mode https://lkml.kernel.org/r/20180711180101.3711464-1-dwmw2@infradead.org\nRCU reader critical section 은 가능한 빨리 끝나야 합니다. 그렇지 않으면 grace period 가 길어져 시스템 메모리 사용량이 늘어날 수 있죠. RCU reader critical section 내에서의 sleeping 을 하지 못하게 함으로써 리눅스 커널은 이를 가능하게 합니다만, VM 환경에서는 reader critical section 내에서 VM 자체가 CPU 를 놓을 수 있으므로 critical section 이 길어지는 문제가 가능합니다. 이 패치는 guest mode 에 들어갈 때 이에 관한 정보를 알림으로써 이 문제를 해결할 수 있게 합니다.\n","date":1531098065,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531098065,"objectID":"020761974decd8624c086094c805e9c6","permalink":"/post/lkml_news_v4.18-rc4/","publishdate":"2018-07-09T10:01:05+09:00","relpermalink":"/post/lkml_news_v4.18-rc4/","section":"post","summary":"Linux 4.18-rc4 https://lkml.kernel.org/r/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com\n어느덧 네번째 RC 버전 릴리즈입니다. 지루할 정도로 평범한 릴리즈라는군요. 대부분 드라이버쪽 업데이트이고, bpf, cifs, ext4, 스케쥴러, 그리고 일부 arch 업데이트가 대부분입니다.\n[PATCH v9 00/17] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n)) https://lkml.kernel.org/r/153112469064.4097.2581798353485457328.stgit@localhost.localdomain\nshrink_slab() 의 compexity 를 O(n^2) 에서 O(n) 으로 낮춰 확장성을 높인 패치의 아홉번째 버전입니다.\n[PATCH 0/2] CMA: remove unsupported gfp mask parameter https://lkml.kernel.org/r/20180709122018eucas1p277147b1e6385d552b5a8930d0a8ba91c~-sqSan6292733527335eucas1p2-@eucas1p2.samsung.com\ncma_alloc() 과 dma_alloc_from_contiguous() 함수는 gfp mask 패러미터를 받지만 실질적으론 __GFP_NORARN 플래그만을 지원하고 있습니다.","tags":["linux","kernel","lkml","news"],"title":"Lkml_news_v4.18 Rc4","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com\n4.18 을 향하는 세번째 릴리즈입니다. 그간 일본에 중국을 방문하고 있던 토발즈가 집에 돌아와서 이번엔 평소처럼 한국시간으로는 월요일 아침 릴리즈가 되었군요.\n큰 이상은 없고 드라이버, arch, 파일시스템 등에 변경이 있군요.\n그리고, 오늘이 리누스 토발즈가 리눅스 파운데이션 소속으로 일하게 된지 15주년이라는군요. 리눅스 파운데이션도 리눅스도 오래오래 건강했으면 좋겠습니다.\n[PATCH v2 0/2] x86/numa_emulation: Introduce uniform split capability https://lkml.kernel.org/r/153089327581.27680.11402583130804677094.stgit@dwillia2-desk3.amr.corp.intel.com\nX86 에서는 커널 패러미터를 줘서 NUMA emulation 이 가능한데, 각 NUMA node 의 메모리 사이즈를 모두 똑같게 하기보다는 요청된 NUMA node 수를 맞추는걸 우선시 하고 있습니다. 이 패치는 해당 커널 패러미터에 \u0026lsquo;U\u0026rsquo; suffix 를 주면 사이즈를 동일하게 맞추는 걸 우선시하게 만들어주도록 합니다.\n","date":1530497904,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530497904,"objectID":"e434dbc317c533d4f3408a29daa9ba74","permalink":"/post/lkml_news_v4.18-rc3/","publishdate":"2018-07-02T11:18:24+09:00","relpermalink":"/post/lkml_news_v4.18-rc3/","section":"post","summary":"Linux 4.18-rc3 https://lkml.kernel.org/r/CA+55aFwGk-pWKKCtp+kQUN_hov9tW+vUo6Wgob91bewwBL17fA@mail.gmail.com\n4.18 을 향하는 세번째 릴리즈입니다. 그간 일본에 중국을 방문하고 있던 토발즈가 집에 돌아와서 이번엔 평소처럼 한국시간으로는 월요일 아침 릴리즈가 되었군요.\n큰 이상은 없고 드라이버, arch, 파일시스템 등에 변경이 있군요.\n그리고, 오늘이 리누스 토발즈가 리눅스 파운데이션 소속으로 일하게 된지 15주년이라는군요. 리눅스 파운데이션도 리눅스도 오래오래 건강했으면 좋겠습니다.\n[PATCH v2 0/2] x86/numa_emulation: Introduce uniform split capability https://lkml.kernel.org/r/153089327581.27680.11402583130804677094.stgit@dwillia2-desk3.amr.corp.intel.com\nX86 에서는 커널 패러미터를 줘서 NUMA emulation 이 가능한데, 각 NUMA node 의 메모리 사이즈를 모두 똑같게 하기보다는 요청된 NUMA node 수를 맞추는걸 우선시 하고 있습니다.","tags":[],"title":"Lkml_news_v4.18 Rc3","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.18-rc2 https://lkml.kernel.org/r/alpine.LFD.2.21.999.1806242116240.20621@xps13.linux-foundation.org\n이번주도 지난주처럼 평소보단 빠른 릴리즈입니다. 토발즈가 여전히 여행중이라는군요. 지난주엔 일본이었고, 이번주는 중국이라는군요. 그런고로 중국 시간으로 일요일 저녁의 rc 릴리즈입니다.\n이번 rc 에서도 큰 변경은 없고 평범한 rc 입니다.\n[PATCH tip/core/rcu 0/40] RCU -\u0026gt;gp_seq conversion for v4.19 https://lkml.kernel.org/r/20180626000841.GA15696@linux.vnet.ibm.com\nRCU 의 -\u0026gt;gpnum 과 -\u0026gt;completed 필드를 하나의 -\u0026gt;gp_seq 로 대체하는 패치입니다. 그동안 -\u0026gt;gpnum 과 -\u0026gt;completed 로 grace period 를 관리해오고 있지만 사실상 -\u0026gt;gpnum 과 -\u0026gt;completed 는 수가 똑같거나 하나 차이이니 하나의 bit 으로도 같은 정보를 처리할 수 있을 뿐더러 로드 횟수를 두번에서 한번으로 줄일 수 있다는 거죠.\n","date":1529883922,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1529883922,"objectID":"23a248be6fd760e37bc5d782caea217d","permalink":"/post/lkml_news_v4.18-rc2/","publishdate":"2018-06-25T08:45:22+09:00","relpermalink":"/post/lkml_news_v4.18-rc2/","section":"post","summary":"Linux 4.18-rc2 https://lkml.kernel.org/r/alpine.LFD.2.21.999.1806242116240.20621@xps13.linux-foundation.org\n이번주도 지난주처럼 평소보단 빠른 릴리즈입니다. 토발즈가 여전히 여행중이라는군요. 지난주엔 일본이었고, 이번주는 중국이라는군요. 그런고로 중국 시간으로 일요일 저녁의 rc 릴리즈입니다.\n이번 rc 에서도 큰 변경은 없고 평범한 rc 입니다.\n[PATCH tip/core/rcu 0/40] RCU -\u0026gt;gp_seq conversion for v4.19 https://lkml.kernel.org/r/20180626000841.GA15696@linux.vnet.ibm.com\nRCU 의 -\u0026gt;gpnum 과 -\u0026gt;completed 필드를 하나의 -\u0026gt;gp_seq 로 대체하는 패치입니다. 그동안 -\u0026gt;gpnum 과 -\u0026gt;completed 로 grace period 를 관리해오고 있지만 사실상 -\u0026gt;gpnum 과 -\u0026gt;completed 는 수가 똑같거나 하나 차이이니 하나의 bit 으로도 같은 정보를 처리할 수 있을 뿐더러 로드 횟수를 두번에서 한번으로 줄일 수 있다는 거죠.","tags":[],"title":"Lkml_news_v4.18 Rc2","type":"post"},{"authors":null,"categories":[],"content":"Linux 4.18-rc1 https://lkml.kernel.org/r/CA+55aFw34Dh6p0qAZ_Ja=fjuJ89ojZZTWtmrRPKmB1QuP3C7hw@mail.gmail.com\n평소보다 많이 빠르게 4.18 머지윈도우가 닫혔습니다. 토발즈가 지금 일본에 있기 때문에 자기는 이미 일요일이고, 오후엔 뱃놀이 하러 갈거라서 일찍 릴리즈 한다네요.\n전체적으로 크기에서도 한 일에 있어서도 평범한 릴리즈입니다. 4.17 에서 더이상 사용되지 않는 과거 코드 삭제를 많이 했던 것처럼 이번에도 미사용 코드 제거가 좀 있군요, 하지만 4.17 때만큼 큰 변화는 아닙니다.\n제거된 컴포넌트들 가운데 특이할만한 점은 Lustre 의 제거군요. Staging 트리에서 머물던 Lustre 는 계속 out of tree 로 개발이 진행되어왔고, Staging 딱지를 떼지 못한채 커널 소스트리에서 제거되게 되었습니다.\n[PATCH v7 REBASED 00/17] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n)) https://lkml.kernel.org/r/152931465724.27697.12828290733260370115.stgit@localhost.localdomain\n지난번에도 소개한 패치의 v7 입니다. 시스템에 여러 shrinker 들과 memcg cgroup 이 등록되어 있는 경우 이 shrinker 의 갯수를 n 이라 할 때 O(n^2) 의 time complexity 로 shrink_slab() 수행시간이 늘어나게 되어있는데 이 문제를 해결한 패치입니다. 이 문제를 보기 위해 다음과 같은 테스트를 사용했습니다.\n$echo 1 \u0026gt; /sys/fs/cgroup/memory/memory.use_hierarchy $mkdir /sys/fs/cgroup/memory/ct $echo 4000M \u0026gt; /sys/fs/cgroup/memory/ct/memory.kmem.limit_in_bytes $for i in `seq 0 4000`; do mkdir /sys/fs/cgroup/memory/ct/$i; echo $$ \u0026gt; /sys/fs/cgroup/memory/ct/$i/cgroup.procs; mkdir -p s/$i; mount -t tmpfs $i s/$i; touch s/$i/file; done $time echo 3 \u0026gt; /proc/sys/vm/drop_caches ct/0 부터 ct/4000 까지 4001개의 메모리 cgroup 들을 만들어 놓고 tmpfs 를 만든 후 거기 파일을 만들어 메모리를 소모하게 한 후 drop_caches 를 통해 shrink_slab() 이 발동되게 했군요. 패치 저자의 환경에서의 테스트 결과는 다음과 같습니다:\n0.00user 13.78system 0:13.78elapsed 99%CPU 0.00user 5.59system 0:05.60elapsed 99%CPU 0.00user 5.48system 0:05.48elapsed 99%CPU 0.00user 8.35system 0:08.35elapsed 99%CPU 0.00user 8.34system 0:08.35elapsed 99%CPU 이 패치셋은 time complexity 가 O(n) 이 되도록 합니다. 패치셋이 적용된 후의 테스트 결과는 다음과 같이 548배 이상 개선되었습니다!\n0.00user 1.10system 0:01.10elapsed 99%CPU 0.00user 0.00system 0:00.01elapsed 64%CPU 0.00user 0.01system 0:00.01elapsed 82%CPU 0.00user 0.00system 0:00.01elapsed 64%CPU 0.00user 0.01system 0:00.01elapsed 82%CPU [PATCH 00/11] docs/mm: add boot time memory management docs https://lkml.kernel.org/r/1529341199-17682-1-git-send-email-rppt@linux.vnet.ibm.com\n초기 부팅 시점에서의 메모리 관리에 대한 문서화를 개선하고 이에 대한 문서를 추가하는 패치입니다. 추가된 문서는 Documentation/core-api/boot-time-mm.rst 에 있습니다.\n","date":1529204399,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1529204399,"objectID":"62cb7eebd7a4085d493aaa9809a1897d","permalink":"/post/lkml_news_v4.18-rc1/","publishdate":"2018-06-17T11:59:59+09:00","relpermalink":"/post/lkml_news_v4.18-rc1/","section":"post","summary":"Linux 4.18-rc1 https://lkml.kernel.org/r/CA+55aFw34Dh6p0qAZ_Ja=fjuJ89ojZZTWtmrRPKmB1QuP3C7hw@mail.gmail.com\n평소보다 많이 빠르게 4.18 머지윈도우가 닫혔습니다. 토발즈가 지금 일본에 있기 때문에 자기는 이미 일요일이고, 오후엔 뱃놀이 하러 갈거라서 일찍 릴리즈 한다네요.\n전체적으로 크기에서도 한 일에 있어서도 평범한 릴리즈입니다. 4.17 에서 더이상 사용되지 않는 과거 코드 삭제를 많이 했던 것처럼 이번에도 미사용 코드 제거가 좀 있군요, 하지만 4.17 때만큼 큰 변화는 아닙니다.\n제거된 컴포넌트들 가운데 특이할만한 점은 Lustre 의 제거군요. Staging 트리에서 머물던 Lustre 는 계속 out of tree 로 개발이 진행되어왔고, Staging 딱지를 떼지 못한채 커널 소스트리에서 제거되게 되었습니다.","tags":[],"title":"Lkml_news_v4.18 Rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.17 https://lkml.kernel.org/r/CA+55aFxhx_tKGm02UySguvbyfB_7oTF31QfgOHCK0YkBvmfV0g@mail.gmail.com\n4.17 버전 리눅스 릴리즈입니다. 지난주에 토발즈가 이야기한 것처럼 별다른 지연 없이 릴리즈 되었군요.\ngit object 의 갯수라던지 릴리즈를 위한 스크립트 등이 리눅스 5.x 버전으로의 메이저 버전 업데이트가 될 준비가 되었다고 하지만 토발즈는 딱히 5.x 로 아직은 넘어갈 생각이 없군요. 너무 멀지 않은 미래에 넘어가겠지만, 적어도 지금은 아니라고 합니다.\n항상 그렇듯 이 릴리즈는 4.18을 위한 머지 윈도우의 시작이기도 한데, 토발즈는 두번째 주에 여행을 갈거라 가능하면 첫째주에 중요한 머지를 마무리 했으면 한다고 하네요.\n[PATCH v13 00/72] Convert page cache to XArray https://lkml.kernel.org/r/20180611140639.17215-1-willy@infradead.org\nRadix tree 를 대체하기위한 목적으로 Matthew Wilcox 가 개발중인 XArray 의 구현과 Page cache 가 이 자료구조를 사용하도록 변경하는 패치의 13번째 버전입니다. 작년 OSSummit Europe 에서 처음 XArray 에 대한 발표를 들었는데 계속 발전중인 것 같군요.\nRe: [4.17 regression] Performance drop on kernel-4.17 visible on https://lkml.kernel.org/r/20180607110713.GJ32433@dhcp22.suse.cz\n4.16 대비 4.17 의 NUMA 시스템에서 Stream, Linpack, NAS 벤치마크 성능이 크게 떨어졌다는 레포트입니다. 최대 50% 까지의 성능 하락이 있었군요.\n","date":1528079356,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1528079356,"objectID":"ec1383893b0977ed219dc33e91e69d2a","permalink":"/post/lkml_news_v4.17/","publishdate":"2018-06-04T11:29:16+09:00","relpermalink":"/post/lkml_news_v4.17/","section":"post","summary":"Linux 4.17 https://lkml.kernel.org/r/CA+55aFxhx_tKGm02UySguvbyfB_7oTF31QfgOHCK0YkBvmfV0g@mail.gmail.com\n4.17 버전 리눅스 릴리즈입니다. 지난주에 토발즈가 이야기한 것처럼 별다른 지연 없이 릴리즈 되었군요.\ngit object 의 갯수라던지 릴리즈를 위한 스크립트 등이 리눅스 5.x 버전으로의 메이저 버전 업데이트가 될 준비가 되었다고 하지만 토발즈는 딱히 5.x 로 아직은 넘어갈 생각이 없군요. 너무 멀지 않은 미래에 넘어가겠지만, 적어도 지금은 아니라고 합니다.\n항상 그렇듯 이 릴리즈는 4.18을 위한 머지 윈도우의 시작이기도 한데, 토발즈는 두번째 주에 여행을 갈거라 가능하면 첫째주에 중요한 머지를 마무리 했으면 한다고 하네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17","type":"post"},{"authors":null,"categories":["Machine Learning"],"content":"이 글은 머신러닝 학습 환경으로도 널리 사용되는 Jupyter Notebook 과 Google Colab 에 대해 간단히 설명합니다.\nJupyter Notebook Jupyter Notebook [1] 은 대화형으로 프로그래밍 언어를 공부하고 실습해 볼 수 있도록 만들어진 개발 / 학습 환경입니다. 이 환경은 크게 노트북 문서, Jupyter Notebook App, Notebook kernel, 그리고 Notebook Dashboard 로 구성됩니다.\n노트북 문서 노트북 문서는 프로그램 코드 조각들과 Rich text (이걸 한글로 뭐라 해야 할지\u0026hellip;), 그리고 각 코드 조각의 수행 결과 로 구성됩니다. 백문이 불여일견, 이 링크 를 따라가 보시기 바랍니다. 링크는 간단한 파이썬 교육을 위해 만들어진 노트북 문서로, 코드를 수정하고 수행해 볼 수 있습니다. 텍스트도 수정할 수 있습니다. 문서에 코드 또는 텍스트 셀을 추가해 코드 셀에는 코드를, 텍스트 셀에는 텍스트를 작성할 수 있으며, 텍스트 셀에 작성할 수 있는 텍스트는 단순한 평문이 아니라 강조, 이탤릭 등의 효과를 포함할 수 있습니다. Jupyter Notebook 환경은 노트북 문서들을 읽어들여 Rich Text 를 저자가 의도한 모습대로 렌더링 해주고, 코드 셀을 사용자가 원하면 셀별로 수행시켜줍니다. 코드 셀의 좌측에 수행 버튼이 떠서, 이를 클릭하면 해당 셀을 수행하는 형태입니다. 문서 상의 모든 코드 셀의 일괄 수행 역시 가능합니다. 이 때, 앞서 수행된 코드 셀의 수행 결과는 다음에 수행되는 코드 셀에 영향을 끼칩니다. 예를 들어 특정 셀에서 전역 변수의 값을 변경했다면 다음에 수행하는 셀에 변경된 전역 변수의 값이 보입니다.\n이를 통해 Jupyter Notebook 사용자는 노트북 문서를 사용해 타인에게 학습시킬 문서를 작성하고 학습자가 곧바로 하나씩 수행해 볼 수 있게 해줄 수 있으며, 스스로 공부하는 사람도 자신이 공부한 내용을 쉽게 정리할 수 있게 해줍니다.\nJupyter Notebook App Jupyter Notebook App 은 Jupyter 노트북 문서를 읽어들여 작성자가 원한 모습으로 보여주고 코드의 수행 등을 대신해 주고, 또한 노트북 문서를 새로 작성할 수 있는 에디터 역할을 합니다. 서버-클라이언트 구조로 되어 있어 로컬 컴퓨터에 서버를 띄우고 웹브라우저로 접속해서 작업할 수도, 다른 컴퓨터에 띄워진 서버에 웹브라우저로 접속해 작업할 수도 있습니다. 일부 공개 Jupyter Notebook 서버도 서비스 되고 있습니다. Google Colab 역시 그런 형태입니다.\nGithub 은 웹인터페이스 상에서 Notebook 문서를 렌더링 해 보여주는 기능을 제공하고 있습니다.\nNotebook kernel 과 Notebook Dashboard 실제 코드의 수행을 담당하는게 Notebook kernel, 각 노트북 문서의 관리를 담당해 주는 인터페이스가 Dashboard 입니다. 커널은 프로그램이 언어별로 존재하며, Jupyter Notebook 에서는 다양한 언어의 커널을 지원하고 있습니다.\nGoogle Colab Jupyter Notebook 은 앞서 설명했듯 자신의 컴퓨터에 설치하고 서버를 띄울수도, 다른 컴퓨터에 설치하고 서버를 띄울 수도 있습니다. ... as a Service 의 시대인 만큼, Jupyter Notebook Server 를 서비스하는 회사들이 많습니다. Google Colab[2] 은 그런 서비스 중 하나입니다. 이 프로젝트는 머신러닝 교육과 연구를 돕기 위해 만들어진 Google 의 연구 프로젝트로, 결국은 하나의 Jupyter notebook 환경일 뿐인데, 어떠한 셋업도 필요 없고 구글 클라우드 위에서 동작합니다.\n노트북 문서는 구글 드라이브에 저장하고 불러올 수 있으며, Github 에 있는 노트북 문서도 읽어올 수 있습니다. 참고로 노트북 문서는 .ipynb 라는 확장자를 사용하는 텍스트 파일입니다. Colab 에서 작성한 노트북 문서를 .ipynb 확장자 파일로 곧바로 다운받을 수 있으므로 구글 드라이브로 공유하기 부담스러운 경우는 github 을 통해 공유해도 좋겠습니다. 뿐만 아니라 읽기만 하므로 다른 사람의 Jupyter Notebook 문서도 공개되어 있다면 얼마든지 불러올 수 있습니다.\nGithub 의 노트북 문서 불러오기 Github 의 노트북 파일을 불러오는 방법은 간단합니다. 먼저 Github 웹 인터페이스에 들어가 Google Colab 에서 읽고자 하는 문서의 github 상에서의 주소를 파악합니다. 대략 https://github.com/sjp38/jupyternb_hello/blob/master/jupyternb_hello.ipynb 와 같은 형태가 될겁니다. 여기서 https:// 를 제거하고 github.com 에서 ./com 을 제거한 후, https://colab.research.google.com/ 뒤에 붙여줍니다. 그러면 대략 https://colab.research.google.com/github/sjp38/jupyternb_hello/blob/master/jupyternb_hello.ipynb 같은 모습이 되겠죠. 이 주소를 웹브라우저에 입력하면, Colab 에 해당 노트북이 열리고 수행도 해볼 수 있습니다.\nSummary 머신러닝 학습에 많이 사용되는 Jupyter Notebook 과 머신러닝을 위한 Jupyter Notebook 서비스 중 하나인 Google Colab 에 대해 알아봤습니다. 저도 최근에야 알게 된 프로젝트인데, 코드와 그에 대한 설명을 정말 쉽고 효과적으로 공유할 수 있는 획기적 방법 같습니다. 다른 분야에도 널리 퍼지면 좋겠군요.\n[1] http://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/what_is_jupyter.html\n[2] https://colab.research.google.com/notebooks/welcome.ipynb\n","date":1527504709,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527504709,"objectID":"9856d41e53b4fe319f88d4c6725af74e","permalink":"/post/ml-study-env/","publishdate":"2018-05-28T19:51:49+09:00","relpermalink":"/post/ml-study-env/","section":"post","summary":"이 글은 머신러닝 학습 환경으로도 널리 사용되는 Jupyter Notebook 과 Google Colab 에 대해 간단히 설명합니다.\nJupyter Notebook Jupyter Notebook [1] 은 대화형으로 프로그래밍 언어를 공부하고 실습해 볼 수 있도록 만들어진 개발 / 학습 환경입니다. 이 환경은 크게 노트북 문서, Jupyter Notebook App, Notebook kernel, 그리고 Notebook Dashboard 로 구성됩니다.\n노트북 문서 노트북 문서는 프로그램 코드 조각들과 Rich text (이걸 한글로 뭐라 해야 할지\u0026hellip;), 그리고 각 코드 조각의 수행 결과 로 구성됩니다.","tags":["ML","Machine Learning","Jupyter Notebook","Google Colab"],"title":"머신러닝 학습/실습 환경 (Jupyter Notebook \u0026 Google Colab)","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.17-rc7 https://lkml.kernel.org/r/CA+55aFwUqz9z1Rf4Wwr29W7DeKxQ67qKEW5xty+JPyCY3aNQ=A@mail.gmail.com\n일곱번째 rc 입니다. 지난 몇주보다는 조금 변경사항이 있었지만 그렇다 해도 그렇게 심한 정도는 아니었기에 아마도 이게 마지막 rc 일 거라는군요.\n[PATCH 00/13] Introdue io.latency io controller for cgroups https://lkml.kernel.org/r/20180529211724.4531-1-josef@toxicpanda.com\nCgroup 에 응답시간 (latency) 기반의 I/O 컨트롤러를 추가하는 패치셋입니다. Cgroup 은 용량 기반의 컨트롤러는 많지만 응답시간 기반의 컨트롤러가 부족하다고 느껴왔는데, 역시 추가되어 가는군요.\n","date":1527471710,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527471710,"objectID":"b28d29ba6d00753da93c5f743f078e79","permalink":"/post/lkml_news_v4.17-rc7/","publishdate":"2018-05-28T10:41:50+09:00","relpermalink":"/post/lkml_news_v4.17-rc7/","section":"post","summary":"Linux 4.17-rc7 https://lkml.kernel.org/r/CA+55aFwUqz9z1Rf4Wwr29W7DeKxQ67qKEW5xty+JPyCY3aNQ=A@mail.gmail.com\n일곱번째 rc 입니다. 지난 몇주보다는 조금 변경사항이 있었지만 그렇다 해도 그렇게 심한 정도는 아니었기에 아마도 이게 마지막 rc 일 거라는군요.\n[PATCH 00/13] Introdue io.latency io controller for cgroups https://lkml.kernel.org/r/20180529211724.4531-1-josef@toxicpanda.com\nCgroup 에 응답시간 (latency) 기반의 I/O 컨트롤러를 추가하는 패치셋입니다. Cgroup 은 용량 기반의 컨트롤러는 많지만 응답시간 기반의 컨트롤러가 부족하다고 느껴왔는데, 역시 추가되어 가는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after 4.17-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v4.17-rc6 https://lkml.kernel.org/r/CA+55aFxxYQFL3mwsQcC+__R23ZmO8c3F0SThi6r44TdK0ePNDQ@mail.gmail.com\n여섯번째 release candidate 버전입니다. 이번 릴리즈에도 특기할 만한 일은 없었습니다. 이제 충분히 안정화 되었을 거라고 하는군요.\n[PATCH -mm -V3 00/21] mm, THP, swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180523082625.6897-1-ying.huang@intel.com\n이전에도 이 시리즈로 소개했던, THP 의 swap out 과 swap in 최적화 마지막 단계 패치의 세번째 버전입니다. 마지막 단계 이야기 하니 문득 인피니티워의 오역 논란이 떠오르는군요 ;) 두번째 버전 이후 특정 컨피규레이션에서의 빌드 버그를 수정했고, mmotm/master 브랜치의 5월 18일자 버전으로 rebase 한게 차이점의 전부군요.\nRAM 으로 PMEM 을 시뮬레이션 하는 환경에서 vm-scalability 라는 벤치마크를 사용해 16개 프로세스가 anonymous page 를 상당량 할당받고 반복해서 접근하는 워크로드로 성능 차이를 비교했습니다. 이로 인해 패치 전 대비 워크로드 처리량 (throughput) 이 992.8% 향상되었습니다.\n[PATCH v3 0/4] fixes, cleanups for rcu/dev https://lkml.kernel.org/r/20180521044220.123933-1-joel@joelfernandes.org\nRCU 코드의 주석, 변수 사용, 변수 이름 등의 개선 패치셋입니다.\n[RESEND PATCH V5 00/33] block: support multipage bvec https://lkml.kernel.org/r/20180525034621.31147-1-ming.lei@redhat.com\n하나의 struct bio_bvec 이 물리적으로 연속적인 복수개의 페이지를 가질 수 있게 하는 패치입니다. 시스템의 메모리가 거대해지고 THP 등이 널리 쓰임에 따라 이런 변화가 필요했다는군요.\n[PATCH -V2 -mm 0/4] mm, huge page: Copy target sub-page last when copy huge page https://lkml.kernel.org/r/20180524005851.4079-1-ying.huang@intel.com\nHuge page 의 복사 시에는 source 와 destination page 각각에 접근을 해야 하므로, 2 MiB huge page 를 사용한다 가정하면 총 4 MiB 데이터 액세스가 필요합니다. 예컨대 Xeon E5 v3 2699 CPU 는 18개의 코어, 36개 쓰레드, 그리고 45 MiB Last Level Cache 를 가지므로 코어별로는 2.5 MiB, 쓰레드별로는 1.25 MiB 의 Last Level Cache 밖에 갖지 못하므로, 여기서 huge page 복사가 일어나면 자신의 Last Level Cache 를 모조리 접근해서 데이터가 flooding 나고 이후 데이터 접근은 cache miss 가 날 수 있게 됩니다.\n이 패치셋은 target huge page 의 sub-page 를 마지막에 복사하도록 복사 시의 데이터 접근 순서를 약간 바꿔서 대부분의 경우에는 캐시 미스를 좀 더 줄일 수 있도록 했습니다.\nvm-scalability 의 anon-cow-seq 테스트 케이스를 2 socket Xeon E5 v3 2699 시스템에서 돌려본 결과, 약 16.6% 까지의 성능 향상이 있었다고 합니다.\n","date":1526865556,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1526865556,"objectID":"15542ae8b9e55512a01b7901a18496a7","permalink":"/post/lkml_news_v4.17-rc6/","publishdate":"2018-05-21T10:19:16+09:00","relpermalink":"/post/lkml_news_v4.17-rc6/","section":"post","summary":"Linux v4.17-rc6 https://lkml.kernel.org/r/CA+55aFxxYQFL3mwsQcC+__R23ZmO8c3F0SThi6r44TdK0ePNDQ@mail.gmail.com\n여섯번째 release candidate 버전입니다. 이번 릴리즈에도 특기할 만한 일은 없었습니다. 이제 충분히 안정화 되었을 거라고 하는군요.\n[PATCH -mm -V3 00/21] mm, THP, swap: Swapout/swapin THP in one piece https://lkml.kernel.org/r/20180523082625.6897-1-ying.huang@intel.com\n이전에도 이 시리즈로 소개했던, THP 의 swap out 과 swap in 최적화 마지막 단계 패치의 세번째 버전입니다. 마지막 단계 이야기 하니 문득 인피니티워의 오역 논란이 떠오르는군요 ;) 두번째 버전 이후 특정 컨피규레이션에서의 빌드 버그를 수정했고, mmotm/master 브랜치의 5월 18일자 버전으로 rebase 한게 차이점의 전부군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.17-rc5 https://lkml.kernel.org/r/CA+55aFxi-Q6hvdHn+JwYSQ9b3feNGoFM3eeAuKNhpkfxVNAGpA@mail.gmail.com\n4.17을 향한 다섯번째 rc 릴리즈입니다. 이번 릴리즈도 여느 때와 다름없이 평범하군요. 대부분 드라이버 변경들이고, amd gpu 쪽 변경이 있지만 나머지 부분들은 그렇게 많지 않고 대부분 한두줄 짜리 변경들입니다. 이대로라면 이번 4.17 릴리즈는 꽤 무난무난하게 끝나겠군요.\n[PATCH v11 00/26] Speculative page faults https://lkml.kernel.org/r/1526555193-7242-1-git-send-email-ldufour@linux.vnet.ibm.com\n이 블로그에서도 몇차례 소개한, speculative page fault 의 11번째 버전입니다. 지난 LSFMM 에서도 관련해 논의를 한 것 같던데, 아주 긍정적 반응은 아니었던 것 같습니다만, 어쨌든 오랫만에 올라온 새로운 버전의 패치셋이군요.\n[PATCH v6 00/17] Rearrange struct page https://lkml.kernel.org/r/20180518194519.3820-1-willy@infradead.org\nstruct page 의 구조를 좀 더 사용하기 쉽게 개선하는 패치의 여섯번째 버전입니다. LSFMM 에서는 그 구조를 구글 문서[1]를 사용해 그림으로 그려가며 설명했고, 꽤 괜찮은 반응을 얻었던 것 같더군요.\n[1] https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing\n","date":1526261025,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1526261025,"objectID":"40916651830d8909da768a2c87e358dd","permalink":"/post/lkml_news_v4.17-rc5/","publishdate":"2018-05-14T10:23:45+09:00","relpermalink":"/post/lkml_news_v4.17-rc5/","section":"post","summary":"Linux 4.17-rc5 https://lkml.kernel.org/r/CA+55aFxi-Q6hvdHn+JwYSQ9b3feNGoFM3eeAuKNhpkfxVNAGpA@mail.gmail.com\n4.17을 향한 다섯번째 rc 릴리즈입니다. 이번 릴리즈도 여느 때와 다름없이 평범하군요. 대부분 드라이버 변경들이고, amd gpu 쪽 변경이 있지만 나머지 부분들은 그렇게 많지 않고 대부분 한두줄 짜리 변경들입니다. 이대로라면 이번 4.17 릴리즈는 꽤 무난무난하게 끝나겠군요.\n[PATCH v11 00/26] Speculative page faults https://lkml.kernel.org/r/1526555193-7242-1-git-send-email-ldufour@linux.vnet.ibm.com\n이 블로그에서도 몇차례 소개한, speculative page fault 의 11번째 버전입니다. 지난 LSFMM 에서도 관련해 논의를 한 것 같던데, 아주 긍정적 반응은 아니었던 것 같습니다만, 어쨌든 오랫만에 올라온 새로운 버전의 패치셋이군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc5","type":"post"},{"authors":null,"categories":["linux-kernel-hack"],"content":"You can use classical debugger for your Linux kernel programming, though Torvalds doesn\u0026rsquo;t like it. I also do not prefer such use of debuggers, but admit that sometimes debuggers are quite useful. ;)\nThere are several ways to debug Linux kernel, but one of above is to set up a Linux virtual machine using QEMU and debugging the Linux kernel of the virtual machine from the host machine. This post summarises how to debug the Linux kernel in this way.\nTest Environment The versions and names of the software I used for test of this post are as below.\n Ubuntu 16.04.3 Server gdb 7.11.1 QEMU v2.11.0-dirty Linux v4.16  Kernel Build First, build the kernel you want to debug. You should turn CONFIG_GDB_SCRIPTS on, turn CONFIG_DEBUG_INFO_REDUCED off, and turn CONFIG_FRAME_POINTER on if your target architecture supports it.\nBoot The Virtual Machine If your kernel is ready, boot a QEMU vertual machine with it. You could do it in several ways. For example, you could install the kernel on the virtual machine disk. Or, you could use -kernel, -append and -initrd QEMU option to boot the virtual machine with your kernel image in host machine directly, or some other ways. One thing you should keep in your mind is that you should turn kaslr off. Just giving nokaslr in the kernel parameter doesn\u0026rsquo;t works well.\nPass -s option to QEMU when you start up the QEMU virtual machine, or enter gdbserver in the QEMU monitor console command line. This make the virtual machine to start gdbserver and wait on tcp::1234 for some accesses. If you have given -nographic QEMU option and set the kernel parameter so that the virtual machine\u0026rsquo;s console is connected to your terminal, you could not see the QEMU monitor console directly. In this case, you can go back to QEMU monitor console by entering Ctrl+a c. If you want to go back to the virtual machine\u0026rsquo;s console again, Ctrl+a c \u0026lt;enter\u0026gt;.\nStart gdb Move to the build directory of the kernel to debug, enter gdb vmlinux. This will start up gdb using the symbol and debuggin information of the kernel. Ubuntu or some distributions might fail to read vmlinux-gdb.py. The error message also show you how you can fix it, but in summary, you should append below one line at the end of the .gdbinit file and start the gdb again with the above command:\nadd-auto-load-state-path /path/to/linux-build Now, connect to the QEMU virtual machine by entering below command from the gdb session:\n(gdb) target remote :1234 Remote debugging using :1234 0xffffffff818cce92 in native_safe_halt () at /home/sjpark/linux/arch/x86/include/asm/irqflags.h:54 54 asm volatile(\u0026quot;sti; hlt\u0026quot;: : :\u0026quot;memory\u0026quot;); Just after you entering this command, QEMU virtual machine will be frozen. From now, you can see the variables of the kernel, set the breakpoint, execute the code step by step, as you normally did with gdb and user space programs. For example, you can set breakpoint to specific function as below:\n(gdb) b cma_alloc Breakpoint 1 at 0xffffffff81240f10: file /home/hacklog/linux/mm/cma.c, line 399. If you want your virtual machine to run again, you can enter c. This will resume the execution of the kernel. If you set a breakpoint as described above and if the code is be executed, the execution will be started on the breakpoint.\n(gdb) c Continuing. If you want the kernel to stop again, enter Ctrl+C in the gdb.\n^C Thread 1 received signal SIGINT, Interrupt. 0xffffffff818cce92 in native_safe_halt () at /home/sjpark/linux/arch/x86/include/asm/irqflags.h:54 54 asm volatile(\u0026quot;sti; hlt\u0026quot;: : :\u0026quot;memory\u0026quot;); (gdb) Use Linux gdb helper Actually, you can normally use gdb even though it failed to load vmlinux-gdb.py. The python script contains some helper scripts for more convenient kernel debugging on the gdb. You can do kernel debugging a little bit more conveniently if you use it.\nList of the helper scripts The helper scripts have lx prefix. You can list up their names and brief descriptions as below:\n(gdb) apropos lx function lx_current -- Return current task function lx_module -- Find module by name and return the module variable function lx_per_cpu -- Return per-cpu variable function lx_task_by_pid -- Find Linux task by PID and return the task_struct variable function lx_thread_info -- Calculate Linux thread_info from task variable function lx_thread_info_by_pid -- Calculate Linux thread_info from task variable found by pid lx-cmdline -- Report the Linux Commandline used in the current kernel lx-cpus -- List CPU status arrays lx-dmesg -- Print Linux kernel log buffer lx-fdtdump -- Output Flattened Device Tree header and dump FDT blob to the filename lx-iomem -- Identify the IO memory resource locations defined by the kernel lx-ioports -- Identify the IO port resource locations defined by the kernel lx-list-check -- Verify a list consistency lx-lsmod -- List currently loaded modules lx-mounts -- Report the VFS mounts of the current process namespace lx-ps -- Dump Linux tasks lx-symbols -- (Re-)load symbols of Linux kernel and currently loaded modules lx-version -- Report the Linux Version of the current kernel So easy, huh? ;)\nReferences  The Kernel Official Document for the Kernel Debugging A blog article The gdbserver official document  ","date":1525684861,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525684861,"objectID":"5bd42c873c48c75041d53fa45b6fe2d4","permalink":"/post/qemu_kernel_debugging/","publishdate":"2018-05-07T18:21:01+09:00","relpermalink":"/post/qemu_kernel_debugging/","section":"post","summary":"You can use classical debugger for your Linux kernel programming, though Torvalds doesn\u0026rsquo;t like it. I also do not prefer such use of debuggers, but admit that sometimes debuggers are quite useful. ;)\nThere are several ways to debug Linux kernel, but one of above is to set up a Linux virtual machine using QEMU and debugging the Linux kernel of the virtual machine from the host machine. This post summarises how to debug the Linux kernel in this way.","tags":["linux","kernel","tip","linux-kernel-hack"],"title":"Linux Kernel Debugging Using QEMU","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.17-rc4 https://lkml.kernel.org/r/CA+55aFyry0qeZvYjU5pf8a6zvb_ALmP-2T9+HZH2DHK93P6rQg@mail.gmail.com\n어느새 네번째 rc 버전입니다. v4.17 을 향한 여정이 절반을 넘어가는군요. 이번 릴리즈도 특이사항 없이 평범합니다.\n","date":1525662752,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525662752,"objectID":"1118c140e9e3d2d5a61d0f1f0bb03436","permalink":"/post/lkml_news_v4.17-rc4/","publishdate":"2018-05-07T12:12:32+09:00","relpermalink":"/post/lkml_news_v4.17-rc4/","section":"post","summary":"Linux 4.17-rc4 https://lkml.kernel.org/r/CA+55aFyry0qeZvYjU5pf8a6zvb_ALmP-2T9+HZH2DHK93P6rQg@mail.gmail.com\n어느새 네번째 rc 버전입니다. v4.17 을 향한 여정이 절반을 넘어가는군요. 이번 릴리즈도 특이사항 없이 평범합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.17-rc3 https://lkml.kernel.org/r/CA+55aFyu=y0SBesB+vx3JZFGcOhP+tuVG7sjfrkfBhXHTe0Skg@mail.gmail.com\n세번째 rc 버전이 나왔습니다. 평소보다 좀 일찍 왔군요. rc2 에 비해 커다란 릴리즈이긴 한데, 그렇다 해도 평범한 릴리즈라고 리누스는 이야기 합니다. 대부분의 변경 사항이 드라이버 쪽 수정이기 때문이라고 하는군요.\n[PATCH v4 00/16] Rearrange struct page https://lkml.kernel.org/r/20180430202247.25220-1-willy@infradead.org\n이 블로그에서도 소개했던, Matthew Wilcox 의 \u0026lsquo;struct page\u0026rsquo; 정리 패치의 네번째 버전입니다. 지난주 LSFMM 에서도 소개한 모양인데, 이 변화의 전/후를 google spread sheet 로 정리한 문서도 여기서 공개했나보군요: https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing\n[PATCH v2 0/4] Interface for higher order contiguous allocations https://lkml.kernel.org/r/20180503232935.22539-1-mike.kravetz@oracle.com\nmmap(MAP_CONTIG) 를 추가하자는 아이디어가 있었습니다. 현재 리눅스 커널에서 연속된 메모리 공간 할당에 사용되기 위해 만들어진 인터페이스는 CMA가 있는데, 그 목적이 좀 특수한 상황에 맞춰져 있다보니 좀 더 범용적 인터페이스가 있으면 어떻겠나 하는 이야기가 나와, 그런 인터페이스를 만들어 제시하는 패치입니다. 제안하는 인터페이스는 다음과 같습니다:\nstruct page *find_alloc_contig_pages(unsigned long nr_pages, gfp_t gfp, int nid, nodemask_t *nodemask) [RFC] Distinguish vmalloc pages https://lkml.kernel.org/r/20180502152733.GB2737@bombadil.infradead.org\nVMalloc 페이지는 유저스페이스에 매핑될 수도 있으므로 성능 분석과 memory leak 문제 분석의 편의를 위해 page-\u0026gt;mapping 값에 이를 가리키는 표식과 해당 페이지를 가리키는 vm_struct 와 그 안에서의 offset 을 저장하는 RFC 패치입니다.\nIntroduce atomic_dec_and_lock_irqsave() https://lkml.kernel.org/r/20180504154533.8833-1-bigeasy@linutronix.de\nlocal_irq_save() + atomic_dec_and_lock() 조합을 써야 하던 코드를 위해 이를 감싸는 새로운 함수, atomic_dec_and_lock_irqsave() 를 만들고 기존의 코드가 이를 사용하도록 고친 패치입니다.\n","date":1525060759,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525060759,"objectID":"183f7ddccdbfb2afaa8ccbb054619bbc","permalink":"/post/lkml_news_v4.17-rc3/","publishdate":"2018-04-30T12:59:19+09:00","relpermalink":"/post/lkml_news_v4.17-rc3/","section":"post","summary":"Linux 4.17-rc3 https://lkml.kernel.org/r/CA+55aFyu=y0SBesB+vx3JZFGcOhP+tuVG7sjfrkfBhXHTe0Skg@mail.gmail.com\n세번째 rc 버전이 나왔습니다. 평소보다 좀 일찍 왔군요. rc2 에 비해 커다란 릴리즈이긴 한데, 그렇다 해도 평범한 릴리즈라고 리누스는 이야기 합니다. 대부분의 변경 사항이 드라이버 쪽 수정이기 때문이라고 하는군요.\n[PATCH v4 00/16] Rearrange struct page https://lkml.kernel.org/r/20180430202247.25220-1-willy@infradead.org\n이 블로그에서도 소개했던, Matthew Wilcox 의 \u0026lsquo;struct page\u0026rsquo; 정리 패치의 네번째 버전입니다. 지난주 LSFMM 에서도 소개한 모양인데, 이 변화의 전/후를 google spread sheet 로 정리한 문서도 여기서 공개했나보군요: https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing\n[PATCH v2 0/4] Interface for higher order contiguous allocations https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v4.17-rc2 https://lkml.kernel.org/r/CA+55aFwzkGuq5ASF-vhYj7mEX26V0K+uZCLWi1BLYq+9F1n-Rw@mail.gmail.com\n두번째 rc 버전의 릴리즈입니다. perf 와 테스트 스크립트 쪽에 변경사항이 좀 많긴 하지만 평소와 크게 다르지 않은 추이라는군요.\n","date":1524452603,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524452603,"objectID":"8d5ca1cb2936b78c08063ae0fa40ed75","permalink":"/post/lkml_news_v4.17-rc2/","publishdate":"2018-04-23T12:03:23+09:00","relpermalink":"/post/lkml_news_v4.17-rc2/","section":"post","summary":"Linux v4.17-rc2 https://lkml.kernel.org/r/CA+55aFwzkGuq5ASF-vhYj7mEX26V0K+uZCLWi1BLYq+9F1n-Rw@mail.gmail.com\n두번째 rc 버전의 릴리즈입니다. perf 와 테스트 스크립트 쪽에 변경사항이 좀 많긴 하지만 평소와 크게 다르지 않은 추이라는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux v4.17-rc1 https://lkml.kernel.org/r/CA+55aFx62iBkj+hOmhLksUtvjwTcm_o1dwcyvaNnVpJ-AmvzVQ@mail.gmail.com\n2주간의 머지 윈도우가 지나고, v4.17-rc1 이 릴리즈 되었습니다. 크게 특별할 것 없이 평범한 머지 윈도우였다고 토발즈는 평하는군요. 그리고 이번에 git objects mark 가 4백만을 넘겼습니다. 따라서 다음 커널이 v5.0 이어도 될 것 같은데, 꼭 다음 버전에서 그렇게 할지는 모르겠다는군요. 리눅스 커널에서 버전은 그저 시간이 흘렀음을 의미할 뿐, 큰 변화가 있어서 메이저 버전 넘버가 바뀌는게 아니기 때문이죠. 참고로 v3.0 과 v4.0 은 각각 git objects mark 2백만과 4백만에서 이루어졌군요.\n암튼 언젠가는 v5.0 을 릴리즈 하겠지만 너무 큰 의미를 부여하지 말아달라고 이야기 하고 있습니다.\n토발즈는 또한 이번 머지 윈도우에서의 변화로 몇가지를 꼽는데요. 오래된 아키텍쳐인 backfin, cris, frv, m32r, metag, mn10300, score, tile 아키텍쳐의 지원을 끊기로 했고 nds32 라는 새로운 아키텍쳐를 지원하게 되었군요. 해당 아키텍쳐에 지원이 더 필요하다면 언제든 되살려도 좋지만 본인이 잘 관리할 수 있음을 증명해야 함을 한번 더 언급하고 있습니다.\n또한, 이번 머지 윈도우에선 클린업이 꽤 있었습니다. staging 드라이버들 몇개가 제거되었고, spdx 를 사용함으로써 카피라이트 문구도 많이 줄었습니다. pre-shipped lexer / parser 파일들도 사라졌구요.\n결국, 이번 릴리즈는 추가된 코드 라인보다 삭제된 코드 라인이 많았던 릴리즈군요. 프로젝트 관리자로써 토발즈가 속시원할 것 같습니다. 이런 경우는 커널 릴리즈 역사상 처음이라는군요.\n 13538 files changed, 627723 insertions(+), 818855 deletions(-) [PATCH v10 00/25] Speculative page faults https://lkml.kernel.org/r/1523975611-15978-1-git-send-email-ldufour@linux.vnet.ibm.com\n어느새 열번째 버전의 speculative page faults 패치셋입니다.\n[PATCH v2 00/12] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n)) https://lkml.kernel.org/r/152397794111.3456.1281420602140818725.stgit@localhost.localdomain\n많은 memort shrinker 들 또는 메모리 cgroups 를 가진 시스템에서는 그 수의 제곱에 비례해 shrink_slab() 의 수행시간이 증가하는데, 이 문제를 해결하고자 하는 패치셋입니다.\n# echo 3 \u0026gt; /proc/sys/vm/drop_caches 의 수행시간을 사용해 성능 차이를 측정했군요.\n[PATCH 00/21] mm, THP, swap: Swapout/swapin THP as a whole https://lkml.kernel.org/r/20180417020230.26412-1-ying.huang@intel.com\nTHP (Transparent Huge Page) 는 swap out 되기 전에 regular page 로 쪼개져야 했습니다. 이 작업에 많은 시간이 걸렸기에 한번에 THP 를 swap out 하기 위한 작업을 Huang Ying 이 해왔고 일단 쪼개는 작업은 최후로 미뤄뒀는데 마침내 완전히 THP 단위로 swap out 을 행하는 패치셋을 올렸습니다.\nRAM 으로 PMEM swap device 를 시뮬레이션 해서 vm-scalability 벤치마크의 swap-w-seq 테스트를 16개 프로세스로 실험한 결과, 약 10배의 성능 개선을 보았군요.\n[PATCH tip/core/rcu 0/21] Contention reduction for v4.18 https://lkml.kernel.org/r/20180423030258.GA23370@linux.vnet.ibm.com\nRCU 의 루트 \u0026lsquo;rcu_node\u0026rsquo; 구조체로의 락 컨텐션을 줄이는 Paul McKenney 의 패치셋입니다. 별 문제 없으면 4.18 버전에 들어가겠군요.\n","date":1523843998,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523843998,"objectID":"91ccc81b7f2b72836bb63b1eb4e663ac","permalink":"/post/lkml_news_v4.17-rc1/","publishdate":"2018-04-16T10:59:58+09:00","relpermalink":"/post/lkml_news_v4.17-rc1/","section":"post","summary":"Linux v4.17-rc1 https://lkml.kernel.org/r/CA+55aFx62iBkj+hOmhLksUtvjwTcm_o1dwcyvaNnVpJ-AmvzVQ@mail.gmail.com\n2주간의 머지 윈도우가 지나고, v4.17-rc1 이 릴리즈 되었습니다. 크게 특별할 것 없이 평범한 머지 윈도우였다고 토발즈는 평하는군요. 그리고 이번에 git objects mark 가 4백만을 넘겼습니다. 따라서 다음 커널이 v5.0 이어도 될 것 같은데, 꼭 다음 버전에서 그렇게 할지는 모르겠다는군요. 리눅스 커널에서 버전은 그저 시간이 흘렀음을 의미할 뿐, 큰 변화가 있어서 메이저 버전 넘버가 바뀌는게 아니기 때문이죠. 참고로 v3.0 과 v4.0 은 각각 git objects mark 2백만과 4백만에서 이루어졌군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.17-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16 https://lkml.kernel.org/r/CA+55aFyxn0bu5jOAJvO_63GHaGMkJ0uA=bVBm2T3HVX9SimZzw@mail.gmail.com\n릴리즈 마지막 주 치고는 네트워킹 쪽에 조금 변경사항이 있었습니다만, 큰 문제가 될 정도는 아니었습니다. 결과, 4.16이 드디어 릴리즈 되었습니다! 동시에 4.17 머지 윈도우가 시작되는군요.\n[PATCH 0/2] Move kfree_rcu out of rcu code and use kfree_bulk https://lkml.kernel.org/r/1522647064-27167-1-git-send-email-rao.shoaib@oracle.com\nkfree_rcu() 대신 kfree_bulk() 라는 새로 만들어진, 더 효율적인 기능을 사용하도록 하는 패치입니다.\n[RFC PATCH 0/1] mm: Support multiple kswapd threads per node https://lkml.kernel.org/r/1522661062-39745-1-git-send-email-buddy.lumpkin@oracle.com\nNUMA 아키텍쳐에서 리눅스 커널은 NUMA 노드당 하나의 kswapd 쓰레드를 띄웁니다. 노드당 kswapd 쓰레드 수를 늘려 성능을 높이려는 쓰레드입니다. 결국은 이런 움직임이 있어야 할거라고 봅니다만, 당장 이 패치에 대해서는 수정 요청 의견도 꽤 있군요.\n[RFC] Group struct page elements https://lkml.kernel.org/r/20180408142334.GA29357@bombadil.infradead.org\n커널에서 페이지를 관리하는 구조체인 struct page 는 매우 복잡한 구조로 되어있고, 페이지가 어떤 목적으로 쓰이느냐에 따라 같은 필드가 다른 목적으로 쓰이기도 합니다. 이 RFC 패치는 이 혼란스러운 구조를 좀 개선해 보려는 시도를 담고 있습니다.\n[PATCH 1/2] slab: __GFP_ZERO is incompatible with a constructor https://lkml.kernel.org/r/20180410125351.15837-1-willy@infradead.org\n시작은 김민찬 님의 null pointer dereference 문제에 대한 수정을 담은 패치셋이었습니다 (https://lkml.kernel.org/r/20180409015815.235943-1-minchan@kernel.org). 이걸 Matthew 는 근본적인 실수가 있었던 것 같다고 보고 이 패치셋을 내놓았습니다. 메모리 할당 요청에 __GFP_ZERO 플래그를 넣으면 메모리 영역을 0으로 초기화 해서 할당을 해줍니다. 그런데 constructor 가 있다면 초기화 작업을 constructor 에서 해야 하기에 __GFP_ZERO 플래그를 여기에 넣는건 뭔가 이상하죠. 이 패치셋은 그런 경우는 모두 실수에 의한 것이라 보고 경고를 표시해 주도록 합니다.\n[RFC tip/locking/lockdep v6 20/20] lockdep/selftest: Add a test case for SRCU https://lkml.kernel.org/r/20180411135721.22723-1-boqun.feng@gmail.com\n리눅스 커널의 락킹 관련 문제 추적 기능인 lockdep 이 SRCU 를 지원하게 하는 패치와 함께 올라온 패치입니다. lockdep 을 위한 selftest 에 SRCU 기능 역시 테스트하도록 테스트를 추가했습니다.\n","date":1522620820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522620820,"objectID":"d912a54182ff94f84777704c9809d65d","permalink":"/post/lkml_news_v4.16/","publishdate":"2018-04-02T07:13:40+09:00","relpermalink":"/post/lkml_news_v4.16/","section":"post","summary":"Linux 4.16 https://lkml.kernel.org/r/CA+55aFyxn0bu5jOAJvO_63GHaGMkJ0uA=bVBm2T3HVX9SimZzw@mail.gmail.com\n릴리즈 마지막 주 치고는 네트워킹 쪽에 조금 변경사항이 있었습니다만, 큰 문제가 될 정도는 아니었습니다. 결과, 4.16이 드디어 릴리즈 되었습니다! 동시에 4.17 머지 윈도우가 시작되는군요.\n[PATCH 0/2] Move kfree_rcu out of rcu code and use kfree_bulk https://lkml.kernel.org/r/1522647064-27167-1-git-send-email-rao.shoaib@oracle.com\nkfree_rcu() 대신 kfree_bulk() 라는 새로 만들어진, 더 효율적인 기능을 사용하도록 하는 패치입니다.\n[RFC PATCH 0/1] mm: Support multiple kswapd threads per node https://lkml.kernel.org/r/1522661062-39745-1-git-send-email-buddy.lumpkin@oracle.com\nNUMA 아키텍쳐에서 리눅스 커널은 NUMA 노드당 하나의 kswapd 쓰레드를 띄웁니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc7 https://lkml.kernel.org/r/CA+55aFxpxHnWBeTXN+DKqwCMW_=T2cR8UxSBVk_6c8LL7Et5JQ@mail.gmail.com\n4.16을 향한 일곱번째 rc 가 릴리즈 되었습니다. 평소대로라면 이게 마지막 rc 여야 할텐데, 평소와 다름없거나 변경사항이 적은 편이던 그동안의 rc와 달리 이번 rc 는 좀 변경사항이 많군요. 그렇다곤 해도 아마도 네트워킹 쪽 코드 머지가 늦었기 때문으로 보이며 rc8을 릴리즈할 생각은 아직은 없다고 토발즈는 이야기 하네요.\n더불어, 토발즈가 rc 릴리즈 때마다 변경 사항들을 정리하기 위해 주로 사용하는 git 사용 스크립트를 공개했습니다.\n다음주는 4.16이 릴리즈 될까요? 아니면, rc8이?\n[PATCH] mm/list_lru: replace spinlock with RCU in __list_lru_count_one https://lkml.kernel.org/r/1522137544-27496-1-git-send-email-lirongqing@baidu.com\nlist_lru_count_one() 이 스핀락을 잡기 때문에 shrink_slab() 이 많은 시간을 소모하게 되는데, 이를 스핀락 대신 RCU 를 사용하게 해서 최적화 시킨 패치입니다.\ndd 를 사용해 커다란 메모리를 사용한 후 파일을 제거하고서 /cgroup/memory/test/memory.limit_in_bytes 의 크기를 작게 잡아 인위적으로 reclaim 을 유발시키고 여기에 걸리는 시간을 측정했군요. 기존 0.415초에서 최적화 후 0.395초로 개선되었습니다.\n[PATCH v10 00/62] Convert page cache to XArray https://lkml.kernel.org/r/20180330034245.10462-1-willy@infradead.org\nXArray 패치 중 일부가 이미 Andrew Morton 의 -next 트리에 들어갔습니다. Matthew Wilcox 는 XArray 를 활용하는 패치를 이어서 계속 올리고 있군요.\n[PATCH] mm: limit a process RSS https://lkml.kernel.org/r/1522386674-12047-1-git-send-email-lirongqing@baidu.com\nulimit -m 명령을 이용해 프로세스의 최대 RSS (Resident Set Size) 를 제어할 수 있는 인터페이스가 있지만 실제로 커널이 제한을 하고 있진 않습니다. 제한하도록 구현하는 패치입니다.\n","date":1522021519,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522021519,"objectID":"3fc7ab6587873d8652eff7be26b49a77","permalink":"/post/lkml_news_v4.16-rc7/","publishdate":"2018-03-26T08:45:19+09:00","relpermalink":"/post/lkml_news_v4.16-rc7/","section":"post","summary":"Linux 4.16-rc7 https://lkml.kernel.org/r/CA+55aFxpxHnWBeTXN+DKqwCMW_=T2cR8UxSBVk_6c8LL7Et5JQ@mail.gmail.com\n4.16을 향한 일곱번째 rc 가 릴리즈 되었습니다. 평소대로라면 이게 마지막 rc 여야 할텐데, 평소와 다름없거나 변경사항이 적은 편이던 그동안의 rc와 달리 이번 rc 는 좀 변경사항이 많군요. 그렇다곤 해도 아마도 네트워킹 쪽 코드 머지가 늦었기 때문으로 보이며 rc8을 릴리즈할 생각은 아직은 없다고 토발즈는 이야기 하네요.\n더불어, 토발즈가 rc 릴리즈 때마다 변경 사항들을 정리하기 위해 주로 사용하는 git 사용 스크립트를 공개했습니다.\n다음주는 4.16이 릴리즈 될까요? 아니면, rc8이?\n[PATCH] mm/list_lru: replace spinlock with RCU in __list_lru_count_one https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc6 https://lkml.kernel.org/r/CA+55aFzV1nffUeriZLksK90noD49T+w+WmgBsYMAO13rTbn3Pg@mail.gmail.com\n4.16 여섯번째 rc 버전이 나왔습니다. 4.16을 향한 이번 사이클은 상당히 순탄하게 진행되는군요. rc7 까진 만들 예정이라고 하는데, 그 후엔 4.16이 안정적으로 나오게 될 것 같습니다.\n","date":1521422374,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521422374,"objectID":"f50f06faab2ccfd0da7c3be4c5e18c7a","permalink":"/post/lkml_news_v4.16-rc6/","publishdate":"2018-03-19T10:19:34+09:00","relpermalink":"/post/lkml_news_v4.16-rc6/","section":"post","summary":"Linux 4.16-rc6 https://lkml.kernel.org/r/CA+55aFzV1nffUeriZLksK90noD49T+w+WmgBsYMAO13rTbn3Pg@mail.gmail.com\n4.16 여섯번째 rc 버전이 나왔습니다. 4.16을 향한 이번 사이클은 상당히 순탄하게 진행되는군요. rc7 까진 만들 예정이라고 하는데, 그 후엔 4.16이 안정적으로 나오게 될 것 같습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc5 https://lkml.kernel.org/r/CA+55aFxXAMHeD8zz1BLv9r_2rjWJ6xE=cNGVAoWOvQJog7oz9A@mail.gmail.com\n여전히 특이사항 없는 한주를 거쳐 다섯번째 rc 버전이 나왔습니다. 이번 릴리즈가 기존의 rc5 단계보단 조금 크지만 특이할 정도는 아닌 모양이군요. 개인적으로 눈에 띈 부분은, overlayfs, xfs 등의 파일시스템의 변경, 그리고 perf 와 selftest 쪽 변경이 있군요.\n[PATCH v9 00/24] Speculative page faults https://lkml.kernel.org/r/1520963994-28477-1-git-send-email-ldufour@linux.vnet.ibm.com\nSpeculative page faults 의 9번째 패치셋입니다. Michael Hocko 가 이거 너무 자주 올리는 거 아니냐고 한마디 했고, 패치 저자인 Laurent Dufour 도 오케이 했네요.\n[PATCH 00/32] docs/vm: convert to ReST format https://lkml.kernel.org/r/1521660168-14372-1-git-send-email-rppt@linux.vnet.ibm.com\n커널 문서의 ReST 화는 많은 사람들이 반기고 있는 변화지만 일부 메인테이너는 썩 반기지 않기도 합니다. vm/ 쪽 문서를 모두 ReST 로 바꾸는 패치가 올라왔습니다.\n","date":1520816891,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520816891,"objectID":"fa8cd2fedf8b6f06e491c0d80f064afc","permalink":"/post/lkml_news_v4.16-rc5/","publishdate":"2018-03-12T10:08:11+09:00","relpermalink":"/post/lkml_news_v4.16-rc5/","section":"post","summary":"Linux 4.16-rc5 https://lkml.kernel.org/r/CA+55aFxXAMHeD8zz1BLv9r_2rjWJ6xE=cNGVAoWOvQJog7oz9A@mail.gmail.com\n여전히 특이사항 없는 한주를 거쳐 다섯번째 rc 버전이 나왔습니다. 이번 릴리즈가 기존의 rc5 단계보단 조금 크지만 특이할 정도는 아닌 모양이군요. 개인적으로 눈에 띈 부분은, overlayfs, xfs 등의 파일시스템의 변경, 그리고 perf 와 selftest 쪽 변경이 있군요.\n[PATCH v9 00/24] Speculative page faults https://lkml.kernel.org/r/1520963994-28477-1-git-send-email-ldufour@linux.vnet.ibm.com\nSpeculative page faults 의 9번째 패치셋입니다. Michael Hocko 가 이거 너무 자주 올리는 거 아니냐고 한마디 했고, 패치 저자인 Laurent Dufour 도 오케이 했네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc4 https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com\n벌써 개발 단계의 중반이라 할 수 있는 rc4 의 릴리즈입니다. 4.16 버전의 릴리즈도 얼마 남지 않았군요. 여전히 충분히 조용한 한주였습니다. 다만 여기저기에 조금씩 변경사항이 골고루 있군요.\n[PATCH 00/34 v3] PTI support for x32 https://lkml.kernel.org/r/1520245563-8444-1-git-send-email-joro@8bytes.org\nx86-32 를 위한 Page Table Isolation 패치입니다.\n","date":1520214648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520214648,"objectID":"31e855e82fc6e7b56a7e6f8ae2e23800","permalink":"/post/lkml_news_v4.16-rc4/","publishdate":"2018-03-05T10:50:48+09:00","relpermalink":"/post/lkml_news_v4.16-rc4/","section":"post","summary":"Linux 4.16-rc4 https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com\n벌써 개발 단계의 중반이라 할 수 있는 rc4 의 릴리즈입니다. 4.16 버전의 릴리즈도 얼마 남지 않았군요. 여전히 충분히 조용한 한주였습니다. 다만 여기저기에 조금씩 변경사항이 골고루 있군요.\n[PATCH 00/34 v3] PTI support for x32 https://lkml.kernel.org/r/1520245563-8444-1-git-send-email-joro@8bytes.org\nx86-32 를 위한 Page Table Isolation 패치입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc3 https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com\n4.16 세번째 rc 버전이 릴리즈 되었습니다. rc2 보단 변경사항이 많지만, rc2 때 이야기 했듯 rc2 때는 대부분의 경우 고칠 것들을 찾지도 못했기 때문이 크기 때문이죠. 즉, 스펙터와 멜트다운으로 끔찍했던 4.15 때와 달리, 모든게 정상적이고 예상대로라고 합니다.\n대부분의 변경은 드라이버이고, 네트워킹 쪽 변경도 좀 크군요.\n[PATCH tip/core/rcu 0/5] SRCU updates https://lkml.kernel.org/r/20180226215614.GA31616@linux.vnet.ibm.com\nRCU critical section 안에서 sleep 을 할 수 있는 SRCU 의 간단한 업데이트 패치셋입니다.\n[PATCH tip/core/rcu 0/12] Torture-test updates https://lkml.kernel.org/r/20180226220225.GA32136@linux.vnet.ibm.com\nRCU 등의 동기화 도구의 동시성 버그를 찾는데 사용되는 torture test 의 업데이트 패치셋입니다.\n","date":1519666733,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519666733,"objectID":"e7fec178f489a1bfee6b7af12ed90072","permalink":"/post/lkml_news_v4.16-rc3/","publishdate":"2018-02-26T18:38:53+01:00","relpermalink":"/post/lkml_news_v4.16-rc3/","section":"post","summary":"Linux 4.16-rc3 https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com\n4.16 세번째 rc 버전이 릴리즈 되었습니다. rc2 보단 변경사항이 많지만, rc2 때 이야기 했듯 rc2 때는 대부분의 경우 고칠 것들을 찾지도 못했기 때문이 크기 때문이죠. 즉, 스펙터와 멜트다운으로 끔찍했던 4.15 때와 달리, 모든게 정상적이고 예상대로라고 합니다.\n대부분의 변경은 드라이버이고, 네트워킹 쪽 변경도 좀 크군요.\n[PATCH tip/core/rcu 0/5] SRCU updates https://lkml.kernel.org/r/20180226215614.GA31616@linux.vnet.ibm.com\nRCU critical section 안에서 sleep 을 할 수 있는 SRCU 의 간단한 업데이트 패치셋입니다.\n[PATCH tip/core/rcu 0/12] Torture-test updates https://lkml.","tags":["linux","kernel","lkml","news"],"title":"Lkml_news_v4.16 Rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc2 https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com\n4.16 두번째 rc 버전의 릴리즈입니다. 이번 한주는 매우 조용한 한주였군요. 머지 윈도우가 끝나고 사람들이 좀 쉬기 때문일수도, 아직 버그를 찾지 못해서일 수도 있고 일반적으로 rc2 는 조용한 편이지만, 어쨌든 토발즈는 만족스러운 눈치입니다. 4.15 에서의 spectre \u0026amp; meltdown 때문에 더 그럴지도 모르겠지만요.\n","date":1519006155,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519006155,"objectID":"07dfa60f26248f815b36ba2d795abc42","permalink":"/post/lkml_news_v4.16-rc2/","publishdate":"2018-02-19T11:09:15+09:00","relpermalink":"/post/lkml_news_v4.16-rc2/","section":"post","summary":"Linux 4.16-rc2 https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com\n4.16 두번째 rc 버전의 릴리즈입니다. 이번 한주는 매우 조용한 한주였군요. 머지 윈도우가 끝나고 사람들이 좀 쉬기 때문일수도, 아직 버그를 찾지 못해서일 수도 있고 일반적으로 rc2 는 조용한 편이지만, 어쨌든 토발즈는 만족스러운 눈치입니다. 4.15 에서의 spectre \u0026amp; meltdown 때문에 더 그럴지도 모르겠지만요.","tags":["linux","kernel","lkml","news"],"title":"Lkml_news_v4.16 Rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.16-rc1 https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com\n어느덧 2주일이 지났습니다. 머지 윈도우가 닫히고 4.16 첫번째 rc 버전이 나왔습니다. 4.15는 역시 토발즈에게 고통스러웠던 시간이었던지 이번 머지 윈도우는 4.15 보다 훨씬 나았다는 토발즈의 이야기입니다.\n이번 릴리즈에서는 GPU 쪽 변경 사항이 많고 대부분은 드라이버라 아주 큰 변화는 거의 없지만, 여전히 arch 쪽에도, 네트워킹과 파일시스템 등에도 변경이 없지는 않다고 정리하고 있습니다. 스펙터 / 멜트다운 이슈에 대한 x86 외 아키텍쳐의 변경사항들도 들어왔군요.\n[PATCH v8 00/24] Speculative page faults https://lkml.kernel.org/r/1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com\n4.15 릴리즈와 함께 4.15 위로 포팅된 Speculative page faults 패치가 계속 올라오고 있습니다. 이 패치셋은 예전부터 제가 관심을 두고 보고 있는 패치인데, page fault handling 을 speculative 하게 함으로써 병렬성을 높이려는 패치입니다. 아이디어가 시작된 건 오래되었고 그 아이디어를 이어와 다시 제안되고 있는 패치이죠. 이번엔 업데이트 될런지 궁금하네요.\n[PATCH -mm -v5 RESEND] mm, swap: Fix race between swapoff and some swap operations https://lkml.kernel.org/r/20180213014220.2464-1-ying.huang@intel.com\nswapin 작업과 swapoff 작업 사이를 락으로 보호하지 않고 있기 때문에 segmentation fault 문제가 있을 수 있습니다. swapoff 가 자주 불리진 않다보니 이 문제가 크게 불거진 적 없는데, 어쨌건 race 는 race 라 고쳐야 한다는 Huang Ying 의 패치입니다.\n","date":1518497807,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518497807,"objectID":"baf785e1a20b6fefd6394c98718e9bab","permalink":"/post/lkml_news_v4.16-rc1/","publishdate":"2018-02-13T13:56:47+09:00","relpermalink":"/post/lkml_news_v4.16-rc1/","section":"post","summary":"Linux 4.16-rc1 https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com\n어느덧 2주일이 지났습니다. 머지 윈도우가 닫히고 4.16 첫번째 rc 버전이 나왔습니다. 4.15는 역시 토발즈에게 고통스러웠던 시간이었던지 이번 머지 윈도우는 4.15 보다 훨씬 나았다는 토발즈의 이야기입니다.\n이번 릴리즈에서는 GPU 쪽 변경 사항이 많고 대부분은 드라이버라 아주 큰 변화는 거의 없지만, 여전히 arch 쪽에도, 네트워킹과 파일시스템 등에도 변경이 없지는 않다고 정리하고 있습니다. 스펙터 / 멜트다운 이슈에 대한 x86 외 아키텍쳐의 변경사항들도 들어왔군요.\n[PATCH v8 00/24] Speculative page faults https://lkml.kernel.org/r/1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.16-rc1","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15 https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com\n드디어 4.15 버전이 릴리즈 되었습니다. 지난 한주는 매우 조용하고 변경된 사항이 거의 없었다는군요.\n이렇게 meltdown/spectre 로 시끄럽고 길었던, 평범하지 않았던 릴리즈 사이클이 끝났습니다. 하지만, meltdown/spectre 관련한 일이 아주 끝난 건 아니라고 이야기 하는군요. 특히, indirect bracnh mitigation 을 위한 가장 큰 수정사항을 반영받기 위해선 커널만 업데이트 해선 안되고 컴파일러의 \u0026ldquo;retpoline\u0026rdquo; 지원이 있어야 합니다.\ncat /sys/devices/system/cpu/vulnerabilities/spectre_v2 로 컴파일러 지원이 있는지 알 수 있는데, 컴파일러 지원이 없다면\nVulnerable: Minimal generic ASM retpoline 이란 출력이 뜰겁니다.\n한가지 더 이야기 해둬야 할건, 이번 릴리즈에 meltdown/spectre 가 많은 영향을 끼치긴 했지만 그래도 다른 부분들은 평범하게 업데이트가 진행되었다는 겁니다. 즉, 이번 릴리즈는 좀 평범하지 않기 했지만 그렇다고 아주 이상하기만 한 릴리즈도 아니었다는 거죠.\n어쨌든 4.15 버전이 드디어 나왔습니다!\n[LSF/MM TOPIC] Addressing mmap_sem contention https://lkml.kernel.org/r/4c20d397-1268-ca0f-4986-af59bb31022c@linux.vnet.ibm.com\n리눅스 커널에서 메모리 매핑은 mmap_sem 이라는 reader-writer semaphor 를 이용해 race condition 으로부터 보호되고 있습니다. 당연하게도, 쓰레드가 많은 환경에선 여기 부하가 심하게 걸리고 성능 확장을 저해하게 됩니다. Peter Zijlstra 의 Speculative Page Fault 패치는 페이지 폴트 시에 메모리 매핑을 할 때 mmap_sem 을 잡지 않고 매핑하려 시도해보고 중간에 동시에 같은 영역을 매핑하려 한 쓰레드가 존재하면 abort \u0026amp; retry 를 하는식으로 이 문제를 완화시킵니다. 해당 패치셋은 최근 Laurent 에 의해 다시 포팅되어 커뮤니티에 올라오기도 했죠. 실제로 ebizzy[1] 와 같이 쓰레드를 많이 쓰는 벤치마크에서는 두배가까이 성능 향상이 있었다고 하구요.\n하지만 Speculative Page Fault 만으로는 모든 문제가 해결되지 않기에 mmap_sem 자체에 대한 논의를 LSFMM 에서 하고 싶다는 메일입니다.\n병렬 프로그래밍에 관심있는 제게도 흥미로운 주제네요.\n[1] http://ebizzy.sourceforge.net/\n[LSF/MM TOPIC] lru_lock scalability https://lkml.kernel.org/r/2a16be43-0757-d342-abfb-d4d043922da9@oracle.com\n최근에 덜 사용된 (Least Recently Used) 페이지를 가려내기 위해 사용되는 lru_lock 은 메모리 집중적 벤치마크를 돌릴 때 커널에서 가장 뜨거워지는 락들 가운데 하나입니다. 당연히 확장성 문제가 있죠.\n이걸 배칭 또는 페이지 개별적 락킹을 통해 해결해 보자는 안을 내놓고 이에 대해 LSFMM 에서 이야기 해보자는 메일입니다.\nRFC 패치가 벌써 올라왔네요: https://lkml.kernel.org/r/20180131230413.27653-1-daniel.m.jordan@oracle.com\n[GIT PULL] RCU changes for v4.16 https://lkml.kernel.org/r/20180129100051.ndq4osy45fz3g26a@gmail.com\nFrom: Ingo Molnar mingo@kernel.org\n4.16 머지 윈도우가 열렸으니 Ingo 가 4.16 을 위한 rcu 쪽 변경사항을 리누스에게 풀리퀘스트 보냈습니다. 사실 이건 별로 흥미로운 메일은 아닐 수 있지만, 4.16 에서 RCU 가 어떻게 변경될지 알 수 있겠죠. 그리고, 제가 작년 프라하와 상해에서 만들어 올렸던, 패치 9개가 있습니다 ;)\n[RFC PATCH 00/64] mm: towards parallel address space operations https://lkml.kernel.org/r/20180205012754.23615-1-dbueso@wotan.suse.de\n\u0026lsquo;mmap_sem\u0026rsquo; 은 커널의 메모리 관리에서 자주 사용되는 락으로, 많은 scalability 문제의 중심에 있습니다. 이 패치셋은 mmap_sem 을 range locking 기법을 활용해서 바꿔냄으로써 병렬성을 확보하는 패치입니다.\n[PATCH -mm -v2] mm, swap, frontswap: Fix THP swap if frontswap enabled https://lkml.kernel.org/r/20180207070035.30302-1-ying.huang@intel.com\nzswap 은 THP 를 고려하지 않기 때문에 THP 가 켜진 상태에서 zswap 이 frontswap 으로 동작할 경우 일부 어플리케이션은 segfault 와 memory corruption 을 낼 수 있는 문제가 있었습니다. 커밋 bd4c82c22c367e068 (\u0026ldquo;mm, THP, swap: delay splitting THP after swapped\u0026rdquo;) 때문에 발생한 문제였구요. 이를 고치기 위한 패치입니다. out\u0026rdquo;)\n","date":1517185238,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517185238,"objectID":"3496636434853ea58ca877a32e9e1f6e","permalink":"/post/lkml_news_v4.15/","publishdate":"2018-01-29T09:20:38+09:00","relpermalink":"/post/lkml_news_v4.15/","section":"post","summary":"Linux 4.15 https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com\n드디어 4.15 버전이 릴리즈 되었습니다. 지난 한주는 매우 조용하고 변경된 사항이 거의 없었다는군요.\n이렇게 meltdown/spectre 로 시끄럽고 길었던, 평범하지 않았던 릴리즈 사이클이 끝났습니다. 하지만, meltdown/spectre 관련한 일이 아주 끝난 건 아니라고 이야기 하는군요. 특히, indirect bracnh mitigation 을 위한 가장 큰 수정사항을 반영받기 위해선 커널만 업데이트 해선 안되고 컴파일러의 \u0026ldquo;retpoline\u0026rdquo; 지원이 있어야 합니다.\ncat /sys/devices/system/cpu/vulnerabilities/spectre_v2 로 컴파일러 지원이 있는지 알 수 있는데, 컴파일러 지원이 없다면\nVulnerable: Minimal generic ASM retpoline 이란 출력이 뜰겁니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Not final 4.15 this weekend https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com\n원래대로라면 4.15 정식 버전의 릴리즈가 될 타이밍이었습니다만\u0026hellip; 아직 충분히 안정화 되지 않은 것 같다는 토발즈의 판단 아래 이번주에도 rc 버전이 나왔습니다. rc9 입니다. 2011년의 3.1-rc9 이후 처음 나온 rc9 이네요.\n이번 릴리즈는 x86, arm powerpc, mips 쪽의 arch 업데이트, 드라이버, 그리고 네트워킹 핵심부 업데이트가 주된 변경이군요.\n다음주에는 꼭 4.15를 릴리즈 하고 싶다고 하는데, 아마도 다음주에는 4.15 정식 버전이 릴리즈되길 빕니다.\n[LSF/MM TOPIC] CMA and larger page sizes https://lkml.kernel.org/r/3a3d724e-4d74-9bd8-60f3-f6896cffac7a@redhat.com\nContiguous Memory Allocator (CMA) 는 할당에 사용되는 메모리 영역을 비트맵으로 관리하는데, 페이지 하나에 비트 하나씩 주면 비트맵을 traverse 하는데 너무 많은 시간이 걸리므로, 하나의 비트가 여러개의 페이지를 담당하도록 되어있습니다. 이게 CMA 의 응답시간에는 큰 도움이 되지만, fragmentation 으로 인한 메모리 낭비가 심합니다. Laura Abbott 은 이걸 LSFMM 에서 논의해보고 싶어하는군요.\n[GIT PULL tools] Linux kernel memory model https://lkml.kernel.org/r/20180125093440.GA875@linux.vnet.ibm.com\nPaul McKenney 의 리눅스 커널 메모리 모델이 리눅스 커널 소스트리의 tools/ 디렉토리로 머지될 것 같습니다! 이 모델은 cat 언어로 쓰여져서 herd7 시뮬레이터로 실행될 수 있어서, 동시성을 갖는 코드가 실제로 어떻게 동작할지 검사할 수 있게 해줍니다. 과장 좀 보태서 자동화된 memory-barriers.txt 라고도 할 수 있죠.\n이미 Ingo Molnar 가 풀 했군요. 별다른 문제 없다면 정식 버전으로는 4.17 버전에서 볼 수 있겠습니다.\n","date":1516677367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1516677367,"objectID":"ae728d343b339509273b7459b5041512","permalink":"/post/lkml_news_v4.15-rc9/","publishdate":"2018-01-23T12:16:07+09:00","relpermalink":"/post/lkml_news_v4.15-rc9/","section":"post","summary":"Not final 4.15 this weekend https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com\n원래대로라면 4.15 정식 버전의 릴리즈가 될 타이밍이었습니다만\u0026hellip; 아직 충분히 안정화 되지 않은 것 같다는 토발즈의 판단 아래 이번주에도 rc 버전이 나왔습니다. rc9 입니다. 2011년의 3.1-rc9 이후 처음 나온 rc9 이네요.\n이번 릴리즈는 x86, arm powerpc, mips 쪽의 arch 업데이트, 드라이버, 그리고 네트워킹 핵심부 업데이트가 주된 변경이군요.\n다음주에는 꼭 4.15를 릴리즈 하고 싶다고 하는데, 아마도 다음주에는 4.15 정식 버전이 릴리즈되길 빕니다.\n[LSF/MM TOPIC] CMA and larger page sizes https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc9","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc8 https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com\n마침내 여덟번째 rc 버전의 릴리즈입니다. 스펙터 버그를 성능 저하 없이 막기 위한 구글의 해결책, Retpoline 지원이 들어갔군요. 그 외에는 드라이버 업데이트여서 일단 rc8 에 걸맞는 조용함이긴 하다고 토발즈는 평하네요. 자, 다음주에는 4.15 가 릴리즈될런지? 아니면 rc9 이 나오고 말런지?\n","date":1516076786,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1516076786,"objectID":"064ef51b88b23d938db422dde2510ea9","permalink":"/post/lkml_news_v4.15-rc8/","publishdate":"2018-01-16T13:26:26+09:00","relpermalink":"/post/lkml_news_v4.15-rc8/","section":"post","summary":"Linux 4.15-rc8 https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com\n마침내 여덟번째 rc 버전의 릴리즈입니다. 스펙터 버그를 성능 저하 없이 막기 위한 구글의 해결책, Retpoline 지원이 들어갔군요. 그 외에는 드라이버 업데이트여서 일단 rc8 에 걸맞는 조용함이긴 하다고 토발즈는 평하네요. 자, 다음주에는 4.15 가 릴리즈될런지? 아니면 rc9 이 나오고 말런지?","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc8","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc7 https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com\nMeltdown 과 Spectre 로 떠들썩했던 시간을 지나 4.15 의 일곱번째 rc 버전이 릴리즈 되었습니다. 지난 여섯번째 릴리즈 때도 상당히 안정화에 신경써야 할 시점임에도 x86 pti (page table isolation) 업데이트 패치가 많이 머지되어 의아했는데, 이게 Meltdown 과 Spectre 버그 때문이었음도 밝혀졌죠. 그렇다곤 해도 그 외의 부분은 예상대로 상당히 안정화 되어가고 있다고 합니다.\n더불어, Thomas Geixner 등의 인텔쪽 커널 개발자들의 노력 덕에 pti 등 Meltdown 과 Spectre 버그를 위한 패치가 잘 관리되어 비교적 쉽게 머지될 수 있었음에 리누스가 감사를 표하네요. 욕할땐 욕하고 칭찬할 땐 칭찬하고. ;)\n아무튼, 이때문에 4.15 는 rc8 까지 릴리즈 할 계획이라고 합니다. 4.15 는 2주일 후에나 릴리즈 되겠군요.\nLSF/MM 2018: Call for Proposals https://lkml.kernel.org/r/20180115163952.GB26120@cmpxchg.org\n리눅스 스토리지, 파일 시스템, 메모리 관리 쪽 개발자들의 모임인 LSFMM 서밋 2018 을 위한 CFP 가 공개되었습니다. 올해도 4월에 하네요. 장소는 유타입니다. 1월 31일까지 토론하고 싶은 주제를 메일로 보내면 흥미로운 주제를 바탕으로 주제를 꾸미고, 그 외에도 그냥 참가하고 싶은 사람도 메일 보내면 내부적으로 심사 후 초대를 해주는 것 같네요.\n","date":1515807013,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515807013,"objectID":"f96fd618e075f59f26c74af1c583dbbd","permalink":"/post/lkml_news_v4.15-rc7/","publishdate":"2018-01-13T10:30:13+09:00","relpermalink":"/post/lkml_news_v4.15-rc7/","section":"post","summary":"Linux 4.15-rc7 https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com\nMeltdown 과 Spectre 로 떠들썩했던 시간을 지나 4.15 의 일곱번째 rc 버전이 릴리즈 되었습니다. 지난 여섯번째 릴리즈 때도 상당히 안정화에 신경써야 할 시점임에도 x86 pti (page table isolation) 업데이트 패치가 많이 머지되어 의아했는데, 이게 Meltdown 과 Spectre 버그 때문이었음도 밝혀졌죠. 그렇다곤 해도 그 외의 부분은 예상대로 상당히 안정화 되어가고 있다고 합니다.\n더불어, Thomas Geixner 등의 인텔쪽 커널 개발자들의 노력 덕에 pti 등 Meltdown 과 Spectre 버그를 위한 패치가 잘 관리되어 비교적 쉽게 머지될 수 있었음에 리누스가 감사를 표하네요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc7","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc6 https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com\n한국시간으로는 1월 1일, 토발즈의 현지 시각으로는 2017년의 마지막날, 4.15 의 여섯번째 rc 버전이 릴리즈 되었습니다.\n지난주는 크리스마스 등의 연휴 때문인지 참 조용했죠. 덕분에 이번 릴리즈의 변경사항도 많지 않습니다. 다만 x86 pti 쪽 업데이트가 있었기 때문에 이번엔 rc8 까지 릴리즈 할수도 있을 것 같다고 하는군요.\n","date":1514867651,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514867651,"objectID":"d5b7a000b88a7641b2e5134ab44b27f1","permalink":"/post/lkml_news_v4.15-rc6/","publishdate":"2018-01-02T13:34:11+09:00","relpermalink":"/post/lkml_news_v4.15-rc6/","section":"post","summary":"Linux 4.15-rc6 https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com\n한국시간으로는 1월 1일, 토발즈의 현지 시각으로는 2017년의 마지막날, 4.15 의 여섯번째 rc 버전이 릴리즈 되었습니다.\n지난주는 크리스마스 등의 연휴 때문인지 참 조용했죠. 덕분에 이번 릴리즈의 변경사항도 많지 않습니다. 다만 x86 pti 쪽 업데이트가 있었기 때문에 이번엔 rc8 까지 릴리즈 할수도 있을 것 같다고 하는군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc6","type":"post"},{"authors":null,"categories":["tip"],"content":"경우에 따라서 SPEC CPU2006 의 벤치마크 중 일부의 소스코드를 수정하고 싶을 수 있습니다. 예를 들어 특정 벤치마크가 구체적으로 어떻게 동작하는지 알아보기 위해 디버깅 메세지를 추가하고자 할수도 있고, 코드 변경을 통해 성능을 높인다거나 해볼 수도 있겠죠. 그러나, SPEC CPU2006 은 엄정한 벤치마크 수트이기 때문에 소스코드는 물론, 소스코드를 사용하는 도구가 변경된 경우 에러 메세지를 내고 수행을 거부합니다. 수정된 소스코드로 얻어진 결과는 벤치마크 결과로 적합하지 않기 때문이죠.\n때문에, 어쩔 수 없이 수정이 필요하면서도 기존의 수행 방법을 따르려면 이 에러를 내는 곳을 없애는 게 한가지 방법이 될 수 있습니다. 다음의 패치를 적용하면 이 검증 코드가 사라져서 수정된 코드로도 벤치마크를 돌릴 수 있게 됩니다.\ndiff --git a/bin/formatter/setup_common.pl b/bin/formatter/setup_common.pl index 36170cda1649..b21890972dbd 100755 --- a/bin/formatter/setup_common.pl +++ b/bin/formatter/setup_common.pl @@ -278,13 +278,13 @@ sub check_important_files { return if ( $::suite_version \u0026gt; 4 \u0026amp;\u0026amp; !$ENV{'SPEC_CHECK'}); $::check_integrity = 1; - foreach my $important_file (jp('bin', basename($0)), - grep { m/$re/ } keys %::file_md5) { - if (!check_files(\\%::file_md5, $important_file)) { - print STDERR \u0026quot;\\n\\nPart of the tools ($important_file) is corrupt!\\nAborting...\\n\\n\u0026quot;; - exit 1; - } - } +# foreach my $important_file (jp('bin', basename($0)), +# grep { m/$re/ } keys %::file_md5) { +# if (!check_files(\\%::file_md5, $important_file)) { +# print STDERR \u0026quot;\\n\\n Part of the tools ($important_file) is corrupt!\\nAborting...\\n\\n\u0026quot;; +# exit 1; +# } +# } } 1; diff --git a/bin/setup_common.pl b/bin/setup_common.pl index 36170cda1649..d9dbe214d498 100755 --- a/bin/setup_common.pl +++ b/bin/setup_common.pl @@ -219,9 +219,9 @@ sub md5filedigest { sub load_module { my ($module, $quiet) = @_; - if ($::check_integrity \u0026amp;\u0026amp; !check_files(\\%::file_md5, jp('bin', $module))) { -\tdie \u0026quot;\\n\\nPart of the tools ($module) is corrupt! Aborting...\\n\\n\u0026quot;; - } +# if ($::check_integrity \u0026amp;\u0026amp; !check_files(\\%::file_md5, jp('bin', $module))) { +#\tdie \u0026quot;\\n\\nPart of the tools ($module) is corrupt! Aborting...\\n\\n\u0026quot;; +# } eval \u0026quot;require \\\u0026quot;$module\\\u0026quot;;\u0026quot;; print '.' unless ($quiet); if ($@) { @@ -278,13 +278,13 @@ sub check_important_files { return if ( $::suite_version \u0026gt; 4 \u0026amp;\u0026amp; !$ENV{'SPEC_CHECK'}); $::check_integrity = 1; - foreach my $important_file (jp('bin', basename($0)), - grep { m/$re/ } keys %::file_md5) { - if (!check_files(\\%::file_md5, $important_file)) { - print STDERR \u0026quot;\\n\\nPart of the tools ($important_file) is corrupt!\\nAborting...\\n\\n\u0026quot;; - exit 1; - } - } +# foreach my $important_file (jp('bin', basename($0)), +# grep { m/$re/ } keys %::file_md5) { +# if (!check_files(\\%::file_md5, $important_file)) { +# print STDERR \u0026quot;\\n\\nPart of the tools ($important_file) is corrupt!\\nAborting...\\n\\n\u0026quot;; +# exit 1; +# } +# } } 1; diff --git a/bin/util.pl b/bin/util.pl index ccf4a72477c0..c8c0cd786522 100755 --- a/bin/util.pl +++ b/bin/util.pl @@ -211,11 +211,11 @@ sub copy_tree { offer_verify_advice(); return 0; } -\tif ($sumhash-\u0026gt;{$sf} ne md5filedigest($sf)) { -\tLog(0, \u0026quot;\\n$sf is corrupt!\\n\u0026quot;); - offer_verify_advice(); -\treturn 0; -\t} +#\tif ($sumhash-\u0026gt;{$sf} ne md5filedigest($sf)) { +#\tLog(0, \u0026quot;\\n$sf is corrupt!\\n\u0026quot;); +# offer_verify_advice(); +#\treturn 0; +#\t} } if ($sf =~ /\\.bz2$/) { copy_bz2_file($sf, $file, [$target], 0); ","date":1514104212,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514104212,"objectID":"cf10cb11f8b8d21d473c850243f54a05","permalink":"/post/spec_cpu2006_modification/","publishdate":"2017-12-24T17:30:12+09:00","relpermalink":"/post/spec_cpu2006_modification/","section":"post","summary":"경우에 따라서 SPEC CPU2006 의 벤치마크 중 일부의 소스코드를 수정하고 싶을 수 있습니다. 예를 들어 특정 벤치마크가 구체적으로 어떻게 동작하는지 알아보기 위해 디버깅 메세지를 추가하고자 할수도 있고, 코드 변경을 통해 성능을 높인다거나 해볼 수도 있겠죠. 그러나, SPEC CPU2006 은 엄정한 벤치마크 수트이기 때문에 소스코드는 물론, 소스코드를 사용하는 도구가 변경된 경우 에러 메세지를 내고 수행을 거부합니다. 수정된 소스코드로 얻어진 결과는 벤치마크 결과로 적합하지 않기 때문이죠.\n때문에, 어쩔 수 없이 수정이 필요하면서도 기존의 수행 방법을 따르려면 이 에러를 내는 곳을 없애는 게 한가지 방법이 될 수 있습니다.","tags":["spec","benchmark","spec_cpu","spec_cpu2006"],"title":"spec cpu2006 벤치마크 수정하기","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc5 https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com\n4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다. 원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈 한다는군요.\n이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의 커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.\n[RFC v3 PATCH 0/5] Eliminate zone-\u0026gt;lock contention for will-it-scale/page_fault1 and parallel free https://lkml.kernel.org/r/20180509085450.3524-1-aaron.lu@intel.com\n패치셋 저자는 112개 CPU를 갖는 Intel Skylake 서버에서 will-it-scale/page_fult1 워크로드를 돌려보았고 80% CPU 가 zone-\u0026gt;lock 에서 스핀하며 시간을 보내고 있음을 파악했습니다. 이 문제를 해결하기 위한 RFC 패치의 세번째 버전입니다.\n[PATCH v4 00/13] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n)) https://lkml.kernel.org/r/152586686544.3048.15776787801312398314.stgit@localhost.localdomain\nshrink_slab() 의 복잡도가 O(n^2) 이기 때문에 많은 shrinker 와 메모리 cgroups 를 갖는 기계에서는 확장성의 병목이 될 수 있습니다. 이를 간단한 스크립트로 보이는데요. 먼저 다음과 같이 4000개의 memory cgroup 들을 만들고,\n$echo 1 \u0026gt; /sys/fs/cgroup/memory/memory.use_hierarchy $mkdir /sys/fs/cgroup/memory/ct $echo 4000M \u0026gt; /sys/fs/cgroup/memory/ct/memory.kmem.limit_in_bytes $for i in `seq 0 4000`; do mkdir /sys/fs/cgroup/memory/ct/$i; echo $$ \u0026gt; /sys/fs/cgroup/memory/ct/$i/cgroup.procs; mkdir -p s/$i; mount -t tmpfs $i s/$i; touch s/$i/file; done 아래와 같이 drop cache 를 다섯번 수행하며 여기 걸리는 시간을 측정했습니다:\n$time echo 3 \u0026gt; /proc/sys/vm/drop_caches 0.00user 13.78system 0:13.78elapsed 99%CPU 0.00user 5.59system 0:05.60elapsed 99%CPU 0.00user 5.48system 0:05.48elapsed 99%CPU 0.00user 8.35system 0:08.35elapsed 99%CPU 0.00user 8.34system 0:08.35elapsed 99%CPU 반복해서 drop cache 를 할 뿐이기 때문에 뒤따르는 drop cache 들은 실질적으로 cache 를 비우진 않고 그저 shrinker 와 memcg 를 둘러볼 뿐입니다. 그럼에도 최소 5.48초가 걸렸군요. 그만큼 병목이 심하단 이야기죠.\n패치는 shrink_slab() 의 복잡도를 O(n)으로 고쳤고, 이후 다음과 같이 오버헤드가 거의 사라지는 결과를 내놓았습니다:\n0.00user 1.10system 0:01.10elapsed 99%CPU 0.00user 0.00system 0:00.01elapsed 64%CPU 0.00user 0.01system 0:00.01elapsed 82%CPU 0.00user 0.00system 0:00.01elapsed 64%CPU 0.00user 0.01system 0:00.01elapsed 82%CPU 약 548배의 성능 향상이군요!\n[PATCH -mm -V2 00/21] mm, THP, swap: Swapout/swapin THP as a whole https://lkml.kernel.org/r/20180509083846.14823-1-ying.huang@intel.com\n지난번에도 소개한, THP 를 2 MiB 그대로 한번에 swap out / swap in 하는 패치입니다. 기존에는 THP 를 regular page 로 쪼개서 swap out / swap in 했었거든요.\n[PATCH -mm] mm, THP, doc: Add document for thp_swpout/thp_swpout_fallback https:/lkml.kernel.org/r/20180509082341.13953-1-ying.huang@intel.com\n앞에 설명한 THP swap 관련 최적화는 단계별로 적용되고 있는데, 그와 함께 /proc/vmstat 에는 thp_swpout 과 thp_swpout_fallback 필드가 추가되었습니다. 그에 대한 문서화가 아직 안들어와 있었는데, 이를 추가하는 패치입니다.\n","date":1514093053,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514093053,"objectID":"565c2a47492e538df702fd57393d66a3","permalink":"/post/lkml_news_v4.14-rc4/","publishdate":"2017-12-24T14:24:13+09:00","relpermalink":"/post/lkml_news_v4.14-rc4/","section":"post","summary":"Linux 4.15-rc5 https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com\n4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다. 원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈 한다는군요.\n이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의 커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.\n[RFC v3 PATCH 0/5] Eliminate zone-\u0026gt;lock contention for will-it-scale/page_fault1 and parallel free https://lkml.kernel.org/r/20180509085450.3524-1-aaron.lu@intel.com\n패치셋 저자는 112개 CPU를 갖는 Intel Skylake 서버에서 will-it-scale/page_fult1 워크로드를 돌려보았고 80% CPU 가 zone-\u0026gt;lock 에서 스핀하며 시간을 보내고 있음을 파악했습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc5 https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com\n4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다. 원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈 한다는군요.\n이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의 커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.\nRe: About the try to remove cross-release feature entirely by Ingo https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R\nLockdep 의 cross release 기능은 너무 느렸고, false positive 가 많다는 이유로, 특히 false positive 가 너무 많다는 이유로 Ingo Molnar 에 의해 제거되려 하고 있습니다. 관련해서 이 블로그에서도 일단 default 로는 disable 되는 변경이 v4.14 에 있었음을 이야기 했죠.\nCross release 의 개발자인 박병철님께서 이에 대해 다른 의견을 내놓는 메일입니다.\nRe: Hang with v4.15-rc trying to swap back in https://lkml.kernel.org/r/1514407817.4169.4.camel@HansenPartnership.com\n스왑 레이어를 최적화하는 많은 변경이 최근에 있었는데, 그 중 하나가 시스템 행을 일으키는군요. 관련된 패치들을 발본색원해서 레포팅 한 메일입니다. 충분히 빠른 swap device 에 대해서는 swapcache 를 건너뛰게 한게 원인이 되었군요.\n","date":1514093053,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514093053,"objectID":"c6ea1b51ced45762696c91265d55b223","permalink":"/post/lkml_news_v4.15-rc5/","publishdate":"2017-12-24T14:24:13+09:00","relpermalink":"/post/lkml_news_v4.15-rc5/","section":"post","summary":"Linux 4.15-rc5 https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com\n4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다. 원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈 한다는군요.\n이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의 커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.\nRe: About the try to remove cross-release feature entirely by Ingo https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R\nLockdep 의 cross release 기능은 너무 느렸고, false positive 가 많다는 이유로, 특히 false positive 가 너무 많다는 이유로 Ingo Molnar 에 의해 제거되려 하고 있습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc4 https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com\n4.15 의 네번째 rc 버전입니다. 지난 rc 버전들이 생각보다 커서 토발즈가 좀 걱정했는데, 이번 릴리즈에 들어서는 평범한 네번째 rc 만큼이나 변화가 많이 없어 충분히 안정화 되기 시작한 것 같다고 하는군요.\n이번에 가장 눈에 띌만한 변화는 suspend/resume 처리를 정리하고 고친 것이라고 합니다. 크로스 락킹 디버깅 기능은 부팅 시간을 늘리는 문제 등도 있어선지 이번에 일단 제거되었네요. 나중에 다시 되살릴 계획은 있는 것 같습니다.\n[PATCH v2 1/1] Move kfree_call_rcu() to slab_common.c https://lkml.kernel.org/r/1513895570-28640-1-git-send-email-rao.shoaib@oracle.com\nRCU 의 modularity 를 개선하는 패치입니다. 몇가지 쟁점이 있긴 하지만 기본 아이디어는 받아들여지는 분위기군요.\n","date":1513586783,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1513586783,"objectID":"b3dfe0f386428d92db4a68d45c04b808","permalink":"/post/lkml_news_v4.15-rc4/","publishdate":"2017-12-18T17:46:23+09:00","relpermalink":"/post/lkml_news_v4.15-rc4/","section":"post","summary":"Linux 4.15-rc4 https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com\n4.15 의 네번째 rc 버전입니다. 지난 rc 버전들이 생각보다 커서 토발즈가 좀 걱정했는데, 이번 릴리즈에 들어서는 평범한 네번째 rc 만큼이나 변화가 많이 없어 충분히 안정화 되기 시작한 것 같다고 하는군요.\n이번에 가장 눈에 띌만한 변화는 suspend/resume 처리를 정리하고 고친 것이라고 합니다. 크로스 락킹 디버깅 기능은 부팅 시간을 늘리는 문제 등도 있어선지 이번에 일단 제거되었네요. 나중에 다시 되살릴 계획은 있는 것 같습니다.\n[PATCH v2 1/1] Move kfree_call_rcu() to slab_common.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc4","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc3 https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com\n4.15 의 세번째 rc 버전입니다. 지난주보단 조금 늦게 릴리즈 되었네요.\n일반적으로 rc3 릴리즈는 좀 변경사항이 많지만 이번엔 그중에서도 변경사항이 많은 편이라 걱정된다고 하는군요. 대부분은 드라이버쪽 변경인데 perf 쪽 변경도 꽤 있고 core, networking, kvm, arch, 문서 업데이트도 물론 있습니다. 어쨌든 토발즈는 이제는 정말 안정화가 되어가길 바라는 마음이라는군요.\n[PATCH v2] mm/slab: Do not hash pointers when debugging slab https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be\n이번 버전에 들어와 포인터 값을 기반으로 한 예측을 통해 공격이 들어오는 걸 방지하기 위해 \u0026lsquo;%p\u0026rsquo; 가 포인터를 그냥 출력하는게 아니라 hash 한 다음에 출력하도록 바뀌었죠. 때문에 디버깅이 좀 까다로워졌구요. 디버깅을 위해 온전한 포인터가 필요한 곳에선 \u0026lsquo;%pX\u0026rsquo; 를 써야 합니다. 일단 slab 쪽에서도 그게 필요하기에 DEBUG 옵션이 켜졌을 때에는 \u0026lsquo;%pX\u0026rsquo; 를 사용하도록 하는 패치입니다.\n[RFC PATCH] mm: unclutter THP migration https://lkml.kernel.org/r/20171207124815.12075-1-mhocko@kernel.org\nTransparent Huge Page 를 위한 Michal Hocko 의 패치입니다.\nTHP 마이그레이션을 위한 메모리 할당 콜백은 THP 가 한꺼번에 마이그레이션 될 수 있는지 보고, 마이그레이션 될 곳에 메모리가 부족해 불가능하거나 하다면 평범한 페이지를 할당받습니다. 이어서 unmap_and_mov() 가 THP 를 평범한 페이지로 쪼개고, 그사이 THP 의 head page 는 split_huge_page() 를 통해 LRU 리스트에 들어갑니다. 같은 일이 THP 할당에 실패할 때도 이러나는데, 이건 에러가 나기 쉬운 행위라고 Michal 은 봅니다.\nLRU 리스트에 split_huge_page() 를 행하는 것도 잘못된 행위인데, 모든 tail page 들이 마이그레이션 되지 않았기 때문이죠. 이로 인해 발생하는 문제는 사용자가 각각 처리해야 했습니다.\nMichal 은 이 패치를 통해 THP 처리를 위한 특수한 부분들을 migrate_pages() 단계로 올려서 이 상황을 정리하고자 합니다. 여기서 unmap_and_move() 가 ENOMEM 으로 실패하면 THP 페이지를 쪼개고 현재 존재하는 리스트로 옮깁니다. 이렇게 함으로써 우리는 모든 THP 서브페이지들을 항상 마이그레이션 하고 특정한 migrate_pages() 사용자들은 앞서 이야기한 경우를 별도로 처리할 필요가 없어지는 것이죠.\n[PATCH] locking/lockdep: Make CONFIG_LOCKDEP_CROSSRELEASE and CONFIG_LOCKDEP_COMPLETIONS optional https://lkml.kernel.org/r/1513062681-5995-1-git-send-email-byungchul.park@lge.com\n아직 락들의 classification 이 잘 되어있지 않아 너무 많은 false positive 가 나오고 있어 lockdep 의 CROSSRELEASE 와 COMPLETIONS 를 기본 활성에서 옵셔널로 바꾸는 패치입니다.\n[PATCH] mm: Reduce memory bloat with THP https://lkml.kernel.org/r/1513301359-117568-1-git-send-email-nitin.m.gupta@oracle.com\nTHP 는 굉장히 aggressive 하게 huge page 를 선호하기 때문에 메모리 사용량을 증가시키는 문제가 있습니다. Redis 등에서는 그런 이유로 THP 를 꺼버리라고 하기도 하죠.\n이 패치는 어플리케이션이 특정 메모리 영역에 MADV_DONTNEED 를 보내면, 이 영역은 \u0026ldquo;space-efficient\u0026rdquo; 로 마크되어서 해당 영역은 항상 huge page 를 사용하는게 아니라 khugepaged 가 해당 영역이 정말로 매핑되어 있고 사용되고 있는지에 따라 huge page 로 승격을 시키도록 합니다. 어플리케이션이 다시 MADV_HUGEPAGE 를 해당 영역에 내면, 해당 영역은 다시 non-space-efficient 로 마크되어 원래대로 동작합니다.\n[PATCH v2] rcutorture: Add basic ARM64 support to run scripts https://lkml.kernel.org/r/1513070365-13436-1-git-send-email-lianglihao@huawei.com\nRCU 를 테스트하는 rcutorture 드라이버의 드라이버 ;) 스크립트에 aarch64 지원을 추가하는 패치입니다.\n[PATCH v5 00/78] XArray v5 https://lkml.kernel.org/r/20171215220450.7899-1-willy@infradead.org\nMatthew Wilcox 의 XArray 다섯번째 버전 패치입니다.\n[PATCH 0/8] Restructure struct page https://lkml.kernel.org/r/20171216164425.8703-1-willy@infradead.org\nstruct page 는 매우 민감한 구조체죠. 요걸 구조를 살짝 바꾸려는 패치입니다.\n","date":1512959113,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512959113,"objectID":"3f5f0a977b595dd26a15bef34dc39a63","permalink":"/post/lkml_news_v4.15-rc3/","publishdate":"2017-12-11T11:25:13+09:00","relpermalink":"/post/lkml_news_v4.15-rc3/","section":"post","summary":"Linux 4.15-rc3 https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com\n4.15 의 세번째 rc 버전입니다. 지난주보단 조금 늦게 릴리즈 되었네요.\n일반적으로 rc3 릴리즈는 좀 변경사항이 많지만 이번엔 그중에서도 변경사항이 많은 편이라 걱정된다고 하는군요. 대부분은 드라이버쪽 변경인데 perf 쪽 변경도 꽤 있고 core, networking, kvm, arch, 문서 업데이트도 물론 있습니다. 어쨌든 토발즈는 이제는 정말 안정화가 되어가길 바라는 마음이라는군요.\n[PATCH v2] mm/slab: Do not hash pointers when debugging slab https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be\n이번 버전에 들어와 포인터 값을 기반으로 한 예측을 통해 공격이 들어오는 걸 방지하기 위해 \u0026lsquo;%p\u0026rsquo; 가 포인터를 그냥 출력하는게 아니라 hash 한 다음에 출력하도록 바뀌었죠.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc3","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc2 https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com\n4.15 의 두번째 rc 버전이 나왔습니다.\n동부 지방을 여행 중인가 보군요. 평소보다 좀 이른 시간에 릴리즈가 됐습니다. 원하던 것보단 큰 릴리즈가 되어버렸지만 대부분 fixup 이기에 큰 문제는 없는 것 같다는군요. Kernel ASLR leak 을 막기 위해 모든 \u0026ldquo;%P\u0026rdquo; 로 프린트되는 어드레스 주소를 해시해 버린다고 하네요. 이럼 디버깅할 때 좀 짜증날 수 있긴 하겠지만 다른 방법이 별로 없었다고\u0026hellip;\n[RFC PATCH v3 0/7] ktask: multithread CPU-intensive kernel work https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com\nCPU-intensive 한 작업을 커널 내에서 병렬로 진행하도록 도와주는 새로운 프레임웍, ktask 의 RFC 패치입니다. 예를 들어, 부팅 시에 struct page 들을 초기화 하는 작업은 현재 하나의 쓰레드가 처리하게 되어 booting 시간이 길어지는데, 멀티코어 시스템이라면 ktask 를 이용해 이 작업을 자동으로 병렬화 할 수 있다는 겁니다. 기존에도 workqueue, kthread_worker 와 같이 병렬 작어을 위한 커널 기능들이 존재하지만, workqueue 는 작업을 쓰레드별로 나누는 걸 대신 해주지는 않고, kthread_worker 는 하나의 쓰레드만 지원하기 때문에 ktask 를 새로 만들었다고 하네요.\n[PATCH v4 00/73] XArray version 4 https://lkml.kernel.org/r/20171206004159.3755-1-willy@infradead.org\nXArray 네번째 버전의 패치가 올라왔습니다. LinuxCon Europe 에서도 관련 발표를 재밌게 들었었는데요. XArray 는 Radix tree 의 API 를 대체할 목적으로 만들어진 새로운 자료구조 인터페이스입니다. 이번 버전의 패치를 통해 page cache 가 완전히 Radix tree 에서 XArray 로 갈아타게 했다는군요. 하지만 여전히 문제들도 많아서 바로 머지되진 않을 것 같다고 패치의 작성자도 이야기하네요.\n","date":1512362291,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512362291,"objectID":"3526faf1213268e8cdb28a2ce9698c1c","permalink":"/post/lkml_news_v4.15-rc2/","publishdate":"2017-12-04T13:38:11+09:00","relpermalink":"/post/lkml_news_v4.15-rc2/","section":"post","summary":"Linux 4.15-rc2 https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com\n4.15 의 두번째 rc 버전이 나왔습니다.\n동부 지방을 여행 중인가 보군요. 평소보다 좀 이른 시간에 릴리즈가 됐습니다. 원하던 것보단 큰 릴리즈가 되어버렸지만 대부분 fixup 이기에 큰 문제는 없는 것 같다는군요. Kernel ASLR leak 을 막기 위해 모든 \u0026ldquo;%P\u0026rdquo; 로 프린트되는 어드레스 주소를 해시해 버린다고 하네요. 이럼 디버깅할 때 좀 짜증날 수 있긴 하겠지만 다른 방법이 별로 없었다고\u0026hellip;\n[RFC PATCH v3 0/7] ktask: multithread CPU-intensive kernel work https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc2","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.15-rc1 https://lkml.kernel.org/r/CA+55aFzcudOPSwbD9XfVxBgFsQOhBjyncyYnGDYwZUEHOGUwcw@mail.gmail.com\n예정대로 2주만에 4.15 의 첫번째 rc 버전이 나왔습니다.\n지난주는 추수감사절이라 다들 휴가인 사람이 많았기에 첫번째 주에 최대한 많이 풀리퀘스트를 받았고 지난주는 좀 더 까다롭게 풀리퀘스트를 검사했군요. 토발즈는 두번째 주 동안 랩톱 들고 여행중이었고, 랩톱에서는 전체 모듈 빌드를 하지 않기 때문이라 합니다. 메인테이너들도 가능한 첫번째 주에 중요 플리퀘스트를 보내는 식으로 협조를 해줬다고 합니다. 그네들도 두번째주는 휴가가고 싶었을테니\u0026hellip; ;)\n4.14 가 LTS 였기에 이번 머지윈도우에는 변화가 크지 않을 것으로 예상했는데 생각보다 많은 풀리퀘스트가 있었다고 합니다. 4.9 때와는 다른 경향인데, 4.9 에 비해 4.14 가 변화가 크지 않았기 때문 아니겠냐고 토발즈는 생각하는군요.\n[PATCH v3 0/4] introduce get_user_pages_longterm() https://lkml.kernel.org/r/151197872943.26211.6551382719053304996.stgit@dwillia2-desk3.amr.corp.intel.com\n커널스페이스에서 꽤 오랜시간 페이지를 잡아둬야 하는 경우를 위한, 예를 들어 dma-to-dax vs truncate 문제를 위한, get_user_pages() 의 변종의 추가입니다. 실제 이를 사용하는 패치는 나중에 올라올 것 같군요.\n[PATCH 00/18] introduce a new tool, valid access checker https://lkml.kernel.org/r/1511855333-3570-1-git-send-email-iamjoonsoo.kim@lge.com\nValid access checker (Vchecker) 라는 이름의 새로운 메모리 에러 탐색 도구의 소개입니다. Out of bound access, use after free 같은, 의도되지 않은 메모리 접근을 잡아낼 수 있게 해준다고 하는군요. Kernel Address SANitizer (KASAN) 의 기능에 많이 의존하고 있기 때문에 KASAN 메인테이너 중 하나인 Dmitry 는 이게 별도의 도구로 머지되어야 할지 의문스럽다며 머지될 예정이면 한번 더 이야기 해달라고 하네요.\n[PATCH v2 0/3] mm/cma: manage the memory of the CMA area by using the ZONE_MOVABLE https://lkml.kernel.org/r/1512114786-5085-1-git-send-email-iamjoonsoo.kim@lge.com\nCMA 를 위한 영역은 하나의 zone 내에 위치하게 되는데, 이 zone 내에 다양한 특성의 페이지들이 혼재되어있다보니 이런저런 문제가 생깁니다. CMA 영역을 MOVABLE zone 만 쓰도록 함으로써 이 문제를 해결하는 패치입니다.\n[PATCH tip/core/rcu 0/21] De-emphasize {smp_,}read_barrier_depends https://lkml.kernel.org/r/20171201195053.GA23494@linux.vnet.ibm.com\nRCU 패치는 일단 Paul 의 트리에 머지된 후, tip 트리로 머지되고 나서야 토발즈의 트리에 들어갑니다. 이번에도 tip 트리로 머지되기 위한 패치들이 올라왔습니다. 그중에서도 이 시리즈는 READ_ONCE() 에 들어간 smp_read_barrier_depends() 의 architecture independent 한 코드로부터의 제거를 담고 있습니다.\n","date":1511748555,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511748555,"objectID":"fcee96db67d637e501a92d54d7da8e67","permalink":"/post/lkml_news_v4.15-rc1/","publishdate":"2017-11-27T11:09:15+09:00","relpermalink":"/post/lkml_news_v4.15-rc1/","section":"post","summary":"Linux 4.15-rc1 https://lkml.kernel.org/r/CA+55aFzcudOPSwbD9XfVxBgFsQOhBjyncyYnGDYwZUEHOGUwcw@mail.gmail.com\n예정대로 2주만에 4.15 의 첫번째 rc 버전이 나왔습니다.\n지난주는 추수감사절이라 다들 휴가인 사람이 많았기에 첫번째 주에 최대한 많이 풀리퀘스트를 받았고 지난주는 좀 더 까다롭게 풀리퀘스트를 검사했군요. 토발즈는 두번째 주 동안 랩톱 들고 여행중이었고, 랩톱에서는 전체 모듈 빌드를 하지 않기 때문이라 합니다. 메인테이너들도 가능한 첫번째 주에 중요 플리퀘스트를 보내는 식으로 협조를 해줬다고 합니다. 그네들도 두번째주는 휴가가고 싶었을테니\u0026hellip; ;)\n4.14 가 LTS 였기에 이번 머지윈도우에는 변화가 크지 않을 것으로 예상했는데 생각보다 많은 풀리퀘스트가 있었다고 합니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.15-rc1","type":"post"},{"authors":null,"categories":["trip"],"content":"컨퍼런스 둘째날부터는 kernel summit track 이 시작됩니다. 이번 컨퍼런스 참가는 아무래도 kernel summit 에서의 시끄럽고 정신없는 토론에 참여하고 싶기 때문이었기에 오늘부터가 제게는 가장 재밌는 시간입니다.\n![foo] (/img/osse_05/1.jpg)\n아침 일찍 일어나 컨퍼런스 장소로 출발합니다. 10명이 함께 묵는 방을 사용하고 있기에 일찍 일어나지 않으면 샤워를 제시간에 하기 어려우므로 조금 일찍 일어났습니다.\n![foo] (/img/osse_05/2.jpg)\n![foo] (/img/osse_05/3.jpg)\n![foo] (/img/osse_05/4.jpg)\n일찍 출발한 만큼 일찍 도착. 아직 부스에 사람도 없고 조용하네요. 한동안 부스 한켠에 준비된 휴식 공간에 앉아 커널 메일링 리스트도 읽고 코드도 보고 했습니다.\n![foo] (/img/osse_05/5.jpg)\n아침식사가 차려졌습니다. 간단하게 커피에 빵. 저 호밀빵이 담백하고 맛있더군요.\n![foo] (/img/osse_05/6.jpg)\n키노트. 키노트에 나선 분들이 속한 회사나 단체의 미래에 대한 전망과 상황을 알 수 있어 재밌습니다.\n![foo] (/img/osse_05/7.jpg)\n키노트 끝나고 커피타임. 샌드위치류가 나왔는데 역시 호텔 음식은 맛있습니다.\n![foo] (/img/osse_05/8.jpg)\n오늘 오후부터 kernel summit track 이 진행되었습니다. kernel summit track 은 다른 세션들처럼 친절한 발표 형태가 아니라 한명이 앞에서 토론을 진행하고 중간중간 나머지 개발자들이 끼어들어 질문하고 토론합니다. 딸랑 한두장 슬라이드만 들고 나오는 발표자도 많습니다. 참여한 사람들이 초대받은 커널 메인테이너기 때문이죠. 다만 2015년부터는 kernel summit 을 다른 이벤트와 함께 열고, 함께 열린 이벤트의 참가자들이 참여할 수 있게 하고 있습니다. 덕분에 더 많은 토론이 가능해졌죠.\n근데 또 덕분에 너무 많은 사람들이 참여하다보니 좀 토론의 질이 떨어진다고 생각했는지, 올해부터는 kernel summit 이 technical summit 과 maintainer summit 으로 나뉘었습니다. technical summit 은 기존의 kernel summit 처럼 개방 형태로 진행하고 maintainer summit 은 메인테이너 중에도 메인테이너만 모아서 기존처럼 폐쇄된 초대 형식으로 진행합니다. 누굴 초대해야 하나 기준에 대해서도 많은 토론이 있었습니다. 최종적으로는 약 30명만 초대해서 진행했다더군요. maintainer summit 은 마지막날에 진행되었습니다.\n![foo] (/img/osse_05/9.jpg)\n한 세션이 끝나고 정리중인 모습. 유명한 메인테이너들이 많이 보입니다.\n![foo] (/img/osse_05/10.jpg)\n차려진 스폰서들의 부스를 돌아다니며 각 부스에서 사인을 받아 빙고를 두개 이상 만들어 제출한 사람들에 대해 추첨을 통해 선물을 주는 이벤트가 진행되고 있었습니다. 그렇잖아도 부스 방문하는거 좋아하는 제게는 아주 제격인 이벤트죠! 사정이 있는건지 열리지 않은 부스도 있었기에 모두 사인을 채우지는 못했지만 열린 부스는 하나도 빼놓지 않고 모두 돌아다니며 사인을 받았습니다.\n![foo] (/img/osse_05/11.jpg)\n오후에 있던 세션 중 하나로 John Corbet 의 주최로 커널 개발자들과의 토론 시간이 있었습니다. 메일링 리스트에서 보던 이름의 주인들을 이렇게 직접 보니 반갑더군요. 말미에 테스트 어떻게 하느냐고 질문도 던졌는데, 다들 다양한 방법으로 테스트를 하고 계시더군요. 특히 인텔의 자동 테스트 bot 이 유용하게 사용되고 있는 것 같더군요. 커뮤니티를 위한 큰 기여인 것 같습니다.\n![foo] (/img/osse_05/12.jpg)\n어제는 이브닝 이벤트인 career fair 에서 술이 무제한으로 계속 나오기에 한잔씩 마시며 회사에서 오신 분들이랑 농담 따먹기 하고 기술적 이야기도 하면서 두시간이 넘게 놀았는데, 오늘의 이브닝 이벤트는 좀 애매합니다. 술도 맥주 한잔밖에 안줘요! :'( 그래서 그런지 좀 일찍 이브닝 이벤트가 끝났습니다. 덕분에 어제보다 꽤 일찍 숙소에 돌아와 버리게 되었습니다. 이 기회에 첫날 아쉬웠던 프라하 구경을 밤중에 다시 나와봤습니다.\n![foo] (/img/osse_05/13.jpg)\n한결 여유가 생겨서 그런지 이런저런 이국적 느낌 나는 가게들도 둘러볼 수 있어 좋았습니다. 여기는 뭔가 나무로 만든 물건들을 전문으로 판매하는 것 같던데 신기한 물건들이 많더군요.\n![foo] (/img/osse_05/14.jpg)\n체코는 꼭두각시 인형이 유명하다죠? 하나 기념으로 사고 싶었고 가격도 꽤 저렴했지만 사면 둘곳도 없어서 그냥 나왔습니다.\n![foo] (/img/osse_05/15.jpg)\n그렇다 해도 멀리까지 걸어갈 시간도 안되고 해서 그냥 카를교[1]에 다시 왔습니다. 다시 봐도 아름답네요.\n![foo] (/img/osse_05/16.jpg)\n![foo] (/img/osse_05/17.jpg)\n오늘의 마무으리는 마트에서 산 소세지와 Kozel 맥주로. 소세지 가격이 한국 돈으로 단돈 5백원. 우리나라면 천하장사 얇은거 하나 먹을까 말까한 가격인데 실하고 뽀드득거리는 식감에 육즙도 많더군요. 프라하 물가 아주 칭찬합니다.\nReferences [1] https://en.wikipedia.org/wiki/Charles_Bridge\n","date":1511667611,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511667611,"objectID":"73d0d954a5831f05f1b1571cba09efc7","permalink":"/post/osse2017_05/","publishdate":"2017-11-26T12:40:11+09:00","relpermalink":"/post/osse2017_05/","section":"post","summary":"컨퍼런스 둘째날부터는 kernel summit track 이 시작됩니다. 이번 컨퍼런스 참가는 아무래도 kernel summit 에서의 시끄럽고 정신없는 토론에 참여하고 싶기 때문이었기에 오늘부터가 제게는 가장 재밌는 시간입니다.\n![foo] (/img/osse_05/1.jpg)\n아침 일찍 일어나 컨퍼런스 장소로 출발합니다. 10명이 함께 묵는 방을 사용하고 있기에 일찍 일어나지 않으면 샤워를 제시간에 하기 어려우므로 조금 일찍 일어났습니다.\n![foo] (/img/osse_05/2.jpg)\n![foo] (/img/osse_05/3.jpg)\n![foo] (/img/osse_05/4.jpg)\n일찍 출발한 만큼 일찍 도착. 아직 부스에 사람도 없고 조용하네요. 한동안 부스 한켠에 준비된 휴식 공간에 앉아 커널 메일링 리스트도 읽고 코드도 보고 했습니다.","tags":["linux","event","linux foundation","trip","conference","prague"],"title":"OSSummit 2017 Attendence - 05","type":"post"},{"authors":null,"categories":["trip"],"content":"드디어 컨퍼런스 첫날입니다. 아침 8시부터 아침식사와 등록이 시작되므로, 7시에 숙소에서 나왔습니다.\n![foo] (/img/osse_04/1.jpg)\n어제는 날이 흐리더니, 오늘은 비도 옵니다. 우산을 챙겨 나옵니다. 그래도 어제 미리 학회장에 들렀던 덕에 길을 헤매지 않고 찾아갈 수 있었습니다.\n![foo] (/img/osse_04/2.jpg)\n빗길을 따라 한참을 걸어서 도착했습니다.\n![foo] (/img/osse_04/3.jpg)\n![foo] (/img/osse_04/4.jpg)\n도착하니 7시 반 정도. 공식 스케쥴은 8시부터 시작이라 아직 한산합니다. 스폰서 부스도 아직 준비중인 곳이 많고, 아직 준비가 덜된 곳도 많습니다. 돌아다니며 인사도 하고 간단한 스몰토크도 하면서 시간을 보냈습니다. 만나면 \u0026ldquo;how are you?\u0026rdquo; 하고 간단한 이야기를 시작할 수 있는 서구문화는 개인적으로 참 맘에 드는 문화입니다.\n![foo] (/img/osse_04/5.jpg)\n아침식사입니다. 체제비는 지원받지 못하기에 이런걸로 끼니를 잘 때워야 합니다.\n![foo] (/img/osse_04/6.jpg)\n키노트가 시작되었습니다. 오랜만의 리눅스 파운데이션 행사라 짐 젬린의 반가운 얼굴도 보고 좋았네요.\n![foo] (/img/osse_04/7.jpg)\n키노트가 끝나고 커피 타임에 나온 간식. 믿고 먹는 연어가 올라간 샌드위치입니다. 요런게 가볍게 먹기 좋죠. 먹는중에 샌프란시스코에서 온 흑인 시스어드민 분께서 먼저 말을 걸어 주셔서 대화를 했는데 매우 즐거운 대화였습니다. 사진도 찍혔더군요. 하하.\n![foo] (/img/osse_04/8.jpg)\n세션은 CloudOpen Track, ContainerCon Track, Embedded Linux Conference, LinuxCon Track 등등으로 나뉘어 동시진행되었는데요. 아무래도 커널 프로그래밍을 하는 위주의 이야기는 LinuxCon 에 모여있더군요. 흥미로운 발표가 많았습니다.\n![foo] (/img/osse_04/9.jpg)\n오후 휴식시간. 사람이 정말 많더군요. 참고로 컨퍼런스는 지하부터 2층까지, 3층을 모두 빌려서 진행되었습니다.\n![foo] (/img/osse_04/10.jpg)\n오후 휴식시간엔 고기가 나왔습니다. 이걸로 오늘의 저녁을 때운다는 각오로 열심히 먹습니다\u0026hellip; 만, 사람이 원체 많아서 음식이 빨리 동납니다. 그래도 그간 컨퍼런스 다니면서 획득한 눈치밥으로 어떻게든 남은 음식을 찾아서 배를 채웠습니다.\n![foo] (/img/osse_04/11.jpg)\n![foo] (/img/osse_04/12.jpg)\n원래 저녁은 먹지 않으려 했는데, perf 등의 프로파일러를 개발하고 계신 송태웅님을 만나서 함께 저녁을 먹게 되었습니다. 배가 불러서 전 간단히 수프 한접시만. 타지에서 만난 한국 사람과 즐겁게 이야기 나누면서 맥주도 한잔 기울였습니다.\n식사 후에는 Career fair 이브닝 이벤트가 있어 또 가봤는데, 사진이 없네요. 아직 취업 준비중이 아니라 그냥 흥미로 들어가봤는데 유익한 정보가 많았습니다. 맥주 한잔 하면서 이야기 나누는 형태였는데, 덕분에 적당한 취기와 함께 농담 따먹기도 많이 하고 기술적인 이야기도 많이 나눴습니다.\n![foo] (/img/osse_04/13.jpg)\n이브닝 이벤트가 너무 즐거웠기에 돌아가는 길이 아쉬울 정도.\n![foo] (/img/osse_04/14.jpg)\n![foo] (/img/osse_04/15.jpg)\n그냥 돌아가기엔 시간이 좀 있기에 시내를 조금 둘러보면서 좀 걸었습니다. 프라하 역사도 복잡하고 해서 뭔가 와닿지는 않은 도시인데, 그래도 아름다움 하나는 인정할만 한 것 같습니다.\n","date":1511665980,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511665980,"objectID":"7f7be1a94a7e4631d96fd49f87068c54","permalink":"/post/osse2017_04/","publishdate":"2017-11-26T12:13:00+09:00","relpermalink":"/post/osse2017_04/","section":"post","summary":"드디어 컨퍼런스 첫날입니다. 아침 8시부터 아침식사와 등록이 시작되므로, 7시에 숙소에서 나왔습니다.\n![foo] (/img/osse_04/1.jpg)\n어제는 날이 흐리더니, 오늘은 비도 옵니다. 우산을 챙겨 나옵니다. 그래도 어제 미리 학회장에 들렀던 덕에 길을 헤매지 않고 찾아갈 수 있었습니다.\n![foo] (/img/osse_04/2.jpg)\n빗길을 따라 한참을 걸어서 도착했습니다.\n![foo] (/img/osse_04/3.jpg)\n![foo] (/img/osse_04/4.jpg)\n도착하니 7시 반 정도. 공식 스케쥴은 8시부터 시작이라 아직 한산합니다. 스폰서 부스도 아직 준비중인 곳이 많고, 아직 준비가 덜된 곳도 많습니다. 돌아다니며 인사도 하고 간단한 스몰토크도 하면서 시간을 보냈습니다.","tags":["linux","event","linux foundation","trip","conference","prague"],"title":"OSSummit 2017 Attendence - 04","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.14 htpps://lkml.kernel.org/r/CA+55aFwqXh4rgJJ3T98k8wa-JYF7t8mWuwUjdxkbZyOyDEcGzQ@mail.gmail.com\n드디어 v4.14 의 릴리즈입니다. 이번 버전은 또하나의 LTS 커널이 될 예정이군요.\n동시에, v4.15 를 위한 머지 윈도우가 열렸습니다. 이번 머지 윈도우는 thanks giving 이랑 겹치게 되었는데, 이때문에 머지 윈도우를 연장할지 아니면 아예 1주일 줄일지 토발즈는 고민중인 것 같네요.\n[RFC PATCH v11 for 4.15 01/24] Restartable sequences system call https://lkml.kernel.org/r/20171114200414.2188-2-mathieu.desnoyers@efficios.com\n몇년전부터 올라오고 있으나 아직 머지되지 못한, restartable sequence 패치의 최신 버전이 또 올라왔습니다. 유저스페이스의 크리티컬 섹션을 커널에게 제어할 수 있도록 도와주는 기능입니다. 이번엔 머지될런지?\n[PATCH V2] selftest/vm: Add test case for mmap across 128TB boundary. https://lkml.kernel.org/r/20171123030313.6418-1-aneesh.kumar@linux.vnet.ibm.com\n128TB mmap() 에 대한 테스트 케이스가 kselftest 에 추가되었습니다. x86_64 와 powerpc64 를 지원하는군요.\n이후 몇가지 코멘트를 받고 v3 도 올라왔습니다: https://lkml.kernel.org/r/20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com\nXArray documentation https://lkml.kernel.org/r/20171124011607.GB3722@bombadil.infradead.org\n지난 ossummit europe 에서 흥미롭게 발표를 들었던 XArray 의 문서입니다. radix tree 를 대체할 만한 인터페이스를 목표로 하고있다고 하더군요.\n[PATCH] mm: Do not stall register_shrinker https://lkml.kernel.org/r/1511481899-20335-1-git-send-email-minchan@kernel.org\n메모리가 부족할 때 깨어나 일을 하게 되는 shrinker 의 등록 시 메모리가 부족해서 다른 것들에 의해 shink_slab() 에서 시간을 보내느라 register_shrinker() 에서 수십초씩이나 시스템을 멈춰있게 만드는 문제가 있었는데, shrink_slab() 에서 shrinker 등록 여부를 rwsem 에 대한 contention 확인으로 파악하고 slab shrinking 을 멈춰주도록 수정했습니다.\n","date":1510560464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1510560464,"objectID":"418a03e9bb1680a26c2dcbf93e4427d5","permalink":"/post/lkml_news_v4.14/","publishdate":"2017-11-13T17:07:44+09:00","relpermalink":"/post/lkml_news_v4.14/","section":"post","summary":"Linux 4.14 htpps://lkml.kernel.org/r/CA+55aFwqXh4rgJJ3T98k8wa-JYF7t8mWuwUjdxkbZyOyDEcGzQ@mail.gmail.com\n드디어 v4.14 의 릴리즈입니다. 이번 버전은 또하나의 LTS 커널이 될 예정이군요.\n동시에, v4.15 를 위한 머지 윈도우가 열렸습니다. 이번 머지 윈도우는 thanks giving 이랑 겹치게 되었는데, 이때문에 머지 윈도우를 연장할지 아니면 아예 1주일 줄일지 토발즈는 고민중인 것 같네요.\n[RFC PATCH v11 for 4.15 01/24] Restartable sequences system call https://lkml.kernel.org/r/20171114200414.2188-2-mathieu.desnoyers@efficios.com\n몇년전부터 올라오고 있으나 아직 머지되지 못한, restartable sequence 패치의 최신 버전이 또 올라왔습니다. 유저스페이스의 크리티컬 섹션을 커널에게 제어할 수 있도록 도와주는 기능입니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.14","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.14-rc8 https://lwn.net/Articles/738207/\nv4.14 를 향한 (아마도) 마지막 rc 버전의 릴리즈입니다.\n정말로 별다른 일 없었다면 그냥 이번에 v4.14 릴리즈를 할 계획이었지만 그정도는 아니었다고 하는군요. 어쨌든 rc8 덕분에 v4.15 merge window 는 thanksgiving week 를 포함하게 되었는데 토발즈는 이때 가족과 휴가를 갈 계획이라 랩톱 가지고 휴가다니는 동안에도 머지를 잘 할 수 있길 바라지만 문제가 생기면 merge window 를 연장할 수도 있겠다고 하네요. 일단 어떻게 될지 두고보자는군요.\n이번 릴리즈에 포함된 변경은 대부분 드라이버 쪽 변경이고, SPDK 관련 소스코드에 라이센스 추가 등을 한 사소하지만 커다란 양의 변경이 있습니다. 또 하나, 4.13 버전에서 /proc/cpuinfo 가 CPU frequency 를 부정확하게 표시하게 하는 중대한 버그가 있었는데, 다행히 이번에 고쳐졌군요.\nPage allocator bottleneck https://lkml.kernel.org/r/cef85936-10b2-5d76-9f97-cb03b418fd94@mellanox.com\n차세대 고속 NIC 에 의해 두각이 드러나는 소프트웨어쪽 bottleneck 을 찾다보니 page allocator 쪽에 오버헤드가 있다는 이야기로 시작된 쓰레드로, 9월부터 시작된 쓰레드인데 요즘 다시 답변이 활기차게 붙고 있습니다.\nConnectX-5 100 Gbps NIC, Xeon CPU E5-2680 v3 @ 2.50GHz CPU 의 시스템에서 super_netperf 를 사용, 128개 TCP 스트림을 RX queue 갯수 바꿔가며 돌려가며 BW 를 측정했습니다. mlx5 드라이버를 다음과 같이 수정, 사용했습니다.\n1) RX page cache disabled, 2 packets per page. 2) RX page cache disabled, one packet per page. 3) Huge RX page cache, one packet per page. 두번째 드라이버는 200Gbps NIC 을 시뮬레이션 하기 위한 변경입니다. 첫번째, 세번째 드라이버는 RX queue 갯수에 따라 BW 가 증가, line rate 까지 도달하는데 두번째 드라이버는 그렇지 못하고 8개 RX queue 부터는 오히려 BW 가 줄어들었습니다. 이때 perf top 은 85.58% [kernel] [k] queued_spin_lock_slowpath 를 보여, 페이지 할당 메커니즘의 자체적 성능도 문제고, 확장성도 문제라고 이슈를 최초 제기했습니다.\nPCP (per-CPU) allocator 를 사용해 성능이 좋아지는 걸 확인하고 쓰레드가 닫히는 것 같았는데, 11월 2일자로 다시 새로운 실험 결과를 가지고 왔습니다. PCP allocator 내의 페이지가 남아있을 동안은 문제가 없지만, 이후부터는 페이지가 할당된 코어와 해제되는 코어가 달라서 buddy allocator 에 부담을 주더란 이야기입니다.\n[PATCH] x86/selftests: Add test for mapping placement for 5-level paging https://lkml.kernel.org/r/20171108102250.38609-1-kirill.shutemov@linux.intel.com\nx86 의 5-level paging 을 위한 selftest 가 추가되었네요.\n","date":1510082387,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1510082387,"objectID":"4d7fb76db1be9d7472ba9c56927406ea","permalink":"/post/lkml_news_v4.14-rc8/","publishdate":"2017-11-08T04:19:47+09:00","relpermalink":"/post/lkml_news_v4.14-rc8/","section":"post","summary":"Linux 4.14-rc8 https://lwn.net/Articles/738207/\nv4.14 를 향한 (아마도) 마지막 rc 버전의 릴리즈입니다.\n정말로 별다른 일 없었다면 그냥 이번에 v4.14 릴리즈를 할 계획이었지만 그정도는 아니었다고 하는군요. 어쨌든 rc8 덕분에 v4.15 merge window 는 thanksgiving week 를 포함하게 되었는데 토발즈는 이때 가족과 휴가를 갈 계획이라 랩톱 가지고 휴가다니는 동안에도 머지를 잘 할 수 있길 바라지만 문제가 생기면 merge window 를 연장할 수도 있겠다고 하네요. 일단 어떻게 될지 두고보자는군요.\n이번 릴리즈에 포함된 변경은 대부분 드라이버 쪽 변경이고, SPDK 관련 소스코드에 라이센스 추가 등을 한 사소하지만 커다란 양의 변경이 있습니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.14-rc8","type":"post"},{"authors":null,"categories":["trip"],"content":"OSSummit 등록도 마쳤고, 남은 하루는 프라하 성 쪽을 둘러보기로 했습니다. 내일부터는 OSSummit 발표를 아침부터 오후까지 들어야 하므로, 프라하 관광을 해가 떠있을 때 하는건 오늘이 마지막이니 부지런히 걸어야 합니다. 어떻게 생각해 보면 꽤 강행군이기도 하고, 아침 일찍 도착하길 다행이다 싶습니다.\nVltava[1] ![foo] (/img/osse_03/4.jpg)\nOSSummit 컨퍼런스 회장인 힐튼 프라하 호텔은 프라하 시내의 동북쪽에 위치해 있어서 조금만 걸으면 아침에 심카드 사고 나서 걸었던 블타바 강이 나옵니다. 아까 지나갔던 코스지만 한번 더 걸어가기로 합니다.\n![foo] (/img/osse_03/5.jpg)\n프라하에 있는 동안 날씨가 계속 흐렸습니다. 해가 뜬걸 본적이 많지 않군요. 햇빛에 약한 편이라 다행이기도 하지만 맑은 날씨면 더 멋진 모습을 볼 수 있을 것 같아 아쉬웠습니다.\n![foo] (/img/osse_03/6.jpg)\n블타바 강에는 백조 등의 새가 꽤 많습니다. 암스테르담에서도 느낀거지만 백조는 크기가 참 큽니다. 백조 왕자 이야기에서 왕자들이 백조가 된다는 상상은 그 크기에서 비롯된 거 아닐까 하는 실없는 생각도 해봅니다.\n![foo] (/img/osse_03/7.jpg)\n블타바 강에는 유람선도 많이 다닙니다. 강 건너편의 풍경과 잘 어울립니다.\n![foo] (/img/osse_03/8.jpg)\n아침에는 여기서 블타바 강을 떠났지만, 이번엔 유명한 다리인 카를교를 지나 프라하 성까지 갈 계획이므로 강변을 따라 더 걸어갑니다.\n![foo] (/img/osse_03/9.jpg)\n뭔지 모를 조형물도 있는데 가이드가 사람들 모아놓고 설명하고 있는걸 보면 뭔가가 있나봅니다.\nCharles Bridge[2] ![foo] (/img/osse_03/10.jpg)\n저멀리 카를교가 보이기 시작합니다.\n![foo] (/img/osse_03/11.jpg)\n![foo] (/img/osse_03/12.jpg)\n드디어 카를교에 다왔습니다. 카를교는 1357년 카를 5세의 명령으로 착공, 15세기 초에 완성된 블타바강의 다리입니다. 다리의 길이는 총 520m 로, 프라하 성과 구시가지를 연결하고 있으며, 여러 아름다운 동상들이 다리 위에 있어서 동상들의 다리라고 부르는 사람들도 있는 것 같습니다. 동상들은 원본은 박물관에 모셔다 두었다고 하고, 현재 다리 위에 있는 건 모조품이라고 하는 것 같더군요. 프라하에서 가장 유명한 관광지 중 하나라고 할 수 있는 것 같습니다.\n![foo] (/img/osse_03/13.jpg)\n이런 느낌의 동상들이 있습니다. 종교가 있으면 좀 더 다른 느낌으로 프라하를 즐길 수 있었을지도 모르겠습니다. 실제로 프라하는 종교적 의미가 많이 있는 도시 같더군요. 하지만 저랑 종교는 별로 연이 없어서\u0026hellip;\n![foo] (/img/osse_03/14.jpg)\n이 동상은 어떤 규칙을 따라 만지면 어떤 소원을 이뤄준다고 적혀 있더군요. 프라하에 한번 더 올 수 있게 해준댔다\u0026hellip; 아직 프라하에 그정도 감정까진 싹트지 않았기도 하고 해서 딱히 만지진 않았습니다.\n![foo] (/img/osse_03/15.jpg)\n다리 위 곳곳에는 미술품, 기념품 등을 파는 노점들이 많이 있습니다. 가장 유명한 관광지 중 하나인 만큼 관광객들도 매우 많습니다.\n![foo] (/img/osse_03/16.jpg)\n긴 다리를 건너길 마무리 할쯤 보이는 모습입니다. 저기엔 어떤 사람들이 살까요? 여기 사는 사람들은 어떤 기분일까요?\n![foo] (/img/osse_03/17.jpg)\n다리를 건너오고나선 주욱 오르막길입니다. 오르막길을 따라 한참을 올라가면 프라하 성이 있습니다.\n![foo] (/img/osse_03/18.jpg)\n중간중간 아름다운 건축물이 계속 나옵니다. 걸그룹 보고 \u0026lsquo;예쁜애 옆에 예쁜애 옆에 예쁜애\u0026rsquo; 뭐 이런식으로 수식하는 것 같은데, 프라하는 \u0026lsquo;예쁜 건축물 옆에 예쁜 건축물 옆에 예쁜 건축물\u0026rsquo; 이라 해도 과언이 아닐 것 같습니다. 어디든 조금만 걷다보면 사진찍고 싶은 건축물이 나옵니다.\nPrague Castle[3] ![foo] (/img/osse_03/19.jpg)\n프라하 성으로 들어가기 직전 오르막길의 끝에서 걸어온 길을 바라보고 찍은 사진입니다. 올라오면서 크게 느끼지 못했는데 이렇게 보니 꽤 올라왔구나 싶더군요.\n![foo] (/img/osse_03/20.jpg)\n높은 지대인만큼 프라하 성에서는 프라하 시내를 바라볼 수 있습니다. 당연하게도 쌍안경도 있구요. 적당히 찍었더니 구글 포토가 이어붙여서 파노라마 사진을 만들어줬습니다. 날씨가 맑았다면 더 멋졌을텐데, 조금 아쉽기도 하지만, 전망이 멋졌습니다.\n![foo] (/img/osse_03/21.jpg)\n프라하 성은 매우 넓습니다. 일부 정원과 공간들은 입장권을 구매해야 들어갈 수 있습니다. 하지만 이번 프라하 여행의 주 목적은 관광이 아니기도 하고, 시간도 많지 않으므로 그런 곳은 스킵합니다.\nStrahov Monastic Brewery[4] ![foo] (/img/osse_03/22.jpg)\n제 목표는 어디까지나 스트라호프 수도원 맥주 양조장입니다. 스트라호프 수도원은 1142년에 건립된 수도원으로, 1628년엔 여기 양조장이 생겼습니다. 한동안 폐업한 적도 있다지만 지금은 다시 부활되어 긴 역사를 자랑하는 맥주 양조장이 지금까지도 영업을 하고 있게 된겁니다. 솔직히 프라하의 역사와 문화가 좀 생경했는데, 이것만큼은 친숙하죠. 놓칠 수 없습니다.\n벌써 해가 지기 시작했습니다. 스트라호프 수도원 표지판을 따라 계속해서 걸어갑니다. 한참을 더 걸어야 합니다.\n![foo] (/img/osse_03/23.jpg)\n어김없이 오는길에 길을 잃고 헤맸습니다. 하마터면 전혀 다른 음식점에 들어갈 뻔 했습니다. 하지만, 드디어 스트라호프 수도원에 도착했습니다.\n![foo] (/img/osse_03/24.jpg)\n그리고, 양조장을 가리키는 표지판이 보입니다.\n![foo] (/img/osse_03/25.jpg)\n기다리고 기다리던 양조장입니다. 실내는 물론이고 실외에도 사람이 가득했습니다. 잠깐의 웨이팅을 거쳐 다른 테이블에 합석했습니다.\n![foo] (/img/osse_03/2.jpg)\n양조장에서 직접 만든 맥주가 3종이 있는 것 같습니다. Amber, Dark, 그리고 IPA. 호박은 좋아하지 않으므로 Dark 와 IPA 를 한잔씩, 그리고 안주로 야채 샐러드를 주문했습니다. 가장 싼 안주이긴 하지만, 맥주 포함해서 가격은 한국돈으로 2만원이 안됩니다. 프라하의 물가에 건배하며 맥주를 마셔봅니다.\n하지만 10월 말인데다 해가 이미 졌고 산위라 그런지 찬바람이 마구 들어옵니다. 오들오들 떨면서도 천천히 다 마셨습니다. 다 마시고 계산하려 하는데 맥주 더 마시겠냐고 하더군요. 맘같아서야 그러고 싶지만 추워서 \u0026ldquo;no thanks\u0026rdquo; 이야기 하고 나왔습니다.\nBack to Old Town of Prague ![foo] (/img/osse_03/26.jpg)\n![foo] (/img/osse_03/27.jpg)\n![foo] (/img/osse_03/1.jpg)\n해가 완전히 져서 돌아오는 길은 완전히 밤입니다. 프라하는 야경도 유명합니다. 돌아오는 길에 프라하 성에 다시 올라가 야경을 감상했습니다. 특히 블타바 강에 비치는 불빛이 멋지더군요.\n![foo] (/img/osse_03/28.jpg)\n곧바로 숙소로 돌아가기도 그러니 밤중의 프라하도 즐겨보기로 하고 구시가 거리를 천천히 거닐어 봅니다.\nFinish of the Day ![foo] (/img/osse_03/29.jpg)\n아쉽지만 숙소 도착. 낮에 봤던 노점들도 이제 영업을 종료하고 있습니다.\n![foo] (/img/osse_03/3.jpg)\n맥주가 유명한 곳인만큼 (호스텔 벽에도 써있습니다. 프라하는 맥주가 물보다 싸니까 맥주 많이 마시라고. 전 지역 주민의 충고를 잘 받아들입니다 하하), 체코에서의 매일밤 마무리는 맥주와 함께 해야겠다고 생각했습니다. 그래서 점심에 심카드 사면서 봐두었던 마트에 가서 소세지와 맥주를 사왔습니다. 소세지는 앞의 포스트에서 사진으로도 올려뒀던 소세지 진열대에서 사왔는데, 무게를 재고 가격표를 붙여야 하는데 이걸 해주는 여성분은 영어를 못하시는 것 같더군요. 바디랭귀지로 주문하는데 뭔가 짜증을\u0026hellip; 가장 저렴한 편인 소세지를 샀습니다. 한 조각에 한국돈으로 오백원 정도밖에 안합니다. 우리나라에서 오백원이면 천하장사 소세지 젓가락굵기만한거나 살텐데, 역시 체코 물가 리스펙트합니다. 소세지 맛은 좀 짠 편인데 전 짠걸 잘 먹기도 하거니와, 짠만큼 맥주를 더 마시면 덜 짭니다.\n체코하면 필스너라는 인식이 있는 것 같은데 저 염소 맥주라고도 불리는 Kozel 맥주도 유명하다고 하더군요. 왠지 염소가 맘에 들어 샀는데, 한국돈으로 천원이 안됩니다. 맛은 탁월.\n이렇게 호스텔 휴게공간에서 맥주에 소세지를 함께 하며 하루를 마무리 합니다.\n하루동안 새삼 느낀게, 한국인 여행객이 정말 많더군요. 한시간 이상 한국말 못들은 경우가 많지 않은 거 같습니다. 호스텔에서도 꽤 많은 한국인이 있어서 휴게 공간에서 맥주 마시는 사이에도 앞자리에 한국인 커플과 모녀가 이야기를 나누더군요.\n이제 내일부터 OSSummit 이 시작됩니다. 어떤 흥미진진한 세션들이 있을지, 어떤 재밌는 이벤트가 준비되어 있을지, 커널 커뮤니티에서 메일로만 만났던 커널 개발자들과 만나서 어떤 이야기를 나눌지 기대하며 잠자리에 들었습니다.\n[*] 이 다음 글부터는 OSSummit 이야기가 본격적으로 시작됩니다. 거꾸로, 프라하 여행 정보는 거의 없을 겁니다.\nReferences [1] https://ko.wikipedia.org/wiki/%EB%B8%94%ED%83%80%EB%B0%94_%EA%B0%95\n[2] https://en.wikipedia.org/wiki/Charles_Bridge\n[3] https://en.wikipedia.org/wiki/Prague_Castle\n[4] https://www.tripadvisor.com/Attraction_Review-g274707-d634219-Reviews-The_Strahov_Monastic_Brewery-Prague_Bohemia.html\n","date":1509758416,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509758416,"objectID":"8866ae875f67b9541e73be46dc4344c8","permalink":"/post/osse2017_03/","publishdate":"2017-11-04T10:20:16+09:00","relpermalink":"/post/osse2017_03/","section":"post","summary":"OSSummit 등록도 마쳤고, 남은 하루는 프라하 성 쪽을 둘러보기로 했습니다. 내일부터는 OSSummit 발표를 아침부터 오후까지 들어야 하므로, 프라하 관광을 해가 떠있을 때 하는건 오늘이 마지막이니 부지런히 걸어야 합니다. 어떻게 생각해 보면 꽤 강행군이기도 하고, 아침 일찍 도착하길 다행이다 싶습니다.\nVltava[1] ![foo] (/img/osse_03/4.jpg)\nOSSummit 컨퍼런스 회장인 힐튼 프라하 호텔은 프라하 시내의 동북쪽에 위치해 있어서 조금만 걸으면 아침에 심카드 사고 나서 걸었던 블타바 강이 나옵니다. 아까 지나갔던 코스지만 한번 더 걸어가기로 합니다.","tags":["linux","event","linux foundation","trip","conference","prague"],"title":"OSSummit 2017 Attendence - 03","type":"post"},{"authors":null,"categories":["trip"],"content":"Immigration ![immigration] (/img/osse_02/14.jpg)\n먼저 공항에서 입국심사를 거쳐야 합니다. 한글 표지판이 많이 있어서 영어에 익숙지 않은 분들도 비교적 쉽게 적응할 수 있겠다 싶었습니다.\n제가 가장 많이 다녀온 외국은 미국인데요. 대한민국 여권 소지자는 미국에 갈 때 비자가 필요없지만 E-SATA 로 등록을 해야 하고, 언젠가부터 E-SATA 등록비도 몇만원 정도 생겼죠. 또, 미국은 입국심사가 왠지 날카롭다는 인상입니다. 입국할 때 입국심사 카드도 써야하고 여기 숙소 주소 등도 적어야 하고, 지문도 찍어야 하죠. 공항 보안검색대에선 투시카메라로 사진도 찍고. 그래도 뭐 간편하게 가는 편이라 생각했었습니다만 프라하 공항에서 생각이 바뀌었습니다. 대한민국 여권 소지자는 프라하에 갈때에도 비자가 필요없습니다. 입국심사를 위한 카드 작성도 없습니다. 입국심사관은 거의 아무것도 묻질 않습니다. 숙소가 어딘지도 알릴 필요 없고, 뭐하러 왔는지 꼬치꼬치 묻지도 않습니다. 지문도 찍지 않는군요. 정말 편하다는 인상을 받았습니다.\n![foo] (/img/osse_02/18.jpg)\n공항 사진입니다. 그렇게 크진 않네요. 아담한 크기의 공항입니다. 그래도 무료 와이파이도 잘 됩니다.\n프라하는 코룬이라는 단위의 통화를 사용합니다. 유로를 받는 곳도 있다고 하지만 왠만하면 코룬을 쓰는게 좋은 것 같습니다. 한국에서도 코룬 환전이 된다고 하는데, 급하게 오느라 미리 하지 못했습니다. 다른 여행객들도 프라하에서 직접 환전하는 경우가 많다고 하는군요. 공항 환전소는 환율이 좋지 않고 시내의 일부 환전소가 괜찮으므로, 공항에서는 시내 가는 교통비 정도만 환전하고, 시내의 추천 환전소에 가서 나머지를 환전하는게 좋다는 이야기가 많더군요. 일단 교통비와 심카드 살 돈을 생각해서 3만원 정도를 환전했습니다. 코룬 환율은 당시 1 코룬당 50원 정도. 수수료를 떼고 약 540 코룬이 제게 떨어졌습니다. 역시 공항 환전은 가성비가 좋지 않네요.\nTo The Hostel 이제 환전도 했으니 숙소로 이동을 해야겠습니다. 컨퍼런스 참가 지원 여부가 늦게 발표된 만큼 숙소도 늦게 잡았습니다. 하지만 특가로 나온 방이 있어 매우 저렴하게 구할 수 있었습니다. 외국에 혼자 나가면 호스텔을 예약하는 편입니다. 저렴한 가격에 각지의 여행객과 만날 수 있어 이득보는 느낌이거든요.\n사실 호스텔에 대한 처음 인상은 별로 좋지 않았습니다. 유럽 여행 가서 호스텔에서 변태 만나고 벼룩에 고생했다는 친구의 이야기도 있었고, 처음 이용했던 호스텔은 2014년에 Google I/O 가서 이용해 봤는데, 방도 엄청 좁고 시설이 열악했거든요. 하지만 두번째로 암스테르담에서 이용했던 호스텔 이후 인식이 완전 바뀌었습니다. 넓고 인테리어도 좋고 함께 방을 썼던 친구들도 유쾌해서 매우 즐거웠던 경험이었습니다.\n어쨌든 이번에 구한 숙소는 프라하 중심가에 위치한 호스텔. 그 가격에 이런 위치라니 시설이 얼마나 안좋길래 이렇게 나머지 조건이 좋은 걸까 걱정이 되기도 했습니다.\n![foo] (/img/osse_02/19.jpg)\n프라하에서는 버스, 지하철, 트램 등이 모두 하나의 교통권을 사용합니다. 교통권은 사용 시간대별로 가격이 매겨지며, 그 시간 내에는 환승이 모두 무료. 즉, 30분짜리 교통권을 사면 버스를 한대 타든 두대 타든 지하철을 갈아타든 30분 내에는 추가로 돈을 지불할 일이 없습니다. 전 119번 버스를 타고 나가서 지하철을 타고 시내로 이동할 계획입니다. 구글맵이 그렇게 추천했거든요. 구글맵은 약 40분 걸린다고 이야기 하는군요. 교통권 자판기에서 90분짜리를 뽑습니다. 32 코룬입니다. 한국돈으로 약 1,600원이군요.\n![foo] (/img/osse_02/20.jpg)\n뽑은 교통권입니다. 유효 시간이 90분이라고 적혀 있습니다.\n공항을 나서기전 마지막으로 무료 와이파이를 이용해 필요한 정보를 최대한 미리 검색해두고 폰에 다운로드 받아둡니다. 여길 나서면 숙소에 도착하기 전까지는 인터넷이 불가능하니까요. 심각한 길치인 저로썬 큰 모험입니다.\n![foo] (/img/osse_02/21.jpg)\n여행자들 가는길이 다 거기서 거기인지 여행자인 분들이 함께 움직입니다. 제가 프라하에 도착한 시각은 아침 9시 무렵. 전날 비가 왔는지 땅이 젖어있습니다. 일기예보로는 제가 머무르는 동안 계속 흐리고 때때로 비가 올 예정이더군요.\n프라하 버스 정류장은 모니터로 버스가 어디쯤 오고 있는지 자세히 표시됩니다. 한국 대중교통이 이런 시스템이 잘되어있기로 유명하다고 들었는데, 여긴 더 자세한 것 같다는 인상을 받았습니다.\n![foo] (/img/osse_02/22.jpg)\n도착한 버스를 탔습니다. 버스에 타면 승차권을 넣는 기계가 있는데, 거기 집어넣으면 위 사진처럼 집어넣은 시간이 찍힙니다. 표는 중간중간 검표원이 검사를 하게 되는데, 이 때 여기 찍힌 시간과 검사 시각 사이의 시간이 표에 적힌 유효시간 내인지를 보게 된다고 합니다. 버스기사는 딱히 표를 보거나 하지 않습니다. 신뢰를 기반으로 운영되는 시스템인거죠. 검표원을 만나진 못했습니다만, 무임승차 같은 짓은 하지 않기로 합시다.\n![foo] (/img/osse_02/23.jpg)\n![foo] (/img/osse_02/24.jpg)\n버스에서 내리고 지하철 타는 길도 여행객들이 다들 우루루 움직여서 그냥 따라가도 되었습니다. 지하철도 상당히 노선이 간단해서 큰 어려움 없이 승차할 수 있었습니다.\n![foo] (/img/osse_02/25.jpg)\n지하철에서 내려 땅위로 나왔습니다. 길치가 인터넷으로부터의 실시간 도움 없이 숙소를 찾아야 하는 시간이 왔습니다. 숙소까지는 걸어서 3분 거리인데 역시 헤맸습니다.\n![foo] (/img/osse_02/26.jpg)\n길을 헤매는 와중에도 신기한 구경거리는 있습니다. 역시 프라하, 역시 시내 중심지입니다. 지나가는 관광객도 무척 많습니다. 단체 관광객, 가이드를 따라 투어중인 관광객도 많더군요.\n![foo] (/img/osse_02/27.jpg)\n그래도 어찌어찌 숙소를 찾았습니다. 호스텔이 쇼핑몰처럼 생긴 건물 안에 있더군요. 의외의 위치선정이라 많이 헤맸습니다. 체크인 수속은 먼저 밟을 수 있지만, 방 청소 시간이 남아있어서 실질 체크인은 오후 두시부터 가능합니다. 등록데스크에 짐을 맡길 수 있으므로, 짐을 맡겨두고 체크인 시간까지 좀 돌아다니기로 합니다. 하지만 먼저 등록데스크의 무료 와이파이에 붙어 최대한 주변 정보를 받아둡니다. 일단 다음 목표는 시내 통신사 대리점에 가서 심카드를 구매하는 겁니다.\nSIM Card for the Internet ![foo] (/img/osse_02/28.jpg)\n거리에선 인터넷이 안되지만 숙소 위치는 파악했고 숙소까지 가면 인터넷이 됩니다. 조금 마음이 편안해지니 주변 경치도 눈에 들어옵니다. 프라하에서 심카드를 구매할 수 있는 통신사로 보다폰, O2, 그리고 T-mobile 이 있습니다만, T-mobile 을 많이들 추천하더군요. 미국 여행 시에도 T-mobile 에서 구매해서 나름 편하게 사용했으므로 T-mobile 대리점을 찾아갔습니다. 그런데, 아뿔싸. 일요일이라 쉬는 날이네요. 숙소로 돌아가 다시 인터넷 검색을 하니 좀 떨어진 위치에 큰 쇼핑몰이 있고 거기에 T-mobile 대리점이 있습니다. 조금 먼 길이라 인터넷 없이 찾아가려니 걱정되지만 일단 출발합니다.\n![foo] (/img/osse_02/29.jpg)\n![foo] (/img/osse_02/30.jpg)\n그래도 다운받아진 구글 지도가 있고 GPS 가 있으니 생각보다 어렵지 않게 길을 찾아갈 수 있었습니다. 점원 분께 여행자고 심카드를 구매하고자 한다고 하니 능숙하게 안내를 해주시는군요.\n\u0026ldquo;데이터가 필요한가요? 문자는 필요한가요?\u0026rdquo; \u0026ldquo;전 데이터만 있으면 되요!\u0026rdquo;\n통화, 문자 없이 1 GB 데이터를 LTE 속도로 30일간 사용할 수 있는 심카드를 약 200 코룬에 구매했습니다. 1 GB 데이터가 너무 많은거 아닌가 싶고 국내에서도 3G 쓰는데 LTE 가 필요한가 싶지만 이게 가장 저렴한 버전이라고 하시는군요. 생각해보면 제가 쓰는 폰인 넥서스5 는 LTE 지원함에도 국내에선 3G 데이터를 썼는데, 외국에서 오히려 LTE 써보네요. 아이러니\u0026hellip;\n개인적으로 외국 나갈때 자주 사용하는 선불심 판매소에서 파는 데이터 유심은 무제한 데이터에 대략 만원 후반대 가격인데, 200 코룬이면 약 만원이니 가성비도 나쁘지 않습니다. 심카드를 꽂고 폰을 재부팅 합니다. 도브리덴! 하는 안내문자가 날아오고 (도브리덴은 체코어로 인사말이라고 합니다), 인터넷이 됩니다. 할렐루야!\nLocal Foods of Prague 대리점을 나오니 바로 앞에 식료품 마트가 있습니다. 많은 외국은 인건비가 비싸서 그런지 음식점에서 사먹는 비용은 비싸지만 식재료는 무척 저렴해서, 직접 요리해 먹으면 우리나라보다도 훨씬 싸게 식사를 해결할 수 있는 경우가 많습니다. 때문에 저는 외국에 나오면 식료품 마트에서 먹을거리를 자주 사먹습니다. 여기가 제 식사의 대부분을 충당할 가능성이 큰 곳이므로 한번 둘러봤습니다.\n![foo] (/img/osse_02/2.jpg)\n체코하면 맥주입니다. 체코는 독일을 제치고 일인당 맥주 소비량이 가장 많은 나라입니다. 필스너 우르켈을 만든 나라이기도 하구요. 물보다도 맥주가 싼 가격인 것도 특징입니다. 정말 쌉니다. 대부분의 맥주가 한병에 한국돈으로 천원을 넘지 않습니다.\n![foo] (/img/osse_02/1.jpg)\n맥주하면 또 소세지죠! 소세지도 저렴합니다. 여행중 매일밤 여기서 맥주와 소세지를 사서 맥주 한잔씩 하며 하루를 마무리 했습니다.\nSightseeing before Check-in 이제 급한 불은 모두 껐습니다. 숙소도 찾았고, 인터넷도 되고. 하지만 아직도 오후 12시를 조금 넘긴 시간. 체크인도 오후 두시부터이고, OSSummit pre-registration 도 오후 세시부터 시작입니다. 일단 무작정 시내를 돌아다녀 보기로 하고 걸었습니다.\n![foo] (/img/osse_02/3.jpg)\n걷다보니 블타바강이 나왔습니다. 강 건너편으로 프라하 성이 아름답게 보입니다. 강변으로 산책로도 조성되어 있고, 강에 선박 레스토랑도 많습니다. 일단 강변을 따라 걸어봅니다.\n![foo] (/img/osse_02/4.jpg)\n천천히 걷다보니 좀 시간이 흐릅니다. 슬슬 체크인 시간이 다가옵니다. 강변에서 빠져나와 숙소쪽으로 천천히 걸어갔습니다. 어디로 걷는지도 모르고 그냥 걸었는데 여기저기 멋진 게 많습니다. 알고보니 여기가 중심지더군요.\n![foo] (/img/osse_02/5.jpg)\n![foo] (/img/osse_02/6.jpg)\n광장입니다. 암스테르담에 갔을때 봤던 중앙 광장이 떠올랐습니다. 사람도 많고 관광객도 많고 볼거리도 많습니다.\n![foo] (/img/osse_02/7.jpg)\n나름 유명한 시계 같더군요. 정각엔 인형들이 튀어나와서 뭔가 하고 들어간다는데 이게 몇백년된 시계라고 했던 것 같습니다. 정각에 여기 있질 않아서 인형들이 움직이는건 보지 못했습니다.ㅜㅜ\n![foo] (/img/osse_02/8.jpg)\n길치의 특성 중 하나는 자꾸 샛길로 빠지려는 본능이 있다는 점 아닐까 싶습니다. 반듯이 숙소로 가다가도 자꾸 옆길이 보이니 들어가보고 싶습니다. 장점은 그렇게 발견하는 재미진 곳이 많다는 거죠. 그렇게 발가는대로 걸어보니 재래시장 같은 곳이 나타났습니다. 먹을거리도 팔고, 꼭두각시 인형도 팔고, 기념품도 많이 있습니다.\n![foo] (/img/osse_02/9.jpg)\n기내식을 많이 먹었지만 맛깔나게 담아둔 과일이 맛있어 보이더군요. 그래도 돈이 별로 없어서 그냥 참고 지나갑니다.\nBack to the Hostel ![foo] (/img/osse_02/10.jpg)\n드디어 숙소 근처에 도착. 곧 체크인 시간입니다. 잠깐 숙소 근처 거리를 천천히 둘러봤습니다. 이제야 정신차리고 보니 숙소는 바츨라프 광장의 아래쪽에 있었더군요. 그래서인지 숙소 건물 앞 길거리에는 노점이 여럿 있고 관광객들이 거기서 먹을거리와 맥주를 즐기고 있었습니다. 시선과 후각을 강렬하게 끌어당긴 것 중 하나는 이 장작불에 빙글빙글 돌아가며 구워지는 고기! 체코 전통 요리 중 하나인 것 같은데, 주문하면 곧바로 칼로 고기를 일부분 썰어서 빵과 함께 주는 시스템 같습니다. 여기다 맥주까지 함께 판매하니, 안먹고 버티기 힘들정도로 침이 줄줄 흐르더군요. 그래도 전 환전한 돈도 얼마 안되고 해서 참았습니다.\n![foo] (/img/osse_02/11.jpg)\n어쨌든 드디어 체크인 시간이 되었으니 숙소로 들어갑니다. 제가 예약한 방은 10인 혼성 도미토리 (dormitory) 룸. 위 사진처럼 다섯개의 이층침대가 있습니다. 일찍 체크인한 덕인지 제가 첫번째인가봅니다. 창가 1층 자리를 선점했습니다. 어쩌면 이 넓은 방을 혼자 쓸수도\u0026hellip;? 했는데 밤에 다들 체크인 하더군요. 하하. 어쨌든 아주 넓진 않지만 좁지 않고 깨끗했습니다. 대만족! 잠깐 인터넷도 하고 간단히 세수도 하고, 이제 뭐할지 계획을 짜봅니다.\n내일부터 OSSummit 시작이니, 낮에 관광을 하는건 오늘이 마지막입니다. 일단 나가서 좀 돌아다녀보고, 컨퍼런스 회장으로 이동해 pre-registration 도 하고, 이어서 프라하 성을 돌아보기로 계획했습니다.\nJourney to OSSummit Pre-registration ![foo] (/img/osse_02/12.jpg)\n![foo] (/img/osse_02/13.jpg)\n가장 먼저 숙소 바로 앞의 바츨라프 광장을 둘러봤습니다. 약간 경사가 져 있어서 바츨라프 광장 끝의 동상 앞에서 뒤를 돌아보면 프라하 시내가 보이는 경치가 좋더군요. 바츨라프 광장은 서울 광화문 광장과 비슷한데, 민주화 관련 운동도 있었다고 하니 촛불이 가득 채웠던 광화문과 더욱 비슷한 느낌이 들었습니다.\n근데 프라하랑은 개인적으로 딱히 접점이 없어서일까요, 역사라던지가 머리에 잘 들어오지 않습니다. 암스테르담 같은 경우 민주화, 다양성 존중 등이 발전되어 있고 파이썬 창시자인 귀도 반 로썸 아저씨의 고향이라 그런지 꽤 하나하나가 와닿았는데 말이죠. 그래선지 어디가 어딘지도 잘 모르겠고 그냥 헤매듯이 정처없이 거닐었습니다. 그래도 어딜 가든 다 아름답고 멋집니다. 건축물들이 예술입니다. 근데 그래서 더 특색을 모르겠더군요. 저랑 프라하는 잘 안맞나봐요.\n![foo] (/img/osse_02/31.jpg)\n그렇게 걷다보니 만난 작은 공원. 공원을 원래 좋아하는터라 반가웠습니다. 공원의 반대편은 프라하 중앙역에 연결되어 있더군요.\n![foo] (/img/osse_02/32.jpg)\n컨퍼런스 회장으로 이동 중 만난. 뭔지 모를 곳. 낡은 건물이었는데 그 안은 천장이 뚫려있고 기차같은게 운행되고 있더군요. 뭔지 모르겠는데 멋졌습니다.\n![foo] (/img/osse_02/17.jpg)\n마침내 도착한 컨퍼런스 회장! 힐트 프라하입니다. 정식 일정은 내일부터지만 오늘도 미리 등록을 할 수 있습니다. 내일 와서 줄서긴 싫기도 하고, 미리 준비중인 회장을 구경하고 싶어서 왔습니다.\n![foo] (/img/osse_02/33.jpg)\n등록 부스입니다. 아주 한산할 줄 알았는데 생각보다 사람이 있더군요.\n![foo] (/img/osse_02/15.jpg)\n등록 완료했습니다. 이 네임택 하나가, 그렇게 갖고 싶었습니다. 크흑.\n빨간 딱지는 선물 증정 부스에 제출해서 티셔츠 하나, 그리고 리셉션 때 맥주와 바꿀 수 있는 쿠폰을 받을 수 있게 되어 있더군요.\n![foo] (/img/osse_02/16.jpg)\n스폰서 기업들이 부스를 차리고 있는 분주한 모습도 볼 수 있었습니다. 내일은 이곳이 어떻게 꾸며질까 미리 어느정도 예상도 할 수 있었습니다.\n이제 어느덧 오후 4시가 되어갑니다만, 아침 9시부터 움직였으니 꽤 많은 일이 있었습니다. 일단 여기서 여행기의 두번째 포스트를 마무리 합니다.\n","date":1509739104,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509739104,"objectID":"7d55d4497916ea2e5579c96eb9a7fd96","permalink":"/post/osse2017_02/","publishdate":"2017-11-04T04:58:24+09:00","relpermalink":"/post/osse2017_02/","section":"post","summary":"Immigration ![immigration] (/img/osse_02/14.jpg)\n먼저 공항에서 입국심사를 거쳐야 합니다. 한글 표지판이 많이 있어서 영어에 익숙지 않은 분들도 비교적 쉽게 적응할 수 있겠다 싶었습니다.\n제가 가장 많이 다녀온 외국은 미국인데요. 대한민국 여권 소지자는 미국에 갈 때 비자가 필요없지만 E-SATA 로 등록을 해야 하고, 언젠가부터 E-SATA 등록비도 몇만원 정도 생겼죠. 또, 미국은 입국심사가 왠지 날카롭다는 인상입니다. 입국할 때 입국심사 카드도 써야하고 여기 숙소 주소 등도 적어야 하고, 지문도 찍어야 하죠. 공항 보안검색대에선 투시카메라로 사진도 찍고.","tags":["linux","event","linux foundation","trip","conference","prague"],"title":"OSSummit 2017 Attendence - 02","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.14-rc7 https://lkml.kernel.org/r/CA+55aFwhgxivTE3k88nshbrH9nd-4nhmhXGzw-MxRVGxf-R8Eg@mail.gmail.com\n일곱번째 rc 버전의 릴리즈입니다.\nOSSE 와 kernel summit 으로 프라하를 방문했던 토발즈인데, 집에 잘 돌아왔다는군요. 이번 rc 버전은 기존의 rc7 보다도 작은 편에 가깝다고 합니다만, 다음 한주간이 정말 조용하지 않는한은 rc8 릴리즈를 할 생각이라는군요.\nRe: Page allocator bottleneck https://lkml.kernel.org/r/1c218381-067e-7757-ccc2-4e5befd2bfc3@mellanox.com\n멜라녹스의 빠른 네트워크 카드를 사용하는 환경에서는 page allocator 의 속도가 bottleneck 이 된다는 이야기에 대한 업데이트입니다. 여전히 해당 부분이 bottleneck 이며, queued_spin_lock_slowpath() 가 85 % 가까이 CPU 를 차지하고 있군요.\n[PATCH 0/2] swap readahead clean up https://lkml.kernel.org/r/1509514103-17550-1-git-send-email-minchan@kernel.org\nSwap layer 는 swap in 시에, 연속된 물리 주소의 페이지들을 한번에 읽어들이는 read-ahead 기법을 사용하고 있습니다. 후에 근접한 페이지도 접근될 확률이 높다는 거죠. 하지만 fragmentation 이 심한 환경에서는 꼭 그렇지 않을 수 있습니다. 때문에 virtual address space 에서 연속된 페이지들을 read ahead 하는 패치가 최근에 들어왔는데, 이에 대한 코드 정리 패치입니다.\n[PATCH v2] ftrace/docs: Add documentation on how to use ftrace from within the kernel https://lkml.kernel.org/r/20171031100705.573531cd@gandalf.local.home\njprobe 가 사라지고 ftrace 가 대신 사용될 예정입니다. 이를 위한 문서의 추가 패치입니다.\n","date":1509688295,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509688295,"objectID":"f0e49c00b152aada6e174ca6ae1301d4","permalink":"/post/lkml_news_v4.14-rc7/","publishdate":"2017-11-03T14:51:35+09:00","relpermalink":"/post/lkml_news_v4.14-rc7/","section":"post","summary":"Linux 4.14-rc7 https://lkml.kernel.org/r/CA+55aFwhgxivTE3k88nshbrH9nd-4nhmhXGzw-MxRVGxf-R8Eg@mail.gmail.com\n일곱번째 rc 버전의 릴리즈입니다.\nOSSE 와 kernel summit 으로 프라하를 방문했던 토발즈인데, 집에 잘 돌아왔다는군요. 이번 rc 버전은 기존의 rc7 보다도 작은 편에 가깝다고 합니다만, 다음 한주간이 정말 조용하지 않는한은 rc8 릴리즈를 할 생각이라는군요.\nRe: Page allocator bottleneck https://lkml.kernel.org/r/1c218381-067e-7757-ccc2-4e5befd2bfc3@mellanox.com\n멜라녹스의 빠른 네트워크 카드를 사용하는 환경에서는 page allocator 의 속도가 bottleneck 이 된다는 이야기에 대한 업데이트입니다. 여전히 해당 부분이 bottleneck 이며, queued_spin_lock_slowpath() 가 85 % 가까이 CPU 를 차지하고 있군요.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.14-rc7","type":"post"},{"authors":null,"categories":["trip"],"content":"![pargue!] (/img/osse_01/8.jpg)\nOpen Source Summit Europe 과 Embedded Linux Conference Europe, 그리고 Annual Kernel Summit 이 합동으로 열린 프라하에 다녀왔습니다. 이에 대한 기록을 남겨봅니다.\nThe Event 리눅스 재단에서는 다양한 컨퍼런스를 개최합니다. 2015년까지는 한국에서도 Korea Linux Forum 이라는 행사를 매년 열었죠. 특히 2015년에는 커널 서밋도 함께해서 특히 특별했던 기억입니다. 이런 이벤트들 중에서도 가장 큰 이벤트는 오픈소스 서밋이 아닐까 싶습니다. 이 이벤트는 기존의 리눅스콘 등 행사들이 합쳐진 행사입니다. 가장 큰 이벤트가 오픈소스 서밋이라면 가장 중요한 행사는 커널 서밋이라 할 수 있지 않을까 싶습니다. 커널 서밋은 커널 개발에 중요한 역할을 하는 메인테이너들이 모여 현재 개발 상의 이슈를 공유, 해결책을 토론하고 차후 개발을 위한 회의를 하는 자리입니다. 당연하지만 토발즈도 이 자리에 함께 합니다. 중요 개발자들끼리만 모이는 자리인 만큼 초대 형식으로만 참가할 수 있었는데, 2015년부터는 다른 이벤트와 함께 개최되어서 초반 몇일은 함께 열린 이벤트의 참가자들도 토의에 참여할 수 있게 되었습니다.\n올해는 프라하에서 오픈소스 서밋 유럽지역 행사와 임베디드 리눅스 컨퍼런스 유럽지역 행사, 그리고 커널 서밋이 함께 열렸습니다. 당연히 최신 정보를 얻고 다른 개발자들과 네트워킹을 할 수도 있고, 제 프로젝트인 GCMA 를 홍보할 수도 있는 기회이기에 꼭 참여해야겠다 싶었습니다.\nKOSSLAB 에서는 오픈소스 개발자들의 해외 컨퍼런스 참여를 지원합니다. 자원이 한정되어 있는 만큼 지원이 좀 까다롭습니다. 지원 신청은 발표자 또는 초대장을 받은 사람에 한정되며, 지원은 비행기표 비용이며, 발표자의 경우 호텔비 이틀치를 추가로 지원합니다. 즉, 컨퍼런스 등록비, 숙식을 위한 비용은 각자 부담해야 합니다. 지원한 모두를 지원하는 것도 아니고 내부 심사가 있습니다. 그래도 지원을 받는데 성공하면 매우 큰 도움이 되죠.\n저는 초대장을 받아 신청하게 되었는데, 지원 여부 결과가 꽤 늦게까지 발표되지 않았습니다. 초조하게 기다리고 있다가 어차피 각자 결제 후 차후 영수증을 통한 증빙을 통한 지원이라 전해듣고, 에라 모르겠다 하고 자비로 비행기표 등을 모두 구매했는데 다음날 아침, 지원을 해주기로 결정했다는 전화를 받았습니다. 다시 한번 KOSSLAB 에 감사한 마음을 전합니다 :D\nTo Incheon Airport ![Incheon Airport] (/img/osse_01/1.jpg)\n토요일 밤 인천 공항에서 출발해 이스탄불에서 한번 환승하고 프라하로 가는 터키항공 편을 구매했습니다. 빨래를 하고 짐을 싸며 낮시간을 보냈습니다. 인터넷 연결이 어려울 테니 볼만한 영화도 다운받고, 읽을거리도 인쇄해두고, 참여/관리중인 프로젝트들의 소스코드도 랩톱 안에 최신으로 땡겨둡니다. 해가 질 무렵, 공항으로 출발했습니다. 인천공항 가는길은 지하철을 사용합니다.\nTo Istanbul 알고보니 터키항공은 서비스가 좋기로 유명한 모양입니다. 상도 받았다는 것 같더군요.\n출발한 후에 승객들에게 파우치를 하나씩 주는데, 열어보면 안대와 슬리퍼, 귀마개, 칫솔, 립밤 등이 들어있습니다.\n![to_istanbul] (/img/osse_01/2.jpg)\n좌석에 제공되는 서비스도 좋은 편입니다. 의자에 USB 가 있어 핸드폰과 태블릿 등을 충전할 수 있고고, 좌석마다 달린 디스플레이를 통해 영화, 뉴스, 기내정보, 음악 등을 즐길 수 있습니다. 한글 자막이 제공되진 않지만 한국어 더빙 영화는 일부 있는 것 같습니다. 영어 자막은 대부분의 영화가 제공하므로 대충 누가 나쁜놈이고 착한놈인지 정도는 알아들을 수 있었습니다.\n요즘 비행기는 다들 이정도는 제공하는 것 같기도 하지만, 제 경우는 출장 때 외에는 비행기 타는 일이 거의 없고, 출장갈 때마다 가능한 저렴한 표를 구하는 편이다보니 (내가 힘들게 가는만큼 다른 친구들이 이득보겠거니 해서 그러는데, 굳이 그럴 필요는 없나 싶기도 하군요.) 좋은 비행기 타본 적이 없어서 디스플레이가 있는 비행기는 대략 3년만에 처음입니다. 감동의 눈물이 흘렀습니다.ㅜㅜ 근데 디스플레이 없는 비행기에 이미 너무 익숙해졌는지 영화를 잘 안보게 되는군요.\n![to_istanbul_first_food] (/img/osse_01/3.jpg)\n첫번째 기내식은 비빔밥과 파스타가 제공되었습니다. 한국에서 출발하는 만큼 비빔밥을 준비한 준비성은 좋지만 개인적으로 외국 여행중에는 외국 음식을 먹자는 편이고 고기류를 좋아하는 편이라 파스타를 먹으며 눈물을 흘렸습니다. 신기한건 와인을 주문하면 병째로 줍니다. 하지만 작은 병이라 컵 하나에 가득 따른 정도의 양과 비슷합니다. 한국계 항공사에서 주는것보단 많은 양이지만 델타 등의 미국계 항공사에서 주는 것과 비슷한 정도 같습니다.\n![to_istanbul_second_food] (/img/osse_01/4.jpg)\n내리기 전 제공되는 기내식은 오므라이스와 샌드위치입니다. 가볍게 먹기 좋았습니다.\n![istanbul_airport] (/img/osse_01/5.jpg)\n이스탄불 공항은 화려한 편이었습니다. 화장실은 좀 더러웠지만\u0026hellip; 특히 중간에 터키 아이스크림을 파는 가게가 있었는데, 고객을 놀려대며 즐거움을 주는 모습을 오프라인으로는처음 봤습니다. 신기하더군요. 아쉬운건 무료 와이파이가 없습니다. 정확히는, 있긴 한데 사용을 위해선 패스워드를 SMS 를 통해 받아야 합니다. 로밍을 켤 돈이 없어 그냥 버텼습니다. 환승 시간이 길지 않아 다행이었습니다.\n환승을 위해 게이트에 도착해 기다리는데 함께 기다리는 사람들 중 일부 한국 사람들이 게이트가 바뀌었다며 갑자기 뛰어갑니다. 확인해보니 정말로 바뀌어 있더군요. 이동하는 중에 이에 대한 내용이 뒤늦게 방송으로 나왔습니다. 외국인 분들은 뒤늦게 헐레벌떡 오시더군요. 저도 헐레벌떡이었지만.\n신기한게 게이트에서 여권 검사를 합니다. 덕분에 게이트에 들어가는데에도 줄이 생겼습니다. 머리가 길어 눈이 가려서 그런지 검사하는 분이 같은 사람 맞냐며 생일 등을 물어보는데 좀 긴장되더군요. 그래도 큰 문제 없이 통과. 비행기는 출발합니다.\nTo Prague ![to_prague] (/img/osse_01/6.jpg)\n환승 비행기도 터키항공. 이번 여행은 계속 터키항공만 이용합니다.\n![to_pargue_food] (/img/osse_01/7.jpg)\n두시간 가량의 짧은 비행이지만 기내식이 나옵니다. 이번에도 오므라이스와 샌드위치.\n![pargue!] (/img/osse_01/8.jpg)\n먹고 놀고 책도 읽고 하다보니 프라하에 도착합니다.\n","date":1509263724,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509263724,"objectID":"7ba4f340325186168c53143194d73e6e","permalink":"/post/osse2017_01/","publishdate":"2017-10-29T16:55:24+09:00","relpermalink":"/post/osse2017_01/","section":"post","summary":"![pargue!] (/img/osse_01/8.jpg)\nOpen Source Summit Europe 과 Embedded Linux Conference Europe, 그리고 Annual Kernel Summit 이 합동으로 열린 프라하에 다녀왔습니다. 이에 대한 기록을 남겨봅니다.\nThe Event 리눅스 재단에서는 다양한 컨퍼런스를 개최합니다. 2015년까지는 한국에서도 Korea Linux Forum 이라는 행사를 매년 열었죠. 특히 2015년에는 커널 서밋도 함께해서 특히 특별했던 기억입니다. 이런 이벤트들 중에서도 가장 큰 이벤트는 오픈소스 서밋이 아닐까 싶습니다. 이 이벤트는 기존의 리눅스콘 등 행사들이 합쳐진 행사입니다. 가장 큰 이벤트가 오픈소스 서밋이라면 가장 중요한 행사는 커널 서밋이라 할 수 있지 않을까 싶습니다.","tags":["linux","event","linux foundation","trip","conference","prague"],"title":"OSSummit 2017 Attendence - 01","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.14-rc6 https://lkml.kernel.org/r/CA+55aFxSJGeN=2X-uX-on1Uq2Nb8+v1aiMDz5H1+tKW_N5Q+6g@mail.gmail.com\n여섯번째 rc 버전의 릴리즈입니다.\n토발즈 집 인터넷 문제로 평소보다 늦은 릴리즈였군요. 이번 rc 버전은 기대보다는 좀 많은 내용이 추가되었는데, 때문에 어쩌면 rc8 까지 나올지도 모르겠다고 하는군요. 물론 확정되거나 한건 아니라고 합니다.\nRe: [GIT PULL rcu/next] RCU commits for 4.15 https://lkml.kernel.org/r/20171023204502.GA2776@linux.vnet.ibm.com\n4.15 에 들어가야 할 RCU 쪽 커밋들의 풀리퀘스트 입니다.\n문서, RCU CPU Stall warning 업데이트, rcutorture 쪽 업데이트가 포함되었네요.\n[GIT PULL de-alpha] Make core code not need to know about Alpha for v4.15 코어 커널 코드에서 Alpha 를 위한 예외 케이스를 제거하기 위한 작업의 첫번째 결과물이 v4.15 를 향합니다.\n먼저 ACCESS_ONCE() 를 모두 READ_ONCE() 와 WRITE_ONCE() 로 변경하고, READ_ONCE() 와 Alpha 의 값을 리턴하는 _release 와 _relaxed atomic RMW 오퍼레이션들에 smp_read_barrier_depends() 를 내장시키며, 따라서 필요없어진 lockless_dereference() 는 수정된 READ_ONCE() 로 대체되게 했습니다 (lockless_dereference() 는 사실 READ_ONCE() 플러스 smp_read_barrier_depends() 였는데 smp_read_barrier_depends() 는 Alpha 외의 아키텍쳐에서는 NOOP 이라 Alpha 만을 위해 괜히 복잡했거든요).\n","date":1508928987,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508928987,"objectID":"bc173ab4702ef9981525d0b13c95309b","permalink":"/post/lkml_news_v4.14-rc6/","publishdate":"2017-10-25T12:56:27+02:00","relpermalink":"/post/lkml_news_v4.14-rc6/","section":"post","summary":"Linux 4.14-rc6 https://lkml.kernel.org/r/CA+55aFxSJGeN=2X-uX-on1Uq2Nb8+v1aiMDz5H1+tKW_N5Q+6g@mail.gmail.com\n여섯번째 rc 버전의 릴리즈입니다.\n토발즈 집 인터넷 문제로 평소보다 늦은 릴리즈였군요. 이번 rc 버전은 기대보다는 좀 많은 내용이 추가되었는데, 때문에 어쩌면 rc8 까지 나올지도 모르겠다고 하는군요. 물론 확정되거나 한건 아니라고 합니다.\nRe: [GIT PULL rcu/next] RCU commits for 4.15 https://lkml.kernel.org/r/20171023204502.GA2776@linux.vnet.ibm.com\n4.15 에 들어가야 할 RCU 쪽 커밋들의 풀리퀘스트 입니다.\n문서, RCU CPU Stall warning 업데이트, rcutorture 쪽 업데이트가 포함되었네요.\n[GIT PULL de-alpha] Make core code not need to know about Alpha for v4.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.14-rc6","type":"post"},{"authors":null,"categories":["lkml news"],"content":"Linux 4.14-rc5 https://lkml.kernel.org/r/CA+55aFyKgEL3dj7XGYsPQd8y_z0GWx91TLZPSQAxjrua1aWOLw@mail.gmail.com\n다섯번째 rc 버전의 릴리즈입니다.\nLazy TLB flushing 변경은 지나치게 게으르게 TLB flushing 을 해서 AMD 칩 일부에서 문제를 일으키기도 했었다는군요.\n일부 서브시스템에서 fuzzing 을 통한 문제 발견과 수정이 있었는데 좋은 현상이라고도 언급합니다.\n전체적으로 x86, powerpc, mips 에의 arch 업데이트, gpu, networking, usb, sound, misc 드라이버 업데이트, lockdep, networking, mm 쪽 코어 커널 업데이트, 그리고 perf 와 selftest 에의 업데이트가 있었다고 이번 릴리즈를 정리하는군요.\n[PATCH 0/2] mm, thp: introduce dedicated transparent huge page https://lkml.kernel.org/r/1508145557-9944-1-git-send-email-changbin.du@intel.com\nTHP 의 메모리 할당은 좀 복잡하게 여기저기 코드 복사로 구현되어 있습니다. HugeTLB 는 별도 인터페이스가 있구요. THP 에도 HugeTLB 처럼 별도 인터페이스를 사용하도록 제안한 패치입니다.\n[PATCH 1/2] lockdep: Introduce CROSSRELEASESTACKTRACE and make it https://lkml.kernel.org/r/1508318006-2090-1-git-send-email-byungchul.park@lge.com\n지난번 Johan Hovold 가 이야기한 lockdep crossrelease 에 의한 성능 문제 (부팅 시간이 17초에서 35초까지 늘어났죠)에 대한 해결책입니다.\nstack unwind 를 너무 자주 해서 생긴 문제이므로 이를 선택적으로 할 수 있게 하고 그 디폴트 값을 자주 하지 않도록 수정했네요.\n작은 qemu 머신에서 부팅시간이 lockdep disabled 시 1.543 초, lockdep enabled 시 1.570 초, lockdep + crossrelease enabled 시 1.870 초를 보였는데, 이 패치를 적용한 후 마지막 환경에서 부팅시간이 1.574 초로 줄었습니다.\n패치를 보낸 박병철 님은 커널 로그의 타임스탬프를 통해 부팅 시간을 측정했는데, Ingo Molnar 는 부팅 시간 테스트에 qemu 시작 스크립트에 init=/bin/true 과 같은 kernel parameter 를 줘서 부팅 완료와 함께 종료되게 하고서 perf \u0026ndash;null \u0026ndash;repeat 옵션을 사용해서 부팅 시간을 측정할 것을 제안했습니다. 유용한 팁 같습니다!\nLinux-kernel examples for LKMM recipes https://lkml.kernel.org/r/20171011223229.GA31650@linux.vnet.ibm.com\n리눅스 커널에서의 메모리 순서 규칙을 위한 리트머스 테스트들이 실제로 비슷한 패턴으로 사용된 예를 Linux Plumbers Conference 에서 요청받은 Paul E. Mckenney 가 이에 대한 내용을 문서로 만들어 업데이트 했습니다.\n해당 문서는 다음 링크에서도 얻을 수 있습니다: https://github.com/aparri/memory-model/blob/master/Documentation/recipes-LKcode.txt\n","date":1508241264,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508241264,"objectID":"9f3157b36fbd16dff3bf47f625d8b6b3","permalink":"/post/lkml_news_v4.14-rc5/","publishdate":"2017-10-17T20:54:24+09:00","relpermalink":"/post/lkml_news_v4.14-rc5/","section":"post","summary":"Linux 4.14-rc5 https://lkml.kernel.org/r/CA+55aFyKgEL3dj7XGYsPQd8y_z0GWx91TLZPSQAxjrua1aWOLw@mail.gmail.com\n다섯번째 rc 버전의 릴리즈입니다.\nLazy TLB flushing 변경은 지나치게 게으르게 TLB flushing 을 해서 AMD 칩 일부에서 문제를 일으키기도 했었다는군요.\n일부 서브시스템에서 fuzzing 을 통한 문제 발견과 수정이 있었는데 좋은 현상이라고도 언급합니다.\n전체적으로 x86, powerpc, mips 에의 arch 업데이트, gpu, networking, usb, sound, misc 드라이버 업데이트, lockdep, networking, mm 쪽 코어 커널 업데이트, 그리고 perf 와 selftest 에의 업데이트가 있었다고 이번 릴리즈를 정리하는군요.\n[PATCH 0/2] mm, thp: introduce dedicated transparent huge page https://lkml.","tags":["linux","kernel","lkml","news"],"title":"LKML News after v4.14-rc5","type":"post"},{"authors":null,"categories":["lkml news"],"content":"LKML 을 모니터링 하면서 흥미가는 패치나 토론을 lkml news 라는 카테고리로 묶어서 비정기적, 비형식적으로 간략히 정리하고 관련 소식을 업데이트 해보고자 합니다. 주로 모니터링 하는 메일은 메모리 매니지먼트 쪽과 rcu 관련 메일들이 될겁니다.\n","date":1507628220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1507628220,"objectID":"ea929eef11e532d2d73a82f2b5ec13de","permalink":"/post/lkml_news_0000/","publishdate":"2017-10-10T18:37:00+09:00","relpermalink":"/post/lkml_news_0000/","section":"post","summary":"LKML 을 모니터링 하면서 흥미가는 패치나 토론을 lkml news 라는 카테고리로 묶어서 비정기적, 비형식적으로 간략히 정리하고 관련 소식을 업데이트 해보고자 합니다. 주로 모니터링 하는 메일은 메모리 매니지먼트 쪽과 rcu 관련 메일들이 될겁니다.","tags":["linux","kernel","lkml","news"],"title":"LKML News - Intro","type":"post"},{"authors":null,"categories":["projects"],"content":"idle_page_tracking[1] is a simple, stupid toolbox for idle pages tracking. It can be used to get real working set size of a process.\nTools This section describes two tools in the box though more tools exists. You can get more description about each tool from the README in the repository[1].\nuserprog userprog is a sample synthetic workload for test of other tools. It interactively allocates and access specified pages in the allocated pages. After execution, it first asks how many pages to allocates. Once you type in how many pages to allocate, the program will repeatedly asks how many pages in the allocated pages you want to do access.\nwspages.sh Now you can calculate working set size of a process using the tools. To simplify the life even more, wspages.sh helps the complicated works. It requires pid, time interval, and target memory mapped regions as argument. The third argument can be ignored. In the case, it uses heap, stack, and anonymous pages as target memory region by default. If you give the arguments well, this tool will prints out number of pages accessed between the time interval. Simple example of usage and output is as below:\n$ sudo ./wspages.sh `pidof userprog` 1 [heap] 3 wspgstat.sh Like *stat programs (such as vmstat, iostat, \u0026hellip;), wspgstat.sh monitors and print out number of pages in working set of specific process repeatedly. It requires pid of target program, delay between idleness check, and target memory mapped regions as arguments. The third argument is optional and has default value as same as wspages.sh\u0026rsquo;s same argument. Simple example usage is as below:\n$ ./wspgstat.sh `pidof mysqld` 5 1 17448 9 21536 18 21659 Limitations The tools use idle page tracking feature of the Linux kernel[2] internally. It means that the tools work on Linux systems that idle page tracking feature is turned on. You can check whether your system turned on or off the feature by simply running the command below:\n$ if [ -d /sys/kernel/mm/page_idle ]; \\ then echo \u0026quot;ON\u0026quot;; else echo \u0026quot;OFF\u0026quot;; fi It also shares limitation of idle page tracking feature of the Linux kernel. It tracks only userspace pages on LRU list of the kernel.\nLicense GPL v3\nReferences [1] https://github.com/sjp38/idle_page_tracking\n[2] https://www.kernel.org/doc/Documentation/vm/idle_page_tracking.txt\n","date":1505277960,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505277960,"objectID":"668f15484ef5fa00812c2da03482705a","permalink":"/post/idle_page_tracking/","publishdate":"2017-09-13T13:46:00+09:00","relpermalink":"/post/idle_page_tracking/","section":"post","summary":"idle_page_tracking[1] is a simple, stupid toolbox for idle pages tracking. It can be used to get real working set size of a process.\nTools This section describes two tools in the box though more tools exists. You can get more description about each tool from the README in the repository[1].\nuserprog userprog is a sample synthetic workload for test of other tools. It interactively allocates and access specified pages in the allocated pages.","tags":["projects","idle_page_tracking"],"title":"Idle Page Tracking Tools","type":"post"},{"authors":null,"categories":["tip"],"content":"Benchmarks for Database can be roughly divided into two kinds, OLTP and OLAP[1]. One of the most popular OLTP benchamrks is TPC-C, while that of OLAP is TPC-H[2]. This post describes how you can run TPC-H against MariaDB.\nEnvironment Setup The versions of the OS and programs I used for writeup of this post are as below.\n Ubuntu 16.04.2 Server MariaDB 10.2.8 TPC-H toolkit 2.17.2  Automated Scripts I automated whole things I will describe below using scripts and uploaded the scripts to the Github: https://github.com/sjp38/tpch-mariadb\nIf you hano no time, just go to the link and use the script.\nTPC-H Spec You can ge TPC-H benchmark specification from TPC website[3]. Refer to it if you need strict specification of the benchmark. Nonetheless, I give you a rough description of the benchmark here, though. TPC-H stores a huge data into 8 tables and run 22 queries analysing this data. To measure the performance, we can measure the time to store/load the data, runtime of each of the 22 queries, and the throughput (number of processed queries per second) of multiple sessions.\nGet TPC-H Toolkit TPC provides the specification says how the tables should be constructed, what data should be stored in the tables, and what kind of queries should be issued. So, anyone can implement their TPC-H based on this specification. Nonetheless, as manual read of the specification and manual implementation can be boring and exhaustive to someone. For the reason, TPC officially provides a tool, namely TPC-H Toolkit, that helps creation of the tables, the data, and the queries. If you go to the site[4], enter your personal information, and agree to the license, they will send you a link to download the TPC-H Toolkit by mail.\nThe file is in zip format. After extracting the file, you can get the directory named by the version of the toolkit. The source code and license file is under the directory. We will use dbgen/ directory here.\n$ tree 2.17.2 -L 1 2.17.2 ├── dbgen ├── dev-tools ├── EULA.txt └── ref_data Build Source Code Under the dbgen/, there are source code of the programs that we will use, dbgen and qgen. Copy makefile.suite to makefile and edit the content as below.\n$ diff -u makefile.suite makefile --- makefile.suite 2017-04-21 06:01:08.000000000 +0900 +++ makefile 2017-09-10 11:10:12.563384756 +0900 @@ -100,15 +100,15 @@ ################ ## CHANGE NAME OF ANSI COMPILER HERE ################ -CC = +CC = gcc # Current values for DATABASE are: INFORMIX, DB2, TDAT (Teradata) # SQLSERVER, SYBASE, ORACLE, VECTORWISE # Current values for MACHINE are: ATT, DOS, HP, IBM, ICL, MVS, # SGI, SUN, U2200, VMS, LINUX, WIN32 # Current values for WORKLOAD are: TPCH -DATABASE= -MACHINE = -WORKLOAD = +DATABASE= SQLSERVER +MACHINE = LINUX +WORKLOAD = TPCH # CFLAGS = -g -DDBNAME=\\\u0026quot;dss\\\u0026quot; -D$(MACHINE) -D$(DATABASE) -D$(WORKLOAD) -DRNG_TEST -D_FILE_OFFSET_BITS=64 LDFLAGS = -O Now, $ make command will build dbgen and qgen.\n$ make ... bm_utils.o qgen.o rnd.o varsub.o text.o bcd2.o permute.o speed_seed.o rng64.o -lm $ file dbgen dbgen: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d0bca1a18c33947d85f5943c8325837faec7c95d, not stripped $ file qgen qgen: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=79a6216e04c446715b0e55f9c804586887b698c8, not stripped TPC-H Toolkit Usage To run TPC-H on MariaDB, we need several more modification. Before that, let\u0026rsquo;s see how we run TPC-H using the files under dbgen/ directory.\nData Preparation dss.ddl file has the sql statements be used for the creation of the 8 tables. If you command your DB to execute the sql statements in this file, the 8 tables will be created.\ndbgen creates the sql statements that stores the data to the table. If you run the dbgen with optional arguments including scale factor, 8 files having .tbl suffix will be created. Each of these files has query statements inserting the data to the table having same name with the file. You can store the data to the tables by making your DB to run the sql statements.\ndss.ri has a sql statement creating the table index. Once your DB runs these sql statements, the table index will be generated and you will be ready to run the TPC-H queries.\nQuery Creation and Execution qgen creates the queries doing the TPC-H\u0026rsquo;s analysis tasks. We simply said 22 queries, but it would be better to say 22 kinds of queries. If a query is repeatedly issued with same arguments, DB server can cache the results and simply return it to the client. As this can distort the results, TPC-H Toolkit has the template of the 22 queries under dbgen/queries/ directory and let qgen to create query statements using random arguments, based on this templates. The seed for the random number generation is created based on dists.dss file.\nModify TPC-H Toolkit for MariaDB Each DBMS has a little bit different query syntax. Thus, TPC-H Toolkit is made to support multiple DBMSes, but the MariaDB is not in the supported DBMSes. Therefore, you should modify a part of the TPC-H Toolkit to run TPC-H on the MariaDB.\nThe files need modifications are dss.ddl, dss.ri, and the templates under the queries/ directory. As the description of the each of the modifications will be too long, I simply made patches for the modifications and uploaded on Github[5]. You can apply the patch files to your TPC-H Toolkit as below. You should be on the TPC-H Toolkit source code directory while running below command.\n$ wget https://raw.githubusercontent.com/sjp38/tpch-mariadb/07fdcbfa9ba1be26f437ff130338a223d0dbfecd/0001-Modify-for-MariaDB.patch $ patch -p1 \u0026lt; 0001-Modify-for-MariaDB.patch The changes above includes the modification of the makefile. After applying, build dbgen and qgen.\nData Creation Now, move to dbgen/ directory and run dbgen. You can give scale factor using its argument. Refer to the usage of dbgen using -h option. After its execution, you can see below 8 .tbl files.\ndbgen$ ls -ahl *.tbl -rw-rw-r-- 1 sjpark sjpark 187M Sep 9 10:48 customer.tbl -rw-rw-r-- 1 sjpark sjpark 5.8G Sep 9 10:48 lineitem.tbl -rw-rw-r-- 1 sjpark sjpark 2.2K Sep 9 10:48 nation.tbl -rw-rw-r-- 1 sjpark sjpark 1.4G Sep 9 10:48 orders.tbl -rw-rw-r-- 1 sjpark sjpark 919M Sep 9 10:48 partsupp.tbl -rw-rw-r-- 1 sjpark sjpark 186M Sep 9 10:48 part.tbl -rw-rw-r-- 1 sjpark sjpark 389 Sep 9 10:48 region.tbl -rw-rw-r-- 1 sjpark sjpark 11M Sep 9 10:48 supplier.tbl The above results used scale factor value as 8.\nLoad Data Now, with your MariaDB, create a database named tpch (line 1), create tables under the database (line 2), load the data to the tables (lines 3-5), and make index for each of the tables (line 6).\n$ mysql -u root -p password -e \u0026quot;create database tpch;\u0026quot; $ mysql -u root -p password \u0026lt; dss.ddl $ for table in customer lineitem nation orders partsupp part region supplier \\ do mysql -u root -p -e \\ \u0026quot;LOAD DATA LOCAL INFILE '$table.tbl' FIELDS TERMINATED BY '|';\u0026quot; done $ mysql -u root -p password \u0026lt; ./dss.ri Create Queries Now, create the queries. qgen receives a number from 1 to 22 which means the type of the queries to create, generate the query statement, and print on the screen. You can save the queries with below commands. This example assumes it is executed on the dbgen/ directory.\n$ cd queries/ $ for i in {1..22}; do ../qgen $i \u0026gt; query-$i.sql; done Now, you have 22 query- prefixed files containing each type of queries under the dbgen/queries/ directory.\nExecute Queries As the query files have sql statement compatible with MariaDB, you can simply run them as below.\n$ for i in {1..22}; do mysql -u root -p password \u0026lt; dbgen/queries/query-$i.sql Few queries will take few of tens of seconds to complete while another queries take less than 1 second.\nConclusion This post summarised how TPC-H is constructed, how you can run it, and what modifications are required to run it on MariaDB. You can do this with only few lines of command based on the automated scripts on my Github repo[6].\nReferences [1] http://datawarehouse4u.info/OLTP-vs-OLAP.html\n[2] http://www.tpc.org/tpch/\n[3] http://www.tpc.org/tpc_documents_current_versions/pdf/tpc-h_v2.17.2.pdf\n[4] http://www.tpc.org/tpc_documents_current_versions/download_programs/tools-download-request.asp?bm_type=TPC-H\u0026amp;bm_vers=2.17.2\u0026amp;mode=CURRENT-ONLY\n[5] https://raw.githubusercontent.com/sjp38/tpch-mariadb/07fdcbfa9ba1be26f437ff130338a223d0dbfecd/0001-Modify-for-MariaDB.patch\n[6] https://github.com/sjp38/tpch-mariadb\n","date":1505008464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505008464,"objectID":"b6a107ddf3eea1472d4650f05ae32422","permalink":"/post/tpch-on-mariadb/","publishdate":"2017-09-10T10:54:24+09:00","relpermalink":"/post/tpch-on-mariadb/","section":"post","summary":"Benchmarks for Database can be roughly divided into two kinds, OLTP and OLAP[1]. One of the most popular OLTP benchamrks is TPC-C, while that of OLAP is TPC-H[2]. This post describes how you can run TPC-H against MariaDB.\nEnvironment Setup The versions of the OS and programs I used for writeup of this post are as below.\n Ubuntu 16.04.2 Server MariaDB 10.2.8 TPC-H toolkit 2.17.2  Automated Scripts I automated whole things I will describe below using scripts and uploaded the scripts to the Github: https://github.","tags":["tpch","benchmark","tpc-h","mariadb","mysql"],"title":"TPC-H on MariaDB (MySQL)","type":"post"},{"authors":null,"categories":["tip"],"content":"악의 조직 Oracle 에서 Sun 을 인수한 후 이어진 반 open source 적 행보에 MySQL 개발자는 MySQL 을 fork 해서 MariaDB 를 개발하고 있습니다. 저작권을 악용해 중요한 기능은 천천히 릴리즈 하거나 유료 라이센스로만 공개하기도 하는 Oracle 의 MySQL 과 달리 MariaDB 는 예전 MySQL 처럼 공개적으로 개발되고 있어 새롭고 진보적인 기능도 많이 있는 편인 것 같습니다.\n이 글에서는 Ubuntu 16.04 서버에 MariaDB 를 소스코드부터 가져와서 설치하고 사용하는 간단한 사용법을 정리해 봅니다.\nEnvironment 이 글에서는 Ubuntu 16.04.2 server 버전을 사용합니다.\nBuild and Install MariaDB 는 대부분의 리눅스 배포본을 위한 패키징이 잘 되어 있어서 각 배포본의 패키징 시스템을 사용하면 한두줄의 커맨드로 쉽게 설치할 수 있습니다. 하지만 여기선 문서[1] 를 참고해 가며 소스 코드부터 가져와서 바닥부터 가장 최신 버전을 설치해 보기로 합시다.\n소스코드는 github 에 git repository 의 형태로 공개되어 있습니다. 아래의 명령어로 코드를 mariadb/ 디렉토리 아래에 가져올 수 있습니다.\n$ git clone https://github.com/MariaDB/server.git mariadb $ cd mariadb git repository 인만큼 버전은 git 을 통해 tag 로 관리되고 있습니다. 이 글을 작성 중인 시점에서 가장 최신 stable 릴리즈는 10.2.8[2] 로, 2017년 8월 18일 자로 릴리즈 되었습니다. 다음 커맨드로 해당 버전의 코드를 checkout 할 수 있습니다:\n$ git checkout mariadb-10.2.8 이제 소스코드는 준비되었고, 빌드할 차례입니다. cmake 를 사용해 어떻게 빌드할지 등을 설정할 수 있는데, 여기선 release 할때 사용하는 설정을 사용해 보겠습니다. cmake 가 실패하는 경우는 대부분 필요 패키지가 설치되지 않은 경우입니다. libaio-dev, libjemalloc-dev, libgnutls-dev 등의 패키지가 설치되어 있어야 합니다.\n해당 패키지 설치 후에도 같은 에러 메세지가 나올 수 있는데, cmake 의 기존 결과가 캐싱되어 재사용되기 때문입니다. CMakeCache.txt 와 CMakeFiles/ 디렉토리를 제거해주면 캐싱된 내용은 사라집니다.\n이어서 간단히 make 를 사용해 빌드하고 설치를 할 수 있습니다. 설치는 super user 권한이 필요하기 때문에 sudo 를 사용해야 합니다.\n$ cmake . -DBUILD_CONFIG=mysql_release $ make $ sudo make install 어떤 사양의 머신에서 빌드하느냐에 따라 다르겠지만 빌드하는데 꽤 긴 시간이 걸립니다. 이 글을 작성하며 사용한 72 코어 / 144 쓰레드 머신에서는 -j144 옵션을 줘서 빌드할 경우 1분 5초 걸렸습니다. 별다른 에러 메세지가 없다면 빌드에 성공한 것입니다.\nInitialize MariaDB Server 이제 MariaDB 의 기본 설치는 마무리 되었지만, 아직 MariaDB 구동을 위한 준비가 모두 끝나진 않았습니다. MariaDB 가 제대로 동작하기 위해서는 test database, default user 등등의 최소 데이터를 생성하는 초기화 작업을 진행해야 합니다. 앞의 설치는 MariaDB 실행파일을 만들어 시스템에 설치한 것이고, 이 초기화 작업은 MariaDB 서비스의 설치라고 생각하면 이해가 조금 편할 수도 있겠습니다.\nsuper user 권한의 남용은 보안적으로 위험할 수 있으므로, MariaDB 는 기본적으로 별개의 사용자 계정을 사용할 것을 권장합니다. 다음 예에서는 mysql 이라는 이름의 user 를 생성하고 이 사용자 계정을 사용하도록 해서 초기화를 진행합니다.\n$ sudo adduser mysql $ sudo chown -R mysql /usr/local/mysql/ $ cd /usr/local/mysql/ $ sudo -u mysql ./scripts/mysql_install_db --user=mysql 순조롭게 진행되었다면 다음과 같은 메세지를 볼 수 있을 겁니다:\nInstalling MariaDB/MySQL system tables in './data' ... OK To start mysqld at boot time you have to copy support-files/mysql.server to the right place for your system PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER ! To do so, start the server, then issue the following commands: './bin/mysqladmin' -u root password 'new-password' './bin/mysqladmin' -u root -h hydra password 'new-password' Alternatively you can run: './bin/mysql_secure_installation' which will also give you the option of removing the test databases and anonymous user created by default. This is strongly recommended for production servers. See the MariaDB Knowledgebase at http://mariadb.com/kb or the MySQL manual for more instructions. You can start the MariaDB daemon with: cd '.' ; ./bin/mysqld_safe --datadir='./data' You can test the MariaDB daemon with mysql-test-run.pl cd './mysql-test' ; perl mysql-test-run.pl Please report any problems at http://mariadb.org/jira The latest information about MariaDB is available at http://mariadb.org/. You can find additional information about the MySQL part at: http://dev.mysql.com Consider joining MariaDB's strong and vibrant community: https://mariadb.org/get-involved/ Starting MariaDB 이제 준비가 끝났습니다. 앞의 초기화 과정 이후 나온 메세지에서도 알 수 있듯이, 다음 커맨드로 MariaDB 서버를 시작할 수 있습니다:\n$ sudo -u mysql /usr/local/mysql/bin/mysqld_safe --datadir='./data' Connect to Local MariaDB Server MariaDB 는 여러가지 방법으로 접근해 사용할 수 있는데, 관리 목적 등으로는 local shell 을 사용하는게 가장 간단합니다. 다음 커맨드로 local shell 을 열 수 있습니다. 이 커맨드는 같은 기계 위에 띄워져 있는 MariaDB 서버 프로세스에 접속해 해당 서버에 sql 쿼리를 날릴 수 있는 프롬프트를 띄워 줍니다.\n$ /usr/local/mysql/bin/mysql 위 커맨드에 \u0026ndash;version 인자를 주면 현재 mariadb 의 버전도 볼 수 있습니다:\n$ /usr/local/mysql/bin/mysql --version /usr/local/mysql/bin/mysql Ver 15.1 Distrib 10.2.8-MariaDB, for Linux (x86_64) using readline 5.1 s Kill MariaDB Server 서버를 끝낼 수도 있어야겠죠. 다음의 커맨드로 mysql 서버 프로세스에게 SIGTERM 시그널을 날려서 서버 프로세스를 종료시킬 수 있습니다.\n$ sudo -u mysql kill -SIGTERM `pidof mysqld` Basical Usage 프롬프트에서 다음과 같이 기본적인 sql 쿼리를 날릴 수 있습니다.\n$ sudo /usr/local/mysql/bin/mysql \u0026gt; create database sj_db; \u0026gt; create table sjtable ( id INT PRIMARY KEY, name VARCHAR(20) ); \u0026gt; insert into sjtable values ( 1, 'Will' ); \u0026gt; select * from sjtable; 그 외의 MariaDB sql 문법을 위해서는 MariaDB basic sql statement 문서[3] 를 참고합시다.\nmy.cnf configuration mysql 과 마찬가지로 MariaDB 역시 my.cnf 파일을 사용해[1] 대부분의 설정을 구성합니다. 기본적으로 /etc/my.cnf, /etc/mysql/my.cnf \u0026hellip; 순으로 설정 파일을 찾게 되며, mysqld_safe 실행파일 실행 시에 \u0026ndash;defaults-file 인자로 파일 경로를 줄수도 있습니다. 소스 코드 디렉토리의 support-files/ 디렉토리 아래에 my-huge.cnf, my-large.cnf, my-medium.cnf 등의 예제 설정도 있습니다.\n앞의 과정을 따라서 설치하면 /etc/ 아래에 my.cnf 파일이 없을 겁니다. 이 때의 기본 설정은 어떻게 되는지는 다음 커맨드를 통해 알 수 있습니다.\n$ /usr/local/mysql/bin/mysql -NBe 'SHOW VARIABLES' askapache.com 에서는[5] 이를 이용해 기본 my.cnf 를 추출하는 커맨드도 소개하고 있으니 필요하면 참고하시기 바랍니다.\nData Directory Specification 실험용으로 MariaDB 를 사용하는 경우라면 MariaDB 데이터를 최초 상태로 백업해 두거나 서로 다른 설정의 데이터를 유지해야 할 수도 있습니다.\nMariaDB 의 default data directory 는 /usr/local/mysql/data/ 로, 프롬프트에서\n\u0026gt; select @@datadir; 명령으로 현재 띄워진 MariaDB 서버 프로세스가 사용중인 data directory 의 경로를 볼 수 있습니다. 이 경로는 my.cnf 상에서 수정할 수도 있고, mysqld_safe 실행 시 \u0026ndash;datadir 옵션으로 지정할 수도 있습니다. 주의할 점은, 이때 \u0026ndash;datadir 인자로 주는 데이터 디렉토리는 한번은 scripts/mysql_install_db 를 실행해준 디렉토리여야 한다는 것입니다. mysql_install_db 명령에도 \u0026ndash;datadir 인자를 줄수 있습니다.\nConclusion MariaDB 최신 버전의 소스코드를 가져와 빌드하고 설치해서 사용하는 방법을 알아봤습니다. 하나의 예제로 정리해 보자면 다음과 같습니다.\n$ git clone https://github.com/MariaDB/server.git mariadb $ cd mariadb $ git checkout mariadb-10.2.8 $ cmake . -DBUILD_CONFIG=mysql_release $ make $ sudo make install $ sudo adduser mysql $ sudo chown -R mysql /usr/local/mysql/ $ cd /usr/local/mysql/ $ sudo -u mysql ./scripts/mysql_install_db --datadirr='./data' \u0026amp; $ /usr/local/mysql/bin/mysql References [1] https://mariadb.com/kb/en/mariadb/generic-build-instructions/\n[2] https://downloads.mariadb.org/mariadb/+releases/\n[3] https://mariadb.com/kb/en/mariadb/basic-sql-statements/\n[4] https://mariadb.com/kb/en/mariadb/configuring-mariadb-with-mycnf/\n[5] https://www.askapache.com/mysql/view-mysql-variables-my-cnf/\n","date":1504157827,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1504157827,"objectID":"fedb153f56896666fb36582b73a5c5a3","permalink":"/post/mariadb_setup/","publishdate":"2017-08-31T14:37:07+09:00","relpermalink":"/post/mariadb_setup/","section":"post","summary":"악의 조직 Oracle 에서 Sun 을 인수한 후 이어진 반 open source 적 행보에 MySQL 개발자는 MySQL 을 fork 해서 MariaDB 를 개발하고 있습니다. 저작권을 악용해 중요한 기능은 천천히 릴리즈 하거나 유료 라이센스로만 공개하기도 하는 Oracle 의 MySQL 과 달리 MariaDB 는 예전 MySQL 처럼 공개적으로 개발되고 있어 새롭고 진보적인 기능도 많이 있는 편인 것 같습니다.\n이 글에서는 Ubuntu 16.04 서버에 MariaDB 를 소스코드부터 가져와서 설치하고 사용하는 간단한 사용법을 정리해 봅니다.","tags":["db","database","dbms","mariadb"],"title":"Ubuntu 16.04 Server 위에 MariaDB 설치/사용하기","type":"post"},{"authors":null,"categories":["tip"],"content":"현재 사용중인 랩탑에 설치한 OS 는 Fedora 24 였는데, 너무 오래되었고 지원도 얼마전 끝났기에[0] 이번에 Fedora 26 으로 새로 설치했습니다. 마침 go 언어도 1.9 가 최근에 릴리즈 되었기에 개인적으로 go 언어를 설치하는 방법을 기록해 둡니다.\n여기선 소스 코드만 가지고 빌드, 설치하는 방법을 기록합니다.\nGet Source Code go 언어는 오픈소스입니다. 다음 커맨드를 통해 구글로부터 소스코드를 받아올 수 있습니다.\n$ git clone https://go.googlesource.com/go 기다리면 go/ 디렉토리에 소스코드가 딸려옵니다.\ngolang 1.4 Build \u0026amp; Install go 언어를 빌드한다는 건 go 언어 컴파일러와 기본 라이브러리 등과 같은, go 언어로 짠 프로그램을 빌드하고 수행하는데 필요한 도구들을 빌드한다는 이야기입니다. 이런 기본 도구는 go 언어로 짜여져 있기 때문에 go 언어를 소스코드로부터 빌드하려면 go 언어가 미리 설치되어 있어야 합니다. 따라서 1.4 버전의 go 언어를 먼저 빌드, 설치합니다.\n$ cp -R go go1.4 $ cd go1.4/src $ git checkout go1.4.3 $ CGO_ENABLED=0 ./all.bash 앞서 받아온 소스코드를 go1.4/ 디렉토리로 복사하고 (line 1) 그리로 이동해서 (line 2) git 을 사용해 1.4 버전들 중 가장 마지막 버전인 1.4.3 버전의 코드를 꺼낸 후 (line 3) 마지막 줄에서 빌드를 하는 명령들입니다.\n참고로 CGO_ENABLED=0 를 빼먹으면 빌드에 실패합니다[1]. go 개발팀에선 그냥 바이너리로 최신 go 를 짜기 위한 go 를 설치하길 권장하지만[2], 전 소스 코드만으로 설치를 하고 싶으므로 이렇게 합니다.\ngolang 1.9 Build \u0026amp; Install 역시 간단합니다.\ncd ../go/src git checkout go1.9 ./all.bash 앞서 받아둔 go 소스 코드로 돌아가서 (line 1), 1.9 버전의 소스코드를 꺼내고 (line 2), 마지막으로 빌드 / 설치를 진행합니다 (line 3).\n다음과 같은 메세지를 보게 되면 빌드 / 설치에 성공한 겁니다.\n ALL TESTS PASSED --- Installed Go for linux/amd64 in /home/sjpark/go Installed commands in /home/sjpark/go/bin *** You need to add /home/sjpark/go/bin to your PATH. Test Installation 설치가 잘 되었는지 마지막으로 테스트 해봅시다.\n$ go version go version devel +bad6b6fa91 Fri Aug 25 23:29:55 2017 +0000 linux/amd64 위와 같이 결과가 나오면 잘 설치된 것입니다.\nAdditional Configuration 추가적으로 go 바이너리의 위치를 PATH 에 넣어주고, 사용할 GOPATH 를 지정해 줍니다. golang 은 개발 코드의 위치와 go 언어로 짜여진 프로그램의 설치 위치 규칙을 기본적으로 권장하는 규칙이 있는데, 이를 위해 사용되는 디렉토리의 꼭대기가 GOPATH 입니다. 나만의 방식으로 go 언어를 다루겠다면 굳이 지정할 필요 없지만, 전 그정도 규칙은 따르는 편이므로 다음 내용을 홈 디렉토리의 .bashrc 에 추가해 이를 지정해 줍니다.\nexport GOPATH=$HOME/gopath export PATH=$PATH:$HOME/go/bin export PATH=$PATH:$GOPATH/bin GOPATH 아래 bin/ 디렉토리는 일반적으로 설치한 go 언어 프로그램의 실행파일을 위치시키는 곳이므로 역시 PATH 에 추가해줬습니다 (line 3).\n이 규칙을 이해하기 쉽게 다음과 같이 제가 만든 hn 이라는 프로그램을 설치해 보고, 이 명령이 GOPATH 를 어떻게 사용하는지 보면 다음과 같습니다.\n$ go get github.com/sjp38/hn $ tree gopath/ gopath/ ├── bin │ └── hn └── src └── github.com └── sjp38 └── hn ├── hn.go ├── LICENSE └── README.md 5 directories, 4 files References [0] https://fedoramagazine.org/fedora-24-eol/\n[1] https://github.com/golang/go/issues/18156#issuecomment-264389887\n[2] https://github.com/golang/go/issues/18156#issuecomment-264492152\n","date":1503712464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1503712464,"objectID":"de72a2705f2bdb315466a8b002b1a113","permalink":"/post/golang1.9_fedora26/","publishdate":"2017-08-26T10:54:24+09:00","relpermalink":"/post/golang1.9_fedora26/","section":"post","summary":"현재 사용중인 랩탑에 설치한 OS 는 Fedora 24 였는데, 너무 오래되었고 지원도 얼마전 끝났기에[0] 이번에 Fedora 26 으로 새로 설치했습니다. 마침 go 언어도 1.9 가 최근에 릴리즈 되었기에 개인적으로 go 언어를 설치하는 방법을 기록해 둡니다.\n여기선 소스 코드만 가지고 빌드, 설치하는 방법을 기록합니다.\nGet Source Code go 언어는 오픈소스입니다. 다음 커맨드를 통해 구글로부터 소스코드를 받아올 수 있습니다.\n$ git clone https://go.googlesource.com/go 기다리면 go/ 디렉토리에 소스코드가 딸려옵니다.\ngolang 1.4 Build \u0026amp; Install go 언어를 빌드한다는 건 go 언어 컴파일러와 기본 라이브러리 등과 같은, go 언어로 짠 프로그램을 빌드하고 수행하는데 필요한 도구들을 빌드한다는 이야기입니다.","tags":["golang","install","setup","fedora"],"title":"Golang 1.9 install on Fedora 26","type":"post"},{"authors":null,"categories":["linux-kernel-hack"],"content":"최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.\nCall Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.\n디버깅 정보를 담아 빌드된 커널이라면 다음과 같이 사람 눈으로 곧바로 어느정도 알 수 있는 수준의 콜 트레이스가 나옵니다:\nCall Trace: [\u0026lt;c12ba080\u0026gt;] ? dump_stack+0x44/0x64 [\u0026lt;c103ed6a\u0026gt;] ? __warn+0xfa/0x120 [\u0026lt;c109e8a7\u0026gt;] ? module_put+0x57/0x70 [\u0026lt;c109e8a7\u0026gt;] ? module_put+0x57/0x70 [\u0026lt;c103ee33\u0026gt;] ? warn_slowpath_null+0x23/0x30 [\u0026lt;c109e8a7\u0026gt;] ? module_put+0x57/0x70 [\u0026lt;f80ca4d0\u0026gt;] ? gp8psk_fe_set_frontend+0x460/0x460 [dvb_usb_gp8psk] [\u0026lt;c109f617\u0026gt;] ? symbol_put_addr+0x27/0x50 [\u0026lt;f80bc9ca\u0026gt;] ? dvb_usb_adapter_frontend_exit+0x3a/0x70 [dvb_usb] 콜 트레이스는 어떻게 이 순간에 이르게 되었는가를 역순으로 보여줍니다. 즉, dvd_usb_adapter_frontend_exit() 에서 symbol_put_addr() 를 호출했고, 여기서 gp8psk_fe_set_frontend() 를 호출했고, \u0026hellip; 반복되어 dump_stack() 함수에 의해 이 메세지가 뜬 것이죠. 함수 이름 옆의 0xaa/0xbb 와 같은 숫자들은 각각 함수 내에서 해당 순간 코드까지의 오프셋, 그리고 해당 함수의 전체 크기를 나타냅니다.\n이것만으로도 많은 정보를 알 수 있지만 해당 함수의 정확히 몇번째 라인에서 문제가 났는지는 이것만으로 알수가 없습니다. 코드를 한줄한줄 눈으로 보고 로그를 추가해보고 하면서 찾을 수도 있겠지만 복장이 터지겠죠. 가장 왼쪽 [\u0026lt; 와 \u0026gt;] 사이의 16진수는 메모리 상에서 해당 코드의 주소를 의미합니다. 따라서 디버깅 정보가 있다면 이 주소를 가지고 해당 코드가 어느 파일의 몇번째 라인인지 파악할 수 있습니다.\n이 작업을 위한 도구가 여럿 있는데, addr2line[1] 도 많이 사용되는 도구 중 하나입니다.\n$ addr2line -e ../linux.out/vmlinux 0xffffffff810e91f0 linux/arch/x86/include/asm/rwsem.h:83 -e 옵션을 통해 커널 디버깅 정보를 담고 있는 커널 이미지가 위치한 경로를 넘겨주고 마지막 인자로 앞의 콜 트레이스에서 얻어온 주소를 주면 어느 파일의 몇번째 라인을 가리키는지 쉽게 알 수 있습니다.\nText Address Removed from Stack Dump 그런데, 2016년 말 후에 릴리즈된 x86 용 커널은 콜 트레이스에서 위의 addr2line 에 넘겨줘야 할, 어드레스 정보가 더이상 콜 트레이스에 없습니다. 해당되는 커널에서는 다음과 같은 콜 트레이스가 나올 겁니다:\nCall Trace: dump_stack+0x85/0xc2 bad_page+0xc1/0x120 free_pages_check_bad+0x7a/0x80 __free_pages_ok+0x32a/0x3e0 __free_pages+0x19/0x30 shrink_huge_zero_page_scan+0x50/0x60 이는 2016년 10월 25일자로 Josh Poimboeuf 에 의해 만들어진 커밋[2] 에 의한 겁니다. 코드의 메모리상 어드레스가 추측 가능할 경우엔 해당 영역에 코드를 바꾼다거나 하는 여러 공격이 들어올 수 있어 보안상 좋지 않습니다. 때문에 최근 시스템은 동일한 프로그램이라 하더라도 메모리에 적재될 때마다 코드의 위치가 바뀌거나 하도록 하는 기능을 갖추고 있습니다. Address randomization[3] 이 한 예입니다. 따라서 Address randomization 이 가줘져 있다고는 하지만 해당 어드레스를 누구나 볼 수 있는 커널 로그에 뿌리는 것도 좋은 행위는 아닐 뿐더러, 이렇게 나온 정보는 시스템에 따라 무효할 것이기 때문에 적어도 커밋 메세지에는 존재할 필요가 없는데 버그 레포팅 할때 사람들이 뿌려대서 귀찮기만 하다는 것이죠.\nHow to find out the Line, now? 문제는, 이렇게 되니 기존의 addr2line 을 이용해 한방에 해결되던 위치 찾기가 좀 복잡해진다는 겁니다. 먼저 해당 함수의 메모리 상 위치를 찾아내고, 그 다음 오프셋을 더해서 해당 코드의 메모리 상 주소를 찾아내어서 다시 addr2line 등을 사용해야 하는 것이죠.\n이게 귀찮다면 만능 도구 gdb 를 사용할 수 있습니다:\n$ gdb ../linux.out/vmlinux ... (gdb) list *(free_pages_check_bad+0x7a) 0xffffffff811daf1a is in free_pages_check_bad (/home/sjpark/linux/mm/page_alloc.c:941). 936 #ifdef CONFIG_MEMCG 937 if (unlikely(page-\u0026gt;mem_cgroup)) 938 bad_reason = \u0026quot;page still charged to cgroup\u0026quot;; 939 #endif 940 bad_page(page, bad_reason, bad_flags); 941 } 942 943 static inline int free_pages_check(struct page *page) 944 { 945 if (likely(page_expected_state(page, PAGE_FLAGS_CHECK_AT_FREE))) 하지만 이 방법은 동일한 이름의 심볼이 두개 존재하는 경우 첫번째 심볼에 대해서만 보여줍니다. 따라서 사려 깊은 Josh Poimboeuf 는 저처럼 addr2line 을 좋아하는 사람들을 위해 대체할 도구를 만들었습니다. 그 이름은 faddr2line 으로, 커널 소스의 scripts/ 디렉토리 아래에 있습니다. 다음과 같이 사용할 수 있습니다:\n$ ./scripts/faddr2line ../linux.out/vmlinux free_pages_check_bad+0x7a free_pages_check_bad+0x7a/0x80: free_pages_check_bad at mm/page_alloc.c:941 두번째 인자로 디버깅 정보 담긴 이미지파일 경로, 그 뒤로 찾고자 하는 코드의 함수와 함수로부터 해당 코드까지의 오프셋을 주면 됩니다.\nConclusion 보안적 이유와 쓸모없음으로 인해 2016년 말 후의 커널은 콜 트레이스에서 각 코드의 메모리 어드레스를 제거하고 func_name+0x123/0x456 포맷으로만 코드 위치를 제공하게 되었습니다. 이로 인해 해당 코드의 파일 내에서의 위치를 찾는데에 예전처럼 addr2line 을 더 사용할 수는 없게 되었지만 커널 모드의 scripts/faddr2line 도구를 사용해 예전처럼 쉽게 콜 트레이스의 각 위치의 파일 내에서의 위치를 파악할 수 있습니다.\nReferences [1] http://www.skrenta.com/rt/man/addr2line.1.html\n[2] http://lkml.kernel.org/r/69329cb29b8f324bb5fcea14d61d224807fb6488.1477405374.git.jpoimboe@redhat.com\n[3] https://en.wikipedia.org/wiki/Address_space_layout_randomization\n","date":1497599169,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497599169,"objectID":"0b74bc7a0cffd70bbb8930355de455c8","permalink":"/post/kernel-text-addresses-removed-from-calltrace/","publishdate":"2017-06-16T16:46:09+09:00","relpermalink":"/post/kernel-text-addresses-removed-from-calltrace/","section":"post","summary":"최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.\nCall Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.","tags":["linux","kernel","tip"],"title":"Kernel text addresses removed from calltrace","type":"post"},{"authors":null,"categories":["projects"],"content":"I wrote a simple, stupid program[1] that showing LKML[2] mails in terminal briefly like twitter livestream in Go language. It is just an early version and so many things to be complemented exists, though. Nevertheless, now it just works as I wanted at first.\nReferences [1] https://github.com/sjp38/lkml\n[2] https://en.wikipedia.org/wiki/Linux_kernel_mailing_list\n","date":1495961503,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495961503,"objectID":"f967e28467f92d637f1be835eaa15423","permalink":"/post/lkml_go/","publishdate":"2017-05-28T17:51:43+09:00","relpermalink":"/post/lkml_go/","section":"post","summary":"I wrote a simple, stupid program[1] that showing LKML[2] mails in terminal briefly like twitter livestream in Go language. It is just an early version and so many things to be complemented exists, though. Nevertheless, now it just works as I wanted at first.\nReferences [1] https://github.com/sjp38/lkml\n[2] https://en.wikipedia.org/wiki/Linux_kernel_mailing_list","tags":["projects","lkml","linux kernel mailing list","golang"],"title":"lkml livestream","type":"post"},{"authors":null,"categories":["tip"],"content":"PARSEC 은 멀티쓰레드 프로그램들로 구성된 benchmark suite 입니다. 멀티쓰레드로 구성되어 있기 때문에 멀티코어 시스템에서의 multi core scalability 를 테스트 하기에도 적합합니다. 이 글에선 현재 최신 버전인 3.0 버전의 PARSEC 을 Ubuntu 16.04 server 에 설치하면서 겪는 문제의 해결법과 간단한 사용법을 정리해 봅니다.\nToolbox for PARSEC 3.0 on Ubuntu Xenial 아래의 내용을 하나하나 읽어가면서 따라하는 것도 귀찮은 일입니다. 그래서 아래에서 설명하는, Ubuntu Xenial 에서 PARSEC 3.0 을 돌리기 위해 필요한 작업을 대부분 자동으로 해주는 도구들을 만들어 두었습니다. 오픈소스로 공개되어 있으니[1], 아래의 머리 아픈 내용을 읽기 귀찮다면 해당 도구들을 사용하시기 바랍니다. 해당 도구들의 사용법은 README 에 간략히 설명되어 있습니다.\n[1] https://github.com/sjp38/parsec_on_ubuntu_xenial\nPARSEC 3.0 Download 공식 홈페이지[1] 에 들어가면 PARSEC 3.0 다운로드 링크가 첫페이지부터 있습니다. 해당 링크를 사용하면 tar.gz 포맷의 tarball 로 정리된 PARSEC 3.0 을 다운받을 수 있습니다. 웹브라우저로 들어가서 다운로드를 받는 방법도 있겠고, curl 이나 wget 등의 command line tool 을 사용해 다운받을 수도 있겠습니다. 다음 커맨드는 PARSEC 3.0 을 다운받아 parsec-3.0/ 디렉토리 아래 압축을 풀고 압축을 푼 디렉토리로 이동합니다.\n$ wget http://parsec.cs.princeton.edu/download/3.0/parsec-3.0.tar.gz $ tar zxvf parsec-3.0.tar.gz $ cd parsec-3.0 Build 이제 PARSEC 3.0 을 빌드해야 합니다. PARSEC 은 여러 벤치마크를 포함하고 있으므로 개별적 벤치마크를 하나하나 직접적으로 다루기보다는 suite 내의 각 벤치마크를 통합적으로 관리할 수 있는 parsecmgmt 라는 관리 프로그램을 사용하도록 되어 있습니다. 빌드 역시 마찬가지입니다. 참고로, parsecmgmt 는 bash script 입니다.\n기본적인 PARSEC 3.0 빌드 방법은 다음과 같이 간단합니다:\n$ source ./env.sh $ parsecmgmt -a build 첫번째 커맨드는 parsecmgmt 의 경로를 PATH 에 추가하는 등, 환경 변수 설정 등의 일을 처리해 주며, 두번째의 간단한 커맨드가 전체 PARSEC 3.0 빌드 프로세스를 수행하게 됩니다.\nPerl Version Problem 하지만 Ubuntu 16.04 server 에서는 다음과 같은 에러 메세지를 내뱉으며 빌드에 실패합니다:\nsmime.pod around line 272: Expected text after =item, not a number smime.pod around line 276: Expected text after =item, not a number smime.pod around line 280: Expected text after =item, not a number smime.pod around line 285: Expected text after =item, not a number smime.pod around line 289: Expected text after =item, not a number POD document had syntax errors at /usr/bin/pod2man line 68. make: *** [install_docs] Error 1 Makefile:680: recipe for target 'install_docs' failed [PARSEC] Error: 'env PATH=/usr/local/sbin:...' failed. 에러 메세지에서 유추할 수 있듯 PARSEC 3.0 의 소스 코드 중 smime.pod 파일이 문법에 맞지 않아 생긴 문제입니다. 참고로 pod 는 perl 프로그램 문서화에 사용되는 간단한 markup language 입니다[2]. Ubuntu 16.04 는 perl 5.22.1 버전을 기본으로 사용하고 있는데, PARSEC 3.0 에 있는 코드는 perl 5.14.2 버전에 맞춰져 있으며 최신 버전으로 오는 사이 문법이 바뀐 것으로 인한 문제로 보입니다. 해결책은 두가지가 있습니다.\n방법 1: perl 5.14.2 설치\nGoogle groups 의 관련 쓰레드[3] 를 참고한 방법입니다. 5.14.2 버전의 perl 소스코드를 받아와 이를 설치하고 PARSEC 빌드에 이 버전의 perl 을 사용하는 방법입니다. 다음의 커맨드로 ~/localperl/ 디렉토리 아래 5.14.2 버전 perl 을 설치하고 사용할 수 있습니다.\nwget http://www.cpan.org/src/5.0/perl-5.14.2.tar.gz $ tar zxvf perl-5.14.2.tar.gz $ cd perl-5.14.2/ $ mkdir ~/localperl $ ./Configure -des -Dprefix=$HOME/localperl $ time make -j $ make test $ make install $ ~/localperl/bin/perl -v 방법 2: pod 파일 문법 오류 수정\n좀 더 정공법에 가까운 방법으로, 다음 글을 참고한 해결책입니다: https://yulistic.gitlab.io/2016/05/parsec-3.0-installation-issues/\n최신 버전의 문법에 맞게 pod 파일의 문제시 되는 부분들을 고쳐주는 것으로, 문제되는 모든 pod 파일의 =item [0-9] 을 =item C\u0026lt;[0-9]\u0026gt; 으로 바꿔줍니다. diff 로 표현하면 다음과 같은 수정을 가하게 되겠습니다:\n--- a/pkgs/libs/ssl/src/doc/apps/smime.pod +++ b/pkgs/libs/ssl/src/doc/apps/smime.pod @@ -265,28 +265,28 @@ encrypted data is used for other purposes. =over 4 -=item 0 +=item C\u0026lt;0\u0026gt; the operation was completely successfully. -=item 1 +=item C\u0026lt;1\u0026gt; an error occurred parsing the command options. -=item 2 +=item C\u0026lt;2\u0026gt; one of the input files could not be read. -=item 3 +=item C\u0026lt;3\u0026gt; an error occurred creating the PKCS#7 file or when reading the MIME message. -=item 4 +=item C\u0026lt;4\u0026gt; an error occurred decrypting or verifying the message. -=item 5 +=item C\u0026lt;5\u0026gt; the message was verified correctly but an error occurred writing out the signers certificates. 이렇게 파일 하나하나 수정하면 이 에러 메세지는 사라집니다. 참고한 링크에서는 하나하나 손으로 수정하기보다는 다음과 같이 간단한 bash shell script 를 짜서 일괄적으로 수정하는 걸 추천합니다:\n#! /bin/bash for i in 0 1 2 3 4 5 6 7 8 9 do echo \u0026quot;Replacing '=item $i' to '=item C\u0026lt;$i\u0026gt;'\u0026quot; grep -rl \u0026quot;=item $i\u0026quot; * | xargs sed -i \u0026quot;s/=item $i/=item C\u0026lt;$i\u0026gt;/g\u0026quot; done 이어서 설명할 문제들과 해결책도 해당 링크를 참고한 것임을 밝혀둡니다.\n__mbstate_t Conflict 앞의 에러 메세지는 사라지지만 이제 다음과 같은 에러 메세지가 나올 겁니다:\n/usr/include/wchar.h:94:3: error: conflicting types for ‘__mbstate_t’ } __mbstate_t; ^ In file included from ../include/machine/bsd_endian.h:37:0, from ../include/sys/bsd_types.h:44, from ../include/sys/bsd_param.h:64, from if_host.c:48: ../include/sys/bsd__types.h:105:3: note: previous declaration of ‘__mbstate_t’ was here } __mbstate_t; ^ In file included from ../include/net/bsd_if_var.h:82:0, from ../include/net/bsd_if.h:459, from if_host.c:57: ../include/sys/bsd_buf_ring.h: In function ‘buf_ring_dequeue_sc’: ../include/sys/bsd_buf_ring.h:200:33: warning: variable ‘cons_next_next’ set but not used [-Wunused-but-set-variable] uint32_t cons_head, cons_next, cons_next_next; ^ make[1]: *** [if_host.o] Error 1 basd__types.h 파일에 __mbstate_t 타입을 중복 정의했기 때문에 발생한 문제입니다. 해당 파일에서 해당 정의 부분을 다음과 같이 주석 처리하면 이 문제는 사라집니다.\ndiff --git a/pkgs/libs/uptcpip/src/include/sys/bsd__types.h b/pkgs/libs/uptcpip/src/include/sys/bsd__types.h index fa1b0f0f26d9..bd7e6a97f4c8 100644 --- a/pkgs/libs/uptcpip/src/include/sys/bsd__types.h +++ b/pkgs/libs/uptcpip/src/include/sys/bsd__types.h @@ -93,6 +93,7 @@ typedef __ct_rune_t __wint_t; /* wint_t (see above) */ typedef __uint32_t __fixpt_t; /* fixed point number */ +#if 0 /* Skip conflicting __mbstate_t definition */ /* * mbstate_t is an opaque object to keep conversion state during multibyte * stream conversions. @@ -104,5 +105,6 @@ typedef union { __int64_t _mbstateL; /* for alignment */ } __mbstate_t; #endif +#endif /* Skip conflicting __mbstate_t definition */ #endif /* !_BSD_SYS__TYPES_H_ */ pkg-config Package Not Found 성공적인 빌드를 위해선 당연하지만 PARSEC 3.0 이 의존성을 가진 패키지가 모두 설치되어 있어야 합니다. 이를 주의 깊게 미리 설치해 두지 않았다면 다음과 같은 에러 메세지를 만날 수도 있습니다:\nconfigure: error: *** pkg-config not found. See http://www.freedesktop.org/software/pkgconfig/ [PARSEC] Error: ... 위 메세지는 pkg-config 프로그램이 설치되어 있지 않아서 발생한 문제임을 알 수 있습니다. 간단히 Ubuntu 의 package 시스템인 apt 를 사용해 다음과 같이 해당 프로그램을 설치해 주면 문제는 사라집니다.\n$ sudo apt install pkg-config Build Success 이 정도까지가 나타날 수 있는 대부분의 문제입니다. 위 해결책들을 모두 적용했다면 아마 빌드에 성공할 겁니다. 빌드에 성공하면 다음과 같이 성공했다는 메세지를 볼 수 있을 겁니다:\n[PARSEC] [PARSEC] BIBLIOGRAPHY [PARSEC] [PARSEC] [1] Bienia. Benchmarking Modern Multiprocessors. Ph.D. Thesis, 2011. [PARSEC] [2] Woo et al. The SPLASH-2 Programs: Characterization and Methodological Considerations. ISCA, 1995. [PARSEC] [PARSEC] Done. 참고로 빌드에 꽤 긴 시간이 소모됩니다. 제가 사용한 72 코어 / 144 쓰레드 머신에서도 약 10분이 걸렸습니다.\nSimple Usage 이제 빌드가 잘 되었는지 돌려봐야 할 차례입니다. 다음 커맨드는 각 벤치마크를 가장 작은 크기의 데이터셋을 가지고 실행해 보기 때문에 각 벤치마크가 돌아가긴 하는지만 보는데 적격입니다:\nparsecmgmt -a run 가장 작은 크기의 데이터셋을 사용하기 때문에 모든 벤치마크를 수행하지만 빠르게 종료됩니다.\nparsecmgmt Options -a 옵션은 action 을 의미합니다. 앞의 섹션에서는 빌드를 위해 여기에 build 값을 주었고, 여기선 벤치마크 수행을 위해 run 값을 준 것입니다.\n-i 옵션을 통해 벤치마크들은 워크로드에서 사용할 데이터 크기를 지정할 수 있습니다. 이 인자의 값으로 test, simdev, simsmall, simmedium, simlarge, native 를 줄 수 있습니다. Test 는 정확성 테스트만을 위한, 빨리 끝나는 데이터로 이 인자를 주지 않으면 default 로 이 값이 취해집니다. native 는 가장 realworld workload 에 가까운 벤치마크를 위한 데이터라 볼 수 있습니다.\n-p 옵션을 통해 어떤 sub benchmark 를 돌릴지 정할 수 있습니다. 이 옵션을 별도로 주지 않으면 모든 benchmark 를 돌리게 됩니다.\n-n 옵션은 number of threads to use 입니다.\n예를 들어 parsecmgmt -p canneal -a run -i native -n 1 은 canneal sub benchmark 하나만을 쓰레드 한개 써서 native 데이터셋으로 실행합니다.\nReferences [1] http://parsec.cs.princeton.edu\n[2] https://en.wikipedia.org/wiki/Plain_Old_Documentation\n[3] https://groups.google.com/forum/#!topic/snipersim/_1qpbmpPRtg\n","date":1495142595,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495142595,"objectID":"8e46345b86c038624f56bc739102ecc7","permalink":"/post/parsec_3_howto/","publishdate":"2017-05-19T06:23:15+09:00","relpermalink":"/post/parsec_3_howto/","section":"post","summary":"PARSEC 은 멀티쓰레드 프로그램들로 구성된 benchmark suite 입니다. 멀티쓰레드로 구성되어 있기 때문에 멀티코어 시스템에서의 multi core scalability 를 테스트 하기에도 적합합니다. 이 글에선 현재 최신 버전인 3.0 버전의 PARSEC 을 Ubuntu 16.04 server 에 설치하면서 겪는 문제의 해결법과 간단한 사용법을 정리해 봅니다.\nToolbox for PARSEC 3.0 on Ubuntu Xenial 아래의 내용을 하나하나 읽어가면서 따라하는 것도 귀찮은 일입니다. 그래서 아래에서 설명하는, Ubuntu Xenial 에서 PARSEC 3.0 을 돌리기 위해 필요한 작업을 대부분 자동으로 해주는 도구들을 만들어 두었습니다.","tags":["parsec","benchmark","parsec3.0"],"title":"Parsec 3.0 설치 / 사용법","type":"post"},{"authors":null,"categories":["tip"],"content":"여러개의 리눅스 데스크탑 PC 를 한 책상 위에서 사용하는 경우가 있다. 이 때, 한 PC 에서 Ctrl-C 해서 clipboard 에 복사한 내용을 다른쪽 PC 에서 Ctrl-V 로 붙여넣고 싶은 경우가 있다. 여러가지 해결책이 있겠으나, 다음과 같이 ssh 와 xclip 을 사용해서 해결할 수도 있다:\n$ ssh \u0026lt;username\u0026gt;@\u0026lt;remote host\u0026gt; 'DISPLAY=:0 xclip -o -selection clipboard' | \\ xclip -i -selection clipboard 참고: http://askubuntu.com/questions/513442/can-two-pcs-with-ubuntu-share-the-clipboard-buffer\n","date":1490936034,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490936034,"objectID":"daea1fe5115c771377070515ac3528f2","permalink":"/post/xclip_copy_remote_clipboard/","publishdate":"2017-03-31T13:53:54+09:00","relpermalink":"/post/xclip_copy_remote_clipboard/","section":"post","summary":"여러개의 리눅스 데스크탑 PC 를 한 책상 위에서 사용하는 경우가 있다. 이 때, 한 PC 에서 Ctrl-C 해서 clipboard 에 복사한 내용을 다른쪽 PC 에서 Ctrl-V 로 붙여넣고 싶은 경우가 있다. 여러가지 해결책이 있겠으나, 다음과 같이 ssh 와 xclip 을 사용해서 해결할 수도 있다:\n$ ssh \u0026lt;username\u0026gt;@\u0026lt;remote host\u0026gt; 'DISPLAY=:0 xclip -o -selection clipboard' | \\ xclip -i -selection clipboard 참고: http://askubuntu.com/questions/513442/can-two-pcs-with-ubuntu-share-the-clipboard-buffer","tags":["tip","xclip"],"title":"원격 데스크탑의 clipboard 를 ssh 와 xclip 으로 복사해오기","type":"post"},{"authors":null,"categories":["tip"],"content":"SPEC, which is a standard corporation for the benchmark[1], makes and shares various benchmark suites. SPEC CPU 2006[1] is one of those benchmark suites. It has made to measure performance of computation intensive workload and widely being used now. It has released v1.0 in 2006, 1.1 in 2008, and 1.2 in 2011. This post briefly describes the way to install and execute the SPEC CPU 2006 v1.1 on Ubuntu 16.04 servers.\nAutomated Toolbox For those who might say TL; DR, I wrote a script that can install and execute the SPEC CPU 2006 with one command[1]. If you have no time to read further, just use it, please.\n[1] https://github.com/sjp38/spec_on_ubuntu_xenial\nTest Environment The test machine I used for this post has:\n Intel Xeon E7-8870 v3 Linux 4.10 kernel Ubuntu 16.04.1 Server version  Get The Source Code You should get the source code first. You can buy SPEC CPU 2006 in DVD or .iso file format (As of March 2017, the cost of the SPEC CPU 2006 v1.2 is $800). There are source code of the benchmarks, source code of tool programs that helps compile, execution, and verification of the benchmarks, pre-compiled tool programs, rule files for the execution of the benchmarks, and documents. This post is written basedon SPEC CPU 2006 v1.1. If you got the .iso file, you can access to the files in it by mounting it as below:\n$ mkdir tmnt $ sudo mount -o loop SPEC_CPU2006v1.1.iso ./tmnt $ ls tmnt It is ok to directly install and execute the benchmarks, but I prefer to first copy the files outside of the mounted dir. The owner of the files is root, as the above command mounted the file via the sudo command. Change the owner to you as below:\n$ mkdir SPEC_CPU2006v1.1 $ cp -R ./tmnt/* SPEC_CPU2006v1.1/ $ sudo umount ./tmnt \u0026amp;\u0026amp; rm -fr ./tmnt $ sudo chown -R \u0026lt;username\u0026gt; SPEC_CPU2006v1.1 $ sudo chmod -R 755 SPEC_CPU2006v1.1 $ cd SPEC_CPU2006v1.1 Build The Tools The .iso file has executable binaries for the tools, which is built for various platforms such as redhat and suse. But, there is no binary for Ubuntu. Therefore, you should build the tools from the source code as below:\n$ cd tools/src $ ./buildtools buildtools is a shell script which builds tools under tools/src. But, you may encounter some errors. Following sections describe the errors and how you can solve it.\nConflicting types for \u0026lsquo;getline\u0026rsquo; Build of md5sum will show you following error message:\ngcc -DHAVE_CONFIG_H -I/home/sjpark/SPEC_CPU2006v1.1/tools/output/include -I. -Ilib -c -o md5sum.o md5sum.c In file included from md5sum.c:38:0: lib/getline.h:31:1: error: conflicting types for 'getline' getline PARAMS ((char **_lineptr, size_t *_n, FILE *_stream)); ^ Type conflict is occurred because getline() and getdelim() functions are declared in stdio.h, but those are declared again in getline.h file. You can fix this as below, by checking GLIBC version.\n--- a/tools/src/specmd5sum/lib/getline.h +++ b/tools/src/specmd5sum/lib/getline.h @@ -27,10 +27,14 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */ # endif # endif +# if __GLIBC__ \u0026lt; 2 + int getline PARAMS ((char **_lineptr, size_t *_n, FILE *_stream)); int getdelim PARAMS ((char **_lineptr, size_t *_n, int _delimiter, FILE *_stream)); +#endif + #endif /* not GETLINE_H_ */ Undefined reference to pow I referenced an internet post[3] to solve this and following two problems.\nNow, you will see below error message while building perl.\ncc -L/home/sjpark/SPEC_CPU2006v1.1/tools/output/lib -L/usr/local/lib -o miniperl \\ miniperlmain.o opmini.o libperl.a libperl.a(pp.o): In function `Perl_pp_pow': pp.c:(.text+0x2a76): undefined reference to `pow' It failed to find pow functiona. You should modify it to link libm library. You can solve this problem by setting PERLFLAGS env variable and executing buildtools again:\n$ PERLFLAGS=\u0026quot;-A libs=-lm -A libs=-ldl\u0026quot; ./buildtools\nYou haven\u0026rsquo;t done a \u0026ldquo;make depend\u0026rdquo; yet! Now, you see below error message.\nYou haven't done a \u0026quot;make depend\u0026quot; yet! make[1]: *** [hash.o] Error 1 The bin/sh which is used while building perl directs to /bin/dash. This problem made by dash. Simply modify the symbolic link so that it can use bash instead.\n$ sudo rm /bin/sh $ sudo ln -s /bin/bash /bin/sh If you want it to revert this change, simply restore the symbolic link again.\nasm/page.h file not found tools/src/perl-5.8.8/ext/IPC/SysV/SysV.xs is including a kernel header file, asm/page.h.\ncc -c -I/home/sjpark/SPEC_CPU2006v1.1/tools/output/include -fno-strict-aliasing -pipe -Wdeclaration-after-statement -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -O2 -DVERSION=\\\u0026quot;1.04\\\u0026quot; -DXS_VERSION=\\\u0026quot;1.04\\\u0026quot; -fpic \u0026quot;-I../../..\u0026quot; SysV.c SysV.xs:7:25: fatal error: asm/page.h: No such file or directory Block the include statement in the SysV.xs file and define PAGE_SIZE as below.\n--- a/tools/src/perl-5.8.8/ext/IPC/SysV/SysV.xs +++ b/tools/src/perl-5.8.8/ext/IPC/SysV/SysV.xs @@ -4,7 +4,7 @@ #include \u0026lt;sys/types.h\u0026gt; #ifdef __linux__ -# include \u0026lt;asm/page.h\u0026gt; +#define PAGE_SIZE 4096 #endif perl test fail If you apply every solution above and run $ PERLFLAGS=\u0026quot;-A libs=-lm -A libs=-ldl\u0026quot; ./buildtools, about 9 of 900 tests for the perl fails. Because those tests are ignorable, just answer to ignore (Simply enter y as the prompt explains).\nFailed 9 test scripts out of 907, 99.01% okay. ### Since not all tests were successful, you may want to run some of ### them individually and examine any diagnostic messages they produce. ### See the INSTALL document's section on \u0026quot;make test\u0026quot;. ### You have a good chance to get more information by running ### ./perl harness ### in the 't' directory since most (\u0026gt;=80%) of the tests succeeded. ### You may have to set your dynamic library search path, ### LD_LIBRARY_PATH, to point to the build directory: ### setenv LD_LIBRARY_PATH `pwd`:$LD_LIBRARY_PATH; cd t; ./perl harness ### LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd t; ./perl harness ### export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; cd t; ./perl harness ### for csh-style shells, like tcsh; or for traditional/modern ### Bourne-style shells, like bash, ksh, and zsh, respectively. u=0.92 s=0.69 cu=89.23 cs=5.47 scripts=907 tests=112394 make[2]: *** [_test_tty] Error 1 make[2]: Leaving directory `/home/sjpark/SPEC_CPU2006v1.1/tools/src/perl-5.8.8' make[1]: *** [_test] Error 2 make[1]: Leaving directory `/home/sjpark/SPEC_CPU2006v1.1/tools/src/perl-5.8.8' make: *** [test] Error 2 + '[' 2 -ne 0 ']' + set +x Hey! Some of the Perl tests failed! If you think this is okay, enter y now: Build success Finally, the build step completes.\nTools built successfully. Go to the top of the tree and source the shrc file. Then you should be ready. $ Execution Configuration File Now you can execute the benchmarks. For this, you should configure the execution environemnts of the benchmarks. There are example configuration files under config/ dir.\nExample-linux64-amd64-gcc43.cfg would be appropriate for the test system I use for this post. You can modify this file as you want. In my test, I just copied the file to config/config.cfg file.\nEnvironment Setup For execution of SPEC CPU benchmarks, you should set various environemnt variables. Below simple one command do that for you.\n$ source ./shrc Running Workload runspec program is used for the execution of each benchmark. This program is located under bin/ dir of the SPEC CPU source code, but you can use it directly without entering path, as the above envrionment variables setting has registered it as $PATH. For example, if you want to execute mcf benchmark, you can use below command:\n$ runspec --iterations 1 --size ref --action onlyrun --config config.cfg --noreportable mcf This command executes mcf benchmark and prints the path to the log file describing the execution results.\n... Run Complete The log for this run is in /home/username/spec/spec_src/result/CPU2006.003.log runspec finished at Sun Sep 24 13:55:14 2017; 290 total seconds elapsed To do some experiments for your particular use case, you should understand the usage of runspec. Because it is an out of scope of this post, reference to other documents, please.\nConclusion This post described the way to run SPEC CPU 2006 on an Ubuntu 16.04 system.\nReferences [0] http://spec.org/\n[1] http://spec.org/benchmarks.html#cpu\n[2] http://spec.org/order.html\n[3] https://wiki.linaro.org/MichaelHope/Sandbox/BuildingSPECTools\n","date":1490731855,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490731855,"objectID":"7a52a5841fdcbf47dbfa30b7ede9bb7f","permalink":"/post/spec_cpu2006_install/","publishdate":"2017-03-29T05:10:55+09:00","relpermalink":"/post/spec_cpu2006_install/","section":"post","summary":"SPEC, which is a standard corporation for the benchmark[1], makes and shares various benchmark suites. SPEC CPU 2006[1] is one of those benchmark suites. It has made to measure performance of computation intensive workload and widely being used now. It has released v1.0 in 2006, 1.1 in 2008, and 1.2 in 2011. This post briefly describes the way to install and execute the SPEC CPU 2006 v1.1 on Ubuntu 16.04 servers.","tags":["spec","benchmark","spec_cpu","spec_cpu2006"],"title":"Install / execute spec cpu2006 benchmark","type":"post"},{"authors":null,"categories":["linux-kernel-hack"],"content":"리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.\nkernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.xz 포맷의 압축 파일 또는 patch 등 다양한 형태로 다운받을 수 있는 링크가 있습니다.\n한가지 유의할 것은 kernel.org 는 공식적 사이트일 뿐으로 비슷하게 소스코드를 호스팅 하는 사이트는 github 을 포함해 여럿 있을 수 있다는 점입니다. 또한, 특정한 회사나 개인이 수정한 버전의 커널의 소스코드는 kernel.org 에서 받을 수 없을 수 있습니다. 하지만, 리눅스 커널의 라이센스가 GPL 인만큼, 그들도 자신이 수정한 버전을 상품 등으로 배포하고 있다면 소스코드를 공개해야 하므로, 해당 버전을 만든 사람 또는 회사에 문의해 보면 그 소스코드를 받을 수 있을 겁니다. 예를 들어 안드로이드의 경우 자신들이 수정한 커널을 사용하며, 그렇게 수정된 커널의 소스코드를 자신들의 소스코드 [호스팅 사이트] (https://android.googlesource.com/) 에 공개하고 있습니다.\nSpecific Version kernel.org 첫 페이지에는 몇가지 버전의 소스코드만 존재하므로 찾고 있는 버전은 해당 페이지에 링크가 존재하지 않을 수 있습니다. 특정 버전을 찾기 위한 페이지 역시 kernel.org 는 제공하는데, https://www.kernel.org/pub/linux/kernel/ 주소로 들어가면 특정 버전의 커널 소스코드를 받을 수 있습니다.\n예를 들어 4.2.1 버전을 받고 싶다면, 다음 커맨드를 셸에서 수행해 받아올 수 있습니다:\n$ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.2.1.tar.xz $ tar xvf linux-4.2.1.tar.xz $ ls linux-4.2.1 Git Repository Cloning 주요 리눅스 개발자들은 각자의 git repository 로 자신이 개발중인 버전의 리눅스 커널 소스코드를 관리하는데, 이 역시 남들이 볼 수 있게 공유해 두고 있습니다. 따라서, 원한다면 특정 리눅스 개발자의 개발중인 리눅스 커널 소스코드를 git 으로 clone 해올 수 있습니다. 많은 주요 개발자들이 kernel.org 위에 자신의 git repository 를 호스팅 하고 있으며, github 을 사용하는 사람들도 많습니다. 예를 들어 리누스 토발즈는 kernel.org 위에 자신의 git repository 를 호스팅 하면서 github 에 미러링도 하고 있습니다. 각각의 repository 의 주소는 다음과 같습니다:\n https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git https://github.com/torvalds/linux.git  다음과 같은 명령을 통해 리누스 토발즈의 개발중인 리눅스 커널 소스코드를 clone 해올 수 있습니다:\n$ git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git $ ls linux 개발자의 repository 를 클론해 오는 방식의 장점은, 일단 아직 릴리즈 되지 않은 따끈따끈한 버전의 소스코드를 그 commit history 와 함께 볼 수 있다는 점일 겁니다. 리눅스 커널 개발에 참여하고 싶다면 현재 어떤 기능이 구현되고 있고 어떤 버그가 아직 고쳐지지 않았는지 등을 알 수 있으므로 필수적입니다. 또하나의 장점은 git repository 에는 그동안 해당 repository 에서 릴리즈한 버전들이 모두 포함되어 있어, 해당 버전을 언제든지 checkout 할 수 있다는 점입니다.\n단점은, commit history 와 개발중인 코드를 원하는게 아니라면 불필요하게 많은 용량의 데이터를 다운로드 받아야 한다는 것입니다. 현재 소스코드를 필요로 하는 목적에 맞춰, 특정 버전의 코드가 필요할 뿐이라면 압축 파일을, 그렇지 않다면 git repository 를 사용한 접근을 하는 편이 옳을 겁니다.\nConclusion 리눅스 커널의 소스코드를 얻어오는 몇가지 방법을 알아봤습니다. 리눅스 커널은 오픈소스 형태라 그 소스코드를 쉽게 구할 수 있으며, kernel.org 또는 github 등의 호스팅 사이트에서 압축 파일, 패치, 또는 git repository 의 형태로 얻을 수 있습니다. 개발중인 repository 의 clone 을 통한 형태는 commit history 와 개발중인 코드의 정보를 알 수 있다는 장점이 있지만 그만큼 다운로드 받아야 하는 데이터의 양이 크다는 단점도 존재합니다. 자신이 현재 소스코드를 얻고자 하는 목적에 맞춰 적합한 방법으로 소스코드를 얻어오는 것이 좋을 겁니다.\n","date":1490017023,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490017023,"objectID":"d2d1048a05332cd6b7565af35f442561","permalink":"/post/fetching-linux-source-code/","publishdate":"2017-03-20T22:37:03+09:00","relpermalink":"/post/fetching-linux-source-code/","section":"post","summary":"리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.\nkernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.","tags":["linux","kernel","open-source","git"],"title":"Fetching linux kernel source code","type":"post"},{"authors":null,"categories":["tip"],"content":"I am using Fedora 23 laptop and installed stable version Google Chrome from its official website [0]. In this case, just using Updates of Fedora Software program doesn\u0026rsquo;t update Chrome automatically. For the case, follow below commands to update your Chrome:\n$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable The second killall command is necessary because Chrome doesn\u0026rsquo;t kill its process by just cliking Close button. Or, you may reboot your computer but you wouldn\u0026rsquo;t like that.\n[0] https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD\u0026amp;gclid=CKiMjdqX5dICFYcGKgodqZIM2Q\n","date":1490016266,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490016266,"objectID":"8d4e063aebe073eadabf7d99775a2da8","permalink":"/post/fedora-chrome-update/","publishdate":"2017-03-20T22:24:26+09:00","relpermalink":"/post/fedora-chrome-update/","section":"post","summary":"I am using Fedora 23 laptop and installed stable version Google Chrome from its official website [0]. In this case, just using Updates of Fedora Software program doesn\u0026rsquo;t update Chrome automatically. For the case, follow below commands to update your Chrome:\n$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable The second killall command is necessary because Chrome doesn\u0026rsquo;t kill its process by just cliking Close button. Or, you may reboot your computer but you wouldn\u0026rsquo;t like that.","tags":["tip","fedora","linux","google","chrome"],"title":"Updating Google Chrome on Fedora 23","type":"post"},{"authors":null,"categories":["open-source"],"content":"I have developed a chat bot [1] for Kakaotalk [2] using Go language because I have been curious about the process of Kakaotalk chat bot development process. Implementation to major version has consumed only two hours owing to power of Go language, simpleness of Kakaotalk auto-reply API, and simple simple functionality requirement of my bot. It has coded really simply and in brute-force manner, do only simple echoing. However, for the reason, the code could be helpful for beginner of Kakaotalk chat bot or Go language Restful API server programmer. That\u0026rsquo;s why I am introducing it here. You can get the code from below link:\nhttps://github.com/sjp38/kakaobot\nReferences [1] https://en.wikipedia.org/wiki/Chatbot\n[2] http://www.kakao.com/services/8\n","date":1489585232,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1489585232,"objectID":"ef624a6c1b9d5ddbde00526fbcd98619","permalink":"/post/kakaobot/","publishdate":"2017-03-15T22:40:32+09:00","relpermalink":"/post/kakaobot/","section":"post","summary":"I have developed a chat bot [1] for Kakaotalk [2] using Go language because I have been curious about the process of Kakaotalk chat bot development process. Implementation to major version has consumed only two hours owing to power of Go language, simpleness of Kakaotalk auto-reply API, and simple simple functionality requirement of my bot. It has coded really simply and in brute-force manner, do only simple echoing. However, for the reason, the code could be helpful for beginner of Kakaotalk chat bot or Go language Restful API server programmer.","tags":["golang","open-source","chatbot","bot","kakaotalk"],"title":"Golang kakaotalk chat bot making","type":"post"},{"authors":null,"categories":["tip"],"content":"You can use arping to know IP address to MAC address mapping of your local network. Usage is simple:\narping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination For example, you may use the command as below:\n$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... Secret of the tool is ARP protocol [1]. To know the MAC address of the machine that has a specific IP address, IP protocol layer uses the protocol. MAC address that found in this way can be used to communicate with Ethernet protocol layer. arping just sends the ARP REQUEST to local network neighbour.\nIt could be useful in case of internet connection problem if IP duplication is suspicious.\n[1] http://www.erg.abdn.ac.uk/users/gorry/course/inet-pages/arp.html\n","date":1488883276,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488883276,"objectID":"4501ec77acc376c8391806e3fcae2992","permalink":"/post/arping-howto/","publishdate":"2017-03-07T19:41:16+09:00","relpermalink":"/post/arping-howto/","section":"post","summary":"You can use arping to know IP address to MAC address mapping of your local network. Usage is simple:\narping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination For example, you may use the command as below:\n$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... Secret of the tool is ARP protocol [1]. To know the MAC address of the machine that has a specific IP address, IP protocol layer uses the protocol.","tags":["tip","linux","network"],"title":"Using arping to know ip-MAC mapping","type":"post"},{"authors":null,"categories":["open source"],"content":"꽤 맘에 드는 hugo 테마[1]를 찾았다. 하지만 tag 기능이 빠져있어 너무 아쉬워하다가 이대로 포기하기엔 너무 맘에 들어 이래저래 찾아보니 과거에 tag 기능 관련 이슈가 올라왔지만 close 처리된 상태. 이대로는 암만 기다려도 tag 기능을 구현해주진 않겠구나 싶어서 이것저것 보고 낑낑대며 서툴고 간단하게나마 tag 기능을 구현[2]. Pull request[3] 도 보냈는데 과연 받아들여줄런지.\n업데이트: 별다른 discussion 없이 머지됐다 ;)\n[1] http://themes.gohugo.io/beautifulhugo/\n[2] https://github.com/sjp38/beautifulhugo-sj\n[3] https://github.com/halogenica/beautifulhugo/pull/15\n","date":1487944705,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487944705,"objectID":"630778bf05a82011ea6e4256b093ed62","permalink":"/post/beautifulhugo_contribute/","publishdate":"2017-02-24T22:58:25+09:00","relpermalink":"/post/beautifulhugo_contribute/","section":"post","summary":"꽤 맘에 드는 hugo 테마[1]를 찾았다. 하지만 tag 기능이 빠져있어 너무 아쉬워하다가 이대로 포기하기엔 너무 맘에 들어 이래저래 찾아보니 과거에 tag 기능 관련 이슈가 올라왔지만 close 처리된 상태. 이대로는 암만 기다려도 tag 기능을 구현해주진 않겠구나 싶어서 이것저것 보고 낑낑대며 서툴고 간단하게나마 tag 기능을 구현[2]. Pull request[3] 도 보냈는데 과연 받아들여줄런지.\n업데이트: 별다른 discussion 없이 머지됐다 ;)\n[1] http://themes.gohugo.io/beautifulhugo/\n[2] https://github.com/sjp38/beautifulhugo-sj\n[3] https://github.com/halogenica/beautifulhugo/pull/15","tags":["hugo","theme","open source","contribute"],"title":"beautifulhugo 테마 tags 기능 구현","type":"post"},{"authors":null,"categories":["life"],"content":"이사로 생긴 쓰레기 정리를 돕다가 보니 한 물건이 유난히 눈에 띄었다. 자그마한 크기에 왠지 모르게 90년대 감성. 자세히 살펴 보니 전자사전 같이 생겼는데 왠지 옛날에 유행하던 palmtop[1] 같은 느낌. 어차피 버릴 물건이기에 따로 챙겨두고 컴퓨터로 검색을 해보았다.\n![HP 95LX] (/img/hp95lx/1.jpg)\n모델명인 HP 95LX 로 검색해보니[2] 한때 스프레드시트 프로그램의 대명사였던 Lotus 123 을 탑재한 것으로 유명한 palmtop PC 로, MS-DOS 를 장착한 모델이다. 당연하게도 바로는 안켜지지만 잘 살펴보니 전용 배터리가 아니라 2A 건전지를 사용하고 있기에 건전지를 끼고 파워 버튼을 눌러봤지만 역시 잠잠. 시무룩. 하지만 또 여기저기 살펴보니 충전지 비슷한 물건이 있다. 배터리 교체 시에 in-memory 데이터가 날아가지 않도록 해당 충전지를 충전 후 동작하는 형태가 아닐까 싶어 잠시 동안 놔두었다 켜봤더니, 켜진다!\n![HP 95LX boot] (/img/hp95lx/2.jpg)\n몇가지 주요 어플리케이션을 통해 주요 기능들을 제공한다. 파일 탐색, 약속 관리, 전화번호부 관리, 메모, 계산기, 그리고 Lotus 123 을 통한 스프레드 시트 관리가 가능하다.3\n파일 탐색 기능. 실행 파일의 실행도 가능한 듯 하다. ![HP 95LX filer] (/img/hp95lx/4.jpg)\n약속 관리 기능. 2017년 달력도 존재. ![HP 95LX appointment book] (/img/hp95lx/5.jpg)\n전화번호부. ![HP 95LX phone book] (/img/hp95lx/6.jpg)\n메모. ![HP 95LX memo] (/img/hp95lx/7.jpg)\n그리고, 시대를 풍미한 스프레드시트, Lotus 123. ![HP 95LX lotus 123] (/img/hp95lx/8.jpg)\n한참 가지고 놀다가 뒤늦게야 시간과 사용자를 설정. 연도 설정이 두자리라 혹시나 Y2K 문제가 있진 않을까 걱정했지만 2017 년으로 잘 인식한다. 잘 짜여진 프로그램이란 이리도 멋지다. ![HP 95LX boot] (/img/hp95lx/9.jpg)\n요즘 나오는 스마트폰에 비교하자면 보잘것없지만 그 시절에도 이만한 휴대성과 완성도의 물건을 아직도 동작할 만큼 튼튼하게 제품으로 만들어냈다는 사실에 경외로움을 숨길 수 없거니와, 여전히 텍스트 기반 UI 를 즐겨 사용하는 내 입장에서는 이 UI 도 여전히 멋지다. 물론 Unix 계열 셸을 제공했다면 완벽했겠지만\u0026hellip; 과거의 물건이 유난한 감동을 준 하루였다.\nReferences [1] https://en.wikipedia.org/wiki/Palmtop_PC\n[2] https://en.wikipedia.org/wiki/HP_95LX\n","date":1486020242,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1486020242,"objectID":"3fd7e57674390f2a3470d2b5a1e36bfa","permalink":"/post/hp_95lx/","publishdate":"2017-02-02T16:24:02+09:00","relpermalink":"/post/hp_95lx/","section":"post","summary":"이사로 생긴 쓰레기 정리를 돕다가 보니 한 물건이 유난히 눈에 띄었다. 자그마한 크기에 왠지 모르게 90년대 감성. 자세히 살펴 보니 전자사전 같이 생겼는데 왠지 옛날에 유행하던 palmtop[1] 같은 느낌. 어차피 버릴 물건이기에 따로 챙겨두고 컴퓨터로 검색을 해보았다.\n![HP 95LX] (/img/hp95lx/1.jpg)\n모델명인 HP 95LX 로 검색해보니[2] 한때 스프레드시트 프로그램의 대명사였던 Lotus 123 을 탑재한 것으로 유명한 palmtop PC 로, MS-DOS 를 장착한 모델이다. 당연하게도 바로는 안켜지지만 잘 살펴보니 전용 배터리가 아니라 2A 건전지를 사용하고 있기에 건전지를 끼고 파워 버튼을 눌러봤지만 역시 잠잠.","tags":["life","gadget","artifact"],"title":"1990년대의 palmtop, HP 95LX 를 득템","type":"post"},{"authors":null,"categories":["sysop"],"content":"테스트 등을 위해 소스코드로부터 커널을 직접 빌드, 설치하기 시작하면 어느새 수많은 커널이 설치되어 있는 것을 확인할 수 있다. 삭제를 위해선 make install 로 만들어진 파일들을 직접 제거하고 grub 을 업데이트 해줘야 한다.\n예를 들어 시스템이 현재 부팅되어 있는 버전의 커널을 언인스톨하고자 한다면 다음의 일련의 커맨드를 입력하면 된다:\n# rm /boot/vmlinuz-$(uname -r) # rm /boot/initrd.img-$(uname -r) # rm /boot/System.map-$(uname -r) # rm /boot/config-$(uname -r) # rm -fr /lib/modules/$(uname -r) # rm /var/lib/initramfs-tools/$(uname -r) # update-grub2 다른 버전의 설치되어있는 커널을 제거하고 싶다면 위의 $(uname -r) 부분을 제거하고자 하는 커널 버전으로 대체하면 된다.\n참고 문서  http://askubuntu.com/questions/594443/how-can-i-remove-compiled-kernel  ","date":1484885936,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484885936,"objectID":"26615f9edee3609cdf2fb3e8fd1b5fd1","permalink":"/post/uninstall-kernel/","publishdate":"2017-01-20T13:18:56+09:00","relpermalink":"/post/uninstall-kernel/","section":"post","summary":"테스트 등을 위해 소스코드로부터 커널을 직접 빌드, 설치하기 시작하면 어느새 수많은 커널이 설치되어 있는 것을 확인할 수 있다. 삭제를 위해선 make install 로 만들어진 파일들을 직접 제거하고 grub 을 업데이트 해줘야 한다.\n예를 들어 시스템이 현재 부팅되어 있는 버전의 커널을 언인스톨하고자 한다면 다음의 일련의 커맨드를 입력하면 된다:\n# rm /boot/vmlinuz-$(uname -r) # rm /boot/initrd.img-$(uname -r) # rm /boot/System.map-$(uname -r) # rm /boot/config-$(uname -r) # rm -fr /lib/modules/$(uname -r) # rm /var/lib/initramfs-tools/$(uname -r) # update-grub2 다른 버전의 설치되어있는 커널을 제거하고 싶다면 위의 $(uname -r) 부분을 제거하고자 하는 커널 버전으로 대체하면 된다.","tags":["linux","kernel","tip"],"title":"uninstall kernel","type":"post"},{"authors":null,"categories":["life"],"content":"나는 보통의 경우 크롬으로 웹브라우징을 한다. 하지만 몇달 전부터 몇가지 예외에 대해서는 파이어폭스를 함께 쓰고 있다.\n부족한 하드웨어 스펙 나의 데스크탑 환경은 모니터 세대를 연결한 PC 하나로 구성되어 있었는데, FHD 모니터 세대를 돌리기는 벅찼는지 간헐적 입력 랙이 자주 발생했다. 또, 모니터를 한대 정도 더 늘리고 싶었다. 해서 집에서 놀고있던 5년된 HP 랩탑에 모니터 하나를 연결시키고 이 랩탑과 PC 를 키보드/마우스 하나로 제어하는 환경을 구축했다. PC 에 연결되는 모니터는 두대로 줄어드니까 입력 랙도 줄어들 것이라 생각한것. 여기까지는 계산대로였는데, HP 랩탑이 5년전 모델이라 램이 2 GB. 난 크롬에서 탭 10여개를 띄워두는데, 가뜩이나 메모리 많이 먹는 크롬이라 도무지 무리. 램 2 GB 를 사서 추가로 달아줬지만 그래도 영 버벅였다. 기존 환경으로 돌아가긴 싫은데\u0026hellip; 싶던 와중 파이어폭스를 떠올렸고, 파이어폭스는 역시 적당한 메모리 사용량으로 내 워크로드를 충족해 주었다.\n일부 성급한 최적화가 이루어진 사이트 리눅스용 크롬에서의 페이스북은 한글 입력 문제가 있다. 뭐라 설명하기도 짜증나는데 한마디로 한글로 글을 입력하려 하면 사람을 짱나게 만드는 문제가 존재한다. 모바일 페이지에선 안그러는 것 같은데, 암튼 짜증난다. 크롬 문제인지 페이스북 문제인지 리눅스 문제인지 모르겠지만 암튼 이불킥할 글을 좀 덜 쓰게 해주는 장점도 있지만 여간 불편한게 아니다. 파이어폭스에서는 문제가 없다.\n모질라에 감사의 마음을 금전으로 파이어폭스를 만들고 있는 모질라는 세상에 많은 것을 기여하는 훌륭한 곳인데 돈이 항상 부족하다. 대안적 도구의 중요성을 되새기고 감사의 마음을 담아 소액이나마 기부해 보았다. 기부를 하고 싶다면 다음 링크를 사용하면 된다: https://donate.mozilla.org/ko/\n뱀발 w3m 같은 CLI 웹브라우저들도 훌륭한 대안 웹브라우저다 ;)\n","date":1484816814,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484816814,"objectID":"8f12990cd26c18f113febe0facdcc20e","permalink":"/post/donate-mozilla/","publishdate":"2017-01-19T18:06:54+09:00","relpermalink":"/post/donate-mozilla/","section":"post","summary":"나는 보통의 경우 크롬으로 웹브라우징을 한다. 하지만 몇달 전부터 몇가지 예외에 대해서는 파이어폭스를 함께 쓰고 있다.\n부족한 하드웨어 스펙 나의 데스크탑 환경은 모니터 세대를 연결한 PC 하나로 구성되어 있었는데, FHD 모니터 세대를 돌리기는 벅찼는지 간헐적 입력 랙이 자주 발생했다. 또, 모니터를 한대 정도 더 늘리고 싶었다. 해서 집에서 놀고있던 5년된 HP 랩탑에 모니터 하나를 연결시키고 이 랩탑과 PC 를 키보드/마우스 하나로 제어하는 환경을 구축했다. PC 에 연결되는 모니터는 두대로 줄어드니까 입력 랙도 줄어들 것이라 생각한것.","tags":["life","mozilla","firefox"],"title":"donate mozilla","type":"post"},{"authors":null,"categories":["news"],"content":"오라클이 백인 남성에게 더 많은 월급을 지불하고 아시아인, 그중에서도 인도 사람을 많이 개발직에 채용했다는 이유로 미국 정부가 오라클을 고소.\nhttp://www.reuters.com/article/us-oracle-usa-labor-idUSKBN1522O6?il=0\n","date":1484788629,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484788629,"objectID":"9505faf7c1028a3aa04986ba03da9c25","permalink":"/post/us-sues-oracle/","publishdate":"2017-01-19T10:17:09+09:00","relpermalink":"/post/us-sues-oracle/","section":"post","summary":"오라클이 백인 남성에게 더 많은 월급을 지불하고 아시아인, 그중에서도 인도 사람을 많이 개발직에 채용했다는 이유로 미국 정부가 오라클을 고소.\nhttp://www.reuters.com/article/us-oracle-usa-labor-idUSKBN1522O6?il=0","tags":["news","oracle"],"title":"us sues oracle","type":"post"},{"authors":null,"categories":["projects"],"content":"The importance of physically contiguous memory has increased in modern computing environments, including both low- and high-end systems. Existing physically contiguous memory allocators generally have critical limitations. For example, the most commonly adopted solution, the memory reservation technique, wastes a significant amount of memory space. Scatter/Gather direct memory access (DMA) and input-output memory management units (IOMMUs) avoid this problem by utilizing additional hardware for address space virtualization. However, additional hardware means an increase in costs and power consumption, which is especially disadvantageous for small systems and they do not provide real contiguous memory. Linux Contiguous Memory Allocator (CMA) aims to provide both contiguous memory allocation and to maximize memory utilization based on page migration, but they suffer from unpredictably long latency and a high probability of allocation failure. Therefore, we introduce a new solution to this problem, the guaranteed contiguous memory allocator (GCMA). This guarantees efficient memory space utilization, short latency, and successful allocation. The GCMA uses a reservation scheme and increases memory utilization by sharing the memory with immediately discardable data. Our evaluation of a GCMA on a Raspberry Pi 2 finds a latency that is 15-130 times lower compared to a CMA, and a latency that is up to 10 times lower when taking a photo. Using a large working set in a memory-fragmented high-end system, the GCMA is able to produce a 2.27× speedup.\nSource Code The source code for this version has been submitted to LKML for discussion. A complete git tree is also available at Github.\nPublications and Presentations  SeongJae Park, Minchan Kim, Heon Y. Yeom, GCMA: Guaranteed Contiguous Memory Allocator. In Transactions on Computers, March 2019. Link SeongJae Park, GCMA: Guaranteed Contiguous Memory Allocator. In The Linux Kernel Summit, November 2018. Slides, Video, Link SeongJae Park, Minchan Kim, Heon Y. Yeom, GCMA: Guaranteed Contiguous Memory Allocator. In 45th issue of ACM SIGBED Review, January 2016. Paper, Link SeongJae Park, Minchan Kim, Heon Y. Yeom, GCMA: Guaranteed Contiguous Memory Allocator. In Embedded Operating Systems Workshop (EWiLi), October 2015. Paper, Slides SeongJae Park, Minchan Kim, GCMA: Guaranteed Contiguous Memory Allocator. In Linux Foundation Korea Linux Forum (LFKLF), October 2014. Slides  ","date":1484403083,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484403083,"objectID":"ece2536409d88b7cde729758fd6c95ee","permalink":"/post/gcma/","publishdate":"2017-01-14T23:11:23+09:00","relpermalink":"/post/gcma/","section":"post","summary":"The importance of physically contiguous memory has increased in modern computing environments, including both low- and high-end systems. Existing physically contiguous memory allocators generally have critical limitations. For example, the most commonly adopted solution, the memory reservation technique, wastes a significant amount of memory space. Scatter/Gather direct memory access (DMA) and input-output memory management units (IOMMUs) avoid this problem by utilizing additional hardware for address space virtualization. However, additional hardware means an increase in costs and power consumption, which is especially disadvantageous for small systems and they do not provide real contiguous memory.","tags":["projects","gcma"],"title":"GCMA: Guaranteed Contiguous Memory Allocator","type":"post"},{"authors":null,"categories":["about"],"content":"Bio SeongJae Park is a programmer who loves to analyse and develop systems just for fun.\nContacts  sjpark@amazon.com sj38.park@gmail.com  Education  Ph.D, Computer Science and Engineering at Seoul National University, Aug 2019 B.S., Electrical Engineering / Information and Computer Engineering (dual degree) at Ajou University, Jan 2009  Experiences  Kernel / Hypervisor Engineer at Amazon, Sep 2019 - Present Graduate Research Assistant at DCSLAB, Seoul National University,\nJul 2012 - Aug 2019 Part-time Linux Kernel Hacker at Korea Open Source Software Lab,\nJan 2016 - May 2019 Full-time Linux Kernel Hacker at Korea Open Source Software Lab,\nDec 2013 - Dec 2014 Free-lance S/W Developer, Aug 2011 - Nov 2013 Software Engineer at Samsung Electronics, Feb 2009 - Jul 2011 Software Engineer at Samsung Software Membership, Jan 2008 - Jan 2009  Publications And Presentations  SeongJae Park, Writing a fine-grained access pattern oriented lightweight kernel module using DAMON/DAMOS in 10 minutes. In The Linux Kernel Summit, September 2021. Slides, Video, Link SeongJae Park, DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations, In The Linux Kernel Summit, August 2020. Slides, Video, Link SeongJae Park, Paul E. McKenney, Laurent Dufour, Heon Y. Yeom, An HTM-Based Update-side Synchronization for RCU on NUMA systems. In 15th ACM European Conference on Computer Systems (EuroSys), April 2020. Paper, Video (5min, 12min), Slides SeongJae Park, Yunjae Lee, Heon Y. Yeom, Profiling Dynamic Data Access Patterns with Controlled Overhead and Quality. In 20th ACM/IFIP International Middleware Conference (MIDDLEWARE) Industry, December 2019. Paper SeongJae Park, Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy. In The Linux Kernel Summit, September 2019. Slides, Link SeongJae Park, Yunjae Lee, Moonsub Kim Heon Y. Yeom, Automating Context Based Access Pattern Hint Injection for System Performance and Swap Storage Durability. In 11th USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage), July 2019. Paper, Slides SeongJae Park, Yunjae Lee, Yunhee Kim, Heon Y. Yeom, Profiling Dynamic Data Access Patterns with Bounded Overhead and Accuracy. In IEEE International Workshop on Foundations and Applications of Self-* Systems (FAS*), June 2019. Paper SeongJae Park, Biscuit: an operating system written in Go. In 1st GDG Golang Korea meetup, May 2019. Slides, Video SeongJae Park, Minchan Kim, Heon Y. Yeom, GCMA: Guaranteed Contiguous Memory Allocator. In Transactions on Computers, March 2019. Paper SeongJae Park, Yunjae Lee, Moonsub Kim, Heon Y. Yeom, Automated Data Access Pattern Hint Instrumentation for System Performance and Durability of Swap Storages. (WiP) In 17th USENIX Conference on File and Storage Technologies (FAST), February 2019. Link SeongJae Park, GCMA: Guaranteed Contiguous Memory Allocator. In The Linux Kernel Summit, November 2018. Slides, Video, Link SeongJae Park, Linux Kernel Memory Model. In 4th Korea Linux Kernel Conference, November 2018. Slides SeongJae Park, An Introduction to the Formalised Memory Model for Linux Kernel. In Korea Open Source Software Conference (KOSSCON), Aug 2018. Slides SeongJae Park, Design Choices of Golang for High Scalability. In GDG Korea Meeup,\nSept 2017. Slides SeongJae Park, Brief Introduction to Kselftest. In Korea Linux Kernel Conference,\nJuly 2017. Slides SeongJae Park, Understanding of Linux Kernel Memory Model. In Korea Open Source Software Conference (KOSSCON), November 2016. Slides SeongJae Park, Minchan Kim, Heon Y. Yeom, GCMA: Guaranteed Contiguous Memory Allocator. In Embedded Operating Systems Workshop (EWiLi), October 2015. Paper, Slides SeongJae Park, Develop Android/iOS app using golang. In Gophercon Korea,\nAugust 2015. Slides SeongJae Park, Minchan Kim, GCMA: Guaranteed Contiguous Memory Allocator. In Linux Foundation Korea Linux Forum (LFKLF), October 2014. Slides SeongJae Park, How GIT Works Internally. In Samsung Open-source Software Conference (SOSCON), September 2014. Slides Hyuck Han, SeongJae Park, Hyungsoo Jung, Alan Fekete, Uwe Rohm, Heon Y. Yeom, Scalable Serializable Snapshot Isolation for Multicore Systems. In IEEE 30th International Conference on Data Engineering (ICDE), March 2014. Paper SeongJae Park, Let The Contribution Begin. In Google Developers Group DevFest W, March 2013. Slides  Other Links  LinkedIn Github Openhub Slideshare  ","date":1484337068,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603093383,"objectID":"4f8ede94661089a2bb01b50b2080c5b0","permalink":"/post/about/","publishdate":"2017-01-14T04:51:08+09:00","relpermalink":"/post/about/","section":"post","summary":"Bio SeongJae Park is a programmer who loves to analyse and develop systems just for fun.\nContacts  sjpark@amazon.com sj38.park@gmail.com  Education  Ph.D, Computer Science and Engineering at Seoul National University, Aug 2019 B.S., Electrical Engineering / Information and Computer Engineering (dual degree) at Ajou University, Jan 2009  Experiences  Kernel / Hypervisor Engineer at Amazon, Sep 2019 - Present Graduate Research Assistant at DCSLAB, Seoul National University,","tags":["about"],"title":"About","type":"post"},{"authors":null,"categories":["projects"],"content":"\u0026ldquo;Is Parallel Programming is Hard, And, If So, What Can You Do About It?\u0026quot;[1] 은 parallel programming 분야에서 대가라 불릴만한 분으로, 이쪽 분야에서 매우 중요한 동기화 메커니즘인 RCU[2] 를 개발했으며 리눅스 커널의 RCU 메인테이너로 활동하고 있는 Paul E. McKenney[3] 가 오픈소스 방식으로 저술하고 있는, parallel programming 에 대한 책입니다.\n개인적으로 이 책의 한국어 번역을 오픈소스[4]로 진행하고 있습니다. 이 프로젝트는 원저작자인 Paul 에게 공식 한국어 번역으로 인증받았습니다[5].\n컨트리뷰션에 대해서도 열려 있으니, 이에 관심 있는 분은 repository 내의 README 문서의 Contribution 섹션[6] 을 참고 바랍니다.\nReferences [1] https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html\n[2] https://en.wikipedia.org/wiki/Read-copy-update\n[3] http://www.rdrop.com/~paulmck/\n[4] https://github.com/sjp38/perfbook-ko_KR\n[5] https://git.kernel.org/pub/scm/linux/kernel/git/paulmck/perfbook.git/commit/?id=edbfcdee046026d3f98592c411a20219b96c8e50\n[6] https://github.com/sjp38/perfbook-ko_KR#contribution\n","date":1484023560,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484023560,"objectID":"ac898284787e1e8e3e8a819ca02a43ad","permalink":"/post/perfbook-kokr/","publishdate":"2017-01-10T13:46:00+09:00","relpermalink":"/post/perfbook-kokr/","section":"post","summary":"\u0026ldquo;Is Parallel Programming is Hard, And, If So, What Can You Do About It?\u0026quot;[1] 은 parallel programming 분야에서 대가라 불릴만한 분으로, 이쪽 분야에서 매우 중요한 동기화 메커니즘인 RCU[2] 를 개발했으며 리눅스 커널의 RCU 메인테이너로 활동하고 있는 Paul E. McKenney[3] 가 오픈소스 방식으로 저술하고 있는, parallel programming 에 대한 책입니다.\n개인적으로 이 책의 한국어 번역을 오픈소스[4]로 진행하고 있습니다. 이 프로젝트는 원저작자인 Paul 에게 공식 한국어 번역으로 인증받았습니다[5].\n컨트리뷰션에 대해서도 열려 있으니, 이에 관심 있는 분은 repository 내의 README 문서의 Contribution 섹션[6] 을 참고 바랍니다.","tags":["projects","perfbook","translation"],"title":"\"Is Parallel Programming Hard, And, If So, What Can You Do About It?\" Translation","type":"post"}]