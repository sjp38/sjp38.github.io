<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux-kernel-hack | hacklog</title>
    <link>https://sjp38.github.io/categories/linux-kernel-hack/</link>
      <atom:link href="https://sjp38.github.io/categories/linux-kernel-hack/index.xml" rel="self" type="application/rss+xml" />
    <description>linux-kernel-hack</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 07 Sep 2018 16:00:23 +0900</lastBuildDate>
    <image>
      <url>https://sjp38.github.io/img/tux.png</url>
      <title>linux-kernel-hack</title>
      <link>https://sjp38.github.io/categories/linux-kernel-hack/</link>
    </image>
    
    <item>
      <title>Linux Kernel Build</title>
      <link>https://sjp38.github.io/post/linux-kernel-build/</link>
      <pubDate>Fri, 07 Sep 2018 16:00:23 +0900</pubDate>
      <guid>https://sjp38.github.io/post/linux-kernel-build/</guid>
      <description>&lt;p&gt;제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을
정리해 봅니다.  글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3
Server OS 를 설치한 &lt;code&gt;x86_64&lt;/code&gt; 가상머신입니다.&lt;/p&gt;
&lt;h1 id=&#34;install-dependent-packages&#34;&gt;Install Dependent Packages&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \
		libelf-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠.  위 커맨드는
우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다.  커널 트리의
&lt;code&gt;Documentation/process/changes.rst&lt;/code&gt; 에도 커널 빌드에 필요한 패키지들이 나열되어
있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.&lt;/p&gt;
&lt;p&gt;페도라라면 아래와 같이 패키지를 깔면 됩니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ncurses-devel bison-devel bison flex-devel flex \
		elfutils-libelf-devel openssl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;fetch-linux-kernel-source-code&#34;&gt;Fetch Linux Kernel Source Code&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;빌드를 하려면 소스코드를 가져와야죠.  위 커맨드를 통해 토발즈의 리눅스
소스코드를 가져올 수 있습니다.  네트워크를 통해 가져오는데, 소스코드는 물론이고
개발 이력 정보를 모두 담고 있으므로 많은 데이터를 가져와야해 시간이 상당히
걸립니다.  이 글을 쓰는 2018년 9월 초 기준, 버전정보만 약 1.2 GiB 군요.&lt;/p&gt;
&lt;p&gt;토발즈는 github 에 [미러] (&lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;https://github.com/torvalds/linux&lt;/a&gt;) 를 두고 있으므로,
여길 이용하는 것도 생각해 볼 수 있고, 굳이 버전 정보는 필요하지 않다면
[&lt;code&gt;kernel.org&lt;/code&gt;] (&lt;a href=&#34;https://kernel.org&#34;&gt;https://kernel.org&lt;/a&gt;) 에서 tarball 로 소스코드만 받는것도 한
방법입니다.&lt;/p&gt;
&lt;p&gt;저는 아예 &lt;code&gt;.git&lt;/code&gt; 디렉토리를 압축해서 별도 저장소에
보관하기도 합니다.&lt;/p&gt;
&lt;h1 id=&#34;make-configuration-file&#34;&gt;Make Configuration File&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ cd linux
$ cp /boot/config-$(uname -r) ./.config
$ make menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;리눅스 빌드 설정 파일을 만들어야 합니다.  앞의 커맨드를 통해 배포판에서 제공한
커널을 빌드하는데 사용된 설정 파일을 기반으로 gui 환경에서 필요한 설정을
추가/제거 할 수 있습니다.  별달리 변경할 게 없다면 그냥 저장하고 나오면 됩니다.&lt;/p&gt;
&lt;p&gt;저는 빌드에 많은 시간이 걸리지 않고 저장 공간이 큰 시스템에서는 이 방법을
사용하고, 작은 가상머신 등의 환경에서는 &lt;code&gt;localmodconfig&lt;/code&gt; 빌드 타겟을 사용해
가벼운 설정 파일을 만드는 편입니다.&lt;/p&gt;
&lt;h2 id=&#34;seperated-build-directory&#34;&gt;Seperated Build Directory&lt;/h2&gt;
&lt;p&gt;이렇게 빌드를 하면 컴파일된 파일들이 소스코드와 같은 디렉토리에 위치하게
되는데, &lt;code&gt;grep&lt;/code&gt; 등을 할때 성가시고, 실수로 git 에 이렇게 만들어진 파일들을
추가하는 실수도 흔합니다.  리눅스 커널 빌드 시스템은 &lt;code&gt;make&lt;/code&gt; 커맨드에 &lt;code&gt;O&lt;/code&gt; 옵션을
제공하는데, 이 옵션의 인자로 빌드 디렉토리를 지정할 수 있습니다.  빌드 과정에서
만들어진 파일들은 이 디렉토리로 저장되므로, 소스코드 디렉토리를 깨끗하게 유지할
수 있습니다.  예를 들어 &lt;code&gt;/foo&lt;/code&gt; 라는 디렉토리에 빌드 과정에서 만들어진 파일을
저장하고 싶다면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make O=/foo menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;build&#34;&gt;Build&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ make -j $(grep &amp;quot;^processor&amp;quot; /proc/cpuinfo | wc -l)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 커맨드는 리눅스 커널을 빌드합니다.  이 때 뒤의 &lt;code&gt;-j&lt;/code&gt; 옵션을 통해 빌드 과정
작업을 한순간에 최대 몇개까지 수행해도 되는지 지정해주는데, 이 커맨드에선
빌드를 수행하는 시스템에 장착된 논리적 코어의 갯수를 줬습니다.  커널 빌드엔 긴
시간이 걸립니다.  프로세서 3개를 준 제 가상머신에서는 12분 30초 정도 걸렸군요.
이것도 &lt;code&gt;localmodconfig&lt;/code&gt; 를 해줬기 때문이고, 이런저런 모듈 다 빌드하라고 했다면
훨씬 많이 걸렸을 겁니다.&lt;/p&gt;
&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ sudo make modules_install install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 커맨드는 빌드한 모듈들과 커널 자체를 설치합니다.  커널 빌드 시스템은 이
과정에서 가장 최신의 커널로 grub 의 디폴트 부트 대상도 바꿔줍니다.  이제 기계를
껐다 켜되, grub 등에서 부트할 커널 버전을 해당 버전으로 선택하면 빌드한 커널로
부팅됩니다.  현재 시스템이 사용중인 커널의 버전은 &lt;code&gt;uname -r&lt;/code&gt; 로 알 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;이상으로 Ubuntu 16.04.3 을 기본으로 리눅스 커널을 빌드하고 설치하는 방법을
알아봤습니다.  총 일곱개의 커맨드 뿐.   쉽죠?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux Kernel Performance (LKP) Tests</title>
      <link>https://sjp38.github.io/post/lkp-tests/</link>
      <pubDate>Thu, 02 Aug 2018 17:20:10 +0900</pubDate>
      <guid>https://sjp38.github.io/post/lkp-tests/</guid>
      <description>&lt;p&gt;리눅스 커널의 개발은 커뮤니티 주도입니다.  개발의 한 부분인 테스트 역시
커뮤니티 주도적입니다.  여러 개인 또는 단체가 커널을 각자의 방식으로 테스트
하고 그 결과를 공유합니다.  인텔에서는 0-day 서비스[1] 라는 서비스를 자체적으로
돌리는데, 이 서비스는 최신 리눅스 커널을 가져다가 빌드하고 다양한 기능 / 성능
테스트를 돌리고 그 결과 발견된 regression 을 LKML 에 메일로 보내주는 일을
합니다.  말하자면 Continuous Integration (CI) 이죠.&lt;/p&gt;
&lt;p&gt;Linux Kernel Performance (LKP) Tests[2] 는 0-day 서비스에서 기능 / 성능 테스트를
수행하는데 사용되는 도구입니다.  다양한 테스트를 돌리기 위한 시스템 환경 구성,
테스트 프로그램과 그 종속 프로그램 / 라이브러리의 설치와 환경 구성, 테스트
수행과 결과 정리, 그리고 테스트 진행 사이의 시스템 상태 프로파일링 및
프로파일링 결과 정리를 대신해 줍니다.  0-day 서비스에 연결되어 있지만 lkp-tests
와 0-day 서비스 사이의 종속성이 없으며, 오픈소스 프로젝트로 개발이 진행되고
있어 그 소스코드를 누구나 사용할 수 있으며 개인이 사용하기에도 편리하게 되어
있어서 개인 개발자가 자신의 패치를 테스트할 목적으로 사용하기에도 좋습니다.  이
글에서는 이러한 lkp-tests 의 구조와 사용법을 간단히 설명합니다.  전체적으로
인텔의 관련 블로그 글[3] 을 참고했습니다.&lt;/p&gt;
&lt;h1 id=&#34;설치&#34;&gt;설치&lt;/h1&gt;
&lt;p&gt;먼저 다음 커맨드로 lkp-tests 소스코드를 얻어옵니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/intel/lkp-tests
$ cd lkp-tests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 lkp-tests 자체를 설치.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 커맨드는 단순히 지금 소스코드를 땡겨온 lkp-tests 소스코드 디렉토리의
&lt;code&gt;bin/lkp&lt;/code&gt; 파일을 링크하는 &lt;code&gt;/usr/local/bin/lkp&lt;/code&gt; 심볼릭 링크를 만들 뿐입니다.
따라서 셸에서 &lt;code&gt;lkp&lt;/code&gt; 커맨드를 쓸 수 있게 해주죠.  이 &lt;code&gt;lkp&lt;/code&gt; 파일이 결국 lkp-tests
의 대부분의 일을 해주는 핵심 커맨드입니다.  이 프로그램의 간단한 사용법은
다음과 같이 확인할 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lkp
Usage: lkp &amp;lt;command&amp;gt; [options]

INSTALLATION

        install JOB                     install binary dependencies for JOB

JOB

        split JOB                       split JOB matrix
        compile JOB                     compile JOB into shell script

TESTING

        run JOB                         run test JOB locally
        qemu JOB                        run test JOB in QEMU virtual machine

RESULT

        result|rt|_rt|__rt PATTERNs     show result dirs
        ls|ll PATTERNs                  ls result dirs
        rm-path result                  remove result dirs
        _rm PATTERNs                    remove _result dirs

        stat [options]                  show result stats
        compare [options]               compare result stats

DEBUG

        irb                             run irb with lib/*.rb loaded
        pry                             run pry with lib/*.rb loaded

More commands can be found in /home/sjpark/lkp-tests/{bin,sbin,tools}/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기서 &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; 는 lkp-tests 소스코드 디렉토리 아래 &lt;code&gt;bin/&lt;/code&gt;, &lt;code&gt;sbin/&lt;/code&gt;,
&lt;code&gt;tools/&lt;/code&gt;, 또는 &lt;code&gt;lkp-exec/&lt;/code&gt; 아래 위치한 실행파일로, &lt;code&gt;lkp&lt;/code&gt; 는 단순히 그
실행파일을 수행하면서 인자를 넘길 뿐입니다.&lt;/p&gt;
&lt;h1 id=&#34;테스트에-필요한-소프트웨어-설치&#34;&gt;테스트에 필요한 소프트웨어 설치&lt;/h1&gt;
&lt;p&gt;다음 커맨드는 lkp-tests 가 의존하고 있는 기본적 소프트웨어 패키지들을 모두
설치합니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo lkp install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ubuntu 16.04 에서는 다음 패키지들을 까는군요:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bc gawk gzip kmod time automake bison bsdtar build-essential bzip2
ca-certificates cpio fakeroot flex gcc git libc6-dev libc6-dev:i386
libklibc-dev libtool linux-libc-dev linux-libc-dev:i386 linux-tools-generic
make openssl patch rsync ruby ruby-dev wget
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lkp-tests-내부-벤치마크-실행&#34;&gt;lkp-tests 내부 벤치마크 실행&lt;/h1&gt;
&lt;p&gt;이제 lkp-tests 에서 지원하는 벤치마크를 실제로 돌려봅시다.&lt;/p&gt;
&lt;h2 id=&#34;테스트-수행에-필요한-환경-설정&#34;&gt;테스트 수행에 필요한 환경 설정&lt;/h2&gt;
&lt;p&gt;실제 테스트를 돌리기 위해선 벤치마크를 깔고, 그 벤치마크가 사용하는 패키지를
깔고, 테스트에 사용될 도구들을 깔고, 여러 설정을 하는등의 작업이 필요합니다.&lt;/p&gt;
&lt;p&gt;다음 명령은 lkp-tests 에서 ebizzy 라는 벤치마크를 사용하는 테스트를 위해
필요한 프로그램들을 설치하고 수행 환경을 준비합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo lkp install jobs/ebizzy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;job&#34;&gt;job&lt;/h2&gt;
&lt;p&gt;lkp-tests 에서 테스트 수행의 기본 단위는 &lt;code&gt;job&lt;/code&gt; 이라고 이야기 하는데, &lt;code&gt;jobs/&lt;/code&gt;
디렉토리 아래에 각 job 을 설명한 yaml 파일이 있습니다.  위의 커맨드에서 인자로
넣은 &lt;code&gt;ebizzy.yaml&lt;/code&gt; 은 ebizzy 를 사용한 테스트에 필요한 사항들이 들어있습니다.
이 커맨드는 내부적으로 이 테스트에 필요한 패키지를 설치하고 ebizzy 벤치마크도
소스코드를 인터넷에서 받아다가 컴파일해 설치합니다.&lt;/p&gt;
&lt;p&gt;Job 파일은 또한 해당 테스트가 어떤 시스템 환경들에서 어떤 벤치마크를 어떤
인자를 줘가며 수행해야할지 등에 대한 내용을 담고 있습니다.  예컨대
&lt;code&gt;jobs/aim7-fs-1brd.yaml&lt;/code&gt; job 은 &lt;code&gt;xfs&lt;/code&gt;, &lt;code&gt;ext4&lt;/code&gt;, &lt;code&gt;btrfs&lt;/code&gt;, &lt;code&gt;f2fs&lt;/code&gt; 파일 시스템
각각에 대해 aim7 을 돌려보도록 되어 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;테스트-수행&#34;&gt;테스트 수행&lt;/h2&gt;
&lt;p&gt;다음 명령은 ebizzy job 으로 기술된 테스트를 실제 수행시킵니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo lkp run jobs/ebizzy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;job-쪼개기&#34;&gt;job 쪼개기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ebizzy.yaml&lt;/code&gt; 은 시스템 소유 CPU 코어 갯수 2배 갯수의 쓰레드를 사용해 ebizzy 를
10초간 돌리는 실험을 100번 반복하도록 되어 있습니다.  즉, 실험의 경우의 수가
하나입니다.  그러나, 앞서 설명한 &lt;code&gt;aim7-fs-1brd&lt;/code&gt; 와 같이 다양한 구성을 사용하게
되어 있는 경우, 한가지 구성에 대해서만 반복 실험을 하고 싶을 수 있을 겁니다.
이런 경우 다음 명령으로 job 을 쪼갤 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo lkp split jobs/ebizzy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 커맨드는 인자로 넣은 job 파일을 쪼개서 현재 디렉토리에 쪼개진 job 파일들을
저장합니다.  어떤 구성이 쪼개졌는지는 파일 이름으로 볼 수 있습니다.
&lt;code&gt;ebizzy.yaml&lt;/code&gt; 을 쪼개면 &lt;code&gt;ebizzy-200%-100x-10s.yaml&lt;/code&gt; 라는 이름의 한개의 job
파일이 생성됩니다.  앞서 이야기한 &lt;code&gt;aim7-fs-1brd.yaml&lt;/code&gt; 을 쪼개면 다음과 같이
많은 수의 job 이 생성됩니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aim7-fs-1brd-1BRD_48G-btrfs-creat-clo-4.yaml
aim7-fs-1brd-1BRD_48G-f2fs-creat-clo-1500.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_cp-1500.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_cp-3000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_rd-9000.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_rd-9000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_rr-1500.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_rr-3000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_rw-1500.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_rw-3000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_src-500.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_src-3000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-disk_wrt-1500.yaml
aim7-fs-1brd-1BRD_48G-f2fs-disk_wrt-3000.yaml
aim7-fs-1brd-1BRD_48G-btrfs-sync_disk_rw-10.yaml
aim7-fs-1brd-1BRD_48G-f2fs-sync_disk_rw-600.yaml
aim7-fs-1brd-1BRD_48G-ext4-creat-clo-1000.yaml
aim7-fs-1brd-1BRD_48G-xfs-creat-clo-1500.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_cp-3000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_cp-3000.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_rd-9000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_rd-9000.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_rr-3000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_rr-3000.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_rw-3000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_rw-3000.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_src-3000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_src-3000.yaml
aim7-fs-1brd-1BRD_48G-ext4-disk_wrt-3000.yaml
aim7-fs-1brd-1BRD_48G-xfs-disk_wrt-3000.yaml
aim7-fs-1brd-1BRD_48G-ext4-sync_disk_rw-600.yaml
aim7-fs-1brd-1BRD_48G-xfs-sync_disk_rw-600.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;테스트-결과-확인&#34;&gt;테스트 결과 확인&lt;/h1&gt;
&lt;p&gt;테스트에 사용된 벤치마크 수행의 결과와 테스트 동안의 시스템 프로파일링 결과는
&lt;code&gt;/lkp/result/&lt;/code&gt; 디렉토리 밑에 &lt;code&gt;&amp;lt;job name&amp;gt;/&amp;lt;configuration&amp;gt;/&amp;lt;host name&amp;gt;/&amp;lt;os distribution name&amp;gt;/&amp;lt;kernel config&amp;gt;/&amp;lt;gcc version&amp;gt;/&amp;lt;kernel version&amp;gt;/&amp;lt;unique id&amp;gt;&lt;/code&gt;
의 계층 구조로 저장됩니다.  또한, 이 실험 결과를 parsing 할 수 있는 경우엔
&lt;code&gt;.json&lt;/code&gt; 파일을 만들어 줘서 parsing 된 결과 값도 보여줍니다.&lt;/p&gt;
&lt;p&gt;또한, 최근의 테스트 결과는 테스트 돌린 디렉토리에 &lt;code&gt;result/&lt;/code&gt; 라는 이름의,
&lt;code&gt;/lkp/result/&lt;/code&gt; 아래 해당 디렉토리로의 심볼릭 링크를 만들어 줍니다.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;이렇게 lkp-tests 가 무엇인지, 그리고 어떻게 사용할 수 있는지 알아봤습니다.
이제, 리눅스 커널 개발 커뮤니티에서 사용하는 리그레션 테스트를 여러분의
환경에서도 손쉽게 돌려볼 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://01.org/lkp/documentation/0-day-test-service&#34;&gt;https://01.org/lkp/documentation/0-day-test-service&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;https://github.com/intel/lkp-tests&#34;&gt;https://github.com/intel/lkp-tests&lt;/a&gt;&lt;br&gt;
[3] &lt;a href=&#34;https://01.org/blogs/jdu1/2017/lkp-tests-linux-kernel-performance-test-and-analysis-tool&#34;&gt;https://01.org/blogs/jdu1/2017/lkp-tests-linux-kernel-performance-test-and-analysis-tool&lt;/a&gt;&lt;br&gt;
[4] &lt;a href=&#34;https://wiki.archlinux.org/index.php/makepkg&#34;&gt;https://wiki.archlinux.org/index.php/makepkg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux Kernel Debugging Using QEMU</title>
      <link>https://sjp38.github.io/post/qemu_kernel_debugging/</link>
      <pubDate>Mon, 07 May 2018 18:21:01 +0900</pubDate>
      <guid>https://sjp38.github.io/post/qemu_kernel_debugging/</guid>
      <description>&lt;p&gt;You can use classical debugger for your Linux kernel programming, though
Torvalds doesn&amp;rsquo;t like it.
I also do not prefer such use of debuggers, but admit that sometimes debuggers
are quite useful. ;)&lt;/p&gt;
&lt;p&gt;There are several ways to debug Linux kernel, but one of above is to set up a
Linux virtual machine using QEMU and debugging the Linux kernel of the virtual
machine from the host machine.
This post summarises how to debug the Linux kernel in this way.&lt;/p&gt;
&lt;h1 id=&#34;test-environment&#34;&gt;Test Environment&lt;/h1&gt;
&lt;p&gt;The versions and names of the software I used for test of this post are as
below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04.3 Server&lt;/li&gt;
&lt;li&gt;gdb 7.11.1&lt;/li&gt;
&lt;li&gt;QEMU v2.11.0-dirty&lt;/li&gt;
&lt;li&gt;Linux v4.16&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;kernel-build&#34;&gt;Kernel Build&lt;/h1&gt;
&lt;p&gt;First, build the kernel you want to debug.  You should turn
&lt;code&gt;CONFIG_GDB_SCRIPTS&lt;/code&gt; on, turn &lt;code&gt;CONFIG_DEBUG_INFO_REDUCED&lt;/code&gt; off, and turn
&lt;code&gt;CONFIG_FRAME_POINTER&lt;/code&gt; on if your target architecture supports it.&lt;/p&gt;
&lt;h1 id=&#34;boot-the-virtual-machine&#34;&gt;Boot The Virtual Machine&lt;/h1&gt;
&lt;p&gt;If your kernel is ready, boot a QEMU vertual machine with it.
You could do it in several ways.
For example, you could install the kernel on the virtual machine disk.  Or, you
could use &lt;code&gt;-kernel&lt;/code&gt;, &lt;code&gt;-append&lt;/code&gt; and &lt;code&gt;-initrd&lt;/code&gt; QEMU option to boot the virtual
machine with your kernel image in host machine directly, or some other ways.
One thing you should keep in your mind is that you should turn &lt;strong&gt;kaslr&lt;/strong&gt; off.
Just giving &lt;code&gt;nokaslr&lt;/code&gt; in the kernel parameter doesn&amp;rsquo;t works well.&lt;/p&gt;
&lt;p&gt;Pass &lt;code&gt;-s&lt;/code&gt; option to QEMU when you start up the QEMU virtual machine, or enter
&lt;code&gt;gdbserver&lt;/code&gt; in the QEMU monitor console command line.
This make the virtual machine to start gdbserver and wait on &lt;code&gt;tcp::1234&lt;/code&gt; for
some accesses.
If you have given &lt;code&gt;-nographic&lt;/code&gt; QEMU option and set the kernel parameter so that
the virtual machine&amp;rsquo;s console is connected to your terminal, you could not see
the QEMU monitor console directly.  In this case, you can go back to QEMU
monitor console by entering &lt;code&gt;Ctrl+a c&lt;/code&gt;.
If you want to go back to the virtual machine&amp;rsquo;s console again, &lt;code&gt;Ctrl+a c &amp;lt;enter&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;start-gdb&#34;&gt;Start gdb&lt;/h1&gt;
&lt;p&gt;Move to the build directory of the kernel to debug, enter &lt;code&gt;gdb vmlinux&lt;/code&gt;.
This will start up gdb using the symbol and debuggin information of the kernel.
Ubuntu or some distributions might fail to read &lt;code&gt;vmlinux-gdb.py&lt;/code&gt;.  The error
message also show you how you can fix it, but in summary, you should append
below one line at the end of the &lt;code&gt;.gdbinit&lt;/code&gt; file and start the gdb again with
the above command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add-auto-load-state-path /path/to/linux-build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, connect to the QEMU virtual machine by entering below command from the gdb
session:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) target remote :1234
Remote debugging using :1234
0xffffffff818cce92 in native_safe_halt () at /home/sjpark/linux/arch/x86/include/asm/irqflags.h:54
54              asm volatile(&amp;quot;sti; hlt&amp;quot;: : :&amp;quot;memory&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just after you entering this command, QEMU virtual machine will be frozen.
From now, you can see the variables of the kernel, set the breakpoint, execute
the code step by step, as you normally did with gdb and user space programs.
For example, you can set breakpoint to specific function as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) b cma_alloc
Breakpoint 1 at 0xffffffff81240f10: file /home/hacklog/linux/mm/cma.c, line 399.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want your virtual machine to run again, you can enter &lt;code&gt;c&lt;/code&gt;.
This will resume the execution of the kernel.
If you set a breakpoint as described above and if the code is be executed, the
execution will be started on the breakpoint.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want the kernel to stop again, enter &lt;code&gt;Ctrl+C&lt;/code&gt; in the gdb.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^C
Thread 1 received signal SIGINT, Interrupt.
0xffffffff818cce92 in native_safe_halt () at /home/sjpark/linux/arch/x86/include/asm/irqflags.h:54
54              asm volatile(&amp;quot;sti; hlt&amp;quot;: : :&amp;quot;memory&amp;quot;);
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;use-linux-gdb-helper&#34;&gt;Use Linux gdb helper&lt;/h1&gt;
&lt;p&gt;Actually, you can normally use gdb even though it failed to load
&lt;code&gt;vmlinux-gdb.py&lt;/code&gt;.
The python script contains some helper scripts for more convenient kernel
debugging on the gdb.
You can do kernel debugging a little bit more conveniently if you use it.&lt;/p&gt;
&lt;h2 id=&#34;list-of-the-helper-scripts&#34;&gt;List of the helper scripts&lt;/h2&gt;
&lt;p&gt;The helper scripts have &lt;code&gt;lx&lt;/code&gt; prefix.  You can list up their names and brief
descriptions as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) apropos lx
function lx_current -- Return current task
function lx_module -- Find module by name and return the module variable
function lx_per_cpu -- Return per-cpu variable
function lx_task_by_pid -- Find Linux task by PID and return the task_struct variable
function lx_thread_info -- Calculate Linux thread_info from task variable
function lx_thread_info_by_pid -- Calculate Linux thread_info from task variable found by pid
lx-cmdline --  Report the Linux Commandline used in the current kernel
lx-cpus -- List CPU status arrays
lx-dmesg -- Print Linux kernel log buffer
lx-fdtdump -- Output Flattened Device Tree header and dump FDT blob to the filename
lx-iomem -- Identify the IO memory resource locations defined by the kernel
lx-ioports -- Identify the IO port resource locations defined by the kernel
lx-list-check -- Verify a list consistency
lx-lsmod -- List currently loaded modules
lx-mounts -- Report the VFS mounts of the current process namespace
lx-ps -- Dump Linux tasks
lx-symbols -- (Re-)load symbols of Linux kernel and currently loaded modules
lx-version --  Report the Linux Version of the current kernel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So easy, huh? ;)&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/v4.11/dev-tools/gdb-kernel-debugging.html&#34;&gt;The Kernel Official Document for the Kernel Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alexlambert.com/2017/12/18/kernel-debugging-for-newbies.html&#34;&gt;A blog article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Server.html&#34;&gt;The gdbserver official document&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Kernel text addresses removed from calltrace</title>
      <link>https://sjp38.github.io/post/kernel-text-addresses-removed-from-calltrace/</link>
      <pubDate>Fri, 16 Jun 2017 16:46:09 +0900</pubDate>
      <guid>https://sjp38.github.io/post/kernel-text-addresses-removed-from-calltrace/</guid>
      <description>&lt;p&gt;최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리
어드레스를 찍어주지 않습니다.  이에 대해 포스팅을 해봅니다.&lt;/p&gt;
&lt;h1 id=&#34;call-trace&#34;&gt;Call Trace&lt;/h1&gt;
&lt;p&gt;커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고
있는 stack dump 를 로그로 뿌려 줍니다.  문제의 원인을 찾는데 매우 소중한
정보입니다.  그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의
순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지
왔는가를 담는 정보입니다.&lt;/p&gt;
&lt;p&gt;디버깅 정보를 담아 빌드된 커널이라면 다음과 같이 사람 눈으로 곧바로 어느정도 알
수 있는 수준의 콜 트레이스가 나옵니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Call Trace:
 [&amp;lt;c12ba080&amp;gt;] ? dump_stack+0x44/0x64
 [&amp;lt;c103ed6a&amp;gt;] ? __warn+0xfa/0x120
 [&amp;lt;c109e8a7&amp;gt;] ? module_put+0x57/0x70
 [&amp;lt;c109e8a7&amp;gt;] ? module_put+0x57/0x70
 [&amp;lt;c103ee33&amp;gt;] ? warn_slowpath_null+0x23/0x30
 [&amp;lt;c109e8a7&amp;gt;] ? module_put+0x57/0x70
 [&amp;lt;f80ca4d0&amp;gt;] ? gp8psk_fe_set_frontend+0x460/0x460 [dvb_usb_gp8psk]
 [&amp;lt;c109f617&amp;gt;] ? symbol_put_addr+0x27/0x50
 [&amp;lt;f80bc9ca&amp;gt;] ? dvb_usb_adapter_frontend_exit+0x3a/0x70 [dvb_usb]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;콜 트레이스는 어떻게 이 순간에 이르게 되었는가를 역순으로 보여줍니다.  즉,
dvd_usb_adapter_frontend_exit() 에서 symbol_put_addr() 를 호출했고, 여기서
gp8psk_fe_set_frontend() 를 호출했고, &amp;hellip; 반복되어 dump_stack() 함수에 의해 이
메세지가 뜬 것이죠.  함수 이름 옆의 &lt;code&gt;0xaa/0xbb&lt;/code&gt; 와 같은 숫자들은 각각 함수
내에서 해당 순간 코드까지의 오프셋, 그리고 해당 함수의 전체 크기를 나타냅니다.&lt;/p&gt;
&lt;p&gt;이것만으로도 많은 정보를 알 수 있지만 해당 함수의 정확히 몇번째 라인에서 문제가
났는지는 이것만으로 알수가 없습니다.  코드를 한줄한줄 눈으로 보고 로그를
추가해보고 하면서 찾을 수도 있겠지만 복장이 터지겠죠.  가장 왼쪽 &lt;code&gt;[&amp;lt;&lt;/code&gt; 와 &lt;code&gt;&amp;gt;]&lt;/code&gt;
사이의 16진수는 메모리 상에서 해당 코드의 주소를 의미합니다.  따라서 디버깅
정보가 있다면 이 주소를 가지고 해당 코드가 어느 파일의 몇번째 라인인지 파악할
수 있습니다.&lt;/p&gt;
&lt;p&gt;이 작업을 위한 도구가 여럿 있는데, &lt;code&gt;addr2line&lt;/code&gt;[1] 도 많이 사용되는 도구 중
하나입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ addr2line -e ../linux.out/vmlinux 0xffffffff810e91f0
linux/arch/x86/include/asm/rwsem.h:83
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-e&lt;/code&gt; 옵션을 통해 커널 디버깅 정보를 담고 있는 커널 이미지가 위치한 경로를
넘겨주고 마지막 인자로 앞의 콜 트레이스에서 얻어온 주소를 주면 어느 파일의
몇번째 라인을 가리키는지 쉽게 알 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;text-address-removed-from-stack-dump&#34;&gt;Text Address Removed from Stack Dump&lt;/h1&gt;
&lt;p&gt;그런데, 2016년 말 후에 릴리즈된 x86 용 커널은 콜 트레이스에서 위의 addr2line
에 넘겨줘야 할, 어드레스 정보가 더이상 콜 트레이스에 없습니다.  해당되는
커널에서는 다음과 같은 콜 트레이스가 나올 겁니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Call Trace:
 dump_stack+0x85/0xc2
 bad_page+0xc1/0x120
 free_pages_check_bad+0x7a/0x80
 __free_pages_ok+0x32a/0x3e0
 __free_pages+0x19/0x30
 shrink_huge_zero_page_scan+0x50/0x60
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이는 2016년 10월 25일자로 Josh Poimboeuf 에 의해 만들어진 커밋[2] 에 의한
겁니다.  코드의 메모리상 어드레스가 추측 가능할 경우엔 해당 영역에 코드를
바꾼다거나 하는 여러 공격이 들어올 수 있어 보안상 좋지 않습니다.  때문에 최근
시스템은 동일한 프로그램이라 하더라도 메모리에 적재될 때마다 코드의 위치가
바뀌거나 하도록 하는 기능을 갖추고 있습니다.  Address randomization[3] 이 한
예입니다.  따라서 Address randomization 이 가줘져 있다고는 하지만 해당
어드레스를 누구나 볼 수 있는 커널 로그에 뿌리는 것도 좋은 행위는 아닐 뿐더러,
이렇게 나온 정보는 시스템에 따라 무효할 것이기 때문에 적어도 커밋 메세지에는
존재할 필요가 없는데 버그 레포팅 할때 사람들이 뿌려대서 귀찮기만 하다는 것이죠.&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-out-the-line-now&#34;&gt;How to find out the Line, now?&lt;/h2&gt;
&lt;p&gt;문제는, 이렇게 되니 기존의 addr2line 을 이용해 한방에 해결되던 위치 찾기가 좀
복잡해진다는 겁니다.  먼저 해당 함수의 메모리 상 위치를 찾아내고, 그 다음
오프셋을 더해서 해당 코드의 메모리 상 주소를 찾아내어서 다시 addr2line 등을
사용해야 하는 것이죠.&lt;/p&gt;
&lt;p&gt;이게 귀찮다면 만능 도구 &lt;code&gt;gdb&lt;/code&gt; 를 사용할 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gdb ../linux.out/vmlinux

...

(gdb) list *(free_pages_check_bad+0x7a)
0xffffffff811daf1a is in free_pages_check_bad (/home/sjpark/linux/mm/page_alloc.c:941).
936     #ifdef CONFIG_MEMCG
937             if (unlikely(page-&amp;gt;mem_cgroup))
938                     bad_reason = &amp;quot;page still charged to cgroup&amp;quot;;
939     #endif
940             bad_page(page, bad_reason, bad_flags);
941     }
942
943     static inline int free_pages_check(struct page *page)
944     {
945             if (likely(page_expected_state(page, PAGE_FLAGS_CHECK_AT_FREE)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;하지만 이 방법은 동일한 이름의 심볼이 두개 존재하는 경우 첫번째 심볼에 대해서만
보여줍니다.  따라서 사려 깊은 Josh Poimboeuf 는 저처럼 addr2line 을 좋아하는
사람들을 위해 대체할 도구를 만들었습니다.  그 이름은 faddr2line 으로, 커널
소스의 &lt;code&gt;scripts/&lt;/code&gt; 디렉토리 아래에 있습니다.  다음과 같이 사용할 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./scripts/faddr2line ../linux.out/vmlinux free_pages_check_bad+0x7a
free_pages_check_bad+0x7a/0x80:
free_pages_check_bad at mm/page_alloc.c:941
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;두번째 인자로 디버깅 정보 담긴 이미지파일 경로, 그 뒤로 찾고자 하는 코드의
함수와 함수로부터 해당 코드까지의 오프셋을 주면 됩니다.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;보안적 이유와 쓸모없음으로 인해 2016년 말 후의 커널은 콜 트레이스에서 각 코드의
메모리 어드레스를 제거하고 &lt;code&gt;func_name+0x123/0x456&lt;/code&gt; 포맷으로만 코드 위치를
제공하게 되었습니다.  이로 인해 해당 코드의 파일 내에서의 위치를 찾는데에
예전처럼 &lt;code&gt;addr2line&lt;/code&gt; 을 더 사용할 수는 없게 되었지만 커널 모드의
&lt;code&gt;scripts/faddr2line&lt;/code&gt; 도구를 사용해 예전처럼 쉽게 콜 트레이스의 각 위치의 파일
내에서의 위치를 파악할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://www.skrenta.com/rt/man/addr2line.1.html&#34;&gt;http://www.skrenta.com/rt/man/addr2line.1.html&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;http://lkml.kernel.org/r/69329cb29b8f324bb5fcea14d61d224807fb6488.1477405374.git.jpoimboe@redhat.com&#34;&gt;http://lkml.kernel.org/r/69329cb29b8f324bb5fcea14d61d224807fb6488.1477405374.git.jpoimboe@redhat.com&lt;/a&gt;&lt;br&gt;
[3] &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;https://en.wikipedia.org/wiki/Address_space_layout_randomization&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fetching linux kernel source code</title>
      <link>https://sjp38.github.io/post/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>https://sjp38.github.io/post/fetching-linux-source-code/</guid>
      <description>&lt;p&gt;리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나
인터넷을 통해 쉽게 얻을 수 있습니다.  이 글에서는 리눅스 커널 소스코드를 받아올
수 있는 몇가지 방법을 설명합니다.&lt;/p&gt;
&lt;h1 id=&#34;kernelorg&#34;&gt;kernel.org&lt;/h1&gt;
&lt;p&gt;리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는
[kernel.org] (&lt;a href=&#34;https://www.kernel.org&#34;&gt;https://www.kernel.org&lt;/a&gt;) 라 할 수 있겠는데, 이 사이트에는 소스
코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다.  이
사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된
버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 &lt;code&gt;tar.xz&lt;/code&gt; 포맷의 압축
파일 또는 &lt;code&gt;patch&lt;/code&gt; 등 다양한 형태로 다운받을 수 있는 링크가 있습니다.&lt;/p&gt;
&lt;p&gt;한가지 유의할 것은 kernel.org 는 공식적 사이트일 뿐으로 비슷하게 소스코드를
호스팅 하는 사이트는 github 을 포함해 여럿 있을 수 있다는 점입니다.  또한,
특정한 회사나 개인이 수정한 버전의 커널의 소스코드는 kernel.org 에서 받을 수
없을 수 있습니다.  하지만, 리눅스 커널의 라이센스가 GPL 인만큼, 그들도 자신이
수정한 버전을 상품 등으로 배포하고 있다면 소스코드를 공개해야 하므로, 해당
버전을 만든 사람 또는 회사에 문의해 보면 그 소스코드를 받을 수 있을 겁니다.
예를 들어 안드로이드의 경우 자신들이 수정한 커널을 사용하며, 그렇게 수정된
커널의 소스코드를 자신들의 소스코드 [호스팅 사이트]
(&lt;a href=&#34;https://android.googlesource.com/&#34;&gt;https://android.googlesource.com/&lt;/a&gt;) 에 공개하고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;specific-version&#34;&gt;Specific Version&lt;/h2&gt;
&lt;p&gt;kernel.org 첫 페이지에는 몇가지 버전의 소스코드만 존재하므로 찾고 있는 버전은
해당 페이지에 링크가 존재하지 않을 수 있습니다.  특정 버전을 찾기 위한 페이지
역시 kernel.org 는 제공하는데, &lt;a href=&#34;https://www.kernel.org/pub/linux/kernel/&#34;&gt;https://www.kernel.org/pub/linux/kernel/&lt;/a&gt; 주소로
들어가면 특정 버전의 커널 소스코드를 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 4.2.1 버전을 받고 싶다면, 다음 커맨드를 셸에서 수행해 받아올 수
있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.2.1.tar.xz
$ tar xvf linux-4.2.1.tar.xz
$ ls linux-4.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;git-repository-cloning&#34;&gt;Git Repository Cloning&lt;/h1&gt;
&lt;p&gt;주요 리눅스 개발자들은 각자의 git repository 로 자신이 개발중인 버전의 리눅스
커널 소스코드를 관리하는데, 이 역시 남들이 볼 수 있게 공유해 두고 있습니다.
따라서, 원한다면 특정 리눅스 개발자의 개발중인 리눅스 커널 소스코드를 git 으로
clone 해올 수 있습니다.  많은 주요 개발자들이 kernel.org 위에 자신의 git
repository 를 호스팅 하고 있으며, github 을 사용하는 사람들도 많습니다.  예를
들어 리누스 토발즈는 kernel.org 위에 자신의 git repository 를 호스팅 하면서
github 에 미러링도 하고 있습니다.  각각의 repository 의 주소는 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux.git&#34;&gt;https://github.com/torvalds/linux.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음과 같은 명령을 통해 리누스 토발즈의 개발중인 리눅스 커널 소스코드를 clone
해올 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
$ ls linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;개발자의 repository 를 클론해 오는 방식의 장점은, 일단 아직 릴리즈 되지 않은
따끈따끈한 버전의 소스코드를 그 commit history 와 함께 볼 수 있다는 점일
겁니다.  리눅스 커널 개발에 참여하고 싶다면 현재 어떤 기능이 구현되고 있고 어떤
버그가 아직 고쳐지지 않았는지 등을 알 수 있으므로 필수적입니다.  또하나의
장점은 git repository 에는 그동안 해당 repository 에서 릴리즈한 버전들이 모두
포함되어 있어, 해당 버전을 언제든지 &lt;code&gt;checkout&lt;/code&gt; 할 수 있다는 점입니다.&lt;/p&gt;
&lt;p&gt;단점은, commit history 와 개발중인 코드를 원하는게 아니라면 불필요하게 많은
용량의 데이터를 다운로드 받아야 한다는 것입니다.  현재 소스코드를 필요로 하는
목적에 맞춰, 특정 버전의 코드가 필요할 뿐이라면 압축 파일을, 그렇지 않다면 git
repository 를 사용한 접근을 하는 편이 옳을 겁니다.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;리눅스 커널의 소스코드를 얻어오는 몇가지 방법을 알아봤습니다.  리눅스 커널은
오픈소스 형태라 그 소스코드를 쉽게 구할 수 있으며, kernel.org 또는 github 등의
호스팅 사이트에서 압축 파일, 패치, 또는 git repository 의 형태로 얻을 수
있습니다.  개발중인 repository 의 clone 을 통한 형태는 commit history 와
개발중인 코드의 정보를 알 수 있다는 장점이 있지만 그만큼 다운로드 받아야 하는
데이터의 양이 크다는 단점도 존재합니다.  자신이 현재 소스코드를 얻고자 하는
목적에 맞춰 적합한 방법으로 소스코드를 얻어오는 것이 좋을 겁니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
