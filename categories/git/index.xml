<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git | hacklog</title>
    <link>https://sjp38.github.io/categories/git/</link>
      <atom:link href="https://sjp38.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <description>git</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 06 Jan 2020 21:10:05 +0100</lastBuildDate>
    <image>
      <url>https://sjp38.github.io/img/tux.png</url>
      <title>git</title>
      <link>https://sjp38.github.io/categories/git/</link>
    </image>
    
    <item>
      <title>A thing you should know if you are using multiple email accounts with `git send-email`</title>
      <link>https://sjp38.github.io/post/git_send_email_multiple_email_caution/</link>
      <pubDate>Mon, 06 Jan 2020 21:10:05 +0100</pubDate>
      <guid>https://sjp38.github.io/post/git_send_email_multiple_email_caution/</guid>
      <description>&lt;p&gt;In some case, we need to send patches that made by other people instead.  &lt;code&gt;git send-email&lt;/code&gt; command can know this situation by itself by comparing the commit
author information and mail sender&amp;rsquo;s information.  In that case, &lt;code&gt;git send-email&lt;/code&gt; automatically add &lt;code&gt;From:&lt;/code&gt; line pointing the real author of the
patch in the body of the mail so that maintainers applying the patches can set
the author information correctly.&lt;/p&gt;
&lt;p&gt;For example, if &amp;ldquo;Alice &lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&amp;rdquo; has made a commit and &amp;ldquo;Bob
&lt;a href=&#34;mailto:bob@abc.com&#34;&gt;bob@abc.com&lt;/a&gt;&amp;rdquo; formats the commit into a patch file and sends it, &lt;code&gt;git send-email&lt;/code&gt; automatically adds &lt;code&gt;From: Alice &amp;lt;alice@abc.com&amp;gt;&lt;/code&gt; line in the body
of the mail.  And, when a maintainer is applying the patch using &lt;code&gt;git am&lt;/code&gt;, the
patch is applied with author &amp;ldquo;Alice &lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;However, please note that &lt;code&gt;git send-email&lt;/code&gt; knows the situation by comparing the
author information and the command caller&amp;rsquo;s git user eamil configuration or
given &amp;lsquo;&amp;ndash;from&amp;rsquo; option only, not considering real smtp email account.&lt;/p&gt;
&lt;p&gt;For example, suppose that Alice has two email accounts, &lt;code&gt;alice@abc.com&lt;/code&gt; and
&lt;code&gt;alice@def.com&lt;/code&gt;.  And, Alice wants to use &lt;code&gt;alice@abc.com&lt;/code&gt; as her email address
in the git history, but needs to send her patches using &lt;code&gt;def.com&lt;/code&gt; SMTP server.
She might use below commands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config sendemail.smtpserver smtp.def.com
$ git config sendemail.smtpuser alice@def.com
$ git config user.email &amp;quot;alice@abc.com&amp;quot;
$ git commit -as -m &#39;the patch&#39;
$ git format-patch HEAD^
$ git send-email 0001_the_patch.patch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because her git config is saying the &lt;code&gt;user.email&lt;/code&gt; is &lt;code&gt;alice@abc.com&lt;/code&gt; and the
patch is authored by &lt;code&gt;alice@abc.com&lt;/code&gt;, &lt;code&gt;git send-email&lt;/code&gt; thinks same people is
sending the patch.  Thus, it doesn&amp;rsquo;t add the &amp;lsquo;From:&amp;rsquo; line in the body of the
mail.  Of course, &lt;code&gt;git send-email&lt;/code&gt; tries to set the &lt;code&gt;from&lt;/code&gt; of the mail as
&lt;code&gt;alice@abc.com&lt;/code&gt;, but as the additionally specified &amp;lsquo;from&amp;rsquo; information is
usually (at least gmail does) ignored by the SMTP server, the maintainer will
receive the mail saying author email as &amp;lsquo;&lt;a href=&#34;mailto:alice@def.com&#34;&gt;alice@def.com&lt;/a&gt;&amp;rsquo; only.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;git send-email&lt;/code&gt; considers the email address it &lt;em&gt;tries&lt;/em&gt; to use as the
from address, not the final one that SMTP server will use.  Thus, this problem
can be worked around in weird way using the &lt;code&gt;--from&lt;/code&gt; option of the &lt;code&gt;git send-email&lt;/code&gt;.  In the above case, giving &lt;code&gt;--from &amp;quot;Alice &amp;lt;alice@def.com&amp;gt;&amp;quot;&lt;/code&gt; option
to &lt;code&gt;git send-email&lt;/code&gt; makes the command to think the sender is not the author
(&lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;) and as a result, it adds the &lt;code&gt;From:&lt;/code&gt; line in the body.&lt;/p&gt;
&lt;p&gt;Also, please note that adding &lt;code&gt;--from&lt;/code&gt; option does not always add the &lt;code&gt;From:&lt;/code&gt;
line in the body.  Rather than that, it can even hide the &lt;code&gt;From:&lt;/code&gt; line you
intended to add, if you give the address that same with the commit&amp;rsquo;s author,
regardless of what SMTP server you use.  For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config sendemail.smtpserver smtp.def.com
$ git config sendemail.smtpuser alice@def.com
$ git config user.email &amp;quot;alice@abc.com&amp;quot;
$ git commit -as -m &#39;the patch&#39;
$ git format-patch HEAD^
$ git config user.email &amp;quot;alice@def.com&amp;quot;
$ git send-email --from alice@abc.com 0001_the_patch.patch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the final command had no &lt;code&gt;--from&lt;/code&gt; option, it would added the From: in-body
line.  However, because it specifies the real author address using &lt;code&gt;--from&lt;/code&gt;
option, &lt;code&gt;git send-email&lt;/code&gt; thinks the real author is sending this mail and omits
the &lt;code&gt;From:&lt;/code&gt; line in the body.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Git for email send</title>
      <link>https://sjp38.github.io/post/git_email_setup/</link>
      <pubDate>Sat, 28 Dec 2019 09:58:49 +0100</pubDate>
      <guid>https://sjp38.github.io/post/git_email_setup/</guid>
      <description>&lt;p&gt;Many communities are using Github nowadays, but some communities still use
mailing list based development style.  The Linux kernel community would be a
good example.  In the style, all major communications are made by email only.
Patches are submitted to the maintainers and one more open mailing lists as a
mail.
Reviews are also made as replies to the mail.&lt;/p&gt;
&lt;p&gt;Because some email clients can distort the original content for so-called
``rich user experience&amp;rsquo;&amp;rsquo; (e.g., changing tabs to spaces or inserting html
code), patch submitting people should aware of it and try to keep their mail
content to be plain.
This can be awful or even impossible on some mail clients.&lt;/p&gt;
&lt;p&gt;Git can help formatting and sending your patch files using SMTP.
This post describes how you can use git to send email.&lt;/p&gt;
&lt;h1 id=&#34;package-install&#34;&gt;Package Install&lt;/h1&gt;
&lt;p&gt;If you installed git using the package manager, you should install not only
&lt;code&gt;git&lt;/code&gt; package, but also &lt;code&gt;git-email&lt;/code&gt; package.  If you are using &lt;code&gt;apt&lt;/code&gt; package
manager, simply type
&lt;code&gt;$ sudo apt install git-email&lt;/code&gt; on the terminal.&lt;/p&gt;
&lt;h1 id=&#34;smtp-setting&#34;&gt;SMTP Setting&lt;/h1&gt;
&lt;p&gt;Then, set smtp server configurations for you.  Of course, you should enable the
smtp configuration on your mail accout first.  If your mail account is ready
for the smtp, now you should let git to know how it can access to your mail
account using &amp;lsquo;git config&amp;rsquo;.  If you want to use your Gmail account, it will be
as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global sendemail.smtpserver smtp.gmail.com
$ git config --global sendemail.smtpserverport 587
$ git config --global sendemail.smtpencryption tls
$ git config --global sendemail.smtpuser &amp;lt;your-gmail-account@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also set the mail account password as below, but I will recommend you
to not store your password in that way, because it can harm your security.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global sendemail.smtppass &amp;lt;your_password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;send-mail&#34;&gt;Send Mail&lt;/h1&gt;
&lt;p&gt;Sending mail is so easy.  You should first save your mail message in a file.
This could be patch file, which can also easily formatted using &lt;code&gt;git format-patch&lt;/code&gt;.  After that, make sure you know who you want your mail to be
sent to.
Now, just type below command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git send-email --to &amp;lt;recipients&amp;gt; &amp;lt;the file containing your message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have not set your password (again, I recommend you do not save your
password), this command will ask your password.  Just type it on the prompt.
Then, your mail will delivered to the recipients you specified.&lt;/p&gt;
&lt;p&gt;For more detail, &lt;code&gt;$ git help send-email&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Summarised how you can send email using Git.  Install packages, set SMTP, write
your mail in a plain file, and &lt;code&gt;git send-email&lt;/code&gt;.  That&amp;rsquo;s it. :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
