<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Setup on hacklog</title>
    <link>https://sjp38.github.io/tags/setup/</link>
    <description>Recent content in Setup on hacklog</description>
    <image>
      <title>hacklog</title>
      <url>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Dec 2019 00:46:05 +0100</lastBuildDate>
    <atom:link href="https://sjp38.github.io/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build, Install, and Use QEMU on Ubuntu</title>
      <link>https://sjp38.github.io/posts/en/qemu_setup_on_ubuntu/</link>
      <pubDate>Thu, 12 Dec 2019 00:46:05 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/en/qemu_setup_on_ubuntu/</guid>
      <description>This post describes how you can build, install, and use QEMU on an Ubuntu machine. I basically refererenced http://wiki.qemu.org/Hosts/Linux. The test has proceeded on an Ubuntu 18.04 server machine.
QEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Get an Ubuntu server install image:</description>
    </item>
    <item>
      <title>Ubuntu 환경에서 QEMU 빌드 / 설치 / 사용하는 법</title>
      <link>https://sjp38.github.io/posts/ko/qemu_setup_on_ubuntu/</link>
      <pubDate>Thu, 12 Dec 2019 00:46:05 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/qemu_setup_on_ubuntu/</guid>
      <description>Ubuntu 에서 QEMU 를 빌드, 설치, 사용하는 법을 설명합니다. 기본적으로 http://wiki.qemu.org/Hosts/Linux 문서를 참고했습니다. 테스트는 Ubuntu 18.04 머신 위에서 진행되었습니다.
QEMU Build sudo apt install libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \ libgtk-3-dev git clone git://git.qemu-project.org/qemu.git cd qemu git checkout v4.2.0 mkdir -p $HOME/qemu.sandbox/bin cd $HOME/qemu.sandbox/bin ../../qemu/configure --enable-debug --enable-gtk time make -j143 ./x86_64-softmmu/qemu-system-x86_64 -L pc-bios Guest OS Install Ubuntu 서버 이미지를 가져오고,
$ wget http://releases.ubuntu.com/18.04/ubuntu-18.04.3-live-server-amd64.iso qcow2 포맷으로 스토리지를 만들고,
cd .. $ ./bin/qemu-img create -f qcow2 qc2img 32G Formatting &amp;#39;qc2img&amp;#39;, fmt=qcow2 size=34359738368 encryption=off cluster_size=65536 lazy_refcounts=off refcount_bits=16 $ ls -alh total 830M drwxrwxr-x 3 sjpark sjpark 4.</description>
    </item>
    <item>
      <title>Linux Kernel Build</title>
      <link>https://sjp38.github.io/posts/ko/linux-kernel-build/</link>
      <pubDate>Fri, 07 Sep 2018 16:00:23 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux-kernel-build/</guid>
      <description>제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을 정리해 봅니다. 글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3 Server OS 를 설치한 x86_64 가상머신입니다.
Install Dependent Packages $ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \ libelf-dev 커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠. 위 커맨드는 우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다. 커널 트리의 Documentation/process/changes.rst 에도 커널 빌드에 필요한 패키지들이 나열되어 있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.</description>
    </item>
    <item>
      <title>Raspberry Pi 3 Serial Connection</title>
      <link>https://sjp38.github.io/posts/ko/rasp3-serial/</link>
      <pubDate>Mon, 27 Aug 2018 17:16:35 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rasp3-serial/</guid>
      <description>라즈베리 파이를 메인 컴퓨터로 사용하려는게 아니라면, 라즈베리 파이에 모니터와 키보드, 마우스를 연결하고 사용하는게 아무래도 번거롭습니다. ssh 로 붙어서 작업하는 것도 한 방법이지만, 그게 여의치 않은 상황도 있습니다. 그저 터미널만 연결되면 되는 상황이라면, 가장 간단한 건 UART Serial 통신을 사용하는 겁니다.
라즈베리 파이는 UART 통신을 지원하고 있는데, GPIO 핀 중 14번과 15번이[2] 각각 TX, RX 입니다. 호스트 컴퓨터와 이 두개의 핀을 연결하면 UART 통신을 할 수 있어서 라즈베리 파이의 터미널에 바로 접근할 수 있습니다.</description>
    </item>
    <item>
      <title>Raspberry Pi 3 Model B Setup</title>
      <link>https://sjp38.github.io/posts/ko/rasp3-modelb-setup/</link>
      <pubDate>Mon, 27 Aug 2018 16:03:42 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/rasp3-modelb-setup/</guid>
      <description>OSSE 2016 에서 받아온 라즈베리 파이3 셋업을 해봅니다. 셋업에 사용된 호스트 환경은 Ubuntu 16.04 데스크탑입니다.
라즈베리 파이는 SD 카드를 저장소로 사용합니다. 따라서 여기에 운영체제를 깔아야 합니다. 다만, 라즈베리 파이를 구매하면 SD 카드는 따라오지 않습니다. 각자 알아서 사야 합니다. 전 예전에 사둔 16 GiB 짜리 SD 카드를 사용하겠습니다.
라즈베리 파이를 지원하는 운영체제는 여러가지 있는데, 데비안 계열의 Raspbian 이 공식 운영체제입니다. 다운로드 페이지 에서 Raspbian stretch lite 를 다운받고 압축을 풀어줍니다.
$ ls 2018-06-27-raspbian-stretch-lite.</description>
    </item>
    <item>
      <title>Golang 1.9 install on Fedora 26</title>
      <link>https://sjp38.github.io/posts/ko/golang1.9_fedora26/</link>
      <pubDate>Sat, 26 Aug 2017 10:54:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/golang1.9_fedora26/</guid>
      <description>현재 사용중인 랩탑에 설치한 OS 는 Fedora 24 였는데, 너무 오래되었고 지원도 얼마전 끝났기에[0] 이번에 Fedora 26 으로 새로 설치했습니다. 마침 go 언어도 1.9 가 최근에 릴리즈 되었기에 개인적으로 go 언어를 설치하는 방법을 기록해 둡니다.
여기선 소스 코드만 가지고 빌드, 설치하는 방법을 기록합니다.
Get Source Code go 언어는 오픈소스입니다. 다음 커맨드를 통해 구글로부터 소스코드를 받아올 수 있습니다.
$ git clone https://go.googlesource.com/go 기다리면 go/ 디렉토리에 소스코드가 딸려옵니다.
golang 1.4 Build &amp;amp; Install go 언어를 빌드한다는 건 go 언어 컴파일러와 기본 라이브러리 등과 같은, go 언어로 짠 프로그램을 빌드하고 수행하는데 필요한 도구들을 빌드한다는 이야기입니다.</description>
    </item>
  </channel>
</rss>
