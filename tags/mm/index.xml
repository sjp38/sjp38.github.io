<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mm | hacklog</title>
    <link>https://sjp38.github.io/tags/mm/</link>
      <atom:link href="https://sjp38.github.io/tags/mm/index.xml" rel="self" type="application/rss+xml" />
    <description>mm</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 31 Dec 2021 07:52:00 +0100</lastBuildDate>
    <image>
      <url>https://sjp38.github.io/img/tux.png</url>
      <title>mm</title>
      <link>https://sjp38.github.io/tags/mm/</link>
    </image>
    
    <item>
      <title>Linux Memory Management Subsystem Development Statistics in 2021 (Short)</title>
      <link>https://sjp38.github.io/post/linux-mm-dev-stat-2021-short/</link>
      <pubDate>Fri, 31 Dec 2021 07:52:00 +0100</pubDate>
      <guid>https://sjp38.github.io/post/linux-mm-dev-stat-2021-short/</guid>
      <description>&lt;p&gt;Whenever reading the kernel development statistics
&lt;a href=&#34;https://lwn.net/Articles/874283/&#34;&gt;report&lt;/a&gt; for each release from LWN, I wanted
to scope it down to specific subsystems.  For that, I wrote a
&lt;a href=&#34;https://github.com/sjp38/lazybox/blob/master/scripts/git_stats/authors.py&#34;&gt;script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Belows are the top 10 kernel hackers who contributed to the memory management
subsystem of Linux kernel, sorted by number of commits and changed (added,
deleted, or modified) lines, respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./authors.py ~/linux --file mm/ --since 2021-01-01 --author_identity name --sortby lines --max_nr_authors 10
1. SeongJae Park: 4860 lines
2. Matthew Wilcox (Oracle): 4391 lines
3. Muchun Song: 2091 lines
4. Mel Gorman: 1737 lines
5. Yang Shi: 1615 lines
6. Marco Elver: 1442 lines
7. Mike Kravetz: 1419 lines
8. Alexander Potapenko: 1383 lines
9. Miaohe Lin: 1256 lines
10. Vlastimil Babka: 1245 lines
# 262 authors, 45700 lines in total
$ 
$ ./authors.py ~/linux --file mm/ --since 2021-01-01 --author_identity name --sortby commits --max_nr_authors 10
1. Matthew Wilcox (Oracle): 133 commits
2. Miaohe Lin: 125 commits
3. Linus Torvalds: 78 commits
4. Muchun Song: 51 commits
5. Mel Gorman: 46 commits
6. Vlastimil Babka: 44 commits
7. SeongJae Park: 43 commits
8. Hugh Dickins: 41 commits
9. Yang Shi: 38 commits
10. David Hildenbrand: 33 commits
# 265 authors, 1527 commits in total
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tests package for DAMON is released under GPL v2</title>
      <link>https://sjp38.github.io/post/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      <guid>https://sjp38.github.io/post/damon-tests_open_sourced/</guid>
      <description>&lt;p&gt;DAMON contains a number of tests based on the kselftest and kunit in its
patchset itself.  As it is preferred to contain only tests having short runtime
in kernel tree, I organized time consuming tests in a package and used it in my
company only.  Tests could be used as a good document and essential for
contributors.  For the reason, I promised I will make it open source in the
last kernel summit talk
(&lt;a href=&#34;https://linuxplumbersconf.org/event/7/contributions/659/)&#34;&gt;https://linuxplumbersconf.org/event/7/contributions/659/)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yesterday, I finally publicly released the
&lt;a href=&#34;https://github.com/awslabs/damon-tests&#34;&gt;package&lt;/a&gt; under GPL v2.  Now you can
use the package to understand the DAMON interface and test it on your machine
by yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Opening a Showcase Website for DAMON</title>
      <link>https://sjp38.github.io/post/damon_github_page/</link>
      <pubDate>Tue, 19 May 2020 06:27:47 +0000</pubDate>
      <guid>https://sjp38.github.io/post/damon_github_page/</guid>
      <description>&lt;p&gt;A DAMON showcase website[1] is open.
There are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the official documentation of DAMON[2],&lt;/li&gt;
&lt;li&gt;the heatmap format dynamic access pattern of various realistic workloads for
heap area[3], mmap()-ed area[4], and stack[5] area,&lt;/li&gt;
&lt;li&gt;the dynamic working set size distribution[6] and chronological working set
size changes[7], and&lt;/li&gt;
&lt;li&gt;the latest performance test results[8].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://damonitor.github.io&#34;&gt;https://damonitor.github.io&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;https://damonitor.github.io/doc/html/latest&#34;&gt;https://damonitor.github.io/doc/html/latest&lt;/a&gt;&lt;br&gt;
[3] &lt;a href=&#34;https://damonitor.github.io/test/result/visual/latest/heatmap.0.html&#34;&gt;https://damonitor.github.io/test/result/visual/latest/heatmap.0.html&lt;/a&gt;&lt;br&gt;
[4] &lt;a href=&#34;https://damonitor.github.io/test/result/visual/latest/heatmap.1.html&#34;&gt;https://damonitor.github.io/test/result/visual/latest/heatmap.1.html&lt;/a&gt;&lt;br&gt;
[5] &lt;a href=&#34;https://damonitor.github.io/test/result/visual/latest/heatmap.2.html&#34;&gt;https://damonitor.github.io/test/result/visual/latest/heatmap.2.html&lt;/a&gt;&lt;br&gt;
[6] &lt;a href=&#34;https://damonitor.github.io/test/result/visual/latest/wss_sz.html&#34;&gt;https://damonitor.github.io/test/result/visual/latest/wss_sz.html&lt;/a&gt;&lt;br&gt;
[7] &lt;a href=&#34;https://damonitor.github.io/test/result/visual/latest/wss_time.html&#34;&gt;https://damonitor.github.io/test/result/visual/latest/wss_time.html&lt;/a&gt;&lt;br&gt;
[8] &lt;a href=&#34;https://damonitor.github.io/test/result/perf/latest/html/index.html&#34;&gt;https://damonitor.github.io/test/result/perf/latest/html/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
