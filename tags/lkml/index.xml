<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lkml | hacklog</title>
    <link>/tags/lkml/</link>
      <atom:link href="/tags/lkml/index.xml" rel="self" type="application/rss+xml" />
    <description>lkml</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 05 Apr 2022 07:45:57 +0200</lastBuildDate>
    <image>
      <url>/img/tux.png</url>
      <title>lkml</title>
      <link>/tags/lkml/</link>
    </image>
    
    <item>
      <title>LKML News v5.18-rc2</title>
      <link>/post/lkml_news_v5.18-rc2/</link>
      <pubDate>Tue, 05 Apr 2022 07:45:57 +0200</pubDate>
      <guid>/post/lkml_news_v5.18-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v7-0070-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH v7 00/70] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220404143501.2016403-1-Liam.Howlett@oracle.com&#34;&gt;https://lkml.kernel.org/r/20220404143501.2016403-1-Liam.Howlett@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The seventh version of the Maple tree patchset has posted.  Liam is explicitly
asking Andrew to merge it in -mm.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-2022-call-for-proposals-virtual-option-josef-bacik&#34;&gt;LSF/MM/BPF: 2022: Call for Proposals VIRTUAL OPTION (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/linux-mm/YksmQSfuIx%2FOiNA8@localhost.localdomain/&#34;&gt;https://lore.kernel.org/linux-mm/YksmQSfuIx%2FOiNA8@localhost.localdomain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CFP for virtual attendee of LSF/MM/BPF has posted.  The virtual instance of
LSF/MM/BPF will be hosted on Zoom.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-04-04-17-10-uploaded-andrew-morton&#34;&gt;mmotm 2022-04-04-17-10 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220405001100.410E3C2BBE4@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220405001100.410E3C2BBE4@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mmotm snapshot has updated.  It&amp;rsquo;s rebased on v5.18-rc1, added 39 patches,
modified 46 patches, and dropped 18 patches.  In total, 184 patches in the
queue.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-process-matthew-wilcox&#34;&gt;[LSF/MM TOPIC] Process (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/Yky4xQn+9/ZBgqpd@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/Yky4xQn+9/ZBgqpd@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew is suggesting to have a session in LSF/MM about the mm tree process.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-04-05-15-54-uploaded-andrew-morton&#34;&gt;mmotm 2022-04-05-15-54 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220405225436.AFE86C385A0@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220405225436.AFE86C385A0@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew uploaded another mmotm.  It&amp;rsquo;s still based on 5.18-rc1, added 5 new
patches, modified 16 patches, and dropped 1 patch.  In total, 188 patches in
the queue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.18-rc1</title>
      <link>/post/lkml_news_v5.18-rc1/</link>
      <pubDate>Tue, 22 Mar 2022 06:59:56 +0100</pubDate>
      <guid>/post/lkml_news_v5.18-rc1/</guid>
      <description>&lt;h2 id=&#34;lsfmm-topic-improving-oom-debugging-ken-overstreet&#34;&gt;[LSF/MM TOPIC] Improving OOM debugging (Ken Overstreet)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220322005101.actefn6nttzeo2qr@moria.home.lan&#34;&gt;https://lkml.kernel.org/r/20220322005101.actefn6nttzeo2qr@moria.home.lan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ken proposes an LSF/MM slot for discussing OOM debugging situation improvement
with two ideas from his side.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220322143803.04a5e59a07e48284f196a2f9@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220322143803.04a5e59a07e48284f196a2f9@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Morton has sent 227 patches to Linus Torvalds, as the first batch of the
pull requests for v5.18.  It includes DAMON patches including pid hiding and
its sysfs interface, and merged.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-mm-madvise-return-exact-bytes-advised-with-process_madvise-under-error-charan-teja-kalla&#34;&gt;[PATCH 0/2] mm: madvise: return exact bytes advised with process_madvise under error (Charan Teja Kalla)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1648046642.git.quic_charante@quicinc.com&#34;&gt;https://lkml.kernel.org/r/cover.1648046642.git.quic_charante@quicinc.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;process_madvise()&lt;/code&gt; can partially success, but it doesn&amp;rsquo;t allow users to know
that.  As a result, the user should merely repeat the call until it&amp;rsquo;s perfectly
success.  This commit tries to help the situation.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220323160453.65922ced539cbf445b191555@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220323160453.65922ced539cbf445b191555@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;41 more patches from Andrew Morton for various subsystems except mm have sent
to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-2&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220324180758.96b1ac7e17675d6bc474485e@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220324180758.96b1ac7e17675d6bc474485e@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew sent 114 patches for mm subsystem, which were staged after willystuff in
-next tree.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-multi-gen-lru-for-518-rc1-yu-zhao&#34;&gt;[GIT PULL] Multi-gen LRU for 5.18-rc1 (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220326010003.3155137-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20220326010003.3155137-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yu is directly sending a pull request for multi-gen LRU to Linus.  Wondering if
this will be merged as is, as Linus asks if this has been tested in -next and
-mm, which is not the case.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-03-shmem-allow-userspace-monitoring-of-tmpfs-for-lack-of-space-gabriel-krisman-bertazi&#34;&gt;[PATCH v2 0/3] shmem: Allow userspace monitoring of tmpfs for lack of space. (Gabriel Krisman Bertazi)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220328020443.820797-1-krisman@collabora.com&#34;&gt;https://lkml.kernel.org/r/20220328020443.820797-1-krisman@collabora.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds two sysfs counters for monitoring tmpfs.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-resend-arm64-mm-hugetlb-add-support-for-free-vmemmap-pages-of-hugetlb-muchun-song&#34;&gt;[PATCH v2 RESEND] arm64: mm: hugetlb: add support for free vmemmap pages of HugeTLB (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220329045535.45641-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20220329045535.45641-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes HugeTLB vmemmap pages freeing be supported on arm64.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-migrate-set-demotion-targets-differently-jagdish-gediya&#34;&gt;[PATCH] mm: migrate: set demotion targets differently (Jagdish Gediya)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220329115222.8923-1-jvgediya@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20220329115222.8923-1-jvgediya@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is some limits at sharing demotion targets between multiple nodes for
identifying the demotion targets.  This patch helps the situation.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0048-add-kernelmemorysanitizer-infrastructure-alexander-potapenko&#34;&gt;[PATCH v2 00/48] Add KernelMemorySanitizer infrastructure (Alexander Potapenko)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220329124017.737571-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20220329124017.737571-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a uninitialized memory use error detector infrastructure in
the kernel.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-30-13-01-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-30-13-01 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220330200158.2F031C340EC@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220330200158.2F031C340EC@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm of the second has updated.  It is rebased on v5.17, added 86 new patches,
modified 13 patches, and dropped 445 patches.  In total, 122 patches in the
queue.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-31-20-37-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-31-20-37 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220401033845.8359AC2BBE4@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220401033845.8359AC2BBE4@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm of the moment has updated.  It&amp;rsquo;s based on v5.17, added 58 new patches,
modified 27 existing patches, and dropped 17 patches.  In total, 163 patches in
the queue.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-3&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220401112740.351496714b370467a92207a6@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220401112740.351496714b370467a92207a6@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;16 more patches for mm has sent from Andrew Morton to Linus, and merged in.&lt;/p&gt;
&lt;h2 id=&#34;linux-518-rc1-linus-torvalds&#34;&gt;Linux 5.18-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg6FWL1xjVyHx7DdjD2dHZETA5_=FqqW17Z19X-WTfWSg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg6FWL1xjVyHx7DdjD2dHZETA5_=FqqW17Z19X-WTfWSg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the two weeks, the merge window for v5.18 has closed and the first
release candidate has released.  Diffstat looks very weird due to the AMD&amp;rsquo;s
generated register definitions, but others are faily normal.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.7-rc2..v5.18-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-04-04 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.18-rc1-only.png&#34; alt=&#34;rc1 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17</title>
      <link>/post/lkml_news_v5.17/</link>
      <pubDate>Tue, 15 Mar 2022 07:02:08 +0100</pubDate>
      <guid>/post/lkml_news_v5.17/</guid>
      <description>&lt;h2 id=&#34;mmotm-2022-03-14-22-42-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-14-22-42 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220315054352.5B187C340E8@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220315054352.5B187C340E8@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The -mm tree is updated.  It is rebased on 5.17-rc8, added 20 new patches,
modified 10 patches, and dropped 2 patches.  In total, 475 patches in the
queue.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-better-handling-of-negative-dentries-mattew-wilcox&#34;&gt;[LSF/MM TOPIC] Better handling of negative dentries (Mattew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YjDvRPuxPN0GsxLB@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YjDvRPuxPN0GsxLB@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There could be millions of negative dentries on a system having large memory
and no memory pressure, because the number of negative dentries is constrained
only by memory size.  Because this could results in slow inotify, high memory
usage, and poor lookup performance, Matthew is proposing to discuss about a
solution in the LSF/MM of this year.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-16-17-42-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-16-17-42 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220317004304.95F89C340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220317004304.95F89C340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm tree has updated.  It&amp;rsquo;s based on 5.17-rc8, added 10 new patches, modified 3
patches, and dropped 4 patches.  In toal, 481 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mm-add-accessdirty-bit-on-numa-page-fault-bibo-mao&#34;&gt;[PATCH v2] mm: add access/dirty bit on numa page fault (Bibo Mao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220317065033.2635123-1-maobibo@loongson.cn&#34;&gt;https://lkml.kernel.org/r/20220317065033.2635123-1-maobibo@loongson.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds dirty or access bit for platforms that doesn&amp;rsquo;t support hardware
page table walks.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-linus-torvalds&#34;&gt;Linux 5.17 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj4fFjx2pgbGNBM4wJs3=eReZ05EQyprzgT2Jv8qJ2vJg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj4fFjx2pgbGNBM4wJs3=eReZ05EQyprzgT2Jv8qJ2vJg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The extended one week for 5.17 was very calm, so the Linux v5.17 is out.  This
also means the merge window for v5.18 is open.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6..v5.17.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-03-21 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc8</title>
      <link>/post/lkml_news_v5.17-rc8/</link>
      <pubDate>Mon, 07 Mar 2022 08:27:55 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc8/</guid>
      <description>&lt;h2 id=&#34;mmotm-2022-03-06-20-33-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-06-20-33 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220307043435.251DBC340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220307043435.251DBC340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The -mm tree has updated.  It&amp;rsquo;s based on v5.17-rc6, added 19 patches, modified
6 patches, and dropped 19 patches.  In totla, 428 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-mm-add-ztree---new-allocator-for-use-via-zpool-api-ananda&#34;&gt;[PATCH v3] mm: add ztree - new allocator for use via zpool API (Ananda)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220307142724.14519-1-a.badmaev@clicknet.pro&#34;&gt;https://lkml.kernel.org/r/20220307142724.14519-1-a.badmaev@clicknet.pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third version of ztree, which is intended to be used for storing compressed
objects per ztree block.  Comparing to the previous version, compiler warnings
have fixed.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-bof-idea-cxl-bof-discussion-ira-weiny&#34;&gt;[LSF/MM/BPF BOF idea] CXL BOF discussion (Ira Weiny)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YiZ0Jmhyf515EJzD@iweiny-desk3&#34;&gt;https://lkml.kernel.org/r/YiZ0Jmhyf515EJzD@iweiny-desk3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ira is proposing a BPF for CXL.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0014-mm-userspace-hugepage-collapse-zach-okeefe&#34;&gt;[RFC PATCH 00/14] mm: userspace hugepage collapse (Zach O&amp;rsquo;Keefe)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220308213417.1407042-1-zokeefe@google.com&#34;&gt;https://lkml.kernel.org/r/20220308213417.1407042-1-zokeefe@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patchset introduces a mechanism for user space to induce a turanparent
hugepages collapses, for more flexible THP usages.  Both &lt;code&gt;process_madivse()&lt;/code&gt;
and &lt;code&gt;madvise()&lt;/code&gt; are used.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-0014-multi-gen-lru-framework-yu-zhao&#34;&gt;[PATCH v9 00/14] Multi-Gen LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220309021230.721028-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20220309021230.721028-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A new revision of MGLRU patchset.  It removed &lt;code&gt;CONFIG_NR_LRU_GENS&lt;/code&gt; and
&lt;code&gt;CONFIG_TIERS_PER_GEN&lt;/code&gt; configs compared to the last version.&lt;/p&gt;
&lt;h2 id=&#34;rfc-free-up-a-page-flag-matthew-wilcox&#34;&gt;[RFC] Free up a page flag (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YikTHqjv4S6ZQ3Fv@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YikTHqjv4S6ZQ3Fv@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patch frees up a page flag for others to use.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-10-21-38-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-10-21-38 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220311053937.E9658C340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220311053937.E9658C340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew updated mmotm and pushed.  Compared to the last update, it has rebased
on 5.17-rc7, added 34 new patches, modified 111 patches, and dropped 5 patches.
In total, 457 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc8-linus-torvalds&#34;&gt;Linux 5.17-rc8 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiHa0vsZseZES=1T0rJ4Z_bC5cwHMUJfqFL9hVpvB283g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiHa0vsZseZES=1T0rJ4Z_bC5cwHMUJfqFL9hVpvB283g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike the expectation, Linus Torvalds has released another release candidate.
This is the fourth -rc8 since v5.9-rc8, which was released at 2020-10-04.  This
was due to the embargoed patches for spectre variants, which has not tested
widely enough with variable automation tests which might have untested
combinations.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc7..v5.17-rc8.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-03-14 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc7 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc8-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc7</title>
      <link>/post/lkml_news_v5.17-rc7/</link>
      <pubDate>Tue, 01 Mar 2022 07:11:16 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc7/</guid>
      <description>&lt;h2 id=&#34;patchresend-mm-add-ztree---new-allocator-for-use-via-zpool-api-ananda&#34;&gt;[PATCH/RESEND] mm: add ztree - new allocator for use via zpool API (Ananda)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220228110546.151513-1-a.badmaev@clicknet.pro&#34;&gt;https://lkml.kernel.org/r/20220228110546.151513-1-a.badmaev@clicknet.pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ztree is another zpool backend that superior with regard to the worst execution
time.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-28-14-45-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-28-14-45 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220228224600.44415C340EE@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220228224600.44415C340EE@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm has updated.  It&amp;rsquo;s rebased on 5.17-rc6, added 56 new patches, modified 85
patches, and dropped 55 patches.  In total, 378 patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch--v14-03-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V14 0/3] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220301085329.3210428-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20220301085329.3210428-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 14th version of the AutoNUMA improvement patch for tiered memory system has
posted.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-potential-silent-data-loss-caused-by-hwpoisoned-page-cache-yang-shi&#34;&gt;[LSF/MM/BPF TOPIC] Potential silent data loss caused by hwpoisoned page cache (Yang Shi)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHbLzkp0PomtRoSmdv=waWTHtVUPZvTBGt1v7ynirGyw4iPFQw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHbLzkp0PomtRoSmdv=waWTHtVUPZvTBGt1v7ynirGyw4iPFQw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yang Shi introduces the potential silent data loss due to the page cache THP
split patch and how to solve the issue.  He is preparing patches and suggests
to discuss in LSF/MM/BPF of this week.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-02-16-53-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-02-16-53 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220303005351.D6F91C004E1@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220303005351.D6F91C004E1@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mmotm tree has updated.  It&amp;rsquo;s based on 5.17-rc6, added 44 patches, modified
64 patches, and dropped no patch.  In total, 418 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-madvise-madv_dontneed_locked-johannes-weiner&#34;&gt;[PATCH] mm: madvise: MADV_DONTNEED_LOCKED (Johannes Weiner)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220303212956.229409-1-hannes@cmpxchg.org&#34;&gt;https://lkml.kernel.org/r/20220303212956.229409-1-hannes@cmpxchg.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;MADV_DONTNEED&lt;/code&gt; doesn&amp;rsquo;t work for &lt;code&gt;mlock()&lt;/code&gt;-ed ranges, and working it
around by explicitly calling &lt;code&gt;munlock()&lt;/code&gt; before &lt;code&gt;madvise()&lt;/code&gt; needs unnecessary
syscalls and vma locks, this patch adds another &lt;code&gt;madvise()&lt;/code&gt; flag for the case.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-changes-in-rcu-over-the-past-few-years-paul-e-mckenney&#34;&gt;[LSF/MM/BPF TOPIC] Changes in RCU over the past few years (Paul E. McKenney)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220304035116.GA8858@paulmck-ThinkPad-P17-Gen-1&#34;&gt;https://lkml.kernel.org/r/20220304035116.GA8858@paulmck-ThinkPad-P17-Gen-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul E. McKenney is proposing to have a time for quickly introducing the RCU
changes that made in past few years and discuss about its usage and possible
future changes in LSF/MM/BPF of this year.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-03-03-21-24-uploaded-andrew-morton&#34;&gt;mmotm 2022-03-03-21-24 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220304052444.C157EC340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220304052444.C157EC340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Morton updated -mm tree.  It&amp;rsquo;s based on v5.17-rc6, added 11 new patches,
modified 9 patches, and dropped 6 patches.  In total, 428 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220304202822.d47f8084928321c83070d7d7@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220304202822.d47f8084928321c83070d7d7@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew sent 8 fixes to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mechanism-to-induce-memory-reclaim-david-rientjes&#34;&gt;[RFC] Mechanism to induce memory reclaim (David Rientjes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/5df21376-7dd1-bf81-8414-32a73cea45dd@google.com&#34;&gt;https://lkml.kernel.org/r/5df21376-7dd1-bf81-8414-32a73cea45dd@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Rientjes is proposing a memcg based memory reclaim induce mechanism,
which could be used for various underlying reclaim mechanism, for proactive
reclamation.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc7-linus-torvalds&#34;&gt;Linux 5.17-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjkkYX8OvTv60+XvQkAK4Pg0QC0Hn-4+n7Q0t1+QWw7Sw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjkkYX8OvTv60+XvQkAK4Pg0QC0Hn-4+n7Q0t1+QWw7Sw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The release candidate that assumed to be the last one before Linux v5.17 is
out.  Everything looks normal, so v5.17 would be released in the next week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc6..v5.17-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-03-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc7 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc6</title>
      <link>/post/lkml_news_v5.17-rc6/</link>
      <pubDate>Tue, 22 Feb 2022 07:25:14 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc6/</guid>
      <description>&lt;h2 id=&#34;patch--v13-03-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V13 0/3] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220221084529.1052339-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20220221084529.1052339-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The AutoNUMA patchset for tiered memory system has revised again.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-page-table-reclaim-david-hildenbrand&#34;&gt;[LSF/MM/BPF TOPIC] page table reclaim (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/7b908208-02f8-6fde-4dfc-13d5e00310a6@redhat.com&#34;&gt;https://lkml.kernel.org/r/7b908208-02f8-6fde-4dfc-13d5e00310a6@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some workloads allocates a lot of page tables.  As page tables are unmovable
and unreclaimable, this can contribute to memory pressure.  David is proposing
making it reclaimable and suggesting discussion in LSF/MM/BPF summit for the
idea.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0047-address-space-isolation-for-kvm-junaid-shahid&#34;&gt;[RFC PATCH 00/47] Address Space Isolation for KVM (Junaid Shahid)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220223052223.1202152-1-junaids@google.com&#34;&gt;https://lkml.kernel.org/r/20220223052223.1202152-1-junaids@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch presents the idea and possible implementation of address space
isolation, which is a comprehensive security mitigation for several types of
speculative execution attacks.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-23-21-20-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-23-21-20 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220224052137.BFB10C340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220224052137.BFB10C340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm updated.  It&amp;rsquo;s rebased on 5.17-rc5, added 109 new patches, modified 87
patches, and dropped 66 patches.  In total, 386 patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220225191021.f71538a3f43dc448110e88b6@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220225191021.f71538a3f43dc448110e88b6@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew sent 12 patches to Linus Torvads for more fixes.&lt;/p&gt;
&lt;h2 id=&#34;reminder-lsfmmbpf-2022-call-for-proposals-josef-bacik&#34;&gt;[REMINDER] LSF/MM/BPF: 2022: Call for Proposals (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YherWymi1E/hP/sS@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/YherWymi1E/hP/sS@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A reminder including a few updates on COVID related restrictions and virtual
components for the LSF/MM/BPF of this year.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-24-22-38-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-24-22-38 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220225063927.29B1CC340E7@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220225063927.29B1CC340E7@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm has updsated.  It adds 4 more patches, modifies 8 patches, and drops 12
patches.  378 patches in total.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc6-linus-torvalds&#34;&gt;Linux 5.17-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjWKEQUG2Z5a=2FGUfO5+choQ0jhszqyDmHfZoTXVJYJQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjWKEQUG2Z5a=2FGUfO5+choQ0jhszqyDmHfZoTXVJYJQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linus released the sixth candidate for Linux 5.17.  He notes that the last week
wasn&amp;rsquo;t normal, due to the Putin&amp;rsquo;s meantal breakdown.  But, it didn&amp;rsquo;t affected
kernel much, so the things continue to look normal.  However, some regressions
which reported right after rc1 is still not fixed.  Torvalds is asking the
subsystem maintainers to make priority.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc5..v5.17-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-02-28 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc5</title>
      <link>/post/lkml_news_v5.17-rc5/</link>
      <pubDate>Tue, 15 Feb 2022 07:06:23 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v3-03-add-hugetlb-madv_dontneed-support-mike-kravetz&#34;&gt;[PATCH v3 0/3] Add hugetlb MADV_DONTNEED support (Mike Kravetz)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220215002348.128823-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20220215002348.128823-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MADV_DONTNEED&lt;/code&gt; can be used for hugetlb but currently prohibits it with a
simple check.  This commit removes the check to enable &lt;code&gt;MADV_DONENEED&lt;/code&gt; for
hugetlb.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-14-17-46-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-14-17-46 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220215014633.9CD9CC340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220215014633.9CD9CC340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm has updated.  It&amp;rsquo;s rebased on 5.17-rc4, added 20 new patches, modified
295 patches, and dropped 10 patches.  In total, 316 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-0071-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH v6 00/71] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220215143728.3810954-1-Liam.Howlett@oracle.com&#34;&gt;https://lkml.kernel.org/r/20220215143728.3810954-1-Liam.Howlett@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth version of the maple tree patchset, which aims to be used as a scalable
alternative of rbtree for vmas management, has posted.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-15-20-22-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-15-20-22 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220216042246.DD4D0C004E1@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220216042246.DD4D0C004E1@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm tree has updated.  It added 28 patches, modified 19 patches, and dropped 1
patch.  In total, 343 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;maple-tree-for-next-liam-howlett&#34;&gt;Maple Tree for next (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220216191446.pubrv6x3vo3ip7rr@revolver&#34;&gt;https://lkml.kernel.org/r/20220216191446.pubrv6x3vo3ip7rr@revolver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Liam is asking Stephen to include his Maple Tree work tree in the -next tree.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v1-05-mmdamon-add-numa-access-statistics-function-support-xin-hao&#34;&gt;[RFC PATCH V1 0/5] mm/damon: Add NUMA access statistics function support (Xin Hao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1645024354.git.xhao@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/cover.1645024354.git.xhao@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patchset makes DAMON to use &lt;code&gt;PROT_NONE&lt;/code&gt; and page faults mechanism for
monitoring NUMA-local/remote accesses.  Seems it needs more change, though.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-04-introduce-damon-sysfs-interface-seongjae-park&#34;&gt;[RFC PATCH 0/4] Introduce DAMON sysfs interface (SeongJae Park)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220217161938.8874-1-sj@kernel.org&#34;&gt;https://lkml.kernel.org/r/20220217161938.8874-1-sj@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patchset introduces a reliable and flexible new user interface of
DAMON, which is based on sysfs.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc5&#34;&gt;Linux 5.17-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgsMMuMP9_dWps7f25e6G628Hf7-B3hvSDvjhRXqVQvpg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgsMMuMP9_dWps7f25e6G628Hf7-B3hvSDvjhRXqVQvpg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normal progress is continued until the fifth release candidate of Linux 5.17 is
out.  Intel iwlwifi has some changes, but it&amp;rsquo;s only for removal of its
broadcast feature which doesn&amp;rsquo;t work anyway with its new firmware.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc4..v5.17-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-02-21 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc4</title>
      <link>/post/lkml_news_v5.17-rc4/</link>
      <pubDate>Tue, 08 Feb 2022 07:23:14 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-v2-12-arm64-avoid-flushing-icache-multiple-times-on-contiguous-hugetlb-muchun-song&#34;&gt;[PATCH v2 1/2] arm64: avoid flushing icache multiple times on contiguous HugeTLB (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220208054632.66534-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20220208054632.66534-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When a contiguous HugeTLB page is mapped, &lt;code&gt;set_pte_at()&lt;/code&gt; is called &lt;code&gt;CONT_PTES / CONT_PMDS&lt;/code&gt; times.  Because the first flushing covers subsequent flushes, this
is unnecessary overhead, so this patchset avoids it.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-0012-multigenerational-lru-framework-yu-zhao&#34;&gt;[PATCH v7 00/12] Multigenerational LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220208081902.3550911-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20220208081902.3550911-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seventh version of the MGLRU patchset, which aims to reduce performance
overhead and improve eviction target pages selection of reclamation logic is
posted.  Change from the last version is addressing the comments from
stakeholders to the last version and measuring performance for each patch.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-08-15-31-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-08-15-31 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220208233156.E2CA6C004E1@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220208233156.E2CA6C004E1@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM tree has uploaded. It&amp;rsquo;s rebased on 5.17-rc3, added 49 new patches,
modified 26 existing patches, and dropped 11 patches.  In total, 280 patches in
the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-05-sparse-vmemmap-memory-savings-for-compound-devmaps-device-dax-joao-martins&#34;&gt;[PATCH v5 0/5] sparse-vmemmap: memory savings for compound devmaps (device-dax) (Joao Martins)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220210193345.23628-1-joao.m.martins@oracle.com&#34;&gt;https://lkml.kernel.org/r/20220210193345.23628-1-joao.m.martins@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset minimizes memory overhead of &lt;code&gt;struct page&lt;/code&gt; objects by pursuing a
similar apporach as Muchun Song does for hugetlb pages.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-11-15-07-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-11-15-07 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220211230819.191B1C340E9@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220211230819.191B1C340E9@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm tree is updated.  It&amp;rsquo;s still based on 5.17-rc3, added 29 patches, modified
276 patches, and dropped 3 patches.  In total, 306 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc4-linus-torvalds&#34;&gt;Linux 5.17-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgpOhU0cU+KZHA86OsoN2BxqT4ZoTMYHDMuzbiiiKK1Eg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgpOhU0cU+KZHA86OsoN2BxqT4ZoTMYHDMuzbiiiKK1Eg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fourth release candidate of v5.17 is out.  All the things including
diffstat and number of commits looks pretty much average for this cycle.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc3..v5.17-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-02-14 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc3</title>
      <link>/post/lkml_news_v5.17-rc3/</link>
      <pubDate>Tue, 01 Feb 2022 07:26:46 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-selftests-kselftest-framework-provide-finished-helper-kees-cook&#34;&gt;[PATCH] selftests: kselftest framework: Provide &amp;ldquo;finished&amp;rdquo; helper (Kees Cook)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220201013717.2464392-1-keescook@chromium.org&#34;&gt;https://lkml.kernel.org/r/20220201013717.2464392-1-keescook@chromium.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Users who want to use &lt;code&gt;ksft_exit()&lt;/code&gt; need to figure out the internals of
kselftest.  This commit adds a helper function for that purpose, namely,
&lt;code&gt;ksft_finished()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-handling-of-vmas-liam-howlett&#34;&gt;[LSF/MM/BPF TOPIC] Handling of VMAs (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220201150521.owa5axfsmpdvc7uo@revolver&#34;&gt;https://lkml.kernel.org/r/20220201150521.owa5axfsmpdvc7uo@revolver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Liam is pointing out the VMAs are quite complicately managed with their cache,
tree, linked list, and even reverse mapping.  As it now shows its limit with
the lock contention and complexity of the handling code, he wants to propose a
simpler new way for their management.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-the-maple-tree-liam-howlett&#34;&gt;[LSF/MM/BPF TOPIC] The Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220201150633.jtlwrqfnh4xbhw2f@revolver&#34;&gt;https://lkml.kernel.org/r/20220201150633.jtlwrqfnh4xbhw2f@revolver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maple tree is a RCU-safe range-based B-tree, which is designed to be used for
better VMAs management.  He proposes to discuss about how it could be used for
many complicated scenarios.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-mm-documentation-mike-rapoport&#34;&gt;[LSF/MM/BPF TOPIC] mm documentation (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YfmD9Pa92xousy5b@kernel.org&#34;&gt;https://lkml.kernel.org/r/YfmD9Pa92xousy5b@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mike Rapoport proposes to discuss how we can improve the mm documentation,
which is not so up to date for now.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-consolidating-representations-of-the-physical-memory-mike-rapoport&#34;&gt;[LSF/MM/BPF TOPIC] Consolidating representations of the physical memory (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YfmEtd3vg/x7uqXx@kernel.org&#34;&gt;https://lkml.kernel.org/r/YfmEtd3vg/x7uqXx@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently, the physical memory is represented using multiple structures
including &lt;code&gt;memblock&lt;/code&gt;, &lt;code&gt;iomem_resource&lt;/code&gt;, &amp;lsquo;System Ram&amp;rsquo;, per-architecture
structures.  As this makes code inconsistent and complex, Mike is proposing to
use single abstraction having [start, end, flags], namely memblock.  He is
proposing to discuss about this further in LSF/MM/BPF.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-amortising-direct-map-fragmentation-mike-rapoport&#34;&gt;[LSF/MM/BPF TOPIC] Amortising direct map fragmentation (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YfmFMvNu9oNGryjv@kernel.org&#34;&gt;https://lkml.kernel.org/r/YfmFMvNu9oNGryjv@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Direct map fragmentation, which causes split of the PUD and PMD-sized mappings
in the direct map can lead to performance degradation.  Mike proposes to
discuss about how we can improve the situation in LSM/MM/BPF.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-01-16-04-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-01-16-04 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220202000522.A3834C340EB@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220202000522.A3834C340EB@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew updated the mmotm.  It&amp;rsquo;s rebased on 5.17-rc2, added 78 new patches,
modified 25 existing patches, and dropped 16 patches.  In total, 226 patches in
the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmdamon-add-option-to-monitor-only-writes-pedro-demarchi-gomes&#34;&gt;[PATCH] mm/damon: Add option to monitor only writes (Pedro Demarchi Gomes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220203131237.298090-1-pedrodemargomes@gmail.com&#34;&gt;https://lkml.kernel.org/r/20220203131237.298090-1-pedrodemargomes@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pedro is proposing write-only monitoring for DAMON.  It&amp;rsquo;s using soft-dirty bits
on virtual address space monitoring primitive.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-02-03-21-58-uploaded-andrew-morton&#34;&gt;mmotm 2022-02-03-21-58 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220204055842.0D8D0C004E1@smtp.kernel.org&#34;&gt;https://lkml.kernel.org/r/20220204055842.0D8D0C004E1@smtp.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew updated the mmotm.  It&amp;rsquo;s still based on 5.17-rc2.  This time, it added
20 new patches, modified 50 existing patches, and dropped 4 patches.  In total,
242 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc3-linus-torvalds&#34;&gt;Linux 5.17-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiKr3q0ABWL0me+ugjN87zBOFXnBi43=-rBu7+WDKwQVA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiKr3q0ABWL0me+ugjN87zBOFXnBi43=-rBu7+WDKwQVA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third candidate for v5.17 release has out with normal shape.  Filesystem
might have unusual diff stat, but it&amp;rsquo;s not due to single one problematic part.
Changes for drivers are still dominating the stat, though.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc2..v5.17-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-02-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc2</title>
      <link>/post/lkml_news_v5.17-rc2/</link>
      <pubDate>Tue, 25 Jan 2022 07:32:08 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-07-allocate-module-text-and-data-separately-christophe-leroy&#34;&gt;[PATCH 0/7] Allocate module text and data separately (Christophe Leroy)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1643015752.git.christophe.leroy@csgroup.eu&#34;&gt;https://lkml.kernel.org/r/cover.1643015752.git.christophe.leroy@csgroup.eu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Powerpc book3s/32 can set execute permission in 256 MiB segments granularity
instead of page granularity.  This patchset therefore allow module data be
allocated in vmalloc rea instead of module area.&lt;/p&gt;
&lt;h2 id=&#34;patch-04-mmmemcg-address-preempt_rt-problems-instead-of-disabling-it-sebastian-adrzej-siewior&#34;&gt;[PATCH 0/4] mm/memcg: Address PREEMPT_RT problems instead of disabling it. (Sebastian Adrzej Siewior)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220125164337.2071854-1-bigeasy@linutronix.de&#34;&gt;https://lkml.kernel.org/r/20220125164337.2071854-1-bigeasy@linutronix.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset enables &lt;code&gt;MEMCG&lt;/code&gt; for &lt;code&gt;PREEMPT_RT&lt;/code&gt; instead of disabling it.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-folios-matthew-wilcox&#34;&gt;[LSF/MM/BPF TOPIC] Folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YfGxPKBRdR8FKDcv@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YfGxPKBRdR8FKDcv@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew Wilcox is proposing LSF/MM/BPF topic on Folios, for filesystem point of
view and mm crowd.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2022-01-26-21-04-uploaded-andrew-morton&#34;&gt;mmotm 2022-01-26-21-04 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220127050456.M1eh-ltbc%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220127050456.M1eh-ltbc%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm tree has updated.  Compared to the previous snapshot, it&amp;rsquo;s rebased on
5.17-rc1, adds 117 new patches, modifies 20 existing patches, and drops 313
patches.  In total, 164 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-0016-introduce-memblock-simulator-karolina-drobnik&#34;&gt;[PATCH 00/16] Introduce memblock simulator (Karolina Drobnik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1643206612.git.karolinadrobnik@gmail.com&#34;&gt;https://lkml.kernel.org/r/cover.1643206612.git.karolinadrobnik@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Memblock, which is a boot time memory allocator, is not easy to test and debug
because it&amp;rsquo;s used in the boot time only.  For testing and debugging more
easily, this patchset adds memblock simulator as a tool.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-2022-call-for-proposals-josef-bacik&#34;&gt;LSF/MM/BPF: 2022: Call for Proposals (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/all/YfGnDRM%2FPe4jzbSr@localhost.localdomain/&#34;&gt;https://lore.kernel.org/all/YfGnDRM%2FPe4jzbSr@localhost.localdomain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSF/MM/BPF, which has canceled for last 2 years, is trying again to be held
this year, from 2022-05-02 to 2022-05-04 at the Palm Springs, California.  The
invitation request should be submitted by 2022-03-01.&lt;/p&gt;
&lt;h2 id=&#34;patch--v11-03-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V11 0/3] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220128082751.593478-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20220128082751.593478-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset optimizes memory management on DRAM/PMEM tiered memory system.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0035-speculative-page-faults-michel-lespinasse&#34;&gt;[PATCH v2 00/35] Speculative page faults (Michel Lespinasse)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220128131006.67712-1-michel@lespinasse.org&#34;&gt;https://lkml.kernel.org/r/20220128131006.67712-1-michel@lespinasse.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another version of speculative page faults patchset, which aims to improve the
multi-core scalability of vma management.  The author says this revision is
simpler and more bisectable approach.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220128181341.2103de95948608a65958ae40@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220128181341.2103de95948608a65958ae40@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12 patches for fixing mm are sent from Andrew Morton to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-03-mmpage_owner-extend-page_owner-to-show-memcg-information-waiman-long&#34;&gt;[PATCH v2 0/3] mm/page_owner: Extend page_owner to show memcg information (Waiman Long)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220129205315.478628-1-longman@redhat.com&#34;&gt;https://lkml.kernel.org/r/20220129205315.478628-1-longman@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Waiman found severe memory consumption due to offlined &lt;code&gt;mem_cgroup&lt;/code&gt; structures
on systems having huge number of containers.  To ease the investigation, this
patch extends the &lt;code&gt;page_owner&lt;/code&gt; debugging tool to show memch information.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc2-linus-torvalds&#34;&gt;Linux 5.17-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg4NYVVC58vBAD6Hd6MFfY4AG-aAUHtBCYQBcsKz+4XOg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg4NYVVC58vBAD6Hd6MFfY4AG-aAUHtBCYQBcsKz+4XOg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second release candidate for v5.17 is out.  The stat looks a little bit
different than usual due to late NFS client merge.  But, other parts look ok.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc2..v5.17-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-11-23 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.17-rc1</title>
      <link>/post/lkml_news_v5.17-rc1/</link>
      <pubDate>Tue, 11 Jan 2022 07:08:23 +0100</pubDate>
      <guid>/post/lkml_news_v5.17-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-03-usable-memory-range-fixes-arm64fdtefi-frank-van-der-linden&#34;&gt;[PATCH 0/3] usable memory range fixes (arm64/fdt/efi) (Frank van der Linden)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220110210809.3528-1-fllinden@amazon.com&#34;&gt;https://lkml.kernel.org/r/20220110210809.3528-1-fllinden@amazon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset fixes the usable memory range behavior when both DT and EFI are
given.&lt;/p&gt;
&lt;h2 id=&#34;patchv2-07-implement-support-for-unaccepted-memory-kirill-a-shutemov&#34;&gt;[PATCHv2 0/7] Implement support for unaccepted memory (Kirill A. Shutemov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220111113314.27173-1-kirill.shutemov@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/20220111113314.27173-1-kirill.shutemov@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UEFI spec 2.9 introduces a concept of memory acceptance.  It requires virtual
machine platforms such as Intel TDX or AMD SEV-SNP to &lt;em&gt;accept&lt;/em&gt; memory before
use it.  This patchset makes Linux kernel to support it, and therefore be able
to reduce VM booting time by optimizing the acceptance.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-powerpcfadump-handle-cma-activation-failure-appropriately-hari-bathini&#34;&gt;[PATCH v2 0/2] powerpc/fadump: handle CMA activation failure appropriately (Hari Bathini)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220112193340.149020-1-hbathini@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20220112193340.149020-1-hbathini@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CMA based memory reservation for fadump doesn&amp;rsquo;t aware CMA activation failures.
This patch makes it to aware the failure and handle it appropriately.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-03-add-hugetlb-madv_dontneed-support-mike-kravetz&#34;&gt;[RFC PATCH 0/3] Add hugetlb MADV_DONTNEED support (Mike Kravetz)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220113180308.15610-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20220113180308.15610-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hugetlbfs does not support &lt;code&gt;MADV_DONTNEED&lt;/code&gt; for now, but it&amp;rsquo;s not really so hard
to make it support the hint.  This patch enables the support.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v2-05-user-managed-concurrency-groups-peter-oskolkov&#34;&gt;[RFC PATCH v2 0/5] User Managed Concurrency Groups (Peter Oskolkov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220113233940.3608440-1-posk@google.com&#34;&gt;https://lkml.kernel.org/r/20220113233940.3608440-1-posk@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset is an updated version of the user-managed concurrency group,
which adds two patches from Peter Zijlstra.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220114140222.6b14f0061194d3200000c52d@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220114140222.6b14f0061194d3200000c52d@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew sends 146 patches for v5.17 mm subsystem to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;patch-0012-enabling-large-folios-for-517-matthew-wilcox&#34;&gt;[PATCH 00/12] Enabling large folios for 5.17 (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220116121822.1727633-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20220116121822.1727633-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset enables large folios on THP enabled machine when XFS is used.
More specifically, it makes readaheads to use large folios.  This is not for
v5.17, though.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-slab-for-517---part-2-vlastimil-babka&#34;&gt;[GIT PULL] slab for 5.17 - part 2 (Vlastimil Babka)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/06e9cd6c-320c-af1a-ef12-55e2e8c13f17@suse.cz&#34;&gt;https://lkml.kernel.org/r/06e9cd6c-320c-af1a-ef12-55e2e8c13f17@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second pull request for remaining slab patches in the development tree.
Specifically, this pull request finish the conversion to &lt;code&gt;struct slab&lt;/code&gt; by
removing slab-specific fields from &lt;code&gt;struct page&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rfc-plan-some-humble-ideas-for-damon-future-works-seongjae-park&#34;&gt;[RFC PLAN] Some humble ideas for DAMON future works (SeongJae Park)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220119133110.24901-1-sj@kernel.org&#34;&gt;https://lkml.kernel.org/r/20220119133110.24901-1-sj@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A roadmap of DAMON work has shared.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220119180714.9e187ce100e4510de3cd9f7d@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220119180714.9e187ce100e4510de3cd9f7d@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second pull request for mm/ from Andrew Morton to Linus Torvalds has sent.&lt;/p&gt;
&lt;h2 id=&#34;rfcpatch-v2-05-sched-user-managed-concurrency-groups-peter-zijlstra&#34;&gt;[RFC][PATCH v2 0/5] sched: User Managed Concurrency Groups (Peter Zijlstra)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220120155517.066795336@infradead.org&#34;&gt;https://lkml.kernel.org/r/20220120155517.066795336@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another update on the RFC stage patchset for user-managed concurrency groups.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-2&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220121221021.60533b009c357d660791476e@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20220121221021.60533b009c357d660791476e@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yet another pull request for post-linux-next patches (69 in total) are sent
from Andrew Morton to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;linux-517-rc1-linus-torvalds&#34;&gt;Linux 5.17-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whUYZvNVtNc4Xftd8aDpZzuwswBtHG4fCYQ2AC3twh_5Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whUYZvNVtNc4Xftd8aDpZzuwswBtHG4fCYQ2AC3twh_5Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A couple of hors earlier than usual, the rc1 for 5.17 has released.  It&amp;rsquo;s not a
huge release.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.6-rc1..v5.17-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-01-24 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.17-rc1-only.png&#34; alt=&#34;rc1 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16</title>
      <link>/post/lkml_news_v5.16/</link>
      <pubDate>Tue, 04 Jan 2022 07:09:18 +0100</pubDate>
      <guid>/post/lkml_news_v5.16/</guid>
      <description>&lt;h2 id=&#34;patch-v4-0032-separate-struct-slab-from-struct-page-vlastimil-babka&#34;&gt;[PATCH v4 00/32] Separate struct slab from struct page (Vlastimil Babka)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220104001046.12263-1-vbabka@suse.cz&#34;&gt;https://lkml.kernel.org/r/20220104001046.12263-1-vbabka@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The work for seperating &lt;code&gt;struct slab&lt;/code&gt; from &lt;code&gt;struct page&lt;/code&gt; for making the &lt;code&gt;struct page&lt;/code&gt; simpler is updated to fourth version.  As the patchset was in -next tree
for a while, Vlastimil would sent a pull request of this to Linus.&lt;/p&gt;
&lt;h2 id=&#34;patch-00002297-announce-rfc-fast-kernel-headers-tree--v1-eliminate-the-linux-kernels-dependency-hell-ingo-molnar&#34;&gt;[PATCH 0000/2297] [ANNOUNCE, RFC] &amp;ldquo;Fast Kernel Headers&amp;rdquo; Tree -v1: Eliminate the Linux kernel&amp;rsquo;s &amp;ldquo;Dependency Hell&amp;rdquo; (Ingo Molnar)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YdIfz+LMewetSaEB@gmail.com&#34;&gt;https://lkml.kernel.org/r/YdIfz+LMewetSaEB@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ingo Molnar posted 2297 patches for making kernel build faster, by cleaning up
the header files dependency.  It achieves great build time optimization, though
the number of patches is somewhat making people wonder if it would be merged as
is.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-09-multigenerational-lru-framework-yu-zhao&#34;&gt;[PATCH v6 0/9] Multigenerational LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20220104202227.2903605-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20220104202227.2903605-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sixth version of the MGLRU patchset.  There&amp;rsquo;s no summary on changes from
fifth version of the patchset, but seems the code is almost same but having
more benchmark results.  Yu asks Linus and Andrew if this can be considered to
be merged in v5.17 based on the benchmark results.  Linus simply says he will
leave this to Andrew.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmmigration-add-trace-events-for-thp-migrations-anshuman-khandual&#34;&gt;[PATCH] mm/migration: Add trace events for THP migrations (Anshuman Khandual)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1641531575-28524-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1641531575-28524-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds two trace events for PMD-based THP migration without split.
More specifically, it makes &lt;code&gt;set_pmd_migration_entry()&lt;/code&gt; and
&lt;code&gt;remove_migration_pmd()&lt;/code&gt; to trigger the tracepoints.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-slab-for-517-vlastimil-babka&#34;&gt;[GIT PULL] slab for 5.17 (Vlastimil Babka)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/fa6573eb-9d5c-ef49-06b1-157c16efb868@suse.cz&#34;&gt;https://lkml.kernel.org/r/fa6573eb-9d5c-ef49-06b1-157c16efb868@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vlastimil has sent pull request of slab changes for v5.17 to Linus Torvalds.
The changes include the separation of &lt;code&gt;struct slab&lt;/code&gt; from &lt;code&gt;struct page&lt;/code&gt;.  This
makes &lt;code&gt;struct page&lt;/code&gt; simpler and &lt;code&gt;struct slab&lt;/code&gt; be easily changed in future.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-linus-torvalds&#34;&gt;Linux 5.16 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgUkBrUVhjixy4wvrUhPbW-DTgtQubJWVOoLW=O0wRKMA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgUkBrUVhjixy4wvrUhPbW-DTgtQubJWVOoLW=O0wRKMA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The v5.16 Linux kernel has released, as expected.  No many changes since the
v5.16-rc8, as the extra week was only due to the holidays.  This also means the
merge window for v5.17 is opening.  Linus will have travel during the window,
so he hopes many early pull requests, and doesn&amp;rsquo;t feel good to do the work on
road with his laptop, as he wants to do more local build testing.  That said,
he also believes the automated test works well.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc7..v5.16.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-01-10 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc8</title>
      <link>/post/lkml_news_v5.16-rc8/</link>
      <pubDate>Wed, 29 Dec 2021 07:36:53 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc8/</guid>
      <description>&lt;h2 id=&#34;rfc-v2-mm-introduce-page-pin-owner-minchan-kim&#34;&gt;[RFC v2] mm: introduce page pin owner (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211228175904.3739751-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20211228175904.3739751-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second version of the RFC for page pinning owner feature, which can be useful
for tracking down who pins which page and therefore why contiguous pages
allocation or migration fails.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-12-29-20-07-uploaded-andrew-morton&#34;&gt;mmotm 2021-12-29-20-07 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211230040740.SbquJAFf5%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211230040740.SbquJAFf5%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MM of the moment has updated.  It&amp;rsquo;s rebased on v5.16-rc7, adds 32 new patches
to the queue, drops 11 patches from the queue, and modifies 100 existing
patches.  In total, 360 patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211230201202.d9bcb24678cc3d9d503579a0@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211230201202.d9bcb24678cc3d9d503579a0@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two more mm fixes have pull-requested to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc8-linus-torvalds&#34;&gt;Linux 5.16-rc8 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg=3dEpPGhz8YvJUDWhFW_GUeASBGmqyw3aPQRfB3ki9w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg=3dEpPGhz8YvJUDWhFW_GUeASBGmqyw3aPQRfB3ki9w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As expected, unusual rc8 has made for 5.16.  And also as expected, this is a
quite tiny rc.  Torvalds will release 5.16 next week.  He also encourages
subsystem maintainers to send pull request early if possible, because he will
have a travel during the next merge window.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc6..v5.16-rc8.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-01-03 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc8 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc8-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc7</title>
      <link>/post/lkml_news_v5.16-rc7/</link>
      <pubDate>Tue, 21 Dec 2021 09:01:07 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v5-0016-optimize-list-lru-memory-consumption-muchun-song&#34;&gt;[PATCH v5 00/16] Optimize list lru memory consumption (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211220085649.8196-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20211220085649.8196-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fifth version of the patchset for reducing lru memory consumption.  This
version fixes a sleep-in-atomic-context bug which is reported by the kernel
test robot, applies some requests from Johannes, and collect Acked-by from
Johannes.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-add-a-new-scheme-to-support-demotion-on-tiered-memory-system-baolin-wang&#34;&gt;[PATCH 0/2] Add a new scheme to support demotion on tiered memory system (Baolin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1640077468.git.baolin.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/cover.1640077468.git.baolin.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes DAMOS supports demotion of memory regions.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-12-22-19-02-uploaded-andrew-morton&#34;&gt;mmotm 2021-12-22-19-02 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211223030245.4khVQJi6f%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211223030245.4khVQJi6f%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm based on v5.16-rc6 has updated.  It adds 44 new patches, modifies 11
pre-existing patches, and drops one patch.  In total, 339 patches are in the
queue.&lt;/p&gt;
&lt;h2 id=&#34;remove-xen-tmem-leftovers-christoph-hellwig&#34;&gt;remove Xen tmem leftovers (Christoph Hellwig)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211224062246.1258487-1-hch@lst.de&#34;&gt;https://lkml.kernel.org/r/20211224062246.1258487-1-hch@lst.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cleancache and Frontswap were used for Xen tmem driver, but it has removed in
2019.  However, some hooks are remaining in the source tree.  This patchset
removes cleancache and unused parts of frontswap.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mmmigration-add-trace-events-for-thp-migrations-anshuman-khandual&#34;&gt;[RFC] mm/migration: Add trace events for THP migrations (Anshuman Khandual)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1640328398-20698-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1640328398-20698-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patch adds two trace events, namely &lt;code&gt;set_migration_pmd&lt;/code&gt; and
&lt;code&gt;remove_migration_pmd&lt;/code&gt; for tracing PMD-based THP migration without split.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211224211127.30b60764d059ff3b0afea38a@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211224211127.30b60764d059ff3b0afea38a@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Morton sent 9 patches for fixes of several subsystems including DAMON to
Linus.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc7-linus-torvalds&#34;&gt;Linux 5.16-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgV_v+Enop3TwRFtJY74UjQtw=kfOzGXTQscLx2syW6Eg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgV_v+Enop3TwRFtJY74UjQtw=kfOzGXTQscLx2syW6Eg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seventh release candidate for v5.16 also looks pretty normal.  Nevertheless,
this could be due to the holidays season.  Linus will extend the staging window
at least one week, as he told before.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc5..v5.16-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-12-27 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc7 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc6</title>
      <link>/post/lkml_news_v5.16-rc6/</link>
      <pubDate>Tue, 14 Dec 2021 07:30:38 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v4-0017-optimize-list-lru-memory-consumption-muchun-song&#34;&gt;[PATCH v4 00/17] Optimize list lru memory consumption (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211213165342.74704-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20211213165342.74704-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Muchun found 6GB of memory was consumed by kmalloc-32 slab cache on a machine
having 952 super blocks.  That was due to &lt;code&gt;list_lru_one&lt;/code&gt; allocation from
&lt;code&gt;memcg_nr_cache_ids&lt;/code&gt;.  This patchset aims to fix the issue.  According to a
simple test, this reduces memory consumption under a situation from 24GiB to
4GiB.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-12-13-21-28-uploaded-andrew-morton&#34;&gt;mmotm 2021-12-13-21-28 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211214052904.VfRYfitp0%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211214052904.VfRYfitp0%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Morton uploaded new mmotm.  It&amp;rsquo;s based on 5.16-rc5, adds 52 new patches
modifies 40 patches, and drops 24 patches.  In total, 296 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-0043-add-kernelmemorysanitizer-infrastructure-alexander-potapenko&#34;&gt;[PATCH 00/43] Add KernelMemorySanitizer infrastructure (Alexander Potapenko)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211214162050.660953-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20211214162050.660953-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit implements Kernel Memory SANitizer (KMSAN) runtime, so that people
can run KMSAN kernel on a QEMU.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-psi-introduce-rt-property-for-trigger-zhaoyang-huang&#34;&gt;[RFC PATCH] psi: introduce rt property for trigger (Zhaoyang Huang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1639565399-15629-1-git-send-email-huangzhaoyang@gmail.com&#34;&gt;https://lkml.kernel.org/r/1639565399-15629-1-git-send-email-huangzhaoyang@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes PSI aware of the realtime scenario.&lt;/p&gt;
&lt;h2 id=&#34;patch-0018-v2-repair-swap-over-nfs-neil-brown&#34;&gt;[PATCH 00/18 V2] Repair SWAP-over-NFS (Neil Brown)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/163969801519.20885.3977673503103544412.stgit@noble.brown&#34;&gt;https://lkml.kernel.org/r/163969801519.20885.3977673503103544412.stgit@noble.brown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset cleans up and improve swap-via-filesystem code and make NFS works
with swap-via-filesystem.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc6-linus-torvalds&#34;&gt;Linux 5.16-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgWuZPhK6dgXsS42iMz4o610Uw4QXeUsTSOQheNo1tf5A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgWuZPhK6dgXsS42iMz4o610Uw4QXeUsTSOQheNo1tf5A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sixth release candidate for v5.16 came out in a quite normal form.  Linus
will make extra release candidate, though, due to the holidays.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc4..v5.16-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-12-20 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc5</title>
      <link>/post/lkml_news_v5.16-rc5/</link>
      <pubDate>Tue, 07 Dec 2021 07:25:52 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc5/</guid>
      <description>&lt;h2 id=&#34;rfc-mm-introduce-page-pinner-minchan-kim&#34;&gt;[RFC] mm: introduce page pinner (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211206184730.858850-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20211206184730.858850-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page migrations commonly fails from temporal referenc count elevation.  Worse
yet, it&amp;rsquo;s hard to know which kernel subsystem has made the temporal reference
count increase.  To tracking it available, Minchan is proposing a new feature
called page pinner.  It tracks page put operations for pages that migration
failed.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-12-06-22-21-uploaded-andrew-morton&#34;&gt;mmotm 2021-12-06-22-21 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211207062141.pMgbjXQXy%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211207062141.pMgbjXQXy%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm based on v5.16-rc4 has uploaded.  14 new patches are added, 3 existign
patches modified, and 1 existing patch has dropped from the queue.  The queue
has 268 patches in total now.&lt;/p&gt;
&lt;h2 id=&#34;patch--v10-resend-06-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V10 RESEND 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211207022757.2523359-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20211207022757.2523359-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset optimize the page placement on tiered memory system equipping
DRAM with PMEM.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-13-mm-protect-free_pgtables-with-mmap_lock-write-lock-in-exit_mmap-suren-baghdasaryan&#34;&gt;[PATCH v4 1/3] mm: protect free_pgtables with mmap_lock write lock in exit_mmap (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211208212211.2860249-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20211208212211.2860249-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes &lt;code&gt;exit_mmap&lt;/code&gt; to hold &lt;code&gt;mmap_write_lock&lt;/code&gt; to make locking from
oom-reaper and &lt;code&gt;process_mlrelease()&lt;/code&gt; simpler.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmmadvise-pageout-under-plugging-minchan-kim&#34;&gt;[PATCH] mm/madvise: pageout under plugging (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211210003019.1481269-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20211210003019.1481269-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit makes &lt;code&gt;madvise(PAGEOUT)&lt;/code&gt; to have the per-page memory block plugging
benefit (3da367c3e5fc, vmscan: add block plug for page reclaim).&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211210144539.663efee2c80d8450e6180230@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211210144539.663efee2c80d8450e6180230@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A pull request for mm fixes has sent to Linus Torvalds.  It contains DAMON fake
load fix and trivial fixups.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc5-linus-torvalds&#34;&gt;Linux 5.16-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wixe1NPqC0PmgUbV0Xoa8D0Pbyu7X_0sfABYMG+ocLdbQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wixe1NPqC0PmgUbV0Xoa8D0Pbyu7X_0sfABYMG+ocLdbQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fifth release candidate for v5.16 is a bit bigger than usual, but no real
problem has found.  This might be due to people who trying to do works before
the holidays, and Linus is warning such people.  He also plans to have one more
release candidate for this cycle, to avoid opening merge window immediately in
the new year.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc3..v5.16-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-12-13 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc4</title>
      <link>/post/lkml_news_v5.16-rc4/</link>
      <pubDate>Tue, 30 Nov 2021 07:20:32 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc4/</guid>
      <description>&lt;h2 id=&#34;mmotm-2021-11-29-18-58-uploaded-andrew-morton&#34;&gt;mmotm 2021-11-29-18-58 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211130025839.ZhVoO1W_7%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211130025839.ZhVoO1W_7%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm has updated.  It&amp;rsquo;s based on v5.16-rc3, adds 52 new patches, modifies 18
existing patches, and drops 2 patches.  In total, 224 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;question-place-pages-to-tail-regress-memory-read-bandwidth-about-10-under-our-test-cases-liupeng&#34;&gt;[QUESTION] “place pages to tail” regress memory read bandwidth about 10% under our test cases (liupeng)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/3c6349ddd9a34732a251467b7fa4fe93@huawei.com&#34;&gt;https://lkml.kernel.org/r/3c6349ddd9a34732a251467b7fa4fe93@huawei.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Liu Peng found David&amp;rsquo;s patch 7fef431be9c9(mm/page_alloc: place pages to tail in
&lt;code&gt;__free_pages_core()&lt;/code&gt;) incurring performance regression, and asking some
suggestions.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-count-zram-readwrite-into-psi_io_wait-huangzhaoyang&#34;&gt;[RFC PATCH] mm: count zram read/write into PSI_IO_WAIT (Huangzhaoyang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1638356341-17014-1-git-send-email-huangzhaoyang@gmail.com&#34;&gt;https://lkml.kernel.org/r/1638356341-17014-1-git-send-email-huangzhaoyang@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patch adds zram reads/writes counts in &lt;code&gt;PSI_IO_WAIT&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0066-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH v4 00/66] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211201142918.921493-1-Liam.Howlett@oracle.com&#34;&gt;https://lkml.kernel.org/r/20211201142918.921493-1-Liam.Howlett@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fourth version of the maple tree, which is another tree-based structure.  The
authors believe this could be used instead of rbtree for many cases including
the VMAs management.  Compared to the previous version, several features are
added and the iteration part has 40% faster.&lt;/p&gt;
&lt;h2 id=&#34;rfd-clear-virtual-machine-memory-when-virtual-machine-is-turned-off-fei-luo&#34;&gt;[RFD] clear virtual machine memory when virtual machine is turned off (Fei Luo)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAMgLiBskDz7XW9-0=azOgVJ00t8zFOXjdGaH7NLpKDfNH9wsGQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAMgLiBskDz7XW9-0=azOgVJ00t8zFOXjdGaH7NLpKDfNH9wsGQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Memory for a KVM process would contain sensitive data of the virtual machine.
Even though the virtual machine is turned off, the memory will contain the data
for a long time, unless be reused by other processes.  This mail proposes
clearing the memory even before the memory is reused by other processes.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-12-02-17-04-uploaded-andrew-morton&#34;&gt;mmotm 2021-12-02-17-04 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211203010516.HJH82Eku8%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211203010516.HJH82Eku8%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM has uploaded.  It&amp;rsquo;s now based on v5.16-rc3.  This time it adds 33 new
patches, modifies 55 pre-existing patches, and drops 2 patches.  In total, 255
patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-linux-next-delayacct-track-delays-from-memory-compact-wangyong&#34;&gt;[PATCH linux-next] delayacct: track delays from memory compact (wangyong)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1638542272-15187-1-git-send-email-wang.yong12@zte.com.cn&#34;&gt;https://lkml.kernel.org/r/1638542272-15187-1-git-send-email-wang.yong12@zte.com.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux kernel allows user space to know from where and how long delays have
made.  The tracking targets include CPU, IO, SWAP, RECLAIM, and THRASHING.
This commit adds delays due to COMPACT there.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-04-page-table-check-pasha-tatashin&#34;&gt;[PATCH v2 0/4] page table check (Pasha Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211204182314.1470076-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20211204182314.1470076-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset ensure page tables are correct by doing &lt;code&gt;page-&amp;gt;_refcount&lt;/code&gt; check.
This version fixes some bugs and support loadable modules.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc4-linus-torvalds&#34;&gt;Linux 5.16-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wguTgfhqftuf6FnW-KZ7zhQGDNktr_POKUkJ6SuMeQuWQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wguTgfhqftuf6FnW-KZ7zhQGDNktr_POKUkJ6SuMeQuWQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normal, fairly small fourth release candidate for v5.16.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc2..v5.16-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-12-06 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc3</title>
      <link>/post/lkml_news_v5.16-rc3/</link>
      <pubDate>Wed, 24 Nov 2021 07:20:51 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-03-page-table-check-pasha-tatashin&#34;&gt;[PATCH 0/3] page table check (Pasha Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211123214814.3756047-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20211123214814.3756047-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Due to reference count of &lt;code&gt;struct page&lt;/code&gt; handling issue, some memory were leak
from a process and moved in another process.  This commit avoids such type of
bugs by checking page table at the time of entrieds insertion.&lt;/p&gt;
&lt;h2 id=&#34;patch-05--transparent-page-placement-for-tiered-memory--hasan-al-maruf&#34;&gt;[PATCH 0/5] &lt;code&gt;*** Transparent Page Placement for Tiered-Memory ***&lt;/code&gt; (Hasan Al Maruf)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211124163608.33015-1-hasanalmaruf@fb.com&#34;&gt;https://lkml.kernel.org/r/20211124163608.33015-1-hasanalmaruf@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset augment AutoNUMA mechanism to promote pages from slow tier nodes
to toptier nodes.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-11-24-15-49-uploaded-andrew-morton&#34;&gt;mmotm 2021-11-24-15-49 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211124234931.iDJQctzrQ%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211124234931.iDJQctzrQ%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM updated.  It is now based on v5.16-rc2.  Compared to the last update, it
adds 75 new patches, modifies 43 existing patches, drops 18 patches.  In total,
174 patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mm-split-thp-synchronously-on-madv_dontneed-and-munmap-shakeel-butt&#34;&gt;[PATCH v2] mm: split thp synchronously on MADV_DONTNEED and munmap (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211125024523.2468946-1-shakeelb@google.com&#34;&gt;https://lkml.kernel.org/r/20211125024523.2468946-1-shakeelb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes &lt;code&gt;madvise(MADV_DONTNEED)&lt;/code&gt; to split THP synchronously, so that
memory usage drops as intended.  This version adds &lt;code&gt;munmap()&lt;/code&gt; support.&lt;/p&gt;
&lt;h2 id=&#34;patch-v1-02-virtio-mem-prepare-for-granularity-smaller-than-max_order---1-david-hildenbrand&#34;&gt;[PATCH v1 0/2] virtio-mem: prepare for granularity smaller than MAX_ORDER - 1 (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211126134209.17332-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20211126134209.17332-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently, virtio-mem driver supports logical hot(un)plug in (&lt;code&gt;MAX_ORDER - 1&lt;/code&gt;)
granularity (4 MiB on x86-64).  This makes hot(un)plug inflexible, and also
fails more likely on &lt;code&gt;ZONE_NORMAL&lt;/code&gt;.  David is therefore planning to make it
works in pageblock granularity, which is 2 MiB on x86-64.  This patchset
prepares the work.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc3-linus-torvalds&#34;&gt;Linux 5.16-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgtC_D-irsmyC89JPE1mnAAGJTc8qaNwaqcNUrt66TDMw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgtC_D-irsmyC89JPE1mnAAGJTc8qaNwaqcNUrt66TDMw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third release candidate for v5.16 has released.  It&amp;rsquo;s in the normal range
of size, though last week was the Thanksgiving week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc2..v5.16-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-11-29 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc2</title>
      <link>/post/lkml_news_v5.16-rc2/</link>
      <pubDate>Tue, 16 Nov 2021 07:09:53 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc2/</guid>
      <description>&lt;h2 id=&#34;patch--v10-06-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V10 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211116013522.140575-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20211116013522.140575-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset optimizes the pages placement on tiered memory systems using DRAM
and PMEM.&lt;/p&gt;
&lt;h2 id=&#34;rfc-03-page-table-check-pasha-tatashin&#34;&gt;[RFC 0/3] page table check (Pasha Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211116220038.116484-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20211116220038.116484-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pasha found broken page ref issue in 4.14 kernel.  The page was leaked into
another process, so they were able to find the issue by examining the page
tables.  This patchset tries to prevent this kind of memory corruption issues
by checking the page tables in time of inserting entries into user page tables.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-discard-__gfp_atomic-neil-brown&#34;&gt;[PATCH] MM: discard &lt;code&gt;__GFP_ATOMIC&lt;/code&gt; (Neil Brown)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/163712397076.13692.4727608274002939094@noble.neil.brown.name&#34;&gt;https://lkml.kernel.org/r/163712397076.13692.4727608274002939094@noble.neil.brown.name&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Neil Brown couldn&amp;rsquo;t find real useful case for &lt;code&gt;__GFP_ATOMIC&lt;/code&gt;.  This patch
removes &lt;code&gt;__GFP_ATOMIC&lt;/code&gt;, while leaving &lt;code&gt;GFP_ATOMIC&lt;/code&gt; as is.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-mm-add-pm_thp_mapped-to-procpidpagemap-mina-almasry&#34;&gt;[PATCH v6] mm: Add PM_THP_MAPPED to /proc/pid/pagemap (Mina Almasry)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211117194855.398455-1-almasrymina@google.com&#34;&gt;https://lkml.kernel.org/r/20211117194855.398455-1-almasrymina@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch allows users know if a specific virtual address range of a process
is backed by THP or not, by examining the &lt;code&gt;/proc/pid/pagemap&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-11-18-15-47-uploaded-andrew-morton&#34;&gt;mmotm 2021-11-18-15-47 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211118234743.-bgoWMQfK%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211118234743.-bgoWMQfK%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the v5.16-rc1 release, mmotm has uploaded.  Rebased on v5.16-rc1, added
84 patches, modified 10 patches, and dropped 402 patches.  In total, 117
patches are in the queue.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211119164248.50feee07c5d2cc6cc4addf97@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211119164248.50feee07c5d2cc6cc4addf97@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A pull request of 15 patches for fix of various subsystems including DAMON has
sent to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-split-thp-synchronously-on-madv_dontneed-shakeel-butt&#34;&gt;[PATCH] mm: split thp synchronously on MADV_DONTNEED (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211120201230.920082-1-shakeelb@google.com&#34;&gt;https://lkml.kernel.org/r/20211120201230.920082-1-shakeelb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because the kernel defers THP split and release until memory pressure, freeing
memory that backed by THP using &lt;code&gt;MADV_DONTNEED&lt;/code&gt; is difficiult.  This patch
makes &lt;code&gt;madvise()&lt;/code&gt; with &lt;code&gt;MADV_DONTNEED&lt;/code&gt; split THP of the target memory regions
synchronously.&lt;/p&gt;
&lt;h2 id=&#34;patch-v09-06-schedmmx86uaccess-implement-user-managed-concurrency-groups-peter-oskolkov&#34;&gt;[PATCH v0.9 0/6] sched,mm,x86/uaccess: implement User Managed Concurrency Groups (Peter Oskolkov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211121212040.8649-1-posk@google.com&#34;&gt;https://lkml.kernel.org/r/20211121212040.8649-1-posk@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset implements user space managed m:n threading subsystem.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-promote-slow-memory-in-advance-to-improve-performance-baolin-wang&#34;&gt;[RFC PATCH] mm: Promote slow memory in advance to improve performance (Baolin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/fc80ea7998a98274447cb3be84d5ef705438a3dc.1637571100.git.baolin.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/fc80ea7998a98274447cb3be84d5ef705438a3dc.1637571100.git.baolin.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes data in slow memory be promoted into RAM based on the
spatial locality.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc2-linus-torvalds&#34;&gt;Linux 5.16-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgMLMKjQUFoAA+chpZqaLJgpnUHsOJtBzWgFepT_DEwSw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgMLMKjQUFoAA+chpZqaLJgpnUHsOJtBzWgFepT_DEwSw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just a normal rc2 release having no noteworthy things.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.5-rc1..v5.16-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-11-23 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.16-rc1</title>
      <link>/post/lkml_news_v5.16-rc1/</link>
      <pubDate>Tue, 02 Nov 2021 07:10:11 +0100</pubDate>
      <guid>/post/lkml_news_v5.16-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-v4-03-mm-add-new-syscall-set_mempolicy_home_node-aneesh-kumar-kv&#34;&gt;[PATCH v4 0/3] mm: add new syscall set_mempolicy_home_node (Aneesh Kumar K.V)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211101050206.549050-1-aneesh.kumar@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20211101050206.549050-1-aneesh.kumar@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a new syscall that can be used to set a home node for
the &lt;code&gt;MPOL_BIND&lt;/code&gt; and &lt;code&gt;MPOL_PREFERRED_MANY&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-03-improve-the-migration-stats-baolin-wang&#34;&gt;[RFC PATCH 0/3] Improve the migration stats (Baolin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1635936218.git.baolin.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/cover.1635936218.git.baolin.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patchset fixes the migration stats that broken here and there.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211105133408.cccbb98b71a77d5e8430aba1@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211105133408.cccbb98b71a77d5e8430aba1@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first pull request for v5.16 from Andrew Morton.  Patches for DAMON
subsystem including DAMOS, physical address space support, and DAMON-based
proactive reclamation are also included here.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211108183057.809e428e841088b657a975ec@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211108183057.809e428e841088b657a975ec@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second pull request from Andrew Morton to Linus Torvalds for v5.16-rc1 is sent.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-0010-multigenerational-lru-framework-yu-zhao&#34;&gt;[PATCH v5 00/10] Multigenerational LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211111041510.402534-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20211111041510.402534-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifth version of the multigen LRU patchset is posted.  It&amp;rsquo;s rebased on
v5.15 and having performance benchmark reports on the previous version.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-support-multiple-target-nodes-demotion-baolin-wang&#34;&gt;[PATCH v2 0/2] Support multiple target nodes demotion (Baolin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1636616548.git.baolin.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/cover.1636616548.git.baolin.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset allows demoting multiple target nodes for systems having multiple
slow memory nodes.&lt;/p&gt;
&lt;h2 id=&#34;linux-516-rc1-linus-torvalds&#34;&gt;Linux 5.16-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjF=JzLkCi2wV+G=f8OWa5rNjPsZd2RMFG5MHwKZPgYvw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjF=JzLkCi2wV+G=f8OWa5rNjPsZd2RMFG5MHwKZPgYvw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the two weeks, 5.16-rc1 is released.  It&amp;rsquo;s not a huge, but also not
small.  Just normal.  Linus mentions folios as one of the patches that applied
in this release, as it changes the core.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4..v5.16-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-11-15 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.16-rc1-only.png&#34; alt=&#34;rc1 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15</title>
      <link>/post/lkml_news_v5.15/</link>
      <pubDate>Wed, 27 Oct 2021 07:09:11 +0200</pubDate>
      <guid>/post/lkml_news_v5.15/</guid>
      <description>&lt;h2 id=&#34;dynamically-allocated-memory-descriptors-matthew-wilcox&#34;&gt;Dynamically allocated memory descriptors (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YXcLqcFhDq3uUwIj@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YXcLqcFhDq3uUwIj@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this mail, Matthew explains his idea on making &lt;code&gt;struct page&lt;/code&gt; only two words
and how it could work with buddy allocator freelists.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mm-disable-numa_balancing_default_enabled-and-transparent_hugepage-on-preempt_rt-sebastian-andrzej-siewior&#34;&gt;[RFC] mm: Disable NUMA_BALANCING_DEFAULT_ENABLED and TRANSPARENT_HUGEPAGE on PREEMPT_RT (Sebastian Andrzej Siewior)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211026165100.ahz5bkx44lrrw5pt@linutronix.de&#34;&gt;https://lkml.kernel.org/r/20211026165100.ahz5bkx44lrrw5pt@linutronix.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mel told RT patchset could incur spikes on NUMA machines when &lt;code&gt;NUMA_BALANCING&lt;/code&gt;
and THP are turned on.  Sebastian request comments on disabling those on RT
enabled kernel by default, but still trying to find a good test for that.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-10-27-18-32-uploaded-andrew-morton&#34;&gt;mmotm 2021-10-27-18-32 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211028013301.pr6m56GoH%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211028013301.pr6m56GoH%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The -mm of the moment tree is updated.  This update adds 69 patches, modify 68
patches, drops no patch.  435 patches in total in the -mm tree.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-disable-numa_balancing_default_enabled-and-transparent_hugepage-on-preempt_rt-sebastian-andrzej&#34;&gt;[PATCH] mm: Disable NUMA_BALANCING_DEFAULT_ENABLED and TRANSPARENT_HUGEPAGE on PREEMPT_RT (Sebastian Andrzej)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211028143327.hfbxjze7palrpfgp@linutronix.de&#34;&gt;https://lkml.kernel.org/r/20211028143327.hfbxjze7palrpfgp@linutronix.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After getting some feedback, this patch removed RFC tag.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211028143506.5f5d5e2cd1f768a1da864844@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211028143506.5f5d5e2cd1f768a1da864844@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11 patches for fixes of v5.15 are posted from Andrew to Linus.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-memory-folios-for-v516-matthew-wilcox&#34;&gt;[GIT PULL] Memory folios for v5.16 (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YX4RkYNNZtO9WL0L@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YX4RkYNNZtO9WL0L@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew is sending the memory folios pull request again, for v5.16.  I
personally curious what feedback will come for this time.&lt;/p&gt;
&lt;p&gt;This pull request merged in the mainline for v5.16.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-linus-torvalds&#34;&gt;Linux 5.15 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjfbfQobW2jygMvgfJXKmzZNB=UTzBrFs2vTEzVpBXA4Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjfbfQobW2jygMvgfJXKmzZNB=UTzBrFs2vTEzVpBXA4Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 5.15 of Linux has released in the normal 9 weeks cycle, with DAMON.  It
started with pains due to the &lt;code&gt;-Werror&lt;/code&gt;, but the pace has been normal soon.
This also means the merge window for 5.16 is open.  DAMON following patches for
DAMOS and DAMON-based proactive reclamation are in -next tree.  Let&amp;rsquo;s see if
those will be merged in this merge window.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc7..v5.15.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-11-01 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc7</title>
      <link>/post/lkml_news_v5.15-rc7/</link>
      <pubDate>Tue, 19 Oct 2021 07:39:33 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc7/</guid>
      <description>&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211018151438.f2246e2656c041b6753a8bdd@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211018151438.f2246e2656c041b6753a8bdd@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;19 mm subsystem fix patches have sent to Linus Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;patch-v11-13-mm-rearrange-madvise-code-to-allow-for-reuse-suren-baghdasaryan&#34;&gt;[PATCH v11 1/3] mm: rearrange madvise code to allow for reuse (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211019215511.3771969-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20211019215511.3771969-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit refactor some madvise code for vma updates so that those can be
reused by &lt;code&gt;prctl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-10-20-20-40-uploaded-andrew-morton&#34;&gt;mmotm 2021-10-20-20-40 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211021034104.F6VxKBQcG%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211021034104.F6VxKBQcG%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew updated mmotm.  It&amp;rsquo;s based on 5.15-rc6, adds 74 new patches modifies 29
existing patches, and drops 22 patches.  In total, 366 patches in the queue.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc7-linus-torvalds&#34;&gt;Linux 5.15-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi1+boAQyckdiYXuBkybN4H_7OT569MwgyetWAfTExeEA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi1+boAQyckdiYXuBkybN4H_7OT569MwgyetWAfTExeEA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time, the release has been delayed about one day, not because of any
kernel trouble, but Linus&amp;rsquo; travel.  Rather than that, the rc7 is quite normal,
and it turned out that the big rc6 was just due to a timing issue.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc6..v5.15-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-10-26 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc7-only.png&#34; alt=&#34;rc6 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc6</title>
      <link>/post/lkml_news_v5.15-rc6/</link>
      <pubDate>Mon, 11 Oct 2021 10:21:51 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc6/</guid>
      <description>&lt;h2 id=&#34;mmotm-2021-10-10-18-19-uploaded-andrew-morton&#34;&gt;mmotm 2021-10-10-18-19 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211011012001.mSbkDke0y%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211011012001.mSbkDke0y%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Update of mmotm.  33 new patches added and 7 old patches dropped.  285 patches
in total.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-introduce-simple-pidfd-to-task-helper-christian-brauner&#34;&gt;[PATCH v2 0/2] Introduce simple pidfd to task helper (Christian Brauner)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211011133245.1703103-1-brauner@kernel.org&#34;&gt;https://lkml.kernel.org/r/20211011133245.1703103-1-brauner@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a simple helper to make code clean without duplications.&lt;/p&gt;
&lt;h2 id=&#34;patch-v07-05-schedmmx86uaccess-implement-user-managed-concurrency-groups-peter-oskolkov&#34;&gt;[PATCH v0.7 0/5] sched,mm,x86/uaccess: implement User Managed Concurrency Groups (Peter Oskolkov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211012232522.714898-1-posk@google.com&#34;&gt;https://lkml.kernel.org/r/20211012232522.714898-1-posk@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset implements the kernel parts for user-space m:n threading.  If
this is finalized and merged, user-space applications will be able to do the
scheduling of their threads on their own.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-10-13-19-52-uploaded-andrew-morton&#34;&gt;mmotm 2021-10-13-19-52 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211014025253._Y2qHd82A%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211014025253._Y2qHd82A%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The -mm tree updated.  It&amp;rsquo;s based on 5.15-rc5.  Compared to last update, 30
patches added, 38 patches modified, and 1 patch dropped.  In total, 314 patches
in the queue.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-hugetlb-support-node-specified-when-using-cma-for-gigantic-hugepages-baolin-wang&#34;&gt;[PATCH v3] hugetlb: Support node specified when using cma for gigantic hugepages (Baolin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/bb790775ca60bb8f4b26956bb3f6988f74e075c7.1634261144.git.baolin.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/bb790775ca60bb8f4b26956bb3f6988f74e075c7.1634261144.git.baolin.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch allows users to specify size of per-node CMA for hugetlb.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc6-linus-torvalds&#34;&gt;Linux 5.15-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjbXW13Eh6YnB4C5ghLrhJCq0u2bpSNA0JbK8eDb6o_XA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjbXW13Eh6YnB4C5ghLrhJCq0u2bpSNA0JbK8eDb6o_XA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sixth release candidate for Linux v5.15 released a little bit later than
usual, due to Linus&amp;rsquo; travel.  Worse yet, this release ended up being bigger
than expected.  If rc7 is not quite small, v5.16 merge winodw will be dealyed
one week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc5..v5.15-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-10-18 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc6-only.png&#34; alt=&#34;rc6 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc5</title>
      <link>/post/lkml_news_v5.15-rc5/</link>
      <pubDate>Tue, 05 Oct 2021 07:39:10 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-02-introduce-simple-pidfd-to-task-helper-christian-brauner&#34;&gt;[PATCH 0/2] Introduce simple pidfd to task helper (Christian Brauner)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211004125050.1153693-1-christian.brauner@ubuntu.com&#34;&gt;https://lkml.kernel.org/r/20211004125050.1153693-1-christian.brauner@ubuntu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a pidfd handling wrapper for removing duplications.&lt;/p&gt;
&lt;h2 id=&#34;patch-0062-separate-struct-slab-from-struct-page-matthew-wilcox&#34;&gt;[PATCH 00/62] Separate struct slab from struct page (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211004134650.4031813-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20211004134650.4031813-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This huge patchset separates &lt;code&gt;struct slab&lt;/code&gt; from &lt;code&gt;struct page&lt;/code&gt; to make
&lt;code&gt;struct page&lt;/code&gt; simple and therefore easier to handle.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0066-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH v3 00/66] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211005012959.1110504-1-Liam.Howlett@oracle.com&#34;&gt;https://lkml.kernel.org/r/20211005012959.1110504-1-Liam.Howlett@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces Maple tree, which is intended to replace the rb tree
for vmas, to improve the scalability.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-10-05-19-53-uploaded-andrew-morton&#34;&gt;mmotm 2021-10-05-19-53 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211006025350.a5PczFZP4%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211006025350.a5PczFZP4%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM updated. 11 patches drop, 47 patches added, and 29 patches modified.
DAMOS also added here.&lt;/p&gt;
&lt;h2 id=&#34;rfc-pgflags_t-matthew-wilcox&#34;&gt;[RFC] pgflags_t (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YV25hsgfJ2qAYiRJ@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YV25hsgfJ2qAYiRJ@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes &lt;code&gt;struct page-&amp;gt;flags&lt;/code&gt; a struct instead of the plain &lt;code&gt;unsigned long&lt;/code&gt; for enhance its type safety.&lt;/p&gt;
&lt;h2 id=&#34;compaction--folios-ken-overstreet&#34;&gt;Compaction &amp;amp; folios (Ken Overstreet)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YV4o9SxfYuLm1i4d@moria.home.lan&#34;&gt;https://lkml.kernel.org/r/YV4o9SxfYuLm1i4d@moria.home.lan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This mail explains how folios can make compaction and hugepages easier.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mmhuge_memoryc-disable-thp-with-large-thp-size-on-small-present-memory-peng-hao&#34;&gt;[PATCH v2] mm/huge_memory.c: disable THP with large THP size on small present memory (Peng Hao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAPm50aLPxJCiVTqqwiz00oMNiqHggB84sXB3x=tv_HUAd5UktQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAPm50aLPxJCiVTqqwiz00oMNiqHggB84sXB3x=tv_HUAd5UktQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;min_free_kbytes&lt;/code&gt; is calculated based on THP size.  Because THP size could be
quite big depends on the system configuration, &lt;code&gt;min_free_kbytes&lt;/code&gt; could also be
huge.  For example, on ARM64 with 64 KiB page size, THP is 512 MiB and the
&lt;code&gt;min_free_kbytes&lt;/code&gt; is about 3 GiB.&lt;/p&gt;
&lt;p&gt;This commit therefore judge if THP should be enabled or not by default using
the THP size.&lt;/p&gt;
&lt;h2 id=&#34;patch--v9-06-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[PATCH -V9 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211008083938.1702663-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20211008083938.1702663-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nineth revision of NUMA balancing for tiered memory system.  This patchset
applies the basic NUMA balancing, hot page selection algorithm, and automatic
threshold adjustment step by step.&lt;/p&gt;
&lt;h2 id=&#34;patch-03-mm-thp-introduce-a-new-sysfs-interface-to-facilitate-file-thp-for-text-rongwei-wang&#34;&gt;[PATCH 0/3] mm, thp: introduce a new sysfs interface to facilitate file THP for .text (Rongwei Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211009092658.59665-1-rongwei.wang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/20211009092658.59665-1-rongwei.wang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a new THP interface called &lt;code&gt;hugetext_enabled&lt;/code&gt; for easier
enablement of THP for text sections of processes, and make binaries built with
&lt;code&gt;--pie -fPIC&lt;/code&gt; and LOAD alignment smaller than 2M, change &lt;code&gt;maximum_alignment&lt;/code&gt; to
2M, for making those better at applying THP.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc5-linus-torvalds&#34;&gt;Linux 5.15-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiTZxkHVg=Pz7XRd-9AEDp0qV5sWmQJWnQ4NrSPYRHNiA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiTZxkHVg=Pz7XRd-9AEDp0qV5sWmQJWnQ4NrSPYRHNiA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifth release candidate for v5.15 is released.  Just a normal one.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc4..v5.15-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-10-11 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc5-only.png&#34; alt=&#34;rc5 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc4</title>
      <link>/post/lkml_news_v5.15-rc4/</link>
      <pubDate>Tue, 28 Sep 2021 07:31:38 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc4/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-08-mmmadvise-support-process_madvisemadv_dontneed-nadav-amit&#34;&gt;[RFC PATCH 0/8] mm/madvise: support process_madvise(MADV_DONTNEED) (Nadav Amit)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210926161259.238054-1-namit@vmware.com&#34;&gt;https://lkml.kernel.org/r/20210926161259.238054-1-namit@vmware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes &lt;code&gt;process_madvise()&lt;/code&gt; to support &lt;code&gt;MADV_DONTNEED&lt;/code&gt; hint.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-09-28-19-05-uploaded-andrew-morton&#34;&gt;mmotm 2021-09-28-19-05 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210929020604.DyNimbxao%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210929020604.DyNimbxao%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mm-of-the-moment snapshot has been updated.  13 drop, 45 add, 37 modified.
184 patches in the broken/ in total.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-memcg-flush-stats-only-if-updated-shakeel-butt&#34;&gt;[PATCH 1/2] memcg: flush stats only if updated (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210930044711.2892660-1-shakeelb@google.com&#34;&gt;https://lkml.kernel.org/r/20210930044711.2892660-1-shakeelb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes memcg stats updated only when needed, as it is currently
flushed on every refault and reclaim iteration.  For reading 8 GiB tmpfs file
on zram-based swap device configured system, 63% of read time has reduced.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mm-optimise-put_pages_list-matthew-wilcox&#34;&gt;[RFC] mm: Optimise &lt;code&gt;put_pages_list()&lt;/code&gt; (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210930163258.3114404-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210930163258.3114404-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC optimizes &lt;code&gt;put_pages_list()&lt;/code&gt; by doing the operations in batch.
Nevertheless, this is RFC mainly because the author didn&amp;rsquo;t evaluated the
performance.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-09-30-19-36-uploaded-andrew-morton&#34;&gt;mmotm 2021-09-30-19-36 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211001023703.54h-iZdWT%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20211001023703.54h-iZdWT%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New mmotm is uploaded.  No patch dropped, 39 new patches added, 8 patches
modified.  223 patches in total.&lt;/p&gt;
&lt;h2 id=&#34;patch-07-implement-data-access-monitoring-based-memory-operation-schemes-seongjae-park&#34;&gt;[PATCH 0/7] Implement Data Access Monitoring-based Memory Operation Schemes (SeongJae Park)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20211001125604.29660-1-sj@kernel.org&#34;&gt;https://lkml.kernel.org/r/20211001125604.29660-1-sj@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The DAMOS patchset has dropped its RFC tag, as DAMON has merged.  This patchset
allows users to manage their memory based on the real data access patterns.
The patchset has quickly merged in -mm tree
(&lt;a href=&#34;https://lore.kernel.org/mm-commits/20211001233339.SV5JeiSqb%25akpm@linux-foundation.org/)&#34;&gt;https://lore.kernel.org/mm-commits/20211001233339.SV5JeiSqb%25akpm@linux-foundation.org/)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc4-linus-torvalds&#34;&gt;Linux 5.15-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wifo=ocAVFtoutuLQvqYyNz1r014uJD8TRPJKpVaPLrRQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wifo=ocAVFtoutuLQvqYyNz1r014uJD8TRPJKpVaPLrRQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There were hiccups due to the &lt;code&gt;-Werror&lt;/code&gt; at the beginning of the v5.15
stabiliziation, but now seems it all stabled.  Normal rc4 release.  In this
release &lt;code&gt;set_fs()&lt;/code&gt; has removed from &lt;code&gt;m68k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc3..v5.15-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-10-04 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc4-only.png&#34; alt=&#34;rc4 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc3</title>
      <link>/post/lkml_news_v5.15-rc3/</link>
      <pubDate>Mon, 20 Sep 2021 07:48:48 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc3/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-introducing-lockless-cache-built-on-top-of-slab-allocator-hyeonggon-yoo&#34;&gt;[RFC PATCH] Introducing lockless cache built on top of slab allocator (Hyeonggon Yoo)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210919164239.49905-1-42.hyeyoo@gmail.com&#34;&gt;https://lkml.kernel.org/r/20210919164239.49905-1-42.hyeyoo@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The block layer now has a lockless cache, which increased its IOPS.  This RFC
generalizes it so that it can be used in some other area, such as NAPI.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-03-virtio-mem-disallow-mapping-virtio-mem-memory-via-devmem-david-hildenbrand&#34;&gt;[PATCH v5 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210920142856.17758-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210920142856.17758-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes a basic infrastructure to exclude some physical memory
regions that marked as &lt;code&gt;IORESOURCE_SYSTEM_RAM&lt;/code&gt; from &lt;code&gt;/dev/mem&lt;/code&gt; access, even
though they are not marked as &lt;code&gt;IORESOURCE_BUSY&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bof-at-lpc-documenting-the-heterogeneous-memory-model-architecture-felix-kuehling&#34;&gt;BoF at LPC: Documenting the Heterogeneous Memory Model Architecture (Felix Kuehling)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/23aeacb6-0cd9-d10f-76bc-3c9d33905daa@amd.com&#34;&gt;https://lkml.kernel.org/r/23aeacb6-0cd9-d10f-76bc-3c9d33905daa@amd.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A BoF session for documentation of heterogeneous memory model, which let memory
of GPU-like accelerators aggregated with system RAM, is proposed.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-09-21-16-54-uploaded-andrew-morton&#34;&gt;mmotm 2021-09-21-16-54 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210921235437.zcAiZPmxd%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210921235437.zcAiZPmxd%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM updated.  0 patch dropped, 30 patches added, and 13 patches modified.&lt;/p&gt;
&lt;h2 id=&#34;struct-page-proposal-ken-overstreet&#34;&gt;Struct page proposal (Ken Overstreet)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YUvWm6G16+ib+Wnb@moria.home.lan&#34;&gt;https://lkml.kernel.org/r/YUvWm6G16+ib+Wnb@moria.home.lan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this mail, Ken describes one common point from Matthew and Johannes in the
Folios discussion, and proposes new &lt;code&gt;struct page&lt;/code&gt;.  It contains only two
pointers, so the memory overhead for &lt;code&gt;struct page&lt;/code&gt; objects becomes only 0.4%.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210924154257.1dbf6699ab8d88c0460f924f@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210924154257.1dbf6699ab8d88c0460f924f@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull request from Andrew Morton for various fixes.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-mmmprotect-avoid-unnecessary-tlb-flushes-nadav-amit&#34;&gt;[PATCH 0/2] mm/mprotect: avoid unnecessary TLB flushes (Nadav Amit)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210925205423.168858-1-namit@vmware.com&#34;&gt;https://lkml.kernel.org/r/20210925205423.168858-1-namit@vmware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Memory-unprotect using usefaultfd (i.e., userfaultfd IOCTL) triggers a TLB
flush even though no architectural data but only a software flag is updated.
This patchset tries to solve the issue by not tailoring the specific scenario
but consolidating the interfaces for TLB batching.  This patchset is based on
an old RFC.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc3-linus-torvalds&#34;&gt;Linux 5.15-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgoE8XBPVA6Mu4CygxX9TE0FgWaAsVUJOe8KQH-CzEcAA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgoE8XBPVA6Mu4CygxX9TE0FgWaAsVUJOe8KQH-CzEcAA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Partly because of the &lt;code&gt;Werror&lt;/code&gt; change, 5.15 rc2 was not so calm.  Now seems the
things wound down and it became normal, Torvalds says.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc2..v5.15-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-09-20 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc2</title>
      <link>/post/lkml_news_v5.15-rc2/</link>
      <pubDate>Tue, 14 Sep 2021 07:07:26 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v1-vmpressure-wake-up-work-only-when-there-is-registration-event-wangyong&#34;&gt;[PATCH v1] vmpressure: wake up work only when there is registration event (wangyong)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1631548441-2784-1-git-send-email-wang.yong12@zte.com.cn&#34;&gt;https://lkml.kernel.org/r/1631548441-2784-1-git-send-email-wang.yong12@zte.com.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently, vmpressure works are awaken even though there are no vmpressure
callbacks.  This commit avoids such unnecessary wakeup by counting the number
of registered events and skip waking up works if the number is zero.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0076-optimize-list-lru-memory-consumption-muchun-song&#34;&gt;[PATCH v3 00/76] Optimize list lru memory consumption (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210914072938.6440-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20210914072938.6440-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Muchun found &lt;code&gt;kmalloc-32&lt;/code&gt; for &lt;code&gt;list_lru_one&lt;/code&gt; allocation consuming 6 GiB of memory
on their server.  That came from a large number of containers.  This patchset
aims to optimize the memory consumption by adding the memcg to the list_lru at
the first insert, rather than instantiating all at memcg init time.&lt;/p&gt;
&lt;p&gt;For creating 10,000 memcg and mounting 10,000 filesystems, this patchset
reduced the memory consumption from 24 GiB to 4 GiB.&lt;/p&gt;
&lt;h2 id=&#34;maintainer-summit-folios-as-a-potential-kernelmaintainers-summit-topic-theodore-tso&#34;&gt;[MAINTAINER SUMMIT] Folios as a potential Kernel/Maintainers Summit topic? (Theodore Ts&amp;rsquo;o)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YUIwgGzBqX6ZiGgk@mit.edu&#34;&gt;https://lkml.kernel.org/r/YUIwgGzBqX6ZiGgk@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folio is still not merged in the mainline.  Ted says, as a file system
developer he is eagerly looking forward to what Folios will enable.  For the
reason, he suggests to have a maintainer summit topic for Folio.  In detail,
take a place in a LPC BOF room in Friday.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-fix-numa-without-smp-geert-uytterhoeven&#34;&gt;[PATCH 0/2] Fix NUMA without SMP (Geert Uytterhoeven)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1631781495.git.geert+renesas@glider.be&#34;&gt;https://lkml.kernel.org/r/cover.1631781495.git.geert+renesas@glider.be&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are variables and functions which are used by the NUMA code for SMP-only
case.  This causes build errors for SuperH architecture, which supports NUMA
without SMP.  This patch fixes it.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-add-ztree---new-allocator-for-use-via-zpool-api-ananda-badmaev&#34;&gt;[PATCH] mm: add ztree - new allocator for use via zpool API (Ananda Badmaev)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210916085102.19310-1-a.badmaev@clicknet.pro&#34;&gt;https://lkml.kernel.org/r/20210916085102.19310-1-a.badmaev@clicknet.pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch provides a backend for zswap, which uses red-black trees for storing
compressed objects blocks.  This might be able to be used by zram, either.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-09-16-14-00-uploaded-andrew-morton&#34;&gt;mmotm 2021-09-16-14-00 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210916210058.KrWpsFx8b%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210916210058.KrWpsFx8b%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew updated the first mmotm after v5.15 merge window had opened.  Compared
to the last mmotm before the merge window, 351 patches dropped, 74 patches
added, and 23 patches modified.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc2-linus-torvalds&#34;&gt;Linux 5.15-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wirexiZR+VO=H3xemGKOMkh8OasmXaKXTKUmAKYCzi8AQ@mail.gmail.com/&#34;&gt;https://lkml.kernel.org/r/CAHk-=wirexiZR+VO=H3xemGKOMkh8OasmXaKXTKUmAKYCzi8AQ@mail.gmail.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Due to the &lt;code&gt;Werror&lt;/code&gt; change, Linus spent lots of time for the build warning
fixes.  Thouh the change has been not default, Linus apparently wants to
eliminate all the warnings.  The work is not complete yet, but he really hopes
the kernel to built without warning.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc2..v5.15-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-09-20 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.15-rc1</title>
      <link>/post/lkml_news_v5.15-rc1/</link>
      <pubDate>Wed, 01 Sep 2021 07:28:13 +0200</pubDate>
      <guid>/post/lkml_news_v5.15-rc1/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-mmoom-detect-and-kill-task-which-has-allocation-forbidden-by-cpuset-limit-feng-tang&#34;&gt;[RFC PATCH] mm/oom: detect and kill task which has allocation forbidden by cpuset limit (Feng Tang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1630399085-70431-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1630399085-70431-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker needs to allocate memory in non-movable zones for creation of an OS
(e.g., &lt;code&gt;GFP_HIGHUSER&lt;/code&gt;).  However, if it is binded to a cpuset which has only
movable zone, the allocation fails and OOM storm attacks other innocent
processes.  This patch detects the case and kill only the allocation failing
process.&lt;/p&gt;
&lt;h2 id=&#34;folios-can-we-resolve-this-please-david-howells&#34;&gt;Folios: Can we resolve this please? (David Howells)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/3285174.1630448147@warthog.procyon.org.uk&#34;&gt;https://lkml.kernel.org/r/3285174.1630448147@warthog.procyon.org.uk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Howells is trying to resolve the folio issue within this merge window, as
his work also depend on the folio work.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210902144820.78957dff93d7bea620d55a89@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210902144820.78957dff93d7bea620d55a89@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first pull request from Andrew Morton for 212 patches is posted.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Patch series &amp;quot;Migrate Pages in lieu of discard&amp;quot;, v11&lt;/code&gt; is included here.&lt;/p&gt;
&lt;h2 id=&#34;report-bug-to-linux-memory-management-nzyangxidianeducn&#34;&gt;Report Bug to Linux Memory Management (&lt;a href=&#34;mailto:nzyang@xidian.edu.cn&#34;&gt;nzyang@xidian.edu.cn&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/4f29a246.310.17bb4e8e686.Coremail.nzyang@stu.xidian.edu.cn&#34;&gt;https://lkml.kernel.org/r/4f29a246.310.17bb4e8e686.Coremail.nzyang@stu.xidian.edu.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If a system has too many dirty memory, Linux kernel tries to reduce the dirty
ratio by running a background writeback daemon.  If it doesn&amp;rsquo;t make progress,
kernel makes all I/O write-through.  As a result, all I/O intensive processes
will be slow.  This mail argues that a malicious user can make whole system
slow by intensively dirtying its memory.&lt;/p&gt;
&lt;h2 id=&#34;re-patch-enable--werror-by-default-for-all-kernel-builds-guenter-roeck&#34;&gt;Re: [PATCH] Enable &amp;lsquo;-Werror&amp;rsquo; by default for all kernel builds (Guenter Roeck)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/all/20210906142615.GA1917503@roeck-us.net/&#34;&gt;https://lore.kernel.org/all/20210906142615.GA1917503@roeck-us.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linus Torvalds recently enabled &lt;code&gt;-WError&lt;/code&gt; compile option, which treats every
build warnings as error.  The intention is to make all kernel build clean.  Of
course, it will cause many build failures.  With this mail, Guenter reports 64
build failures among 153 builds due to this change.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210907195226.14b1d22a07c085b22968b933@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210907195226.14b1d22a07c085b22968b933@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second pull request for memory management subsystem has sent to Linus Torvalds.
The patchset for DAMON also included here.&lt;/p&gt;
&lt;h2 id=&#34;merge-branch-akpm-patches-from-andrew-linus-torvalds&#34;&gt;Merge branch &amp;lsquo;akpm&amp;rsquo; (patches from Andrew) (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2d338201d5311bcd79d42f66df4cecbcbc5f4f2c&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2d338201d5311bcd79d42f66df4cecbcbc5f4f2c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Torvalds merged lots of patches in Andrew&amp;rsquo;s second pull request, including
DAMON.  Now, DAMON is in the mainline.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-2&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210908180859.d523d4bb4ad8eec11c61500d@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210908180859.d523d4bb4ad8eec11c61500d@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yet more patches from Andrew, for hotfixes, which also need to be merged in the
stable trees.  Linus quickly merged those.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-psi--calc-psi-memstall-time-more-precisely-huangzahoyang&#34;&gt;[RFC PATCH] psi : calc psi memstall time more precisely (Huangzahoyang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1631188824-25623-1-git-send-email-huangzhaoyang@gmail.com&#34;&gt;https://lkml.kernel.org/r/1631188824-25623-1-git-send-email-huangzhaoyang@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes PSI&amp;rsquo;s memstall time more precise by excluding the task&amp;rsquo;s
off-cpu time.&lt;/p&gt;
&lt;h2 id=&#34;linux-515-rc1-linus-torvalds&#34;&gt;Linux 5.15-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgbygOb3hRV+7YOpVcMPTP2oQ=iw6tf09Ydspg7o7BsWQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgbygOb3hRV+7YOpVcMPTP2oQ=iw6tf09Ydspg7o7BsWQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The merge window is closed and the first release candidate for v5.15 is out.
Number of commits are not so huge.  In fact, smaller than usual of v5.x.
However, number of lines changed are about the average.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.4-rc1..v5.15-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-09-13 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.15-rc1-only.png&#34; alt=&#34;rc1 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14</title>
      <link>/post/lkml_news_v5.14/</link>
      <pubDate>Tue, 24 Aug 2021 07:29:50 +0200</pubDate>
      <guid>/post/lkml_news_v5.14/</guid>
      <description>&lt;h2 id=&#34;git-pull-memory-folios-for-v515-matthew-wilcox&#34;&gt;[GIT PULL] Memory folios for v5.15 (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YSPwmNNuuQhXNToQ@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YSPwmNNuuQhXNToQ@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew Wilcox sent a pull request for his page folio works to Linus Torvalds.
Linus Torvalds replied he wants this to work in reverse.  That is, calling head
pages as normal pages but calling tail pages something other, as the term,
page, is more common and de-facto standard in the industry.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-23-16-42-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-23-16-42 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210823234329.H9WD-du1K%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210823234329.H9WD-du1K%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MMOTM is rebased on v5.14-rc7 and uploaded.  In total, 10 patches dropped and
16 added.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dropped
-------

hugetlb-dont-pass-page-cache-pages-to-restore_reserve_on_error.patch
kfence-fix-is_kfence_address-for-addresses-below-kfence_pool_size.patch
maintainers-update-clangbuiltlinux-irc-chat.patch
mm-hwpoison-retry-with-shake_page-for-unhandlable-pages.patch
mm-memcontrol-fix-occasional-ooms-due-to-proportional-memorylow-reclaim.patch
mm-page_alloc-dont-corrupt-pcppage_migratetype.patch
mm-vmscan-fix-missing-psi-annotation-for-node_reclaim.patch
mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch
revert-mm-shmem-fix-shmem_swapin-race-with-swapoff.patch
revert-mm-swap-check-if-swap-backing-device-is-congested-or-not.patch

Added
-----

checkpatch-improve-git_commit_id-test-fix.patch
checkpatch-improve-git_commit_id-test.patch
compiler-attributes-add-__alloc_size-for-better-bounds-checking-fix.patch
kernel-unexport-get_mmtask_exe_file.patch
mm-memory_hotplug-fix-potential-permanent-lru-cache-disable.patch
mm-memory_hotplug-make-hwpoisoned-dirty-swapcache-pages-unmovable.patch
mm-memory_hotplug-use-helper-zone_is_zone_device-to-simplify-the-code.patch
mm-migrate-change-to-use-bool-type-for-page_was_mapped.patch
mm-migrate-fix-the-incorrect-function-name-in-comments.patch
mm-migrate-introduce-a-local-variable-to-get-the-number-of-pages.patch
mm-migrate-simplify-the-file-backed-pages-validation-when-migrating-its-mapping.patch
mm-secretmem-use-refcount_t-instead-of-atomic_t.patch
mm-unexport-folio_memcg_unlock.patch
mm-unexport-unlock_page_memcg.patch
mm-vmalloc-add-__alloc_size-attributes-for-better-bounds-checking.patch
selftests-vm-use-kselftest-skip-code-for-skipped-tests.patch

summary: 10 drop, 16 add, 49 modified
# from 2021-08-20 07:38:07 +0200 to 2021-08-24 07:36:41 +0200
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;patch-06-netfs-afs-ceph-support-folios-at-least-partially-david-howells&#34;&gt;[PATCH 0/6] netfs, afs, ceph: Support folios, at least partially (David Howells)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/162981147473.1901565.1455657509200944265.stgit@warthog.procyon.org.uk&#34;&gt;https://lkml.kernel.org/r/162981147473.1901565.1455657509200944265.stgit@warthog.procyon.org.uk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes netfs to use folios, though it&amp;rsquo;s unclear if folio will be
merged in as is now.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0014-mm-sparse-vmemmap-introduce-compound-devmaps-for-device-dax-joao-martins&#34;&gt;[PATCH v4 00/14] mm, sparse-vmemmap: Introduce compound devmaps for device-dax (Joao Martins)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210827145819.16471-1-joao.m.martins@oracle.com&#34;&gt;https://lkml.kernel.org/r/20210827145819.16471-1-joao.m.martins@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset tries to minimize the &amp;lsquo;struct page&amp;rsquo; overhead for pmem use case.&lt;/p&gt;
&lt;h2 id=&#34;patch-v8-03-anonymous-vma-naming-patches-suren-baghdasaryan&#34;&gt;[PATCH v8 0/3] Anonymous VMA naming patches (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210827191858.2037087-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210827191858.2037087-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There were several idea for making anonymous virtual memory area to be able to
be named, but not yet any implementation was merged.  This patchset continues
the work.&lt;/p&gt;
&lt;h2 id=&#34;discontiguous-foliospagesets-matthew-wilcox&#34;&gt;Discontiguous folios/pagesets (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YSqIry5dKg+kqAxJ@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YSqIry5dKg+kqAxJ@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folio is for helping VM dealing with physically contiguous chunks of memory.
This mail iscuss about extending folios for logically contiguous but physically
discontiguous chunks of memory.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-linus-torvalds&#34;&gt;Linux 5.14 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wh75ELUu99yPkPNt+R166CK=-M4eoV+F62tW3TVgB7=4g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wh75ELUu99yPkPNt+R166CK=-M4eoV+F62tW3TVgB7=4g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One week after the -rc7, Linux 5.14 is released.  Now let&amp;rsquo;s see what v5.15
would be look like after the merge window completes.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc8..v5.14.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-06-28 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc7</title>
      <link>/post/lkml_news_v5.14-rc7/</link>
      <pubDate>Tue, 17 Aug 2021 07:07:40 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v2-03-virtio-mem-disallow-mapping-virtio-mem-memory-via-devmem-david-hildenbrand&#34;&gt;[PATCH v2 0/3] virtio-mem: disallow mapping virtio-mem memory via /dev/mem (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210816142505.28359-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210816142505.28359-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the virtio-mem driver is plugging/unplugging memory of virtual machines,
accessing the memory region via &lt;code&gt;/dev/mem&lt;/code&gt; from the user space makes no sense.
To avoid such insane use case, this patchset adds a basic infrastructure to
exclude some physical memory regions completely from &lt;code&gt;/dev/mem&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0061-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH v2 00/61] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210817154651.1570984-1-Liam.Howlett@oracle.com&#34;&gt;https://lkml.kernel.org/r/20210817154651.1570984-1-Liam.Howlett@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a new data structure called maple tree, which intended
to replace the rbtree for &lt;code&gt;vm_area_struct&lt;/code&gt;.  Because this is a range based
B-tree, the author argues this can solve the locking scalability issue.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-16-22-16-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-16-22-16 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210817051640.JSWSiyLWh%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210817051640.JSWSiyLWh%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mm of the moment queue updated.  10 patches dropped, 42 patches added, and 44
patches modified.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dropped
-------

kasan-kmemleak-reset-tags-when-scanning-block.patch
kasan-slub-reset-tag-when-printing-address.patch
lib-use-pfn_phys-in-devmem_is_allowed.patch
linux-next-git-rejects.patch
linux-next-rejects-fix.patch
makefile-remove-stale-cc-option-checks.patch
mm-madvise-report-sigbus-as-efault-for-madv_populate_readwrite.patch
mm-memcg-fix-incorrect-flushing-of-lruvec-data-in-obj_stock.patch
mm-slub-fix-slub_debug-disablement-for-list-of-slabs.patch
slub-fix-kmalloc_pagealloc_invalid_free-unit-test.patch

Added
-----

all-replace-find_next_zero_bit-with-find_first_zero_bit-where-appropriate.patch
arch-remove-generic_find_first_bit-entirely.patch
bitmap-unify-find_bit-operations.patch
bitops-move-find_bit__le-functions-from-leh-to-findh.patch
bitops-protect-find_first_zero_bit-properly.patch
checkpatch-make-email-address-check-case-insensitive.patch
cpumask-replace-cpumask_next_-with-cpumask_first_-where-appropriate.patch
cpumask-use-find_first_and_bit.patch
devfreq-use-hz-macros.patch
find-micro-optimize-for_each_setclear_bit.patch
hwmon-drivers-mr75203-use-hz-macros.patch
i2c-drivers-ov02q10-use-hz-macros.patch
iio-drivers-as73211-use-hz-macros.patch
iio-drivers-hid-sensor-use-hz-macros.patch
include-linux-move-for_each_bit-macros-from-bitopsh-to-findh.patch
include-move-findh-from-asm_generic-to-linux.patch
lib-add-find_first_and_bit.patch
lib-bitmap-add-performance-test-for-bitmap_print_to_pagebuf.patch
memblock-make-memblock_find_in_range-method-private.patch
mm-add-kernel_misc_reclaimable-in-show_free_areas.patch
mm-gup-documentation-corrections-for-gup-pup.patch
mm-gup-remove-try_get_page-call-try_get_compound_head-directly.patch
mm-gup-small-refactoring-simplify-try_grab_page.patch
mm-hwpoison-change-argument-struct-page-hpagep-to-hpage.patch
mm-hwpoison-fix-potential-pte_unmap_unlock-pte-error.patch
mm-hwpoison-fix-some-obsolete-comments.patch
mm-hwpoison-remove-unneeded-variable-unmap_success.patch
mm-idle_page_tracking-make-pg_idle-reusable-fix-2.patch
mm-in_irq-cleanup.patch
mm-percpu-micro-optimize-pcpu_is_populated.patch
mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled-fix-fix.patch
mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled-fix.patch
mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch
mtd-drivers-nand-use-hz-macros.patch
phy-drivers-stm32-use-hz-macros.patch
replace-for_each__bit_from-with-for_each__bit-where-appropriate.patch
thermal-drivers-devfreq_cooling-use-hz-macros.patch
tools-rename-bitmap_alloc-to-bitmap_zalloc.patch
tools-sync-tools-bitmap-with-mother-linux.patch
units-add-the-hz-macros.patch
units-change-from-l-to-ul.patch
vsprintf-rework-bitmap_list_string.patch

Modified
--------

fix-zone_id-may-be-used-uninitialized-in-this-function-warning.patch
info-task-hung-in-generic_file_write_iter.patch
init-mainc-silence-some-wunused-parameter-warnings.patch
kconfigdebug-drop-selecting-non-existing-hardlockup_detector_arch.patch
lib-test-convert-test_sortc-to-use-kunit.patch
linux-next-rejects.patch
linux-next.patch
math-rational_kunit_test-should-depend-on-rational-instead-of-selecting-it.patch
memcg-enable-accounting-for-mnt_cache-entries.patch
memcg-enable-accounting-for-new-namesapces-and-struct-nsproxy.patch
mm-debug_vm_pgtable-fix-corrupted-page-flag.patch
mm-debug_vm_pgtable-introduce-struct-pgtable_debug_args.patch
mm-debug_vm_pgtable-remove-unused-code.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-basic-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-leaf-and-savewrite-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-migration-and-thp-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pgd-and-p4d-modifying-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pmd-modifying-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-protnone-and-devmap-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pte-modifying-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-pud-modifying-tests.patch
mm-debug_vm_pgtable-use-struct-pgtable_debug_args-in-soft_dirty-and-swap-tests.patch
mm-delete-unused-get_kernel_page.patch
mm-introduce-memmap_alloc-to-unify-memory-map-allocation.patch
mm-migrate-enable-returning-precise-migrate_pages-success-count.patch
mm-move-kvmalloc-related-functions-to-slabh.patch
mm-numa-automatically-generate-node-migration-order.patch
mm-page_alloc-always-initialize-memory-map-for-the-holes.patch
mm-page_alloc-make-alloc_node_mem_map-__init-rather-than-__ref.patch
mm-remove-pfn_valid_within-and-config_holes_in_zone.patch
mm-remove-redundant-compound_head-calling.patch
mm-report-a-more-useful-address-for-reclaim-acquisition.patch
mm-rmap-convert-from-atomic_t-to-refcount_t-on-anon_vma-refcount.patch
mm-slub-convert-kmem_cpu_slab-protection-to-local_lock.patch
mm-slub-optionally-save-restore-irqs-in-slab_lock.patch
mm-slub-use-migrate_disable-on-preempt_rt.patch
mm-track-present-early-pages-per-zone.patch
mm-use-in_task-in-mm-page_allocc.patch
mm-workingset-correct-kernel-doc-notations.patch
mm.patch
origin.patch
proc-stop-using-seq_get_buf-in-proc_task_name.patch
shmem-use-raw_spinlock_t-for-stat_lock.patch
trap-cleanup-trap_init.patch

summary: 10 drop, 42 add, 44 modified
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;patch-v4-0011-multigenerational-lru-framework-yu-zhao&#34;&gt;[PATCH v4 00/11] Multigenerational LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210818063107.2696454-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20210818063107.2696454-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fourth version of the multi-gen LRU.  Unclear what&amp;rsquo;s the difference from
v3, though.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-19-22-10-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-19-22-10 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210820051045.l7RIfLz4C%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210820051045.l7RIfLz4C%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mm of the moment queue updated.  0 patches dropped, 34 patches added, and 31
patches modified.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Added
-----

checkpatch-add-__alloc_size-to-known-attribute.patch
compiler-attributes-add-__alloc_size-for-better-bounds-checking.patch
doc-hwpoison-correct-the-support-for-hugepage.patch
huge-tmpfs-decide-statst_blksize-by-shmem_is_huge.patch
huge-tmpfs-fix-fallocatevanilla-advance-over-huge-pages.patch
huge-tmpfs-fix-split_huge_page-after-falloc_fl_keep_size.patch
huge-tmpfs-move-shmem_huge_enabled-upwards.patch
huge-tmpfs-remove-shrinklist-addition-from-shmem_setattr.patch
huge-tmpfs-revert-shmems-use-of-transhuge_vma_enabled.patch
huge-tmpfs-sgp_noalloc-to-stop-collapse_file-on-race.patch
huge-tmpfs-shmem_is_hugevma-inode-index.patch
hugetlb-dont-pass-page-cache-pages-to-restore_reserve_on_error.patch
ia64-fix-typo-in-a-comment.patch
kfence-fix-is_kfence_address-for-addresses-below-kfence_pool_size.patch
maintainers-update-clangbuiltlinux-irc-chat.patch
mm-bootmem_info-mark-__init-on-register_page_bootmem_info_section.patch
mm-hwpoison-dont-drop-slab-caches-for-offlining-non-lru-page.patch
mm-hwpoison-dump-page-for-unhandlable-page.patch
mm-hwpoison-retry-with-shake_page-for-unhandlable-pages.patch
mm-introduce-pageflags_mask-to-replace-1ul-nr_pageflags-1.patch
mm-memcontrol-fix-occasional-ooms-due-to-proportional-memorylow-reclaim.patch
mm-page_alloc-add-__alloc_size-attributes-for-better-bounds-checking.patch
mm-remove-bogus-vm_bug_on.patch
mm-slub-convert-kmem_cpu_slab-protection-to-local_lock-fix-2.patch
mm-slub-convert-kmem_cpu_slab-protection-to-local_lock-fix.patch
mm-vmscan-fix-missing-psi-annotation-for-node_reclaim.patch
mm-vmscan-guarantee-drop_slab_node-termination.patch
ocfs2-quota_local-fix-possible-uninitialized-variable-access-in-ocfs2_local_read_info.patch
percpu-add-__alloc_size-attributes-for-better-bounds-checking.patch
remap_file_pages-use-vma_lookup-instead-of-find_vma.patch
shmem-shmem_writepage-split-unlikely-i915-thp.patch
slab-add-__alloc_size-attributes-for-better-bounds-checking.patch
slab-clean-up-function-declarations.patch
vsprintf-rework-bitmap_list_string-fix.patch

Modified
--------

info-task-hung-in-generic_file_write_iter.patch
init-mainc-silence-some-wunused-parameter-warnings.patch
init-move-usermodehelper_enable-to-populate_rootfs.patch
kconfigdebug-drop-selecting-non-existing-hardlockup_detector_arch.patch
lib-test-convert-test_sortc-to-use-kunit.patch
linux-next-rejects.patch
linux-next.patch
math-rational_kunit_test-should-depend-on-rational-instead-of-selecting-it.patch
mm-idle_page_tracking-make-pg_idle-reusable.patch
mm-migrate-enable-returning-precise-migrate_pages-success-count.patch
mm-slub-call-deactivate_slab-without-disabling-irqs.patch
mm-slub-check-new-pages-with-restored-irqs.patch
mm-slub-convert-kmem_cpu_slab-protection-to-local_lock.patch
mm-slub-do-initial-checks-in-___slab_alloc-with-irqs-enabled.patch
mm-slub-move-disabling-irqs-closer-to-get_partial-in-___slab_alloc.patch
mm-slub-move-flush_cpu_slab-invocations-__free_slab-invocations-out-of-irq-context-fix-2.patch
mm-slub-move-flush_cpu_slab-invocations-__free_slab-invocations-out-of-irq-context-fix.patch
mm-slub-move-reset-of-c-page-and-freelist-out-of-deactivate_slab.patch
mm-slub-optionally-save-restore-irqs-in-slab_lock.patch
mm-slub-restore-irqs-around-calling-new_slab.patch
mm-slub-stop-disabling-irqs-around-get_partial.patch
mm-slub-validate-slab-from-partial-list-or-page-allocator-before-making-it-cpu-slab.patch
mmflagsh-add-missing-__gfp_zerotags-and-__gfp_skip_kasan_poison-names.patch
origin.patch
selftests-vm-add-cow-time-test-for-ksm-pages.patch
selftests-vm-add-ksm-merge-test.patch
selftests-vm-add-ksm-merging-across-nodes-test.patch
selftests-vm-add-ksm-merging-time-test.patch
selftests-vm-add-ksm-unmerge-test.patch
selftests-vm-add-ksm-zero-page-merging-test.patch
trap-cleanup-trap_init.patch

summary: 0 drop, 34 add, 31 modified
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reminder-lsfmmbpf-2021-cancellation-announcement-josef-bacik&#34;&gt;[REMINDER] LSF/MM/BPF: 2021: Cancellation announcement (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/611ff5df.1c69fb81.43234.a478@mx.google.com&#34;&gt;https://lkml.kernel.org/r/611ff5df.1c69fb81.43234.a478@mx.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, LSF/MM/BPF for 2021 has canceled due to the COVID19 infection.
So sad, but hopefully this could be continued in 2022!&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc7-linus-torvalds&#34;&gt;Linux 5.14-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgZ_W7ZF84Mtq6KRjF4FEoYh14dnw+Oc0avZz_6WrCkfw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgZ_W7ZF84Mtq6KRjF4FEoYh14dnw+Oc0avZz_6WrCkfw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No strange things happened last week, so seventh rc is normal.  Unless we find
something special this week, we will show 5.14 next week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc7..v5.14-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-08-23 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc6</title>
      <link>/post/lkml_news_v5.14-rc6/</link>
      <pubDate>Tue, 10 Aug 2021 07:23:37 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v9-12-mm-introduce-process_mrelease-system-call-suren-baghdasaryan&#34;&gt;[PATCH v9 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210809185259.405936-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210809185259.405936-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9th version of the patchset which introducing a new system call for releasing
memory of a process in a speedy manner.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-09-19-18-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-09-19-18 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210810021934.XcpwGUEMn%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210810021934.XcpwGUEMn%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-mm tree updated.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-x86-impplement-support-for-unaccepted-memory-kirill-a-shutemov&#34;&gt;[PATCH 0/5] x86: Impplement support for unaccepted memory (Kirill A. Shutemov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210810062626.1012-1-kirill.shutemov@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/20210810062626.1012-1-kirill.shutemov@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some platforms like Intel TDX or AMD SEV-SNP require memory to be accepted
before it can be used by the guest.  Because the acceptance operation is
existance, this patchset implements on-demand memory acceptance for TDX.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-folio-add-a-function-to-get-the-host-inode-for-a-folio-david-howells&#34;&gt;[RFC PATCH] folio: Add a function to get the host inode for a folio (David Howells)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/162880453171.3369675.3704943108660112470.stgit@warthog.procyon.org.uk&#34;&gt;https://lkml.kernel.org/r/162880453171.3369675.3704943108660112470.stgit@warthog.procyon.org.uk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC adds a function &lt;code&gt;folio_inode()&lt;/code&gt; which gets the host inode from a
folio&amp;rsquo;s mapping.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-12-17-34-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-12-17-34 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210813003532.rn9wMWItF%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210813003532.rn9wMWItF%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm updated.  29 patches added, one dropped
(shmem_swapin_page-fix-error-processing-for-get_swap_device.patch), and three
modified.&lt;/p&gt;
&lt;h2 id=&#34;rfcpatch-netfs-afs-ceph-use-folios-david-howells&#34;&gt;[RFC][PATCH] netfs, afs, ceph: Use folios (David Howells)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/2408234.1628687271@warthog.procyon.org.uk&#34;&gt;https://lkml.kernel.org/r/2408234.1628687271@warthog.procyon.org.uk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes netfs helper library and the afs filesystem to use memory
folios.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc6-linus-torvalds&#34;&gt;Linux 5.14-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi8=9QbNFFZ1PwZ=J-3w6LkhF68_rEns-mN1DCJrYo1qQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi8=9QbNFFZ1PwZ=J-3w6LkhF68_rEns-mN1DCJrYo1qQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another fairly normal rc release.  Changes spread over usual subsystems.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc6..v5.14-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-08-16 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc5</title>
      <link>/post/lkml_news_v5.14-rc5/</link>
      <pubDate>Tue, 03 Aug 2021 07:09:02 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-03-mm-optimize-thp-for-reclaim-and-migration-yu-zhao&#34;&gt;[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset drops subpages of THPs which contain only zero contents when
splitting those, to reduce memory pressure overheads due to THP internal
fragmentations.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-12-mm-introduce-process_mrelease-system-call-suren-baghdasaryan&#34;&gt;[PATCH v4 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210802221431.2251210-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210802221431.2251210-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a new system call, namely &lt;code&gt;process_mrelease()&lt;/code&gt;.  It
can be used to quickly release memory of a process.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-05-introduce-multi-preference-mempolicy-feng-tang&#34;&gt;[PATCH v7 0/5] Introduce multi-preference mempolicy (Feng Tang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1627970362-61305-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1627970362-61305-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset allows users to set multiple preferred memory policy, so that a
process can use memory from multiple NUMA nodes.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmmadvise-add-madv_willneed-to-process_madvise-zhangkui&#34;&gt;[PATCH] mm/madvise: add MADV_WILLNEED to process_madvise() (zhangkui)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210804082010.12482-1-zhangkui@oppo.com&#34;&gt;https://lkml.kernel.org/r/20210804082010.12482-1-zhangkui@oppo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch allow &lt;code&gt;process_madvise()&lt;/code&gt; to allow &lt;code&gt;MADV_WILLNEED&lt;/code&gt; behavior.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-12-mm-introduce-process_mrelease-system-call-suren-baghdasaryan&#34;&gt;[PATCH v6 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210804185004.1304692-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210804185004.1304692-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth version of &lt;code&gt;process_mrelease()&lt;/code&gt; system call introduction patchset.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-12-mm-introduce-process_mrelease-system-call-suren-baghdasaryan&#34;&gt;[PATCH v7 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210805170859.2389276-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210805170859.2389276-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seventh version of the patchset posted quite soon.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-08-05-19-46-uploaded-andrew-morton&#34;&gt;mmotm 2021-08-05-19-46 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210806024648.V0Ye_YURy%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210806024648.V0Ye_YURy%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The -mm tree is updated.  This time, DAMON patchset is merged in.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-add-ksm-performance-tests-zhansaya-bagdauletkyzy&#34;&gt;[PATCH v2 0/2] add KSM performance tests (Zhansaya Bagdauletkyzy)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1628199399.git.zhansayabagdaulet@gmail.com&#34;&gt;https://lkml.kernel.org/r/cover.1628199399.git.zhansayabagdaulet@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset extends KSM self tests with a performance test.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc5-linus-torvalds&#34;&gt;Linux 5.14-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg8QmMMBCEYCV0gPM2GqRQObsQ__fK0r8C6SYAg3Upyjg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg8QmMMBCEYCV0gPM2GqRQObsQ__fK0r8C6SYAg3Upyjg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifth rc release is perfectly normal in terms of the size and the
distribution of the changes.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc5..v5.14-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-08-09 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc4</title>
      <link>/post/lkml_news_v5.14-rc4/</link>
      <pubDate>Thu, 29 Jul 2021 17:48:11 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc4/</guid>
      <description>&lt;h2 id=&#34;mmotm-2021-07-28-18-24-uploaded-andrew-morton&#34;&gt;mmotm 2021-07-28-18-24 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210729012524.S8-WP%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210729012524.S8-WP%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Morton is updating the -mm tree.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210729145259.24681c326dc3ed18194cf9e5@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210729145259.24681c326dc3ed18194cf9e5@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seven fixup patches from Andrew Morton.&lt;/p&gt;
&lt;h2 id=&#34;patch-03-mm-optimize-thp-for-reclaim-and-migration-yu-zhao&#34;&gt;[PATCH 0/3] mm: optimize thp for reclaim and migration (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20210731063938.1391602-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch optimizes THP split for reclaim or migration by dropping subpages
that contain only zeroes.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc4-linus-torvalds&#34;&gt;Linux 5.14-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whv0g5YqoRXc8oxqJX3r+GP1dN3ia_Qg_V6UTjhi8vg8w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whv0g5YqoRXc8oxqJX3r+GP1dN3ia_Qg_V6UTjhi8vg8w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After one week, entirely normal rc4 is released.  5.14 is not so far now.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc4..v5.14-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-08-02 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc3</title>
      <link>/post/lkml_news_v5.14-rc3/</link>
      <pubDate>Tue, 20 Jul 2021 07:24:31 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-07-free-user-pte-page-table-pages-qi-zheng&#34;&gt;[PATCH 0/7] Free user PTE page table pages (Qi Zheng)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210718043034.76431-1-zhengqi.arch@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20210718043034.76431-1-zhengqi.arch@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset frees user PTE page table pages when all PTE entries are empty,
to reduce the memory overhead due to page tables.&lt;/p&gt;
&lt;h2 id=&#34;patch-v15-0017-folio-support-in-block--iomap-layers-matthew-wilcox&#34;&gt;[PATCH v15 00/17] Folio support in block + iomap layers (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210719184001.1750630-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210719184001.1750630-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seems memory folios patchset is now merged in -mm tree and -next tree.  This
patchset further updates iomap to use folios.&lt;/p&gt;
&lt;h2 id=&#34;runtime-memory-validation-in-intel-tdx-and-amd-snp-joerg-roedel&#34;&gt;Runtime Memory Validation in Intel-TDX and AMD-SNP (Joerg Roedel)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YPV27hDPZUoVsIZt@suse.de&#34;&gt;https://lkml.kernel.org/r/YPV27hDPZUoVsIZt@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a proposal mail describing how to implement runtime memory validation
for confidential guests.&lt;/p&gt;
&lt;h2 id=&#34;rfc--v7-06-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[RFC -V7 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210722031819.3446711-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20210722031819.3446711-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tiered-memory system usually uses RAM and PMEM.
Commit c221c0b0308f (&amp;ldquo;device-dax: &amp;ldquo;Hotplug&amp;rdquo; persistent memory for use like
normal RAM&amp;rdquo;) made PMEM could be accessed as simply a very slow NUMA node.
After that, &amp;lsquo;[PATCH -V10 0/9] Migrate Pages in lieu of discard&amp;rsquo; made a
mechanism to demote cold DRAM pages to PMEM node under memory pressure.  This
patchset further optimizes the mechanism and achieves up to 119.1% improvement
with pmbench.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-12-mm-introduce-process_mrelease-system-call-suren-baghdasaryan&#34;&gt;[PATCH v3 1/2] mm: introduce process_mrelease system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210723011436.60960-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210723011436.60960-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Facebook&amp;rsquo;s oomd or Android&amp;rsquo;s lmkd uses a strategy of killing processes under
memory pressure.  However, the time to free memory depends on each process.
This patchset introduces a new system call that can be used for faster memory
release.&lt;/p&gt;
&lt;h2 id=&#34;patch-resend-mm-compaction-optimize-proactive-compaction-deferrals-charan-teja-reddy&#34;&gt;[PATCH resend] mm: compaction: optimize proactive compaction deferrals (Charan Teja Reddy)&lt;/h2&gt;
&lt;p&gt;When proactive compaction is making no progress, it waits some time before
trying again.  For this, it repeatedly sleeps, awakes, and decrement a counter.
If the counter becomes 0, it retries the compaction.  The wakeup for only
counter decrement makes no sense, so this patch makes it unnecessary.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc3-linus-torvalds&#34;&gt;Linux 5.14-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgvwZiLbZpFUApWFDkwyjC3+EmRoEBAuP+VzNQaMd630g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgvwZiLbZpFUApWFDkwyjC3+EmRoEBAuP+VzNQaMd630g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another week, another rc.  Last release was something worrisome, becuase it was
quite big.  Seems things calmed down, as rc3 looks pretty normal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc3..v5.14-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-07-26 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc2</title>
      <link>/post/lkml_news_v5.14-rc2/</link>
      <pubDate>Tue, 13 Jul 2021 07:17:44 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v6-06-introduce-multi-preference-mempolicy-feng-tang&#34;&gt;[PATCH v6 0/6] Introduce multi-preference mempolicy (Feng Tang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1626077374-81682-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1626077374-81682-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Six version of the patchset that allows applications to set multiple preferred
memory policy.&lt;/p&gt;
&lt;h2 id=&#34;patch-v1-madvise2-document-madv_populate_read-and-madv_populate_write-david-hildenbrand&#34;&gt;[PATCH v1] madvise.2: Document MADV_POPULATE_READ and MADV_POPULATE_WRITE (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210712083917.16361-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210712083917.16361-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch documents the new &lt;code&gt;madvise()&lt;/code&gt; options, &lt;code&gt;MADV_POPULATE_(READ|WRITE)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;request-for-folios-david-howells&#34;&gt;Request for folios (David Howells)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/3398985.1626104609@warthog.procyon.org.uk&#34;&gt;https://lkml.kernel.org/r/3398985.1626104609@warthog.procyon.org.uk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David is working for improving local filesystem&amp;rsquo;s caching and network
filesystem support library.  He thinks the folio work would make his work
easier, though it also makes some of his work challenging.  Therefore, he is
asking Andrew to merge it in the -mm tree.&lt;/p&gt;
&lt;h2 id=&#34;patch-v13a-0032-memory-folios-matthew-wilcox&#34;&gt;[PATCH v13a 00/32] Memory folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210712190204.80979-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210712190204.80979-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a new type for managing pages, called folios.  It allows
dealing with variable sized pages simpler.&lt;/p&gt;
&lt;h2 id=&#34;patch-v13b-0018-convert-memcg-to-folios-matthew-wilcox&#34;&gt;[PATCH v13b 00/18] Convert memcg to folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210712194551.91920-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210712194551.91920-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the second part of memory folios.  On top of memofy folios
introduction, this patchset converts memcg to use folios for better handling of
variable-sized pages.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0014-mm-sparse-vmemmap-introduce-compound-pagemaps-joao-martins&#34;&gt;[PATCH v3 00/14] mm, sparse-vmemmap: Introduce compound pagemaps (Joao Martins)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210714193542.21857-1-joao.m.martins@oracle.com&#34;&gt;https://lkml.kernel.org/r/20210714193542.21857-1-joao.m.martins@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset is for further reducing &lt;code&gt;struct page&lt;/code&gt; memory overhead for huge
pages.  It applies the strategy of Muchun Song
(&lt;a href=&#34;https://lore.kernel.org/linux-mm/20210308102807.59745-1-songmuchun@bytedance.com/&#34;&gt;https://lore.kernel.org/linux-mm/20210308102807.59745-1-songmuchun@bytedance.com/&lt;/a&gt;)
further to PMD.&lt;/p&gt;
&lt;h2 id=&#34;mmotm-2021-07-15-18-29-uploaded-andrew-morton&#34;&gt;mmotm 2021-07-15-18-29 uploaded (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210716012956.QCXYl0cgg%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210716012956.QCXYl0cgg%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mmotm has finally updated after the 5.14 mergewindow.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-mm-introduce-reference-pages-peter-collingbourne&#34;&gt;[PATCH v5] mm: introduce reference pages (Peter Collingbourne)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210717025757.3945742-1-pcc@google.com&#34;&gt;https://lkml.kernel.org/r/20210717025757.3945742-1-pcc@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case of anonymous pages allocations, the memory region is initially mapped
to clean zero page.  This patch introduces a new syscall, &lt;code&gt;refpage_create()&lt;/code&gt;,
which makes the memory regions to be initially mapped to a page containing
user-specificed contents, instead of the zero page.&lt;/p&gt;
&lt;h2 id=&#34;linux-514-rc2&#34;&gt;Linux 5.14-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjYghA5O+ZsWKVNApMK3j4V1EibO5P+c4MrHnqp8YhY=g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjYghA5O+ZsWKVNApMK3j4V1EibO5P+c4MrHnqp8YhY=g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second release candidate for Linux v5.14 is released.  This release is
larger than expected.  It is largest rc2 during 5.x.  This might mean there are
something wrong, but no certainly wrong things found, so it must be too early
to say so.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc2..v5.14-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-07-19 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.14-rc1</title>
      <link>/post/lkml_news_v5.14-rc1/</link>
      <pubDate>Tue, 29 Jun 2021 07:11:39 +0200</pubDate>
      <guid>/post/lkml_news_v5.14-rc1/</guid>
      <description>&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210628193256.008961950a714730751c1423@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210628193256.008961950a714730751c1423@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first pull request from Andrew Morton for the v5.14 merge window.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0018-folio-conversion-of-memcg-matthew-wilcox&#34;&gt;[PATCH v3 00/18] Folio conversion of memcg (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210630040034.1155892-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210630040034.1155892-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset was a part of the memory folio patchset, but has split out to
individual patchset.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210630184624.9ca1937310b0dd5ce66b30e7@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210630184624.9ca1937310b0dd5ce66b30e7@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rest of the -mm tree, which dependent on things in -next.  Andrew will trickle
that over next week, before the merge window is closed.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-writeback-fix-bandwidth-estimates-jan-kara&#34;&gt;[PATCH 0/5] writeback: Fix bandwidth estimates (Jan Kara)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210705161610.19406-1-jack@suse.cz&#34;&gt;https://lkml.kernel.org/r/20210705161610.19406-1-jack@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the storage device is not fully busy, the writeback throughput estimation
can be wrongly zero.&lt;/p&gt;
&lt;p&gt;This patchset fixes the issue and cleans up related code.&lt;/p&gt;
&lt;h2 id=&#34;patch-part1-rfc-v4-0036-add-amd-secure-nested-paging-sev-snp-guest-support-brijesh-singh&#34;&gt;[PATCH Part1 RFC v4 00/36] Add AMD Secure Nested Paging (SEV-SNP) Guest Support (Brijesh Singh)&lt;/h2&gt;
&lt;p&gt;This patchset series makes Linux to support Secure Encryptd Paging (SEV-SNP) of
AMD.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-2&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210707175950.eceddb86c6c555555d4730e2@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210707175950.eceddb86c6c555555d4730e2@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another pull request from Andrew Morton.  Below patchsets looks interesting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;mm: introduce memfd_secret system call to create &amp;ldquo;secret&amp;rdquo; memory areas&amp;rdquo;, v20&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Add build ID to stacktraces&amp;rdquo;, v6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux-514-rc1-linus-torvalds&#34;&gt;Linux 5.14-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjB5XBk4obhMPfrU3mnOakV9VgHAYOo-ZGJnB2X0DnBWA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjB5XBk4obhMPfrU3mnOakV9VgHAYOo-ZGJnB2X0DnBWA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Usual two weeks of the merge winodw has passed and now the first release
candidate for 5.14 is ready.  This release is just usual in size, though the
regular size doesn&amp;rsquo;t always means there will be only regular amount of issues.&lt;/p&gt;
&lt;p&gt;Most of the changes are for AMD drivers headers.  Other than that, most changes
are for drivers.  Remaining changes are well spread to architectures and
various core kernel parts.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.3-rc2..v5.14-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-07-12 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.14-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13</title>
      <link>/post/lkml_news_v5.13/</link>
      <pubDate>Tue, 22 Jun 2021 07:02:23 +0200</pubDate>
      <guid>/post/lkml_news_v5.13/</guid>
      <description>&lt;h2 id=&#34;patch-v4-mm-introduce-reference-pages-peter-collingbourne&#34;&gt;[PATCH v4] mm: introduce reference pages (Peter Collingbourne)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210619092002.1791322-1-pcc@google.com&#34;&gt;https://lkml.kernel.org/r/20210619092002.1791322-1-pcc@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces a new syscall, &lt;code&gt;refpage_create()&lt;/code&gt;.  This system creates a
file descriptor which can be mmap-ed using &lt;code&gt;mmap()&lt;/code&gt;, which will be similar to
anonymous mapping but the memory will be backed by a reference page instead of
the zero page.&lt;/p&gt;
&lt;h2 id=&#34;patch-03-mmpage_reporting-make-page-reporting-work-on-arm64-with-64kb-page-size-gavin-shan&#34;&gt;[PATCH 0/3] mm/page_reporting: Make page reporting work on arm64 with 64KB page size (Gavin Shan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210621051152.305224-1-gshan@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210621051152.305224-1-gshan@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes the page reporting to work on ARM with more realistic
threshold, which is 2MB instead of 512MB, when the system&amp;rsquo;s page size is 64KB.
This will be very helpful for memory-fragmented systems.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-impact-on-core-mm-from-new-hardware-features-dave-hansen&#34;&gt;[LSF/MM TOPIC] Impact on core mm from new hardware features (Dave Hansen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/51d3010b-6324-2441-42c0-27bb536c897d@intel.com&#34;&gt;https://lkml.kernel.org/r/51d3010b-6324-2441-42c0-27bb536c897d@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dave is proposing a LSF/MM session for discussion on core mm changes for
Intel&amp;rsquo;s new hardware features including shadow stack, linear address masking,
supervisor protection key, and TDX.&lt;/p&gt;
&lt;h2 id=&#34;patch-v12-0033-memory-folios-matthew-wilcox&#34;&gt;[PATCH v12 00/33] Memory folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210622114118.3388190-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210622114118.3388190-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces memory folio, which is a new abstraction for pages of
different size.  This makes the handling of compound pages be easy.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0046-folio-enabling-the-page-cache-matthew-wilcox&#34;&gt;[PATCH v2 00/46] Folio-enabling the page cache (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210622121551.3398730-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210622121551.3398730-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset converts filesystems to use memory folios.&lt;/p&gt;
&lt;h2 id=&#34;patch-11-mm-introduce-process_reap-system-call-suren-baghdasaryan&#34;&gt;[PATCH 1/1] mm: introduce process_reap system call (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210623192822.3072029-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210623192822.3072029-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces a new system call, &lt;code&gt;process_reap()&lt;/code&gt;, which reclaims
memory of a dying process from the caller&amp;rsquo;s context.  This can be helpful for
reclaiming memory consumed by other process in predictable time.&lt;/p&gt;
&lt;h2 id=&#34;patch--v9-09-migrate-pages-in-lieu-of-discard-huang-ying&#34;&gt;[PATCH -V9 0/9] Migrate Pages in lieu of discard (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210625073204.1005986-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20210625073204.1005986-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A patchset for the tiered memory systems.  This patchset makes cold pages to be
located in slower memory, like pmem.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-linus-torvalds&#34;&gt;Linux 5.13 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj7E9iTGHbqfgtaTAM09WrVzwXjda2_D59MT8D_1=54Rg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj7E9iTGHbqfgtaTAM09WrVzwXjda2_D59MT8D_1=54Rg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the seven release candidates, Linux v5.13 is out.  It is one of the
bigger 5.x releases.  It has over 16k commits from over 2k people.  Obviously,
this also means the merge window for 5.14 has opened.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2..v5.13.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-06-28 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc7</title>
      <link>/post/lkml_news_v5.13-rc7/</link>
      <pubDate>Tue, 15 Jun 2021 06:58:49 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v11-0033-memory-folios-matthew-wilcox-oracle-33-msgs-matthew-wilcox&#34;&gt;[PATCH v11 00/33] Memory folios (&amp;ldquo;Matthew Wilcox (Oracle)&amp;quot;) (33+ msgs) (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210614201435.1379188-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210614201435.1379188-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eleventh version of the memory folios patchset.  It helps easier handling of
head and tails of compounded pages.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-tiered-memory-accounting-and-management-tim-chen&#34;&gt;[LSF/MM TOPIC] Tiered memory accounting and management (Tim Chen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/475cbc62-a430-2c60-34cc-72ea8baebf2c@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/475cbc62-a430-2c60-34cc-72ea8baebf2c@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another LSF/MM topic for discussion of tiered memory accounting and management,
including the DRAM to PMEM demotion and PMEM to DRAM promotion.&lt;/p&gt;
&lt;h2 id=&#34;reminder-lsfmmbpf-2021-call-for-proposals-josef-bacik&#34;&gt;[REMINDER] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/60ca126b.1c69fb81.90af4.93a7@mx.google.com&#34;&gt;https://lkml.kernel.org/r/60ca126b.1c69fb81.90af4.93a7@mx.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This mail reminds LSF/MM/BPF is still planned as an in person conference.&lt;/p&gt;
&lt;h2 id=&#34;lpc-2021-plumbers-performance-and-scalability-track-davidlohr-bueso&#34;&gt;LPC 2021: Plumbers Performance and Scalability track (Davidlohr Bueso)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210616175935.pnnkjrtzywasmdso@offworld&#34;&gt;https://lkml.kernel.org/r/20210616175935.pnnkjrtzywasmdso@offworld&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &amp;lsquo;Performance and Scalability track&amp;rsquo; for LPC will be back this year.  This
email is to confirm key participants and gather more topics to discuss there.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5--mm-06-introduced-multi-preference-mempolicy-feng-tang&#34;&gt;[PATCH v5 -mm 0/6] Introduced multi-preference mempolicy (Feng Tang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1623987884-43576-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1623987884-43576-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The patchset for mutiple memory policy has revised to fifth version.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-userspace-managed-memory-tiering-wei-xu&#34;&gt;[LSF/MM/BPF TOPIC] Userspace managed memory tiering (Wei Xu)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAAPL-u8Xz=BkTzgyf1o4yh3T2usD=yRfBOUWdLez2AAqooox3A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAAPL-u8Xz=BkTzgyf1o4yh3T2usD=yRfBOUWdLez2AAqooox3A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wei proposes to discuss userspace-managed memory tiering and the kernel support
for that in the LSF/MM/BPF.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc7-linus-torvalds&#34;&gt;Linux 5.13-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjj38E8hW+unHZ9EaJrS6x+4Tnz0qffjvLcGf70dXkKnQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjj38E8hW+unHZ9EaJrS6x+4Tnz0qffjvLcGf70dXkKnQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seventh release candidate for v5.13 released without remakable changes.  The
last week was calm.  Networking has some changes, but most of those were just
small.  If the trend goes on, we will get v5.13 next week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc7..v5.13-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-06-21 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc7 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc6</title>
      <link>/post/lkml_news_v5.13-rc6/</link>
      <pubDate>Tue, 08 Jun 2021 06:53:48 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc6/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v3-zramcalculate-available-memory-when-zram-is-used-wangyong&#34;&gt;[RFC PATCH V3] zram:calculate available memory when zram is used (wangyong)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1623080354-21453-1-git-send-email-yongw.pur@gmail.com&#34;&gt;https://lkml.kernel.org/r/1623080354-21453-1-git-send-email-yongw.pur@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a new entry called &lt;code&gt;SwapAvailable&lt;/code&gt; in &lt;code&gt;/proc/meminfo&lt;/code&gt;.
It shows the memory savings when swap devices are used.  If zram is used, it
considers the compression ratio.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-09-remove-discontigmem-memory-model-mike-rapoport&#34;&gt;[PATCH v3 0/9] Remove DISCONTIGMEM memory model (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210608091316.3622-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210608091316.3622-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset removes DISCONTIGMEM memory model, finally.  There are no more
architectures requiring it.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-consolidating-representations-of-the-physical-memory-mike-rapoport&#34;&gt;[LSF/MM/BPF TOPIC] Consolidating representations of the physical memory (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YMBxeYHBY55Ddkpr@kernel.org&#34;&gt;https://lkml.kernel.org/r/YMBxeYHBY55Ddkpr@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mike says the physical memory layout is quite simple but the kernel has so many
inconsistent structures for representation of it.  He suggests to use memblock
as the basis for the abstraction and discuss about this in the LSF/MM/BPF.&lt;/p&gt;
&lt;h2 id=&#34;re-maintainers--kernel-summit-2021-planning-kick-off-linus-torvalds&#34;&gt;Re: Maintainers / Kernel Summit 2021 planning kick-off (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiB6FJknDC5PMfpkg4gZrbSuC3d391VyReM4Wb0+JYXXA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiB6FJknDC5PMfpkg4gZrbSuC3d391VyReM4Wb0+JYXXA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The maintainers/kernel summit 2021 was initially planned to be held in person,
but it changed to be held fully in virtual a few months ago, obviously due to
the COVID19.  Because the vaccination is going well, there were some
discussions regarding changing the decision or adjusting the plan somehow.  In
the thread, Enrico spoke about his negative opinion regarding the vaccination,
and Torvalds replied to him in this email.  Torvalds explains how vaccines
work, especially for mRNA vaccines, and ask people to be vaccinated to protect
their family and neighbors.  For someone insist on believing what anti-vax
says, he asks to at least &amp;lsquo;SHUT THE HELL UP&amp;rsquo; on LKML.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-improving-alloc_contig_range-david-hildenbrand&#34;&gt;[LSF/MM/BPF TOPIC] Improving alloc_contig_range() (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/c8e21ac4-ace7-3176-8782-535bd6590583@redhat.com&#34;&gt;https://lkml.kernel.org/r/c8e21ac4-ace7-3176-8782-535bd6590583@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David proposes to discuss about &lt;code&gt;alloc_contig_range()&lt;/code&gt; for &lt;code&gt;ZONE_NORMAL&lt;/code&gt;, for
problems of &lt;code&gt;MAX_ORDER&lt;/code&gt;, slab shrinking, PCP handling, etc.&lt;/p&gt;
&lt;h2 id=&#34;idle-thps-matthew-wilcox&#34;&gt;Idle THPs (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YMGKVmt8trMJ9kOP@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YMGKVmt8trMJ9kOP@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While working for the memory folio, Matthew found all tail pages would not set
as Idle.  He is asking if this is intended behavior.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-mark-idle-page-tracking-as-broken-matthew-wilcox&#34;&gt;[PATCH] mm: Mark idle page tracking as BROKEN (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210612000714.775825-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210612000714.775825-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a followup of the Idle THPs question, Matthew and some MM developers
concluded it is not working as expected, and trying to remove that entirely.
As a first step, they are trying to mark it as &lt;code&gt;BROKEN&lt;/code&gt;.  As an alternative, he
suggests userfaultfd like mechanisms.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc6-linus-torvalds&#34;&gt;Linux 5.13-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi9so00V0_ZVBP8oSZpowoWu5VKKTswGz=nuYTpWkkqQA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi9so00V0_ZVBP8oSZpowoWu5VKKTswGz=nuYTpWkkqQA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nothing special in this release.  No scary reports Torvalds received, the size
is just as usual for this stage, and the diffstat looks good.  Torvalds says we
would have 5.13 in timely manner if this trend continues.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc6..v5.13-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-06-14 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc5</title>
      <link>/post/lkml_news_v5.13-rc5/</link>
      <pubDate>Tue, 01 Jun 2021 07:05:24 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v3-02-mm-compaction-proactive-compaction-trigger-by-user-charan-teja-reddy&#34;&gt;[PATCH V3 0/2] mm: compaction: proactive compaction trigger by user (Charan Teja Reddy)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1622454385.git.charante@codeaurora.org&#34;&gt;https://lkml.kernel.org/r/cover.1622454385.git.charante@codeaurora.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces &lt;code&gt;/proc/sys/vm/compaction_proactiveness&lt;/code&gt; file, which
can trigger proactive compaction by writing it.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mmpage_reporting-adjust-threshold-according-to-max_order-gavin-shan&#34;&gt;[RFC PATCH] mm/page_reporting: Adjust threshold according to MAX_ORDER (Gavin Shan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210601033319.100737-1-gshan@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210601033319.100737-1-gshan@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The free pages reporting feature doesn&amp;rsquo;t allow discontiguous pages that smaller
than &lt;code&gt;PAGE_REPORTING_MIN_ORDER&lt;/code&gt;.  Current setting of it makes the feature to
never work on specific environment, because it is set to be equal to
&lt;code&gt;pageblock_order&lt;/code&gt;.  This patchset mitigates the situation.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-mmap-locking-topics-michel-lespinasse&#34;&gt;[LSF/MM TOPIC] mmap locking topics (Michel Lespinasse)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210601044845.GA12713@lespinasse.org&#34;&gt;https://lkml.kernel.org/r/20210601044845.GA12713@lespinasse.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two topics for mmap locking issue, specificallyt speculative page faults and
fine grained locking are proposed.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-the-maple-tree-liam-howlett&#34;&gt;[LSF/MM/BPF TOPIC] The Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210601223007.pvrns2kqqzuomdlm@revolver&#34;&gt;https://lkml.kernel.org/r/20210601223007.pvrns2kqqzuomdlm@revolver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another LSF/MM topic for the maple tree.  It is a RCU-safe range-based B-tree.
It aims to be used for MM structures.  Liam proposes to discuss how to use it
and how it could be used for the file systems in LSF/MM.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-handling-of-vmas-liam-howlett&#34;&gt;[LSF/MM/BPF TOPIC] Handling of VMAs (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210602150312.cjg3vhren2c5arp7@revolver&#34;&gt;https://lkml.kernel.org/r/20210602150312.cjg3vhren2c5arp7@revolver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Liam is proposing another LSF/MM topic for VMA scalability.  He points out
current VMAs handling is unnecessarily complicated and therefore we need to
revisit it.  He also says he will post more patches before the conference.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-allow-high-order-pages-to-be-stored-on-pcp-v2-mel-gorman&#34;&gt;[PATCH 0/2] Allow high order pages to be stored on PCP v2 (Mel Gorman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210603142220.10851-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20210603142220.10851-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only order-0 pages are handled by the per-cpu page allocator (PCP).  This
patchset reduce PCP overhead and make it able to store high-order pages on PCP.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-09-remove-discintigmem-memory-model-mike-rapoport&#34;&gt;[PATCH v2 0/9] Remove DISCINTIGMEM memory model (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210604064916.26580-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210604064916.26580-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset finally removes DISCONTIGMEM memory model, because SPARSEMEM is
replacing it.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc5-linus-torvalds&#34;&gt;Linux 5.13-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgxOqRbXUwQ73sMgxfOg9+B7BeTgZ6JP9oHR9BPhKGjOg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgxOqRbXUwQ73sMgxfOg9+B7BeTgZ6JP9oHR9BPhKGjOg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Already fifth release candidate.  Nevertheless, Torvalds says the things not
really calmed down yet, so he hopes it to be calmed now.  Biggest fixes came
from networking, but other parts also have fair amount of fixes.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc5..v5.13-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-06-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc4</title>
      <link>/post/lkml_news_v5.13-rc4/</link>
      <pubDate>Tue, 25 May 2021 07:24:13 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-02-arm64-remove-page-granularity-limitation-from-kfence-jisheng-zhang&#34;&gt;[PATCH 0/2] arm64: remove page granularity limitation from KFENCE (Jisheng Zhang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210524172433.015b3b6b@xhacker.debian&#34;&gt;https://lkml.kernel.org/r/20210524172433.015b3b6b@xhacker.debian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset removes the page granularity mapping requirement for the KFENCE&amp;rsquo;s
linear map, to achieve both arm64&amp;rsquo;s block level and contiguous mapping for
non-KFENCE pool pages, by allocating the KFENCE pool before &lt;code&gt;paging_init()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0021-optimize-list-lru-memory-consumption-muchun-song&#34;&gt;[PATCH v2 00/21] Optimize list lru memory consumption (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210527062148.9361-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20210527062148.9361-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Muchun found kmalloc-32 slab cache consuming huge memory due to cgroups
initialization, and posting this patchset which expected to fix the problem
fundamentally.  This patchset reduced memory consumption of system under
specific scenario from about 24GB to about 4GB.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc4-linus-torvalds&#34;&gt;Linux 5.13-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjKJ5Mw7P=U0AyhFJbGB+4TT=SE=tmf=md0cqEn527HFg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjKJ5Mw7P=U0AyhFJbGB+4TT=SE=tmf=md0cqEn527HFg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last release candidate (rc3) was quite small than usual.  Maybe it was just a
matter of timing, as rc of this week is fairly big.  So nothing worrisome for
now.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc4..v5.13-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-05-31 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc3</title>
      <link>/post/lkml_news_v5.13-rc3/</link>
      <pubDate>Tue, 18 May 2021 07:11:13 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc3/</guid>
      <description>&lt;h2 id=&#34;rcu-tests-for-maple-tree-paul-e-mckenney&#34;&gt;RCU tests for Maple Tree (Paul E. McKenney)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210517154048.GA2013926@paulmck-ThinkPad-P17-Gen-1&#34;&gt;https://lkml.kernel.org/r/20210517154048.GA2013926@paulmck-ThinkPad-P17-Gen-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul is asking if there are rcu-related tests for Maple Tree other than
&lt;code&gt;rcu_loop()&lt;/code&gt; and &lt;code&gt;rcu_val()&lt;/code&gt; that Paul needs to looking for.&lt;/p&gt;
&lt;h2 id=&#34;patch-v20-07-mm-introduce-memfd_secret-system-call-to-create-secret-memory-areas-mike-rapoport&#34;&gt;[PATCH v20 0/7] mm: introduce memfd_secret system call to create &amp;ldquo;secret&amp;rdquo; memory areas (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210518072034.31572-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210518072034.31572-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 20th version of the patchset that implements &amp;lsquo;secret&amp;rsquo; mappings backed by a
file descriptor.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0014-multigenerational-lru-framework-yu-zhao&#34;&gt;[PATCH v3 00/14] Multigenerational LRU Framework (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210520065355.2736558-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20210520065355.2736558-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third version of multi-gen LRU patchset is posted.  No many changes but fixed a
bug and rebased on v5.13-rc2.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-mm-documentation-mike-rapoport&#34;&gt;[LSF/MM TOPIC] mm documentation (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YKYkKTZsWZg88tWd@kernel.org&#34;&gt;https://lkml.kernel.org/r/YKYkKTZsWZg88tWd@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another LSF/MM topic proposal for improving documentation of MM.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc3-linus-torvalds&#34;&gt;Linux 5.13-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiUwtRp+jjCMd9x8O90iD_YHVBQzJoKCsT9e06L7qob3Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiUwtRp+jjCMd9x8O90iD_YHVBQzJoKCsT9e06L7qob3Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike the expectation, this week&amp;rsquo;s release is very small.  This is interesting
because rc3 is usually the time real fixes coming in.  However, this is the
smallest rc3 in the 5.x series.  Would not because there is no problem at all,
but people are not sending fixes yet.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc3..v5.13-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-05-24 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc2</title>
      <link>/post/lkml_news_v5.13-rc2/</link>
      <pubDate>Tue, 11 May 2021 21:11:05 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc2/</guid>
      <description>&lt;h2 id=&#34;resend-lsfmmbpf-2021-call-for-proposals-josef-bacik&#34;&gt;[RESEND] LSF/MM/BPF: 2021: Call for Proposals (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/60997079.1c69fb81.77f3f.a045@mx.google.com/&#34;&gt;https://lkml.kernel.org/r/60997079.1c69fb81.77f3f.a045@mx.google.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CFG for LSF/MM/BPF 2021 posted.  It will be held from 2021-12-06 to 2021-12-08
in Palm Springs, California.  As of now, it is supposed to be an in-person
conference!&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-memory-folios-matthew-wilcox&#34;&gt;[LSF/MM/BPF TOPIC] Memory folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YJlzwcADaxO/JHRE@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/YJlzwcADaxO/JHRE@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew expects the memory folios patchset will be merged soon, but he wants to
discuss about it in the LSFMM, if there are something to discuss more.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmlru-add-folio-lru-functions-matthew-wilcox&#34;&gt;[PATCH] mm/lru: Add folio LRU functions (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210513122702.2245882-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210513122702.2245882-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes LRU code to use the page folio interface.  Owing to the
reduced head/tail pages handling code, about 800 bytes of kernel text saved.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc2-linus-torvalds&#34;&gt;Linux 5.13-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgX-4PTGAH7kRvqHYiq9wPJ-zN6jhLsuOAj6cG__g9N9A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgX-4PTGAH7kRvqHYiq9wPJ-zN6jhLsuOAj6cG__g9N9A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second release candidate for the 5.13 released.  Unlike the rc1, which was
bigger than usual, this release is smaller than average, but still seems it&amp;rsquo;s
only in noise.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc2..v5.13-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-05-17 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.13-rc1</title>
      <link>/post/lkml_news_v5.13-rc1/</link>
      <pubDate>Tue, 27 Apr 2021 07:01:06 +0200</pubDate>
      <guid>/post/lkml_news_v5.13-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-v3-mmcompactionlet-proactive-compaction-order-configurable-chukaiping&#34;&gt;[PATCH v3] mm/compaction:let proactive compaction order configurable (chukaiping)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1619313662-30356-1-git-send-email-chukaiping@baidu.com&#34;&gt;https://lkml.kernel.org/r/1619313662-30356-1-git-send-email-chukaiping@baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third version of the patchset making compaction order lower than 9.  Machines
using 1GB hugetlbfs huge pages could be an example user of this feature.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-mmcompaction-let-proactive-compaction-order-configurable-chukaiping&#34;&gt;[PATCH v4] mm/compaction: let proactive compaction order configurable (chukaiping)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1619576901-9531-1-git-send-email-chukaiping@baidu.com&#34;&gt;https://lkml.kernel.org/r/1619576901-9531-1-git-send-email-chukaiping@baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fourth version of the patchset posted quite quickly.&lt;/p&gt;
&lt;h2 id=&#34;patch-0094-introducing-the-maple-tree-liam-howlett&#34;&gt;[PATCH 00/94] Introducing the Maple Tree (Liam Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210428153542.2814175-1-Liam.Howlett@Oracle.com&#34;&gt;https://lkml.kernel.org/r/20210428153542.2814175-1-Liam.Howlett@Oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This huge patchset introduces an RCU-safe range based B-tree called maple tree.
It is mainly designed to be used for scalable virtual memory areas management.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-mm-improve-mprotectrw-efficiency-on-pages-referenced-once-peter-collingbourne&#34;&gt;[PATCH v3] mm: improve mprotect(R|W) efficiency on pages referenced once (Peter Collingbourne)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210429214801.2583336-1-pcc@google.com&#34;&gt;https://lkml.kernel.org/r/20210429214801.2583336-1-pcc@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After removing write protection of a page using &lt;code&gt;mprotect()&lt;/code&gt;, any writes to the
page result in page faults and copy-on-write, even though the page is
referenced by only a single PTE, which incur some performance overhead.  This
patch optimizes this problem.&lt;/p&gt;
&lt;h2 id=&#34;inocming-andrew-morton&#34;&gt;inocming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210429225251.02b6386d21b69255b4f6c163@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210429225251.02b6386d21b69255b4f6c163@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pull request from Andrew Morton for v5.13.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210504183219.a3cc46aee4013d77402276c5@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210504183219.a3cc46aee4013d77402276c5@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The remainder of the main mm/ queue for v5.13.  This includes below patchsets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;alloc_contirg_range&lt;/code&gt; handle Hugetlb pages&lt;/li&gt;
&lt;li&gt;Prohibit pinning pages in &lt;code&gt;ZONE_MOVABLE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;patch-v9-0096-memory-folios-matthew-wilcox&#34;&gt;[PATCH v9 00/96] Memory folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210505150628.111735-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210505150628.111735-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset once called page folios, but now renamed into memory folios.
This helps managing non-4KiB pages cleanly and efficiently.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210506180126.03e1baee7ca52bedb6cc6003@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210506180126.03e1baee7ca52bedb6cc6003@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull request for every remaining paches in -mm tree.&lt;/p&gt;
&lt;h2 id=&#34;linux-513-rc1-linus-torvalds&#34;&gt;Linux 5.13-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiWTU+=wK9pv_YG01rXSqApCS_oY+78Ztz5-ORH5a-kvg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiWTU+=wK9pv_YG01rXSqApCS_oY+78Ztz5-ORH5a-kvg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the two weeks of merge window, first rc1 for v5.13 released.  Fairly big
merge window compared to last one.  Most changes are spread over all
subsystems, though some subsystems show big, but not so important changes that
makes the picture overshadowed.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.2-rc2..v5.13-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-01 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.13-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12</title>
      <link>/post/lkml_news_v5.12/</link>
      <pubDate>Tue, 20 Apr 2021 07:19:28 +0200</pubDate>
      <guid>/post/lkml_news_v5.12/</guid>
      <description>&lt;h2 id=&#34;patch--next-v3-12-mmdebug_vm_pgtable-move-pmdpud_huge_tests-out-of-config_transparent_hugepage-liu-shixin&#34;&gt;[PATCH -next v3 1/2] mm/debug_vm_pgtable: Move {pmd/pud}_huge_tests out of CONFIG_TRANSPARENT_HUGEPAGE (Liu Shixin)&lt;/h2&gt;
&lt;p&gt;The functions are not THP dependent in real, but made dependent.  This patch
moves it out.&lt;/p&gt;
&lt;h2 id=&#34;patch-v10-07-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v10 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210419075413.1064-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210419075413.1064-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 10th version of the patchset which allows Hugetlb pages allocated via
&lt;code&gt;alloc_contig_range()&lt;/code&gt;, dynamically.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-mmmadvise-introduce-madv_populate_readwrite-to-prefault-page-tables-david-hildenbrand&#34;&gt;[PATCH v2 0/5] mm/madvise: introduce &lt;code&gt;MADV_POPULATE_(READ|WRITE)&lt;/code&gt; to prefault page tables (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210419135443.12822-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210419135443.12822-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the second version of the patchset implementing
&lt;code&gt;MADV_POPULATE_(READ|WRITE)&lt;/code&gt; for &lt;code&gt;madvise()&lt;/code&gt; system call.  It could be used for
prefaulting pages.&lt;/p&gt;
&lt;h2 id=&#34;maintainers--kernel-summit-2021-planning-kick-off-theodore-tso&#34;&gt;Maintainers / Kernel Summit 2021 planning kick-off (Theodore Ts&amp;rsquo;o)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YH2hs6EsPTpDAqXc@mit.edu&#34;&gt;https://lkml.kernel.org/r/YH2hs6EsPTpDAqXc@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The plan for maintainers/kernel summit 2021 is announced.  Those will be
co-located with LPC on Dublin, Ireland, from September 27th to 29th.  The
schedule could be changed depend on the vaccination situation, though.&lt;/p&gt;
&lt;h2 id=&#34;rfc-memory-reserve-for-userspace-oom-killer-shakeel-butt&#34;&gt;[RFC] memory reserve for userspace oom-killer (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CALvZod7vtDxJZtNhn81V=oE-EPOf=4KZB2Bv6Giz+u3bFFyOLg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CALvZod7vtDxJZtNhn81V=oE-EPOf=4KZB2Bv6Giz+u3bFFyOLg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a RFC proposing making userspace oom-killer has guaranteed memory.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-docs-procrst-meminfo-briefly-describe-gaps-in-memory-accounting-mike-rapoport&#34;&gt;[PATCH v2] docs: proc.rst: meminfo: briefly describe gaps in memory accounting (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210420121354.1160437-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210420121354.1160437-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit notifies the possible gaps in memory accounting, and how those
could be found.&lt;/p&gt;
&lt;h2 id=&#34;patch-000190-revertion-of-all-of-the-umnedu-commits-greg-kroah-hartman&#34;&gt;[PATCH 000/190] Revertion of all of the umn.edu commits (Greg Kroah-Hartman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210421130105.1226686-1-gregkh@linuxfoundation.org&#34;&gt;https://lkml.kernel.org/r/20210421130105.1226686-1-gregkh@linuxfoundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It found a research team in University of Minnesota has intentionally submitted
malicious patches that don&amp;rsquo;t fix real problems but introduce new security holes
and flaws into the Linux kernel, and a number of such patches merged in both
mainline and the stable trees.  This patchset is reverting all patches from
umn.edu as a reaction.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-compaction-improve-proc-trigger-for-full-node-memory-compaction-charan-teja-reddy&#34;&gt;[PATCH] mm: compaction: improve /proc trigger for full node memory compaction (Charan Teja Reddy)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1619098678-8501-1-git-send-email-charante@codeaurora.org&#34;&gt;https://lkml.kernel.org/r/1619098678-8501-1-git-send-email-charante@codeaurora.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/proc/sys/vm/compact_memory&lt;/code&gt; file triggers full node compaction and don&amp;rsquo;t stop
even though the trigger application now suffice with progress.  This patch adds
&lt;code&gt;/proc/sys/vm/proactive_compact_memory&lt;/code&gt; file, which triggers full node
compaction when an arbitrary value is written on it, but it can be stopped in
middle if &lt;code&gt;COMPACTION_HPAGE_ORDER&lt;/code&gt; pages become available.&lt;/p&gt;
&lt;h2 id=&#34;maintainer-summit-rethinking-the-acceptance-policy-for-trivial-patches-james-bottomley&#34;&gt;[MAINTAINER SUMMIT] Rethinking the acceptance policy for &amp;ldquo;trivial&amp;rdquo; patches (James Bottomley)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/afc5664dc2b60f912dd97abfa818b3f7c4237b92.camel@HansenPartnership.com&#34;&gt;https://lkml.kernel.org/r/afc5664dc2b60f912dd97abfa818b3f7c4237b92.camel@HansenPartnership.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a followup of the University of Minnesota event, James proposed a maintainer
summit topic for trivial patches acceptance policy.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-linus-torvalds&#34;&gt;Linux 5.12 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj3ANm8QrkC7GTAxQyXyurS0_yxMR3WwjhD9r7kTiOSTw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj3ANm8QrkC7GTAxQyXyurS0_yxMR3WwjhD9r7kTiOSTw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I personally worried how the University of Minnesota happening affect the
release schedule.  Unlike concerns, v5.12 released as expected, after only one
extra rc.  This means the merge window for v5.13 started.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1..v5.12.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-04-26 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML NEws v5.12-rc8</title>
      <link>/post/lkml_news_v5.12-rc8/</link>
      <pubDate>Tue, 13 Apr 2021 07:37:08 +0200</pubDate>
      <guid>/post/lkml_news_v5.12-rc8/</guid>
      <description>&lt;h2 id=&#34;patch-v2-05-mmmemcg-reduce-kmemcache-memory-accounting-overhead-waiman-long&#34;&gt;[PATCH v2 0/5] mm/memcg: Reduce kmemcache memory accounting overhead (Waiman Long)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210412225503.15119-1-longman@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210412225503.15119-1-longman@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently introduced new slab memory controller eliminates the need for separate
kmemcaches for each memory cgroup and therefore reduce kernel memory usage.
However, it also increases memory accouning overhead in kmem cache alloc and
free functions.  This patchset reduces unnecessary &lt;code&gt;local_irq_save()&lt;/code&gt; and
&lt;code&gt;local_irq_restore()&lt;/code&gt; sequences in the code path as much as possible for
minimal overhead.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-07-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v7 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210413104747.12177-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210413104747.12177-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes Hugetlb pages to be able to be allocated via
&lt;code&gt;alloc_contig_range()&lt;/code&gt;, which is also used by CMA.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mm-support-multi_freearea-to-the-reduction-of-external-fragmentation-lipeifeng&#34;&gt;[RFC] mm: support multi_freearea to the reduction of external fragmentation (lipeifeng)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210414023803.937-1-lipeifeng@oppo.com&#34;&gt;https://lkml.kernel.org/r/20210414023803.937-1-lipeifeng@oppo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch sorts sorts the free pages in buddy so that low-order pages
allocation done in the front area of memory while the high-order pages
allocation done in the back area of memory.  As a result, the high-order pages
allocation could success more easily.&lt;/p&gt;
&lt;h2 id=&#34;patch-v8-07-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v8 0/7] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210415103544.6791-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210415103544.6791-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New version of the patchset.  Collected &amp;lsquo;Reviewed-by&amp;rsquo;s and &amp;lsquo;Acked-by&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;patch-0013-rfc-rust-support-miguel-ojeda&#34;&gt;[PATCH 00/13] [RFC] Rust support (Miguel Ojeda)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/20210414184604.23473-1-ojeda@kernel.org/&#34;&gt;https://lore.kernel.org/lkml/20210414184604.23473-1-ojeda@kernel.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the RFC for Rust support in Linux build system.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-mmvmscan-add-sync_shrinkers-function-christian-koenig&#34;&gt;[PATCH 1/2] mm/vmscan: add sync_shrinkers function (Christian Koenig)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210415115624.2904-1-christian.koenig@amd.com&#34;&gt;https://lkml.kernel.org/r/20210415115624.2904-1-christian.koenig@amd.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds a new function &lt;code&gt;sync_shrinkers()&lt;/code&gt;, which prevents a race
between, for example, shrinkers trying to free pages and hotplug trying to
remove the device which having the pages.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mmcompactionlet-proactive-compaction-order-configurable-chukaiping&#34;&gt;[PATCH v2] mm/compaction:let proactive compaction order configurable (chukaiping)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1618593751-32148-1-git-send-email-chukaiping@baidu.com&#34;&gt;https://lkml.kernel.org/r/1618593751-32148-1-git-send-email-chukaiping@baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The proactive compaction has fixed value &amp;lsquo;9&amp;rsquo; for &lt;code&gt;COMPACTION_HPAGE_ORDER&lt;/code&gt;.
This doesn&amp;rsquo;t make sense for machines having less than 9 max order of free
pages, because it would trigger compactions too frequently.  For example,
machines configured with 1GB hugetlbfs huge pages.  This patch exports the
order to procfs so that admins could configure it.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc8-linus-torvalds&#34;&gt;Linux 5.12-rc8 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjgVFDhX60fxwDobHoqJvVkuxf=JgSTtGnGMa5r-1u4Yw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjgVFDhX60fxwDobHoqJvVkuxf=JgSTtGnGMa5r-1u4Yw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The last week was calm, but not calm enough to avoid rc8 release.  This is
fifth rc8 release for 5.x series.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc7..v5.12-rc8.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-04-19 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc8-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc7</title>
      <link>/post/lkml_news_v5.12-rc7/</link>
      <pubDate>Tue, 06 Apr 2021 07:17:14 +0200</pubDate>
      <guid>/post/lkml_news_v5.12-rc7/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v1-0011-manage-the-top-tier-memory-in-a-tiered-memory-tim-chen&#34;&gt;[RFC PATCH v1 00/11] Manage the top tier memory in a tiered memory (Tim Chen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1617642417.git.tim.c.chen@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/cover.1617642417.git.tim.c.chen@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two patchsets for better handling of tiered-memory.  &lt;code&gt;[PATCH 00/10] [v7] Migrate Pages in lieu of discard&lt;/code&gt;
(&lt;a href=&#34;https://lore.kernel.org/linux-mm/20210401183216.443C4443@viggo.jf.intel.com/&#34;&gt;https://lore.kernel.org/linux-mm/20210401183216.443C4443@viggo.jf.intel.com/&lt;/a&gt;)
makes cold pages to be placed in PMEM instead of DRAM, and &lt;code&gt;[PATCH 0/6] [RFC v6] NUMA balancing: optimize memory placement for memory tiering system&lt;/code&gt;
(&lt;a href=&#34;https://lore.kernel.org/linux-mm/20210311081821.138467-1-ying.huang@intel.com/&#34;&gt;https://lore.kernel.org/linux-mm/20210311081821.138467-1-ying.huang@intel.com/&lt;/a&gt;)
allows hot pages to be placed in DRAM instead of PMEM.&lt;/p&gt;
&lt;p&gt;This patchset further improves the situation, by providing memory monitors on
the top tier memory that each cgroup is using, and enables kswapd to demote top
tier memory from cgroups when excess top tier memory usage is observed.  In
other words, this allows provisioning of different amount of top tier memory
for each cgroup, depending on each cgroup&amp;rsquo;s needs.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-0028-memory-folios-matthew-wilcox&#34;&gt;[PATCH v7 00/28] Memory Folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210409185105.188284-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210409185105.188284-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seventh version of the page folio patchset.  It makes THP handling simpler.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc7-linus-torvalds&#34;&gt;Linux 5.12-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiHGchP=V=a4DbDN+imjGEc=2nvuLQVoeNXNxjpU1T8pg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiHGchP=V=a4DbDN+imjGEc=2nvuLQVoeNXNxjpU1T8pg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike the sixth rc, which shrinked as expected, this time it became bigger
than usual.  It&amp;rsquo;s biggest rc7 for 5.x series.  Torvalds says it&amp;rsquo;s due to the
networking fixes that didn&amp;rsquo;t arrive in last release but this release.  So we
will see rc8 next week unless the it is calm enough like dead.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc6..v5.12-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-29 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc6</title>
      <link>/post/lkml_news_v5.12-rc6/</link>
      <pubDate>Tue, 30 Mar 2021 07:35:52 +0200</pubDate>
      <guid>/post/lkml_news_v5.12-rc6/</guid>
      <description>&lt;h2 id=&#34;rfc-numa-balancing-reduce-tlb-flush-via-delaying-mapping-on-hint-page-fault-huang-ying&#34;&gt;[RFC] NUMA balancing: reduce TLB flush via delaying mapping on hint page fault (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210329062651.2487905-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20210329062651.2487905-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUMA balancing shots down TLBs on all CPUs that recently run hint-faulted
process during the migration of the hint-faulted page to appropriate node.
This commit delays the TLB shootdown to reduce the overhead.  With pmbench, it
reduced TLB shooting IPI up to 99%, though it didn&amp;rsquo;t makde visible benchmark
score changes.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v2-0043-pkram-preserved-over-kexec-ram-anthony-yznaga&#34;&gt;[RFC v2 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1617140178-8773-1-git-send-email-anthony.yznaga@oracle.com&#34;&gt;https://lkml.kernel.org/r/1617140178-8773-1-git-send-email-anthony.yznaga@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second revision after a while.  This patchset makes a part of memory to be
exported as a file system to user space and let the content of the memory
preserved while the system is rebooted using kexec.  The user space programs
could restart fast regardless of system reboot by using that as a temporary
place to put their data.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-12-kunit-add-a-kunit-test-for-slub-debugging-functionality-oliver-glitta&#34;&gt;[PATCH v2 1/2] kunit: add a KUnit test for SLUB debugging functionality (Oliver Glitta)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210330120436.4591-1-glittao@gmail.com&#34;&gt;https://lkml.kernel.org/r/20210330120436.4591-1-glittao@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit makes &lt;code&gt;SLUB_RESILIENCY_TEST&lt;/code&gt; macro, which is hardcoded as not
defined and therefore couldn&amp;rsquo;t be used in normal case without kernel
modification, to be able to be defined with kernel configuration so that the
code hidden behind the macro could be used in kunit.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-0027-memory-folios-mattew-wilcox&#34;&gt;[PATCH v6 00/27] Memory Folios (Mattew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210331184728.1188084-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210331184728.1188084-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the sixth version of the page folio patchset.  This helps handling
complex compound pages in simpler way.&lt;/p&gt;
&lt;h2 id=&#34;patch-0010-v7resend-migrate-pages-in-lieu-of-discard-dave-hansen&#34;&gt;[PATCH 00/10] [v7][RESEND] Migrate Pages in lieu of discard (Dave Hansen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210401183216.443C4443@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20210401183216.443C4443@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset is for the usual tieremed memory system, which configured with
DRAM and a slower auxiliary memory such as persistent memory.  The system
starts allocation with DRAM and do reclamation once DRAM is filled up.  Then,
from a point, it starts falling over to the slower auxiliary memory.  As a
result, new allocations could result in slow auxiliary memory while there is a
space in DRAM, and the data reclaimed from DRAM is discarded even though there
was a space in the auxiliary memory.  This patchset makes the DRAM reclaimation
to migrate the pages to the auxiliary memory instead.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc6-linus-torvalds&#34;&gt;Linux 5.12-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whK9=wafv+cSLCGqFGPBbgp67Dut3jKCnWB--8y7Lxonw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whK9=wafv+cSLCGqFGPBbgp67Dut3jKCnWB--8y7Lxonw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last release (rc5) make Linus a little bit worried, but this week release is
somewhat positively tiny one.  He says the release schedule will be as usual
unless something different happens within next two weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc5</title>
      <link>/post/lkml_news_v5.12-rc5/</link>
      <pubDate>Tue, 23 Mar 2021 07:11:57 +0100</pubDate>
      <guid>/post/lkml_news_v5.12-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-03-v5-introduce-a-bulk-order-0-page-allocator-mel-gorman&#34;&gt;[PATCH 0/3 v5] Introduce a bulk order-0 page allocator (Mel Gorman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210322091845.16437-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20210322091845.16437-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fifth version of the order-0 pages bulk allocator.  In this version, the API
users are dropped from the patchset, because the callers are not confirmed if
they prefer an array or list interface.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-cma-add-trace-events-for-cma-alloc-perf-testing-georgi-djakov&#34;&gt;[PATCH] mm: cma: add trace events for CMA alloc perf testing (Georgi Djakov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210324160740.15901-1-georgi.djakov@linaro.org&#34;&gt;https://lkml.kernel.org/r/20210324160740.15901-1-georgi.djakov@linaro.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds tracepoints for CMA and page migrations.  Those aims to be used
for performance debugging of CMA.&lt;/p&gt;
&lt;h2 id=&#34;patch-04-mmpage_reporting-some-knobs-and-fixes-xunlei-pang&#34;&gt;[PATCH 0/4] mm/page_reporting: Some knobs and fixes (Xunlei Pang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1616751898-58393-1-git-send-email-xlpang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1616751898-58393-1-git-send-email-xlpang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit adds some counters for debugging and fix of a problem in the page
reporting feature.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc5-linus-torvalds&#34;&gt;Linux 5.12-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg89U6PLp1AGhaqUx4KAZtkvKS6kuNmb+zObQhf1jez+g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg89U6PLp1AGhaqUx4KAZtkvKS6kuNmb+zObQhf1jez+g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike previous week&amp;rsquo;s release, rc5 is bigger than average.  It&amp;rsquo;s not hitting
any record, though.  Torvalds says he doesn&amp;rsquo;t overly worrying, but thinking
about rc8.  &lt;code&gt;io_uring&lt;/code&gt; is pointed out as one of the sources of noises.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc4..v5.12-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-29 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc4</title>
      <link>/post/lkml_news_v5.12-rc4/</link>
      <pubDate>Wed, 17 Mar 2021 07:11:15 +0100</pubDate>
      <guid>/post/lkml_news_v5.12-rc4/</guid>
      <description>&lt;h2 id=&#34;file-thp-and-hwpoison-matthew-wilcox&#34;&gt;File THP and HWPoison (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210316140947.GA3420@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/20210316140947.GA3420@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP is not splitted for file-backed pages when it got memory failure.  This
mail describes the problem in detail and propose some change to mitigate it.&lt;/p&gt;
&lt;h2 id=&#34;issue-with-kfence-and-kmemleak-luis-henriques&#34;&gt;Issue with kfence and kmemleak (Luis Henriques)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YFDf6iKH1p/jGnM0@suse.de&#34;&gt;https://lkml.kernel.org/r/YFDf6iKH1p/jGnM0@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Luis found a problem when kmemleak and kfence is used together.  A fix is made
by Marco.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0013-introduced-multi-preference-mempolicy-feng-tang&#34;&gt;[PATCH v4 00/13] Introduced multi-preference mempolicy (Feng Tang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1615952410-36895-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1615952410-36895-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the fourth version of the patchset.  It allows programs to set multiple
preferred nodes using new mempolicy called &lt;code&gt;MPOL_PREFERRED_MANY&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;we-are-now-in-linux-next-miguel-ojeda&#34;&gt;We are now in linux-next! (Miguel Ojeda)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CANiq72nbNxpps+p4wYp03ncrbGH9FFoTfHQZwg_vGdPO41eGmQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CANiq72nbNxpps+p4wYp03ncrbGH9FFoTfHQZwg_vGdPO41eGmQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Rust support for Linux kernel development is merged in linux-next.  This
doesn&amp;rsquo;t necessarily mean it will be merged in the mainline, but the authors aim
to be merged in v5.13 or v5.14.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-05-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v5 0/5] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210317111251.17808-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210317111251.17808-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fifth version of the patchset making &lt;code&gt;alloc_contig_range()&lt;/code&gt; to handle HugeTLB
pages.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc4-linus-torvalds&#34;&gt;Linux 5.12-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whDxybSS63==ycQiNobvamDmoyxQo1JL-31Tup8azbeWw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whDxybSS63==ycQiNobvamDmoyxQo1JL-31Tup8azbeWw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fourthe release is out without particular strange things.  Rather than
that, it&amp;rsquo;s quite normal.  Torvalds says everything looks pretty normal, despite
the rc1 hiccup.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc3..v5.12-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-22 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc3</title>
      <link>/post/lkml_news_v5.12-rc3/</link>
      <pubDate>Sun, 07 Mar 2021 11:19:27 +0100</pubDate>
      <guid>/post/lkml_news_v5.12-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-0010-v6-migrate-pages-in-lieu-of-discard-dave-hansen&#34;&gt;[PATCH 00/10] [v6] Migrate Pages in lieu of discard (Dave Hansen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210304235949.7922C1C3@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20210304235949.7922C1C3@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the system configured with both DRAM and persistent memory, current kernel
starts reclamation when DRAM fulls even though there are some space in
persistent memory.  And from some point, all page allocation is done on the
persistent memory only, even though DRAM has some free slots now.&lt;/p&gt;
&lt;p&gt;This patchset mitigates the problem by migrating pages that about to be
reclaimed to persistent memory.  The migration destination could be any slow
tier memory.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfcv2-mmmadvise-introduce-madv_populate_readwrite-to-prefaultprealloc-memory-david-hildenbrand&#34;&gt;[PATCH RFCv2] mm/madvise: introduce &lt;code&gt;MADV_POPULATE_(READ|WRITE)&lt;/code&gt; to prefault/prealloc memory (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210308164520.18323-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210308164520.18323-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For user space sparse memory mappings management (e.g., hypervisors for memory
ballooning or similar techniques or memory allocators), dynamic population and
discard of such a sparse memory region is beneficial.  This commit implements
two new &lt;code&gt;madvise()&lt;/code&gt; hints for the purpose.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-05-allocate-memmap-from-hotadded-memory-per-device-oscar-salvador&#34;&gt;[PATCH v4 0/5] Allocate memmap from hotadded memory (per device) (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210309175546.5877-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210309175546.5877-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset reduces memory overhead due to hot-added memory, for
&lt;code&gt;SPARSEMEM_VMEMMAP&lt;/code&gt; memory model.  The main three problems are, we are
consuming additional memory even before hot-added memory is onlined, &lt;code&gt;memmap&lt;/code&gt;
could located on a different numa node, and &lt;code&gt;memmap&lt;/code&gt; could populated with base
pages only if the memory is fragmented.  This patchset mitigates the problems
by allocating the &lt;code&gt;memmap&lt;/code&gt; from the hot-added memory itself.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-introduce-a-bulk-order-0-page-allocator-with-two-in-tree-users-mel-gorman&#34;&gt;[PATCH 0/5] Introduce a bulk order-0 page allocator with two in-tree users (Mel Gorman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210310104618.22750-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20210310104618.22750-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a bulk order-0 page allocator and make sunrpc and
network pagepool to be the users of it.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-04-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v4 0/4] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210310150853.13541-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210310150853.13541-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit let &lt;code&gt;alloc_contig_range()&lt;/code&gt; which allocates physically contiguous
memory, to handle HugeTLB pages for better flexibility.&lt;/p&gt;
&lt;h2 id=&#34;rfc--v6-06-numa-balancing-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[RFC -V6 0/6] NUMA balancing: optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210311081821.138467-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20210311081821.138467-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a followup of not-yet-merged patchset, &amp;lsquo;Migrate Pages in lieu of
discard&amp;rsquo;.  These are part of the pmem-based numa balancing. That is, placing
hot pages in DRAM and cold pages in pmem node.&lt;/p&gt;
&lt;h2 id=&#34;patch-v1-0014-multigenerational-lru-yu-zhao&#34;&gt;[PATCH v1 00/14] Multigenerational LRU (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210313075747.3781593-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20210313075747.3781593-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes the page reclamation logic to make finer-grained eviction
target decision, by maintaining multiple LRU lists based on their age.  The
aging is done by finding newly referenced pages via page table scanning.  After
that, when eviction is needed, it selects the eviction target pages from the
oldest lru list.&lt;/p&gt;
&lt;p&gt;They used this approach on Chrome OS and achieved 96% fewer low-memory tab
discards and 59% fewer OOM kills.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc3-linus-torvalds&#34;&gt;Linux 5.12-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgAr4Z2deEQs+5L6bJb68FouwBZUSURh+m-47TBnEsGZg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgAr4Z2deEQs+5L6bJb68FouwBZUSURh+m-47TBnEsGZg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This round of the release is pretty big compared to other rc3, but it&amp;rsquo;s due to
early release of rc2.  There are also many rebased commits that made due to the
swap file bug in rc1, which marked as recent unnecessarily.  Excluding such
things, this release is actually smaller than usual, Torvalds says.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc2..v5.12-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-15 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc2</title>
      <link>/post/lkml_news_v5.12-rc2/</link>
      <pubDate>Tue, 02 Mar 2021 07:07:51 +0100</pubDate>
      <guid>/post/lkml_news_v5.12-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-mm-introduce-clear-all-vm-events-counters-pintu-kumar&#34;&gt;[PATCH] mm: introduce clear all vm events counters (Pintu Kumar)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1614595766-7640-1-git-send-email-pintu@codeaurora.org&#34;&gt;https://lkml.kernel.org/r/1614595766-7640-1-git-send-email-pintu@codeaurora.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because the vmstat data is only cumulated, users should calculate the diff
manually or just reboot.  This commit adds a procfs file that can be used to
clear all vmstat counters.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-introduce-a-bulk-order-0-page-allocator-with-two-in-tree-users-mel-gorman&#34;&gt;[PATCH 0/5] Introduce a bulk order-0 page allocator with two in-tree users (Mel Gorman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210301161200.18852-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20210301161200.18852-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a bulk order-0 page allocator.  It also makes the
sunrpc and the network page pool to use that.  Mel says current implementation
would not particularly efficient, but the performance report shows
improvements.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0014-introduced-multi-preference-mempolicy&#34;&gt;[PATCH v3 00/14] Introduced multi-preference mempolicy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1614766858-90344-1-git-send-email-feng.tang@intel.com&#34;&gt;https://lkml.kernel.org/r/1614766858-90344-1-git-send-email-feng.tang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a new NUMA memory placement policy called
&lt;code&gt;MPOL_PREFERRED_MANY&lt;/code&gt;, which can be used for &lt;code&gt;set_mempolicy()&lt;/code&gt; or &lt;code&gt;mbind()&lt;/code&gt;
system calls.  It allows users to set preferred NUMA nodes as similar to
&lt;code&gt;MPOL_PREFERRED&lt;/code&gt;, but it allows multiple nodes, unlike &lt;code&gt;MPOL_PREFERRED&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc2-linus-torvalds&#34;&gt;Linux 5.12-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whH-stL2zLCf02HZaOeQgS4oGa7eEiHeYZGj-orK-PX0g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whH-stL2zLCf02HZaOeQgS4oGa7eEiHeYZGj-orK-PX0g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It turned out the v5.12-rc1 has a nasty bug related to swap files and therefore
it removed from the mainline.  Therefore Linus has released the next rc two
days earlier than usual.  The swap file bug is fixed, and also contains more
fixes as usual.  Nothing special except it released earlier than expected.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc2..v5.12-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-06 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.12-rc1</title>
      <link>/post/lkml_news_v5.12-rc1/</link>
      <pubDate>Tue, 16 Feb 2021 07:17:38 +0100</pubDate>
      <guid>/post/lkml_news_v5.12-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-v11-0014-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v11 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210215161349.246722-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20210215161349.246722-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 11th version of the patchset making &lt;code&gt;ZONE_MOVABLE&lt;/code&gt; really movable.  In this
version, a build error on i386 is fixed.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-oom-introduce-vmsacrifice_hugepage_on_oom&#34;&gt;[RFC PATCH] mm, oom: introduce vm.sacrifice_hugepage_on_oom&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210216030713.79101-1-eiichi.tsukata@nutanix.com&#34;&gt;https://lkml.kernel.org/r/20210216030713.79101-1-eiichi.tsukata@nutanix.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patch introduces yet another sysctl knob called
&lt;code&gt;vm.sacrifice_hugepage_on_oom&lt;/code&gt;.  When it is turned on, it tries to free
available hugepages before waking oom-killer up.&lt;/p&gt;
&lt;h2 id=&#34;rfc-hugepage-collapse-in-process-context-david-rientjes&#34;&gt;[RFC] Hugepage collapse in process context (David Rientjes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/d098c392-273a-36a4-1a29-59731cdf5d3d@google.com&#34;&gt;https://lkml.kernel.org/r/d098c392-273a-36a4-1a29-59731cdf5d3d@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When a THP request via &lt;code&gt;madvise()&lt;/code&gt; is made, the system call only mark the
memory region as a candidate of the promotion but does not do the promotion
synchronously.  The THP daemon, khugepaged, scans virtual address spaces and
collapse regular pages of such regions to huge pages transparently.  However,
because the scanning works very slowly (at most 4096 pages every 10 seconds) to
not consume CPU resource too much, it doesn&amp;rsquo;t show immediate effect to
short-living workloads.  My DAMOS-based efficient THP implementation also
showed this problem before.&lt;/p&gt;
&lt;p&gt;In this mail, David is proposing making a synchronous compaction can be
requested from process context, via &lt;code&gt;madvise_process()&lt;/code&gt; like system call.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-mmmadvise-introduce-madv_populate-to-prefaultprealloc-memory-david-hildenbrand&#34;&gt;[PATCH RFC] mm/madvise: introduce MADV_POPULATE to prefault/prealloc memory (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210217154844.12392-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20210217154844.12392-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dynamic populactions and discards of memory is required in user space when it
needs to do sparse memory mappings management.  Hypervisors are the good
example.  Though the discardings are available using &lt;code&gt;MADV_DONTNEED&lt;/code&gt; and
&lt;code&gt;FALLOC_FL_PUNCH_HOLE&lt;/code&gt;, there is no appropriate way to do the pre-population.
&lt;code&gt;mmap()&lt;/code&gt; with &lt;code&gt;MAP_POPULATE&lt;/code&gt; might be used, but it is not applicable for the
dynamic remappings.  This patch introduces &lt;code&gt;MADV_POPULATE&lt;/code&gt; for the purpose.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-vmstat-add-cma-statistics-minchan-kim&#34;&gt;[PATCH] mm: vmstat: add cma statistics (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210217170025.512704-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210217170025.512704-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds CMA statistics in vmstat, so people can more easily understand
how aggressively CMA is used and how much allocations fail.&lt;/p&gt;
&lt;h2 id=&#34;re-510-lts-kernel-2-or-6-years-grep-korah-hartman&#34;&gt;Re: 5.10 LTS Kernel: 2 or 6 years? (Grep Korah-Hartman)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YC+AEcuXhPXXtmRB@kroah.com&#34;&gt;https://lkml.kernel.org/r/YC+AEcuXhPXXtmRB@kroah.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Greg told he wants to officially support v5.10.y for more than 2 years (maybe 6
years) if some company comes up and continuously use and support the versions.
Hanjun Guo from Huawei came up and told Huawei will support it by using the
kernel in their product, run tests continuously, and provide backporting of
upstream fixes.  Greg welcomes the reaction.  So v5.10.y might be officially
supported 6 years soon.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-11-mmpage_allocc-refactor-initialization-of-struct-page-for-holes-in-memory-layout-mike-rapoport&#34;&gt;[PATCH v6 1/1] mm/page_alloc.c: refactor initialization of struct page for holes in memory layout (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;In case of real memory bank is not a multiple of &lt;code&gt;SECTION_SIZE&lt;/code&gt; or the
architecture does not register memory holes reserved by the firmware as
&lt;code&gt;memblock.memory&lt;/code&gt;, there could be &lt;code&gt;struct page&lt;/code&gt;s that are not backed by real
physical memory.&lt;/p&gt;
&lt;p&gt;Those had proper links to proper zone and node before, but after commit
73a6e474cb37, it doesn&amp;rsquo;t.  This patch makes those to have proper links to zone
and node again.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-02-make-alloc_contig_range-handle-hugetlb-pages-oscar-salvador&#34;&gt;[PATCH v3 0/2] Make alloc_contig_range handle Hugetlb pages (Oscar Salvador)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210222135137.25717-1-osalvador@suse.de&#34;&gt;https://lkml.kernel.org/r/20210222135137.25717-1-osalvador@suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is third version of the patchset making CMA to be usable for HugeTLB.
Non-minor changes are mande from v2.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v3-0049-1gb-pud-thp-support-on-x86_64-zi-yan&#34;&gt;[RFC PATCH v3 00/49] 1GB PUD THP support on x86_64 (Zi Yan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210224223536.803765-1-zi.yan@sent.com&#34;&gt;https://lkml.kernel.org/r/20210224223536.803765-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC is for 1GB THP support on &lt;code&gt;x86_64&lt;/code&gt;.  Nevertheless, Zi Yan posted only
the cover letter to discuss about his two concerns first.  The first concern is
how to allocate the 1GB memory.  Current implementation uses CMA.  This means
someone could wrongly tune the kernel so that too large or too small CMA area
could be configured.  Second concern is the large amount of code.  He tried to
make the code as small as possible for convenient review, but failed and
looking for a better way.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210225171452.713967e96554bb6a53e44a19@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20210225171452.713967e96554bb6a53e44a19@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The (maybe last) &lt;code&gt;mm&lt;/code&gt; pull request for v5.12.  This includes the kfence
patchset and it merged in the mainline.&lt;/p&gt;
&lt;h2 id=&#34;linux-512-rc1-linus-torvalds&#34;&gt;Linux 5.12-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjUzNbTuRCAv80vyD1dXEEaefdpRi23J+suSaognBoV8A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjUzNbTuRCAv80vyD1dXEEaefdpRi23J+suSaognBoV8A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the two weeks of merge window, the first release candidate of v5.12 Linux
kernel is released.  Torvalds note that this release is partly small and he
suspects this is partly due to the electricity problem in Portland area.  As a
result, he even considered extending the merge window, but he didn&amp;rsquo;t at the end
of the day.  Instead, he is now saying he could be more flexible about late
pull requests, though he still asks the maintainers to explain what was the
problem.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.1-rc1..v5.12-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-03-01 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.12-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11</title>
      <link>/post/lkml_news_v5.11/</link>
      <pubDate>Tue, 09 Feb 2021 07:18:37 +0100</pubDate>
      <guid>/post/lkml_news_v5.11/</guid>
      <description>&lt;h2 id=&#34;patch-v2-mm-cma-support-sysfs-minchan-kim&#34;&gt;[PATCH v2] mm: cma: support sysfs (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210208180142.2765456-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20210208180142.2765456-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces sysfs interface for CMA that shows stats including number
of CMA allocation attempts and failures.&lt;/p&gt;
&lt;h2 id=&#34;patch-v10-0014-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v10 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210211162427.618913-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20210211162427.618913-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 10th version of the patchset making &lt;code&gt;ZONE_MOVABLE&lt;/code&gt; really movable.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-linus-torvalds&#34;&gt;Linux 5.11 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg8LpRi9+P2_V+ehJ2_EoJifNh2QmVf47aLXfkCd-1UAQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg8LpRi9+P2_V+ehJ2_EoJifNh2QmVf47aLXfkCd-1UAQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nothing strange happened last week, so Linus released v5.11 as expected.  The
number of changes from the rc7 to this release is actually even smaller than
average.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc8..v5.11.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-02-15 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc7</title>
      <link>/post/lkml_news_v5.11-rc7/</link>
      <pubDate>Tue, 02 Feb 2021 07:19:21 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc7/</guid>
      <description>&lt;h2 id=&#34;rfc-0020-tlb-batching-consolidation-and-enhancements-nadav-amit&#34;&gt;[RFC 00/20] TLB batching consolidation and enhancements (Nadav Amit)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210131001132.3368247-1-namit@vmware.com&#34;&gt;https://lkml.kernel.org/r/20210131001132.3368247-1-namit@vmware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset prepares more aggressive TLB flushing batching by consolidating a
few TLB batching methods.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-0014-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v9 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210201153827.444374-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20210201153827.444374-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes &lt;code&gt;ZONE_MOVABLE&lt;/code&gt; really movable by prohibiting pinning of
pages in the zone.&lt;/p&gt;
&lt;h2 id=&#34;augmented-page-reclaim-yu-zhao&#34;&gt;Augmented Page Reclaim (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/YBkT6175GmMWBvw3@google.com&#34;&gt;https://lkml.kernel.org/r/YBkT6175GmMWBvw3@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This mail shares a part of decade researh/experimentation in memory overcommit
at Google.  The author wants to start submitting patch based on responses.  It
allows userspace to trigger aging and eviction via debugfs for working set
estimation, proactive reclaim, far memory tiering, NUMA-aware job scheduling,
and more.  The work adopted for mobile (Android), warehouse-scale computers
(Borg), and desktop (Chrome OS) and achieved impressive results.&lt;/p&gt;
&lt;h2 id=&#34;rfc--v5-06-autonuma-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[RFC -V5 0/6] autonuma: Optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210204101056.89336-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20210204101056.89336-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patchset makes hot pages to placed in DRAM and cold pages in PMEM.
For hot pages identification, this patchset reuses the mechanism of AutoNUMA.
IOW, recently used pages are identified as hot.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc7-linus-torvalds&#34;&gt;Linux 5.11-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgxhBkWH0D6chYcwqDvdh2rB5ZVpToxodz5Q6qaFd_qyg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgxhBkWH0D6chYcwqDvdh2rB5ZVpToxodz5Q6qaFd_qyg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The release candidate that is supposed to be the last one before the v5.11 is
released.  No surprise is there, so unless some scary things happen later,
v5.11 will be released next week.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc7..v5.11-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-02-08 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc6</title>
      <link>/post/lkml_news_v5.11-rc6/</link>
      <pubDate>Tue, 26 Jan 2021 07:14:55 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc6/</guid>
      <description>&lt;h2 id=&#34;rfcpatch-0013-v5-migrate-pages-in-lieu-of-discard-dave-hansen&#34;&gt;[RFC][PATCH 00/13] [v5] Migrate Pages in lieu of discard (Dave Hansen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210126003411.2AC51464@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20210126003411.2AC51464@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If a system has a small DRAM and a large persistent memory (PMEM), reclamation
starts when DRAM fills up, and newer allocations will done on PMEM.  This
patchset makes the reclaim logic to migrate pages to PMEM instead of just
discarding it.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0025-page-folios-matthew-wilcox&#34;&gt;[PATCH v3 00/25] Page folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210128070404.1922318-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210128070404.1922318-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces a new data structure called page folio.  It helps
functions to handle compound pages without having to check if a given page is a
head or a tail.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc6-linus-torvalds&#34;&gt;Linux 5.11-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiOjOh4gNkg==Tyjho98cea06UtnZ4ePwMP3uK-9VLCNA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiOjOh4gNkg==Tyjho98cea06UtnZ4ePwMP3uK-9VLCNA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Things keep going calm.  v5.11-rc6 is in average of the series, and the commits
spread to subsystems as usual.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc6..v5.11-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-02-01 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc5</title>
      <link>/post/lkml_news_v5.11-rc5/</link>
      <pubDate>Tue, 19 Jan 2021 07:46:00 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v2-0027-page-folios-matthew-wilcox&#34;&gt;[PATCH v2 00/27] Page folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210118170148.3126186-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210118170148.3126186-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the second version of the page folios patchset.  This introduces a new
struct named folio.  Functions that receive folio as an argument always
receives head page, so the function don&amp;rsquo;t need to do &lt;code&gt;compound_head()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch--v9-03-numa-balancing-migrate-on-fault-among-multiple-bound-nodes-huang-ying&#34;&gt;[PATCH -V9 0/3] numa balancing: Migrate on fault among multiple bound nodes (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernek.org/r/20210120061235.148637-1-ying.huang@intel.com&#34;&gt;https://lkml.kernek.org/r/20210120061235.148637-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch make optimization of cross-socket memory accesses for AutoNUMA in
case of application is bound to multiple NUMA nodes possible.&lt;/p&gt;
&lt;h2 id=&#34;patch-11-process_madvise2-add-process_madvise-man-page-suren-baghdasaryan&#34;&gt;[PATCH 1/1] process_madvise.2: Add process_madvise man page (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210120202337.1481402-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20210120202337.1481402-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch is for the man page of the &lt;code&gt;process_madvise()&lt;/code&gt; system call.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-create-hugetlb-flags-to-consolidate-state-mike-kravetz&#34;&gt;[PATCH v2 0/5] create hugetlb flags to consolidate state (Mike Kravetz)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210120013049.311822-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20210120013049.311822-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hugetlb specific page state information is stored in hard to
read/understand/maintain way.  This patch series store hugetlb specific page
flags in the &amp;lsquo;private&amp;rsquo; field of &amp;lsquo;struct page&amp;rsquo; to mitigate the problem.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-0014-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v6 00/14] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210120014333.222547-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20210120014333.222547-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes movable pages really movable by prohibiting pinning them in
&lt;code&gt;ZONE_MOVABLE&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-06-fix-the-negative-dentres-bloating-system-memory-usage-gautham-ananthakrishna&#34;&gt;[PATCH RFC 0/6] fix the negative dentres bloating system memory usage (Gautham Ananthakrishna)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1611235185-1685-1-git-send-email-gautham.ananthakrishna@oracle.com&#34;&gt;https://lkml.kernel.org/r/1611235185-1685-1-git-send-email-gautham.ananthakrishna@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit mitigates the memory bloat caused by &amp;lsquo;negative dentries&amp;rsquo; by moving
those to end of siblings list and keep dcache at most three unreferenced
negative dentries in each hash bucket.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc5&#34;&gt;Linux 5.11-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgmJ0q1URHrOb-2iCOdZ8gYybiH6LY2Gq7cosXu6kxAnA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgmJ0q1URHrOb-2iCOdZ8gYybiH6LY2Gq7cosXu6kxAnA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifthe release candidate for v5.11 is slightly larger than usual.  Mainly
because of about 40~% commits for -rc5 which came in the last day.  Noticeable
change is regression due to &lt;code&gt;get rid of set_fs()&lt;/code&gt; change that made for v5.10.
The regression was under rare-to-happen condition, but seems now v5.10 is
widespread enough to let people notice such problems.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc5..v5.11-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-01-25 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc4</title>
      <link>/post/lkml_news_v5.11-rc4/</link>
      <pubDate>Tue, 12 Jan 2021 07:18:48 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-mm-thp-introduce-nr_partial_thps-bin-wang&#34;&gt;[PATCH] mm: thp: introduce NR_PARTIAL_THPS (Bin Wang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210112021208.1875-1-wangbin224@huawei.com&#34;&gt;https://lkml.kernel.org/r/20210112021208.1875-1-wangbin224@huawei.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because partially unmapped THP is not split, the memory stat becomes confusing.
This patch add another counter called &lt;code&gt;NR_PARTIAL_THPS&lt;/code&gt; in &lt;code&gt;node_stat_item&lt;/code&gt; to
reduce such confusions.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0070-rfc-mm-introducing-the-maple-tree-liam-r-howlett&#34;&gt;[PATCH v2 00/70] RFC mm: Introducing the Maple Tree (Liam R. Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210112161240.2024684-1-Liam.Howlett@Oracle.com&#34;&gt;https://lkml.kernel.org/r/20210112161240.2024684-1-Liam.Howlett@Oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second RFC of the Maple tree.  It is an RCU-safe B-tree that aims to be used as
the vma tree with better scalability.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmdebug-improve-memcg-debugging-matthew-wilcox&#34;&gt;[PATCH] mm/debug: Improve memcg debugging (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210114190200.1894484-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20210114190200.1894484-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch modifies &lt;code&gt;__dump_page()&lt;/code&gt; to show memcg information better.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-add-sysfs-interface-to-collect-reports-from-debugging-tools-alexander-potapenko&#34;&gt;[PATCH v2 0/5] Add sysfs interface to collect reports from debugging tools (Alexander Potapenko)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210115130336.2520663-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20210115130336.2520663-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds a library that can be used for error report from debugging
tools, and make KASAN and KFENCE to use the library for error report.  The
error report can be accessed from the user space via the sysfs.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc4-linus-torvalds&#34;&gt;Linux 5.11-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjGqX0BFV0eH9R=9m2Xezib0w8Ty2zEc6XDJ73zNRPuPQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjGqX0BFV0eH9R=9m2Xezib0w8Ty2zEc6XDJ73zNRPuPQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fourth release candidate for v5.11 is out with normal shape.  No big, no
small, just average.  This also includes NVIDIA ampere support.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc4..v5.11-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-01-18 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc3</title>
      <link>/post/lkml_news_v5.11-rc3/</link>
      <pubDate>Wed, 06 Jan 2021 07:20:18 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-mm-vmscan-support-complete-shrinker-reclaim-sudarshan-rajagopalan&#34;&gt;[PATCH] mm: vmscan: support complete shrinker reclaim (Sudarshan Rajagopalan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/2d1f1dbb7e018ad02a9e7af36a8c86397a1598a7.1609892546.git.sudaraja@codeaurora.org&#34;&gt;https://lkml.kernel.org/r/2d1f1dbb7e018ad02a9e7af36a8c86397a1598a7.1609892546.git.sudaraja@codeaurora.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch makes caches can dropped even when those are smaller than the batch
size.&lt;/p&gt;
&lt;h2 id=&#34;patch-06-hugetlbfs-support-free-page-reporting-liang-li&#34;&gt;[PATCH 0/6] hugetlbfs: support free page reporting (Liang Li)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20210106034623.GA1128@open-light-1.localdomain&#34;&gt;https://lkml.kernel.org/r/20210106034623.GA1128@open-light-1.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because hugetlbfs is using reserved memory, it&amp;rsquo;s not reported by the free page
reporting feature.  This patch makes it able to be reported.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc3-linus-torvalds&#34;&gt;Linux 5.11-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wizR7--Ub-rasYx2S5XURkooCQ63Sat23BpvTAuN0scQA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wizR7--Ub-rasYx2S5XURkooCQ63Sat23BpvTAuN0scQA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The prediction of Linus for this release was wrong.  He thought this week would
be calm as people are coming back from their vacations, and it was calm at the
beginning of the week.  However, it finished as a big release.  Unless some
weird issue comes out, there will be no extra week for v5.11.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc3..v5.11-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-01-11 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.11-rc2</title>
      <link>/post/lkml_news_v5.11-rc2/</link>
      <pubDate>Mon, 04 Jan 2021 07:20:40 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc2/</guid>
      <description>&lt;h2 id=&#34;linux-511-rc2-linus-torvalds&#34;&gt;Linux 5.11-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whS+rzNMSsU6vRoLMzrm0JPN-OVg+BxhybMet3NpqpR-Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whS+rzNMSsU6vRoLMzrm0JPN-OVg+BxhybMet3NpqpR-Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Due to the holiday season, rc2 ends up fairly small.  Maybe we will see rc8 for
v5.11, but Torvalds just saying let&amp;rsquo;s watch more.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc2..v5.11-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2019-01-04 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc1</title>
      <link>/post/lkml_news_v5.11-rc1/</link>
      <pubDate>Tue, 15 Dec 2020 07:32:20 +0100</pubDate>
      <guid>/post/lkml_news_v5.11-rc1/</guid>
      <description>&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201214190237.a17b70ae14f129e2dca3d204@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20201214190237.a17b70ae14f129e2dca3d204@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pull request for v5.11 from Andrew Morton.  The &lt;code&gt;mmap_lock&lt;/code&gt; tracepoint
patchset series is included in here.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201215123253.954eca9a5ef4c0d52fd381fa@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20201215123253.954eca9a5ef4c0d52fd381fa@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another pull request from Andrew Morton for memcg scalability improvement.
This makes per-memcg lru lock.&lt;/p&gt;
&lt;h2 id=&#34;patch-0025-page-folios-matthew-wilcox&#34;&gt;[PATCH 00/25] Page folios (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201216182335.27227-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20201216182335.27227-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the patchset for the page folios, which Matthew proposed a few days ago
and discussed via zoom.&lt;/p&gt;
&lt;h2 id=&#34;do-we-still-need-skip-swapcache-logic-in-do_swap_page-for-swp_synchronous_io-huang-ying&#34;&gt;Do we still need skip swapcache logic in do_swap_page() for SWP_SYNCHRONOUS_IO? (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/87y2hxgpo7.fsf@yhuang-dev.intel.com&#34;&gt;https://lkml.kernel.org/r/87y2hxgpo7.fsf@yhuang-dev.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A commit made swap cache logic for fast swap devices to be skipped, but a later
commit uses the swap cache for workingset detection.  Huang asks if the
skipping is still necessary.&lt;/p&gt;
&lt;h2 id=&#34;patch-v10-0011-free-some-vmemmap-pages-of-hugetlb-page-muchun-song&#34;&gt;[PATCH v10 00/11] Free some vmemmap pages of HugeTLB page (Muchun Song)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201217121303.13386-1-songmuchun@bytedance.com&#34;&gt;https://lkml.kernel.org/r/20201217121303.13386-1-songmuchun@bytedance.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset saves memory by freeing some vmemmap pages for hugetlbpage.  LWN
also covers this: &lt;a href=&#34;https://lwn.net/Articles/839737/&#34;&gt;https://lwn.net/Articles/839737/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0010-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v4 00/10] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201217185243.3288048-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20201217185243.3288048-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4th version of the patchset for making ZONE_MOVABLE movable.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v2-patch-14-mm-make-page-reporing-worker-works-better-for-low-order-page&#34;&gt;[RFC v2 PATCH 1/4] mm: make page reporing worker works better for low order page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201221162806.GA22524@open-light-1.localdomain&#34;&gt;https://lkml.kernel.org/r/20201221162806.GA22524@open-light-1.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit makes the free page reporting to release the zone lock
periodically, to avoid the free page reporting feature holds the lock too long,
due to huge number of low-order pages that need to be reported.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-03-add-support-for-free-hugepage-reporting&#34;&gt;[RFC PATCH 0/3] add support for free hugepage reporting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201222074538.GA30029@open-light-1.localdomain&#34;&gt;https://lkml.kernel.org/r/20201222074538.GA30029@open-light-1.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The free pages reporting feature reports only buddy pages, but the hugetlb
pages are not buddy pages because those are managed in the reservation scheme.
This RFC adds support for reporting of the hugetlb pages.&lt;/p&gt;
&lt;h2 id=&#34;linux-511-rc1-linus-torvalds&#34;&gt;Linux 5.11-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg1+kf1AVzXA-RQX0zjM6t9J2Kay9xyuNqcFHWV-y5ZYw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg1+kf1AVzXA-RQX0zjM6t9J2Kay9xyuNqcFHWV-y5ZYw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After two weeks, merge window finished with Christmas and 5.11-rc1 released.
Things worked well as expected.  Most pull requests received to Torvalds in the
first week, so that he could get the holiday week peaceful.  The size of the
rc1 is not so big, not so little, just as usual.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.0-rc2..v5.11-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-12-28 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.11-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10</title>
      <link>/post/lkml_news_v5.10/</link>
      <pubDate>Tue, 08 Dec 2020 07:10:59 +0100</pubDate>
      <guid>/post/lkml_news_v5.10/</guid>
      <description>&lt;h2 id=&#34;rfc-v2-0037-enhance-memory-utilization-with-dmemfs-yuley-zhang&#34;&gt;[RFC V2 00/37] Enhance memory utilization with DMEMFS (Yuley Zhang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1607332046.git.yuleixzhang@tencent.com&#34;&gt;https://lkml.kernel.org/r/cover.1607332046.git.yuleixzhang@tencent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset aims to remove the &amp;lsquo;struct page&amp;rsquo; from user-sepcified region of
memory and use a file system called &amp;lsquo;dmemfs&amp;rsquo; to minimize the memory region
dedicated for &amp;lsquo;struct page&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-dont-setpageworkingset-unconditionally-during-swapin-yu-zhao&#34;&gt;[PATCH] mm: don&amp;rsquo;t SetPageWorkingset unconditionally during swapin (Yu Zhao)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201209012400.1771150-1-yuzhao@google.com&#34;&gt;https://lkml.kernel.org/r/20201209012400.1771150-1-yuzhao@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unconditional &amp;lsquo;SetPageWorkingset&amp;rsquo; miscategorizes read-ahead pages or pages that
never belong to the working set as working set because it&amp;rsquo;s called
unconditionally.  This patch simply remove the unconditional call.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-08-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH v2 0/8] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201210004335.64634-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20201210004335.64634-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This pathset makes pages in &amp;lsquo;ZONE_MOVABLE&amp;rsquo; really movable by forcing new
allocations during page pinning to omit the zone and migrate pages away when
pinning.&lt;/p&gt;
&lt;h2 id=&#34;patch-0028-rfc-mm-introducing-the-maple-tree-liam-r-howlett&#34;&gt;[PATCH 00/28] RFC mm: Introducing the Maple Tree (Liam R. Howlett)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201210170402.3468568-1-Liam.Howlett@Oracle.com&#34;&gt;https://lkml.kernel.org/r/20201210170402.3468568-1-Liam.Howlett@Oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maple tree is a range based B-tree designed to use modern processor cache
efficiently.  It&amp;rsquo;s design presented in several venues before, and the RFC code
is finally available.  It initially designed for replacement of vma tree for
reduction of the &amp;lsquo;mmap_sem&amp;rsquo; contention.  This patchset also does some of the
replacement and shows impressive performance with benchmarks.&lt;/p&gt;
&lt;h2 id=&#34;zoom-call-about-page-folios-tomorrow-matthew-wilcox&#34;&gt;Zoom call about Page Folios tomorrow (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201210210519.GC7338@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/20201210210519.GC7338@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew wants to have a zoom call to share his idea called Page Folios.  He
decided to use Zoom call because in-person conference is not there anywhere for
now.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-linus-torvalds&#34;&gt;Linux 5.10 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whCKhxNyKn1Arut8xUDKTwp3fWcCj_jbL5dbzkUmo45gQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whCKhxNyKn1Arut8xUDKTwp3fWcCj_jbL5dbzkUmo45gQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The v5.10, the next LTS release is out now.  The final week for the release was
calm enough to convince Linus.  This also means the merge window for v5.11
opened.  Because of the timing with the holiday season, Torvalds says this
merge window will be more strict than last one.  All pull requests are strictly
required to be ready before the merge window open.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20..v5.10.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-12-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc7</title>
      <link>/post/lkml_news_v5.10-rc7/</link>
      <pubDate>Wed, 02 Dec 2020 07:16:10 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-mm-mmap_lock-fix-use-after-free-race-and-css-ref-leak-in-tracepoints-axel-rasmussen&#34;&gt;[PATCH] mm: mmap_lock: fix use-after-free race and css ref leak in tracepoints (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201130233504.3725241-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20201130233504.3725241-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch fixes a use-after-free bug that reported by syzbot.&lt;/p&gt;
&lt;h2 id=&#34;patch-06-prohibit-pinning-pages-in-zone_movable-pavel-tatashin&#34;&gt;[PATCH 0/6] prohibit pinning pages in ZONE_MOVABLE (Pavel Tatashin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201202052330.474592-1-pasha.tatashin@soleen.com&#34;&gt;https://lkml.kernel.org/r/20201202052330.474592-1-pasha.tatashin@soleen.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pinned pages in &lt;code&gt;ZONE_MOVABLE&lt;/code&gt; is a wellknown problem.  This patchset fixes the
issue by forcing pinning new page to allocated from a zone other than
ZONE_MOVABLE and migrating out existing pages from the zone during pinning.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-2021-a-status-update-josef-bacik&#34;&gt;[LSFMMBPF 2021] A status update (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/fd5264ac-c84d-e1d4-01e2-62b9c05af892@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/fd5264ac-c84d-e1d4-01e2-62b9c05af892@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The plan is not fixed yet, but they are trying to do LSFMMBPF 2021 as an
in-person conference in second half of 2021.  More detail will be shared again.
Hope the pandemic to be finished soon so that we can redo the in-person
conference.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc7-linus-torvalds&#34;&gt;Linux 5.10-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgtCzNv7ghB=1VK1fYe82GwiS8xdaXTDqcVzQKn4QfrXw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgtCzNv7ghB=1VK1fYe82GwiS8xdaXTDqcVzQKn4QfrXw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rc7 is quite normal.  Linus seems convincing.  v5.10 will be released next
week, unless something weird happens!&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc7..v5.10-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-12-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc6</title>
      <link>/post/lkml_news_v5.10-rc6/</link>
      <pubDate>Tue, 24 Nov 2020 07:41:40 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v2-mm-memcontrol-account-pagetables-per-node-shakeel-butt&#34;&gt;[PATCH v2] mm: memcontrol: account pagetables per node (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201123161425.341314-1-shakeelb@google.com&#34;&gt;https://lkml.kernel.org/r/20201123161425.341314-1-shakeelb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit allows user to account memory size used for page tables per node.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-userspace-memory-reaping-using-process_madvise-suren-baghdasaryan&#34;&gt;[PATCH 0/2] userspace memory reaping using process_madvise (Suren Baghdasaryan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201124053943.1684874-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20201124053943.1684874-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit allows user-space driven OOM reaping using
&lt;code&gt;process_madvise(MADV_DONTNEED)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch--v6-03-autonuma-migrate-on-fault-among-multiple-bound-nodes-huang-ying&#34;&gt;[PATCH -V6 0/3] autonuma: Migrate on fault among multiple bound nodes (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201126053219.234793-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20201126053219.234793-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 6th version for autonuma migration among multiple bound nodes.  In this
version, more benchmark data and example is added.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc6-linus-torvalds&#34;&gt;Linux 5.10-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgSJRZPhfZ4QZhpb78uxRHwO3XLGQFJ5=+5rikOBgQ9rA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgSJRZPhfZ4QZhpb78uxRHwO3XLGQFJ5=+5rikOBgQ9rA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, it becomes calming.  Torvalds says he surprised by sudden increase
of the number of pull requests in last Friday, but things are normal overall.
So we could expect the v5.10 to be released in the supposed schedule.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc6..v5.10-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-11-30 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v5</title>
      <link>/post/lkml_news_v5.10-rc5/</link>
      <pubDate>Wed, 18 Nov 2020 08:46:06 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v9-09-mm-introduce-memfd_secret-system-call-to-create-secret-memory-areas-mike-rapoport&#34;&gt;[PATCH v9 0/9] mm: introduce memfd_secret system call to create &amp;ldquo;secret&amp;rdquo; memory areas (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201117162932.13649-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20201117162932.13649-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 9th version of the memfd_secret patchset.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-08-mmhighmem-preemptible-variant-of-kmap_atomic--friends-thomas-gleixner&#34;&gt;[patch V4 0/8] mm/highmem: Preemptible variant of kmap_atomic &amp;amp; friends (Thomas Gleixner)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201118194838.753436396@linutronix.de&#34;&gt;https://lkml.kernel.org/r/20201118194838.753436396@linutronix.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the name suggests, this patchset allow the code using &lt;code&gt;kmap_atomic&lt;/code&gt; and
similar things to be preemptible.  This incur some overhead to highmem, but
Thomas claims highmem was always slow.&lt;/p&gt;
&lt;h2 id=&#34;patch-07-split-huge-pages-to-any-lower-order-pages-and-selftests-zi-yan&#34;&gt;[PATCH 0/7] Split huge pages to any lower order pages and selftests. (Zi Yan)&lt;/h2&gt;
&lt;p&gt;The patchset adds support for any order pages that could be used as a pagecache
THP after Matthew&amp;rsquo;s work.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc5-linus-torvalds&#34;&gt;Linux 5.10-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiYHcVOuZo8LNn__OgqY_ePW3BSPW8FxZbfChrT8SHnuw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiYHcVOuZo8LNn__OgqY_ePW3BSPW8FxZbfChrT8SHnuw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the biggest rc5 in the 5.x series.  The changes looks normal to Linus,
but the rc5 releases are normally supposed to start calmdown and shrink.  Linus
also note that he hope things to calm down.  If not, the 5.10 release might
come out in the holiday season.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc5..v5.10-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-11-23 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc4</title>
      <link>/post/lkml_news_v5.10-rc4/</link>
      <pubDate>Tue, 10 Nov 2020 07:16:10 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc4/</guid>
      <description>&lt;h2 id=&#34;patch--v3-02-autonuma-migrate-on-fault-among-multiple-bound-nodes-huang-ying&#34;&gt;[PATCH -V3 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201110055951.85085-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20201110055951.85085-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes AutoNUMA&amp;rsquo;s cross-socket memory access optimization possible
even if the application&amp;rsquo;s memory is bound to multiple NUMA nodes.&lt;/p&gt;
&lt;h2 id=&#34;patch-kfence-avoid-stalling-work-queue-task-without-allocations-marco-elver&#34;&gt;[PATCH] kfence: Avoid stalling work queue task without allocations (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201110135320.3309507-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20201110135320.3309507-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit makes the toggle allocation gate of kfence to have 1 second
timeout, to be prepared for allocation stallings.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-06-split-huge-pages-to-any-lower-order-pages-zi-yan&#34;&gt;[RFC PATCH 0/6] Split huge pages to any lower order pages. (Zi Yan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201111204008.21332-1-zi.yan@sent.com&#34;&gt;https://lkml.kernel.org/r/20201111204008.21332-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now pagecache can handle any size of THP, however the &lt;code&gt;split_huge_page()&lt;/code&gt;
splits a THP to only order-0 pages.  For the reason, this patchset supports the
function to be able to split a THP into any size smaller pages.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0016-overhaul-multi-page-lookups-for-thp-matthew-wilcox&#34;&gt;[PATCH v4 00/16] Overhaul multi-page lookups for THP (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201112212641.27837-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20201112212641.27837-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a preparation of next changes Matthew will post.  It first makes
several page cache iteration APIs to only return head pages.&lt;/p&gt;
&lt;h2 id=&#34;are-thps-the-right-model-for-the-pagecache-matthew-wilcox&#34;&gt;Are THPs the right model for the pagecache? (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201113044652.GD17076@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/20201113044652.GD17076@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP is for architectures supporting large TLB entries.  However, the point of
enabling THP for page cache is only reducing the software works, so the
definition doesn&amp;rsquo;t need to be true in there.  Matthew suggests to use another
model for the case and lists concerns about it.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc4-linus-torvalds&#34;&gt;Linux 5.10-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjFfAktnadOPb_iV5nKh=V5Am1sG-gciYveswRtuEkrLQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjFfAktnadOPb_iV5nKh=V5Am1sG-gciYveswRtuEkrLQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s already rc4.  The next long term support kernel, v5.10, will be released
about 4-5 weeks later.  Now Linus want the things to start calming down, but it
wasn&amp;rsquo;t so much.  That said, he says it&amp;rsquo;s not really worrisome but looks good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc3</title>
      <link>/post/lkml_news_v5.10-rc3/</link>
      <pubDate>Wed, 04 Nov 2020 07:08:08 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-v7-09-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v7 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201103175841.3495947-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20201103175841.3495947-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 7th version of KFENCE.  Now the authors say they believe this is ready to
be included in the mm tree.  And, it has now merged in the -mm tree.&lt;/p&gt;
&lt;h2 id=&#34;patch-page_frag-recover-from-memory-pressure-matthew-wilcox&#34;&gt;[PATCH] page_frag: Recover from memory pressure (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201105042140.5253-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20201105042140.5253-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After an extreme memory pressure, some non-essential packets can be dropped
because the &amp;lsquo;page_frag&amp;rsquo; allocator do the drops to recover from the memory
pressure but it doesn&amp;rsquo;t change back the behavior even after the recovery.  This
commit fixes this.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-01-mmap_lock-add-tracepoints-around-lock-acquisition-axel-rasmussen&#34;&gt;[PATCH v6 0/1] mmap_lock: add tracepoints around lock acquisition (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201105211739.568279-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20201105211739.568279-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth version of adding tracepoints for &lt;code&gt;mmap_lock&lt;/code&gt; acquisition.  This will be
helpful for the mmap locking contention understanding.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc3&#34;&gt;Linux 5.10-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiZtabGDAxTbxaAkxf7QjuJSK7c7mcZXFkrYjRfXmSnmQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiZtabGDAxTbxaAkxf7QjuJSK7c7mcZXFkrYjRfXmSnmQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normal rc3 released.  There is no particular thing in terms of the size and
distribution of changes.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc3..v5.10-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-11-09 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc2</title>
      <link>/post/lkml_news_v5.10-rc2/</link>
      <pubDate>Tue, 27 Oct 2020 07:10:48 +0100</pubDate>
      <guid>/post/lkml_news_v5.10-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-09-more-thp-fixes-matthew-wilcox&#34;&gt;[PATCH 0/9] More THP fixes (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201026183136.10404-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20201026183136.10404-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Several THP fixes.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-09-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v5 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201027141606.426816-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20201027141606.426816-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifth version of the KFENCE.&lt;/p&gt;
&lt;h2 id=&#34;patch--v2-02-autonuma-migrate-on-fault-among-multiple-bound-nodes-huang-ying&#34;&gt;[PATCH -V2 0/2] autonuma: Migrate on fault among multiple bound nodes (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201028023411.15045-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20201028023411.15045-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch is for multiple NUMA nodes bounded application&amp;rsquo;s AutoNUMA balancing.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-09-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v6 0/9] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201029131649.182037-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20201029131649.182037-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sixth version of KFENCE patchset came out quite quickly than before.  Jann
says now there are only minor issues.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc2-linus-torvalds&#34;&gt;Linux 5.10-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiGc62spBHh+i1yH9sVLpCqZBznUF8QdO7H5772qO1xqQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiGc62spBHh+i1yH9sVLpCqZBznUF8QdO7H5772qO1xqQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As usual, the rc2 released.  It is a little big bigger than usual, and a lot of
the diffstat is due to removal of MIC drivers for some hardware and ABI
documents formatting for easy parsing.  These made Torvalds feels a little bit
odd about this release.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc2..v5.10-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-11-02 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.10-rc1</title>
      <link>/post/lkml_news_v5.10-rc1/</link>
      <pubDate>Tue, 13 Oct 2020 07:34:10 +0200</pubDate>
      <guid>/post/lkml_news_v5.10-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-mm-make-allocator-take-care-of-memoryless-numa-node-xianting-tian&#34;&gt;[PATCH] mm: Make allocator take care of memoryless numa node (Xianting Tian)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201012082739.15661-1-tian.xianting@h3c.com&#34;&gt;https://lkml.kernel.org/r/20201012082739.15661-1-tian.xianting@h3c.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPUs in powerpc like architecture could have no local memory.  As the kernel
code doesn&amp;rsquo;t care about it, this commit makes it to handle the case.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201013164658.3bfd96cc224d8923e66a9f4e@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20201013164658.3bfd96cc224d8923e66a9f4e@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the pull request from Andrew Morton, the mm maintainer, for v5.10.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-05-speed-up-mremap-on-large-regions-kalesh-singh&#34;&gt;[PATCH v4 0/5] Speed up mremap on large regions (Kalesh Singh)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201014005320.2233162-1-kaleshsingh@google.com&#34;&gt;https://lkml.kernel.org/r/20201014005320.2233162-1-kaleshsingh@google.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Repost fo the patch series.  Change from v3 is only adding Kirill&amp;rsquo;s Acked-by&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201015194043.84cda0c1d6ca2a6847f2384a@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20201015194043.84cda0c1d6ca2a6847f2384a@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another pull request from Andrew Morton.  Changes for THP, which removes the
assumption on THP size seems interesting.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-2&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201017161314.88890b87fae7446ccc13c902@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20201017161314.88890b87fae7446ccc13c902@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yet another pull request from Andres Morton.  Minchan Kim&amp;rsquo;s &lt;code&gt;process_madvise()&lt;/code&gt;
patchset is in here.&lt;/p&gt;
&lt;h2 id=&#34;splitting-a-thp-beyond-eof-matthew-wilcox&#34;&gt;Splitting a THP beyond EOF (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201020014357.GW20115@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/20201020014357.GW20115@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew shares a weird corner case that THP is used beyond the end of file and
his idea on the solution of this problem.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-dont-wake-kswapd-prematurely-when-watermark-boosting-is-disabled-johannes-weiner&#34;&gt;[PATCH] mm: don&amp;rsquo;t wake kswapd prematurely when watermark boosting is disabled (Johannes Weiner)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201020175833.397286-1-hannes@cmpxchg.org&#34;&gt;https://lkml.kernel.org/r/20201020175833.397286-1-hannes@cmpxchg.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case of multiple NUMA nodes systems, the watermark boosting related code
allow kswapd to wake up if one node&amp;rsquo;s memory is full but other nodes have some
free memory.  This is for fragmentation handling, but this frequent kswapd work
makes some workloads slow.  This commit avoids such unnecessary kswapd wakeup.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-01-add-tracepoints-around-mmap_lock-acquisition-axel-rasmussen&#34;&gt;[PATCH v4 0/1] Add tracepoints around mmap_lock acquisition (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201020184746.300555-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20201020184746.300555-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fourth version of the patch adding tracepoints for &lt;code&gt;mmap_lock&lt;/code&gt; acquisition.
This will help understanding and solving the mmap locking contention problem.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-block-layer-filter-and-block-device-snapshot-module-sergei-shtepa&#34;&gt;[PATCH 0/2] block layer filter and block device snapshot module (Sergei Shtepa)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1603271049-20681-1-git-send-email-sergei.shtepa@veeam.com&#34;&gt;https://lkml.kernel.org/r/1603271049-20681-1-git-send-email-sergei.shtepa@veeam.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduce blk-filter, which allows to intercept BIO requests, and
blk-snap, which snapshots block device for backup.&lt;/p&gt;
&lt;h2 id=&#34;linux-510-rc1-linus-torvalds&#34;&gt;Linux 5.10-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whcRFYSm0jj3Xh3xCyBaxCHA1ZMNO0h_gZso_WZFDUtiQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whcRFYSm0jj3Xh3xCyBaxCHA1ZMNO0h_gZso_WZFDUtiQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two weeks of the merge window passed, and the 5.10-rc1 has released as a
result.  Torvalds says this is bigger than he expected.  This could be a
general upward trend, just a fluke, or due to delayed 5.9 release, Torvalds
says.  He also picks up the &lt;code&gt;set_fs()&lt;/code&gt; removal change from Christoph as most
interesting change in this release.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.20-rc2..v5.10-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2020-10-26 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.10-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9</title>
      <link>/post/lkml_news_v5.9/</link>
      <pubDate>Tue, 06 Oct 2020 07:12:49 +0200</pubDate>
      <guid>/post/lkml_news_v5.9/</guid>
      <description>&lt;h2 id=&#34;patch-rfc-v2-opportunistic-memory-reclaim-andrea-righi&#34;&gt;[PATCH RFC v2] Opportunistic memory reclaim (Andrea Righi)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201005081313.732745-1-andrea.righi@canonical.com&#34;&gt;https://lkml.kernel.org/r/20201005081313.732745-1-andrea.righi@canonical.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces new file under memcg, &amp;lsquo;memory.swap.reclaim&amp;rsquo; that allow
users to incur Reclaim even before the memory pressure happens, to help
reducing system memory footprint and speed up hibernation/VM migration time,
etc.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-add-tracepoints-around-mmap_lock-acquisition-axel-rasmussen&#34;&gt;[PATCH v2 0/2] Add tracepoints around mmap_lock acquisition (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201007184403.1902111-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20201007184403.1902111-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds tracepoints for &lt;code&gt;mmap_lock&lt;/code&gt; to use that for analysis of
the contention.&lt;/p&gt;
&lt;h2 id=&#34;rfcpatch-09-v4resend-migrate-pages-in-lieu-of-discard-dave-hansen&#34;&gt;[RFC][PATCH 0/9] [v4][RESEND] Migrate Pages in lieu of discard (Dave Hansen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201007161736.ACC6E387@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20201007161736.ACC6E387@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit makes the tiered-memory operation to do migration instead of
reclamation.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-linus-torvalds&#34;&gt;Linux 5.9 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi-u86++np80GQvgDuARdt9xpBNho6SjHLmYgm8jibGag@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi-u86++np80GQvgDuARdt9xpBNho6SjHLmYgm8jibGag@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As expected, Linux v5.9 released.  Torvalds says the changes in last week was a
little bit more that he hoped, but there was no scary change.  So, the merge
window for v5.10 has open!&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19..v5.9.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-10-12 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc8</title>
      <link>/post/lkml_news_v5.9-rc8/</link>
      <pubDate>Tue, 29 Sep 2020 07:22:30 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc8/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v2-0030-1gb-pud-thp-support-on-x86_64-zi-yan&#34;&gt;[RFC PATCH v2 00/30] 1GB PUD THP support on x86_64 (Zi Yan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200928175428.4110504-1-zi.yan@sent.com&#34;&gt;https://lkml.kernel.org/r/20200928175428.4110504-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds support of 1GB THP using PUD.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0011-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v4 00/11] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200929133814.2834621-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20200929133814.2834621-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 4th version of the KFENCE patchset.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-speed-up-mremap-on-large-regions-kalesh-singh&#34;&gt;[PATCH 0/5] Speed up mremap on large regions (Kalesh Singh)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200930222130.4175584-1-kaleshsingh@google.com&#34;&gt;https://lkml.kernel.org/r/20200930222130.4175584-1-kaleshsingh@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset optimizes &lt;code&gt;mremap()&lt;/code&gt; by allowing memory regions to be able to
mapped at PMD/PUD.&lt;/p&gt;
&lt;h2 id=&#34;patch-selftestsvm-10x-speedup-for-hmm-tests&#34;&gt;[PATCH] selftests/vm: 10x speedup for hmm-tests&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20201003011721.44238-1-jhubbard@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20201003011721.44238-1-jhubbard@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch reduces number of iteration of hmm-tests so it can run faster.&lt;/p&gt;
&lt;h2 id=&#34;linux-v59-rc8-linus-torvalds&#34;&gt;Linux v5.9-rc8 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj-H5BYCU_kKiOK=B9sN3BtRzL4pnne2AJPyf54nQ+d=w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj-H5BYCU_kKiOK=B9sN3BtRzL4pnne2AJPyf54nQ+d=w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As expected, rc8 instead of the v5.9 is released.  Torvalds is still waiting
some fixes from network part, but he also says it was really calm last week and
therefore he think this is the right time for the last week before the v5.9
release.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc7..v5.9-rc8.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-10-05 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc8 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc8-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc7</title>
      <link>/post/lkml_news_v5.9-rc7/</link>
      <pubDate>Tue, 22 Sep 2020 07:07:32 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v3-0010-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v3 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200921132611.1700350-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20200921132611.1700350-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third version of KFENCE patchset is uploaded.&lt;/p&gt;
&lt;h2 id=&#34;machine-lockups-on-extreme-memory-pressure-shakeel-butt&#34;&gt;Machine lockups on extreme memory pressure (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CALvZod4FWLsV9byrKQojeus7tMDhHjQHFF5J_JpNsyB0HkaERA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CALvZod4FWLsV9byrKQojeus7tMDhHjQHFF5J_JpNsyB0HkaERA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shakeel reports a machine lockup due to extreme memory pressure.  It&amp;rsquo;s locked
up on memcg&amp;rsquo;s vmpressure &lt;code&gt;sr_lock&lt;/code&gt;, which is irq-unsafe.  And the lockup made
in IRQ.  He proposes a solution simply changing the lock with irq-safe one, but
he also admits it&amp;rsquo;s not a maintainable solution.  Therefore, he asks if others
has similar problems and if so, what was the solution.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-06-mm-introduce-memfd_secret-system-call-to-create-secret-memory-areas-mike-rapoport&#34;&gt;[PATCH v6 0/6] mm: introduce memfd_secret system call to create &amp;ldquo;secret&amp;rdquo; memory areas (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200924132904.1391-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200924132904.1391-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth version of the &lt;code&gt;memfd_secret&lt;/code&gt; patchset.  It aims to provide &amp;ldquo;secret&amp;rdquo;
mappings, mostly for the guests.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc7-linus-torvalds&#34;&gt;Linux 5.9-rc7 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj1SJmva5pQxT-XZkMREOa+iJuy0K8-zua0K=vF-Jz7zw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj1SJmva5pQxT-XZkMREOa+iJuy0K8-zua0K=vF-Jz7zw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of the v5.9 gating issues including the VM bugs are finally fixed.
However, because the fixes came in fairly late, Torvalds says he would release
rc8 next week, instead of the v5.9.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc7..v5.9-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-09-28 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc7 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc6</title>
      <link>/post/lkml_news_v5.9-rc6/</link>
      <pubDate>Tue, 15 Sep 2020 07:03:40 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v14-05-kasan-kunit-integration-david-gow&#34;&gt;[PATCH v14 0/5] KASAN-KUnit Integration (David Gow)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200915035828.570483-1-davidgow@google.com&#34;&gt;https://lkml.kernel.org/r/20200915035828.570483-1-davidgow@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 14th patchset for the KASAN and KUnit integration.  From the v13, compile
warnings in test_kasan_module fixed.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0010-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH v2 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200915132046.3332537-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20200915132046.3332537-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second version of the KFENCE posted.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-fs-add-a-filesystem-flag-for-thps-matthew-wilcox&#34;&gt;[PATCH 1/2] fs: Add a filesystem flag for THPs (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200916032717.22917-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200916032717.22917-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset caches whether the backing filesystem support THP or not in an
address space flags, so that the page cache can determine if it can send THP to
the backing filesystem or not.&lt;/p&gt;
&lt;h2 id=&#34;patch-mmap_lock-add-tracepoints-around-lock-acquisition-axel-rasmussen&#34;&gt;[PATCH] mmap_lock: add tracepoints around lock acquisition (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200917181347.1359365-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20200917181347.1359365-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds tracepoints in the &lt;code&gt;mmap_lock()&lt;/code&gt;, for debugging of the lock
contentions.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc6-linus-torvalds&#34;&gt;Linux 5.9-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjSWKpiNbcMpzQ9fBUA5s11sU-STLztzQkHhCHtYvLP5A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjSWKpiNbcMpzQ9fBUA5s11sU-STLztzQkHhCHtYvLP5A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last week was again normally calm enough for rc6.  One thing that Torvalds
mentions is the removal of fbcon and vgacon.  Those were removed by Torvalds,
mainly because the parts has raised a few of security bugs but not actively
maintained now.  Torvalds told he will resurrect it only after people complain
and some maintainers come up.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc6..v5.9-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-09-21 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc6 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc5</title>
      <link>/post/lkml_news_v5.9-rc5/</link>
      <pubDate>Tue, 08 Sep 2020 07:12:49 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-rfc-0010-kfence-a-low-overhead-sampling-based-memory-safety-error-detector-marco-elver&#34;&gt;[PATCH RFC 00/10] KFENCE: A low-overhead sampling-based memory safety error detector (Marco Elver)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200907134055.2878499-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20200907134055.2878499-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces another kernel use-after-free detection
infrastructure, called Kernel Electric-Fence (KFENCE).  Unlike KASAN, this
trades the performance for precision and as a result it incurs near zero
performance overhead so that it can be enabled in the production.&lt;/p&gt;
&lt;h2 id=&#34;patch-0011-remove-assumptions-of-thp-size-matthew-wilcox&#34;&gt;[PATCH 00/11] Remove assumptions of THP size (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200908195539.25896-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200908195539.25896-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew is working for variable sized THP.  For start of the work, this
patchset changes the assumption that THP will be PMD size by introducing
&lt;code&gt;thp_nr_pages()&lt;/code&gt; and let the other VM code to use it.&lt;/p&gt;
&lt;h2 id=&#34;patch-memcg-introduce-per-memcg-reclaim-interface-shakeel-butt&#34;&gt;[PATCH] memcg: introduce per-memcg reclaim interface (Shakeel Butt)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200909215752.1725525-1-shakeelb@google.com&#34;&gt;https://lkml.kernel.org/r/20200909215752.1725525-1-shakeelb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sometimes the workload is mixed with latency sensitive ones and latency
tolerative ones.  The kernel does not have a way to distinguish those.  It&amp;rsquo;s
rather well known to the users.  Therefore, this patchset allow the userspace
to trigger reclaim specific memory cgroup.&lt;/p&gt;
&lt;h2 id=&#34;patch-v13-05-kasan-kunit-integration-david-gow&#34;&gt;[PATCH v13 0/5] KASAN-KUnit Integration (David Gow)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200910070331.3358048-1-davidgow@google.com&#34;&gt;https://lkml.kernel.org/r/20200910070331.3358048-1-davidgow@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;13th version of the KASAN-KUnit integration patchset.&lt;/p&gt;
&lt;h2 id=&#34;ways-to-deprecate-sysdevicessystemmemorymemoryxphys_device--david-hildenbrand&#34;&gt;Ways to deprecate /sys/devices/system/memory/memoryX/phys_device ? (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/21852ccb-bd06-9281-7c8e-485ec02f2883@redhat.com&#34;&gt;https://lkml.kernel.org/r/21852ccb-bd06-9281-7c8e-485ec02f2883@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this mail, David introduces how &lt;code&gt;phys_device&lt;/code&gt; file has added in the kernel,
updated, and finally been not useful at all but only makes concern in backward
compatibility with some user space tools.  He asks what is the better
intermediate step towards the complete removal of the interface.  Just making
it return &amp;lsquo;0&amp;rsquo; always, or making it supported on the backward compatibility
concerning arch, s390x, only.&lt;/p&gt;
&lt;h2 id=&#34;mm-fix-memory-to-node-bad-links-in-sysfs-laurent-dufour&#34;&gt;mm: fix memory to node bad links in sysfs (Laurent Dufour)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200911134831.53258-1-ldufour@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20200911134831.53258-1-ldufour@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The firmware could expose memory layout that some region are interleaved in
multiple NUMA nodes.  Then, the memory blocks wrongly assigned to the multiple
nodes in sysfs.  This causes BUG_ON() when the block is hot-unplugged and the
hot-plugged again, due to the sysfs inconsistency detection.&lt;/p&gt;
&lt;p&gt;This patchset fixes the problem.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc5-linus-torvalds&#34;&gt;Linux 5.9-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjLVdzdX09kS324Q=GoRn0uPCnr-sovqVCdJcUxVdkJCQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjLVdzdX09kS324Q=GoRn0uPCnr-sovqVCdJcUxVdkJCQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Torvalds sees the gray world due to the wildfires but he also sees the release
is quite normal.  Just as normal as usual rc5.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc5..v5.9-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc4</title>
      <link>/post/lkml_news_v5.9-rc4/</link>
      <pubDate>Tue, 01 Sep 2020 07:20:35 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-v9-03-introduce-memory-hinting-api-for-external-process-minchan-kim&#34;&gt;[PATCH v9 0/3] introduce memory hinting API for external process (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200901000633.1920247-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200901000633.1920247-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the rejection, this patchset posted again.  Linus&amp;rsquo;s opinion about
dropping the &lt;code&gt;task_struct&lt;/code&gt; to &lt;code&gt;do_madvise&lt;/code&gt; and Christian&amp;rsquo;s comment
regarding compat syscall entry has resolved.&lt;/p&gt;
&lt;p&gt;And, this patchset merged in the &amp;lsquo;-mm&amp;rsquo; tree again.  Hopefully it will be merged
in mainline by 5.10!&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-03-anonymous-vma-naming-patches-sumit-semwal&#34;&gt;[PATCH v6 0/3] Anonymous VMA naming patches (Sumit Semwal)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200901091901.19779-1-sumit.semwal@linaro.org&#34;&gt;https://lkml.kernel.org/r/20200901091901.19779-1-sumit.semwal@linaro.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is reposting of old patchset which Colin Cross sent before.  Sumit Semwal
repost this mainly due to its necessary for Android on mainline kenrnel.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0016-1gb-thp-support-on-x86_64-zi-yan&#34;&gt;[RFC PATCH 00/16] 1GB THP support on x86_64 (Zi Yan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200902180628.4052244-1-zi.yan@sent.com&#34;&gt;https://lkml.kernel.org/r/20200902180628.4052244-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes 1GB THP available on x86_64.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-workingset-ignore-slab-memory-size-when-calculating-shadows-pressure-roman-gushchin&#34;&gt;[PATCH] mm: workingset: ignore slab memory size when calculating shadows pressure (Roman Gushchin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200903230055.1245058-1-guro@fb.com&#34;&gt;https://lkml.kernel.org/r/20200903230055.1245058-1-guro@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;count_shadow_nodes()&lt;/code&gt; function returns the memory size for LRU pages and slab.
This makes sense in non-memcg case, but in memcg case, this doesn&amp;rsquo;t make sense
as the shadow nodes themselves are backed by slabs.  Also, recent commit
fb2f2b0adb98 (&amp;ldquo;mm: memcg/slab: reparent memcg kmem_caches on cgroup removal&amp;rdquo;)
makes the per-lruvec slab counters on non-leaf cgroup inaccurate.  For the
reason, this commit redefines the &lt;code&gt;count_shadow_nodes()&lt;/code&gt; to not count the slab
memory.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc4-linus-torvalds&#34;&gt;Linux 5.9-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgdq1XfoECVoZyr5+j+LM7oG31DhEhSoju=DQFBdSvEsw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgdq1XfoECVoZyr5+j+LM7oG31DhEhSoju=DQFBdSvEsw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlke last week, this week release has unusually many changes.  Maybe the
changes for last week came this week.  Nonetheless, it&amp;rsquo;s not outlier.  Changes
are spread well.  So, Torvalds says he can&amp;rsquo;t say it&amp;rsquo;s calmed down, but also he
doesn&amp;rsquo;t worry about this too much.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc4..v5.9-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-09-07 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LkML New v5.9-rc3</title>
      <link>/post/lkml_news_v5.9-rc3/</link>
      <pubDate>Tue, 25 Aug 2020 07:52:02 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc3/</guid>
      <description>&lt;h2 id=&#34;rfc--v3-05-autonuma-optimize-memory-placement-for-memory-tiering-system-huang-ying&#34;&gt;[RFC -V3 0/5] autonuma: Optimize memory placement for memory tiering system (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200825002354.17038-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20200825002354.17038-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third RFC of autonuma for help placing of data items on systems utilizing
both DRAM and PMEM as different NUMA nodes.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc3&#34;&gt;Linux 5.9-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiD1yujm_WvWLYL7gZsWMvZyWMg1rfU7dWmnYYc3a7Gsg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiD1yujm_WvWLYL7gZsWMvZyWMg1rfU7dWmnYYc3a7Gsg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week rc release is also quite normal.  The &amp;lsquo;fallthought&amp;rsquo; comment
conversion made fairly evenly distributed changes.  Torvalds says it was quite
calm.  Indeed, only one patchset got my interest this week.  I guess it was
maybe due to the Linux Plumbers Conference.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc3..v5.9-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc2</title>
      <link>/post/lkml_news_v5.9-rc2/</link>
      <pubDate>Tue, 18 Aug 2020 07:15:40 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc2/</guid>
      <description>&lt;h2 id=&#34;problem-long-workqueue-delays-jim-baxter&#34;&gt;PROBLEM: Long Workqueue delays. (Jim Baxter)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/71aafe68-7fe0-6b77-ea8e-83edd3f16c8d@mentor.com&#34;&gt;https://lkml.kernel.org/r/71aafe68-7fe0-6b77-ea8e-83edd3f16c8d@mentor.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jim Baxter encountered 6.5 seconds delay due to long workqueue delay.  He want
to ask if this is normal or real problem.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-08-memcg-enable-fine-grained-per-process-memory-control-waiman-long&#34;&gt;[RFC PATCH 0/8] memcg: Enable fine-grained per process memory control (Waiman Long)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200817140831.30260-1-longman@redhat.com&#34;&gt;https://lkml.kernel.org/r/20200817140831.30260-1-longman@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The memory cgroup v2 start reclamation if the amount of the memory of the
cgroup exceeds &amp;lsquo;memory.high&amp;rsquo; and start OOM killing if if exceeds &amp;lsquo;memory.max&amp;rsquo;.
Problem is, the OOM killer can kill any process.  This patchset makes the
target of the OOM killing can be selected by user.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-02-anonymous-vma-naming-patches-sumit-semwal&#34;&gt;[PATCH v5 0/2] Anonymous VMA naming patches (Sumit Semwal)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200819141650.7462-1-sumit.semwal@linaro.org&#34;&gt;https://lkml.kernel.org/r/20200819141650.7462-1-sumit.semwal@linaro.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset was originally sent by Colin Cross a long time ago but Sumit
Semwal reposting this as he realised that this patchset is needed for Android
to boot.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-mm-increase-page-waitqueue-hash-size-nicholas-piggin&#34;&gt;[PATCH RFC] mm: increase page waitqueue hash size (Nicholas Piggin)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200819125349.558249-1-npiggin@gmail.com&#34;&gt;https://lkml.kernel.org/r/20200819125349.558249-1-npiggin@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nicholas found the page waitqueue hash is a bit small on his 16 socket 1536
threads POWER9 system.  He increased the waitqueue hash size from 256 to 262144
and it made 182% performance improvement.&lt;/p&gt;
&lt;h2 id=&#34;patch-078-transparent-huge-pages-for-xfs-matthew-wilcox&#34;&gt;[PATCH 0/78] Transparent Huge Pages for XFS (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200821224522.GX17456@casper.infradead.org&#34;&gt;https://lkml.kernel.org/r/20200821224522.GX17456@casper.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew&amp;rsquo;s THP for file-backed pages now passes xfstests.  For this, he made 78
patches.  However, because no one really like to review 78 patches, he just
want to let people know this and a portion of the patches is already formatted
as 5 individual patchsets.  He hopes some of the patchsets to be merged in
v5.10.&lt;/p&gt;
&lt;p&gt;Biggest change this patchset makes is variable-sized THPs.  He made this change
because filesystems would prefer a page size between &lt;code&gt;PAGE_SIZE&lt;/code&gt; and
&lt;code&gt;PMD_SIZE&lt;/code&gt;.  &lt;code&gt;PMD_SIZE&lt;/code&gt; is the only one size for THP now.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc2-linus-torvalds&#34;&gt;Linux 5.9-rc2 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiy7qFBRVibt+kHoceCwsiPeMRZXDajq1oCsk+AUOU4cg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiy7qFBRVibt+kHoceCwsiPeMRZXDajq1oCsk+AUOU4cg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rc2 for 5.9 came out.  Nothing in particular.  Many fixes in file systems
because ext4 update came in late.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc2..v5.9-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-08-24 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.9-rc1</title>
      <link>/post/lkml_news_v5.9-rc1/</link>
      <pubDate>Tue, 04 Aug 2020 07:08:27 +0200</pubDate>
      <guid>/post/lkml_news_v5.9-rc1/</guid>
      <description>&lt;h2 id=&#34;mm-sort-freelist-by-rank-number-cho-kyongho&#34;&gt;mm: sort freelist by rank number (Cho KyongHo)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1596435031-41837-1-git-send-email-pullip.cho@samsung.com&#34;&gt;https://lkml.kernel.org/r/1596435031-41837-1-git-send-email-pullip.cho@samsung.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LPDDR5 has severan ranks and there are ranks switching delay.  Therefore, it
would be better to do accesses in same ranks if possible.  This patch sorts
freelist by the rank number so that near future allocation can be done in same
rank.&lt;/p&gt;
&lt;h2 id=&#34;rfc-prototype-11-mm-add-__gfp_fast_try-flag-uladzislau-rezki&#34;&gt;&lt;code&gt;[RFC-PROTOTYPE 1/1] mm: Add __GFP_FAST_TRY flag (Uladzislau Rezki)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200803163029.1997-1-urezki@gmail.com&#34;&gt;https://lkml.kernel.org/r/20200803163029.1997-1-urezki@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the rfc of the patch for the Paul&amp;rsquo;s last ask.  The memory objects to be
freed by RCU are stored in the per-cpu array.  When the array is full, RCU
allocates new block of array and link it after the current one.  This strategy
is taken over the RCU head linked list to improve locality and thus reduce the
cache misses.  The allocation should be made under atomic context.  However,
the memory allocator makes lockdep compain if &lt;code&gt;CONFIG_PROVE_RAW_LOCK_NESTING&lt;/code&gt;
is on.  Also, it doesn&amp;rsquo;t allow atomic context memory allocation if
&lt;code&gt;CONFIG_PREEMPT_RT&lt;/code&gt; is on, as it converts &lt;code&gt;spinlock_t&lt;/code&gt; into sleepable
variant.&lt;/p&gt;
&lt;p&gt;To overcome the problem, this patch introduces &lt;code&gt;__GFP_FAST_TRY&lt;/code&gt; flag so that
the memory allocator can work in the case.&lt;/p&gt;
&lt;h2 id=&#34;patch-v11-06-kasan-kunit-integration-david-gow&#34;&gt;[PATCH v11 0/6] KASAN-KUnit Integration (David Gow)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200805042938.2961494-1-davidgow@google.com&#34;&gt;https://lkml.kernel.org/r/20200805042938.2961494-1-davidgow@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes KUnit to be able to fail tests wen unexpected KASAN error
occurs and vice versa.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-06-mm--virtio-mem-support-zone_movable-david-hildenbrand&#34;&gt;[PATCH v3 0/6] mm / virtio-mem: support ZONE_MOVABLE (David Hildenbrand)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200804072408.5481-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20200804072408.5481-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While virtio-mem allows to online fully plugged memory blocks to
&lt;code&gt;ZONE_MOVABLE&lt;/code&gt;, it dows not allow to online partially-plugged memory blocks
to &lt;code&gt;ZONE_MOVABLE&lt;/code&gt;.  This commit makes it available.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200806231643.a2711a608dd0f18bff2caf2b@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20200806231643.a2711a608dd0f18bff2caf2b@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew sent a pull request containing 163 patches to Torvalds.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton-1&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200811182949.e12ae9a472e3b5e27e16ad6c@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20200811182949.e12ae9a472e3b5e27e16ad6c@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another pull request from Andrew to Torvalds.  This pull request contains
&amp;ldquo;workingset protection/detection on the anonymous LRU list&amp;rdquo;, and &amp;ldquo;proactive
compaction&amp;rdquo;, which also reviewed by this post series.&lt;/p&gt;
&lt;h2 id=&#34;patch-1839-mmmadvise-check-fatal-signal-pending-of-target-process-andrew-morton&#34;&gt;[patch 18/39] mm/madvise: check fatal signal pending of target process (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200815003102.dzZiwVm-K%akpm@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20200815003102.dzZiwVm-K%akpm@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;madvise_process()&lt;/code&gt; series has included in the pull request from Andrew
to Linus.  It was rejected from v5.8 due to its weird patch sequence regarding
its pidfd support.  Unfortunately, Torvalds don&amp;rsquo;t like the signal handling of
the patch at this time.&lt;/p&gt;
&lt;h2 id=&#34;linux-59-rc1-linus-torvalds&#34;&gt;Linux 5.9-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CAHk-=wiwfkKp93C+yLqKWAU0ChBdeBDUhgOk09_=UQ8gOKbV3w@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The merge window for v5.9 has finished, and the first rc released.  It was much
normal than v5.8.  The most interesting changes in my viewpoint are the
anonymous pages workingset detection/protection and the proactive compaction.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.19-rc2..v5.9-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-07-20 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc1 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.9-rc1-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8</title>
      <link>/post/lkml_news_v5.8/</link>
      <pubDate>Tue, 28 Jul 2020 07:07:40 +0200</pubDate>
      <guid>/post/lkml_news_v5.8/</guid>
      <description>&lt;h2 id=&#34;patch-v2-07-mm-introduce-memfd_secret-system-call-to-create-secret-memory-areas-mike-rapoport&#34;&gt;[PATCH v2 0/7] mm: introduce memfd_secret system call to create &amp;ldquo;secret&amp;rdquo; memory areas (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200727162935.31714-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200727162935.31714-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the second version of the secretmemfd.  In this version, the system
call has renamed to &amp;lsquo;memfd_secret&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-05-madvise-madv_doexec-anthony-yznaga&#34;&gt;[RFC PATCH 0/5] madvise MADV_DOEXEC (Anthony Yznaga)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1595869887-23307-1-git-send-email-anthony.yznaga@oracle.com&#34;&gt;https://lkml.kernel.org/r/1595869887-23307-1-git-send-email-anthony.yznaga@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces another madvise hint, &lt;code&gt;MADV_DOEXEC&lt;/code&gt;.  It preserves an
anonymous memory range across exec.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-06-decrease-unnecessary-gap-due-to-pmem-kmem-alignment-jia-he&#34;&gt;[RFC PATCH 0/6] decrease unnecessary gap due to pmem kmem alignment (Jia He)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200729033424.2629-1-justin.he@arm.com&#34;&gt;https://lkml.kernel.org/r/20200729033424.2629-1-justin.he@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because dax pmem as RAM device on arm64 makes the start address aligned with 1G
memblock size, the amount of memory space of it is limited.  This patch
decreases the alignment requirement to solve the problem.&lt;/p&gt;
&lt;h2 id=&#34;raw-spinlocks-and-memory-allocation-paul-e-mckenney&#34;&gt;Raw spinlocks and memory allocation (Paul E. McKenney)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200730231205.GA11265@paulmck-ThinkPad-P72&#34;&gt;https://lkml.kernel.org/r/20200730231205.GA11265@paulmck-ThinkPad-P72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul E. McKenney is asking mm people to add new &lt;code&gt;GFP_&lt;/code&gt; flag for RCU.  In case
of raw atomic contexts, &lt;code&gt;call_rcu()&lt;/code&gt; traditionally traversed a cache cold
linked list for the callbacks.  Instead, recently Uladzislau has made it to use
array instead of the linked list.  It showed non subtle benefit.  Now, how the
array should be allocated?  Because it&amp;rsquo;s called within the raw atomic context,
it shouldn&amp;rsquo;t hold the non-raw spinlock.  However, there is no &lt;code&gt;GFP_&lt;/code&gt; flag for
such behavior.  Paul, hence, is asking mm people to add another &lt;code&gt;GFP_&lt;/code&gt; flag
of the behavior.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-introduce-reference-pages-peter-collingbourne&#34;&gt;[PATCH] mm: introduce reference pages (Peter Collingbourne)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200731203241.50427-1-pcc@google.com&#34;&gt;https://lkml.kernel.org/r/20200731203241.50427-1-pcc@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch introduces a new mmap flag, &lt;code&gt;MAP_REFPAGE&lt;/code&gt;.  It creates a mapping
backed by a reference page, which address is specified using the offset
argument to mmap.  Thus, reading the region can be done directly from the
reference page, and the writing to the region will do copy-on-write.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-linus-torvalds&#34;&gt;Linux 5.8 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj+mDPbj8hXspXRAksh+1TmPjubc9RNEbu8EVpYyypX=w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj+mDPbj8hXspXRAksh+1TmPjubc9RNEbu8EVpYyypX=w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was very curious what the name of this release will be, as the march to v5.8
seemed quite dynamic.  Torvalds also says he considered rc8 all the way to the
last minute.  He finally decided to release v5.8 instead of the v5.8-rc8.  I
titled this post in my estimation, and it fortunately turned out to be right :)&lt;/p&gt;
&lt;p&gt;Torvalds explains though we had very large rc1 for this release, there were
really nothing scary.  Though there were header dependency problem last week,
Torvalds says it was always there annoying and he says about adoption of some
tooling.&lt;/p&gt;
&lt;p&gt;So in the last week, there were the silly header file noise, dominant
networking pull request, and some RCU fixes.  And, the big release of 5.8 is
here now!&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18..v5.8.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-07-27 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc7</title>
      <link>/post/lkml_news_v5.8-rc7/</link>
      <pubDate>Wed, 22 Jul 2020 06:48:06 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-06-mm-introduce-secretmemfd-system-call-to-create-secret-memory-areas-mike-rapoport&#34;&gt;[PATCH 0/6] mm: introduce secretmemfd system call to create &amp;ldquo;secret&amp;rdquo; memory areas (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200720092435.17469-1-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200720092435.17469-1-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset make another special kind of file for secret memory areas.  The
file can be opened using &lt;code&gt;secretmemfd()&lt;/code&gt;.  &lt;code&gt;mmap()&lt;/code&gt; of the file creates the
secret memory mapping.  The mapped pages are marked as not present in the
direct map and will have desired protection bits (e..g, uncached).&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-06-workingset-protectiondetection-on-the-anonymous-lru-list-js1304gmailcom&#34;&gt;[PATCH v7 0/6] workingset protection/detection on the anonymous LRU list (&lt;a href=&#34;mailto:js1304@gmail.com&#34;&gt;js1304@gmail.com&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1595490560-15117-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1595490560-15117-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The seventh version of the workingset protection code.  In this version, some
bugs in code and the workingset detection formula fixed.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc7&#34;&gt;Linux 5.8-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgcJ-dtTf+kY1Qj0F786gYqShJU19BguJHruQ2J4vZxOw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgcJ-dtTf+kY1Qj0F786gYqShJU19BguJHruQ2J4vZxOw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This release is slightly larger than what Torvalds would like.  Nothing seems
worrisome, but Torvalds thinks this might mean rc8 isrequired.  He will see how
this goes one more week and make the final decision.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc8..v5.8-rc7.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-07-27 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc7-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc6</title>
      <link>/post/lkml_news_v5.8-rc6/</link>
      <pubDate>Wed, 15 Jul 2020 06:50:00 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v3-x86mm-use-max-memory-block-size-on-bare-metal-daniel-jordan&#34;&gt;[PATCH v3] x86/mm: use max memory block size on bare metal (Daniel Jordan)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200714205450.945834-1-daniel.m.jordan@oracle.com&#34;&gt;https://lkml.kernel.org/r/20200714205450.945834-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On x86, smallest supported block size is 128MiB.  This means it needs to create
16,288 sysfs directories for 2TiB memory system.  This sysfs creation takes
significant amount of the boot time.  As the memory hotplug is frequenlty used
for the virtualized systems, this commit makes the kernels that aren&amp;rsquo;t running
on a hypervisor to use largest block size (2GiB) on big machines.&lt;/p&gt;
&lt;p&gt;The author says the kernel boot time has been 7% faster after applying this
patch on the 2TiB memory system.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-memcg-provide-a-stat-to-describe-reclaimable-memory-david-rientjes&#34;&gt;[patch] mm, memcg: provide a stat to describe reclaimable memory (David Rientjes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/alpine.DEB.2.23.453.2007142018150.2667860@chino.kir.corp.google.com&#34;&gt;https://lkml.kernel.org/r/alpine.DEB.2.23.453.2007142018150.2667860@chino.kir.corp.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Under memory pressure, some of the memory can be reclaimed, so free memory plus
some of reclaimable memory is called available memory.  This is provided by
&lt;code&gt;/proc/meminfo&lt;/code&gt; file, but that for each &lt;code&gt;memcg&lt;/code&gt; is not.  This patch adds
the value in &lt;code&gt;memory.stat&lt;/code&gt; file in memcg sysfs.&lt;/p&gt;
&lt;h2 id=&#34;rfc-for-linux-v4-02-virtio_balloon-add-virtio_balloon_f_cont_pages-to-report-continuous-pages-hui-zhu&#34;&gt;[RFC for Linux v4 0/2] virtio_balloon: Add VIRTIO_BALLOON_F_CONT_PAGES to report continuous pages (Hui Zhu)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1594867315-8626-1-git-send-email-teawater@gmail.com&#34;&gt;https://lkml.kernel.org/r/1594867315-8626-1-git-send-email-teawater@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds &lt;code&gt;VIRTIO_BALLOON_F_CONT_PAGES&lt;/code&gt; to &lt;code&gt;virtio_balloon&lt;/code&gt;.  If
this flag is given, &lt;code&gt;virtio_balloon&lt;/code&gt; tries to inflate and deflate with
continuous pages.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc6-linus-torvalds&#34;&gt;Linux 5.8-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj_gy9xpqFx_aLTtLtFTCTKKLfV9E2bgE5J2GeKit3MCg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj_gy9xpqFx_aLTtLtFTCTKKLfV9E2bgE5J2GeKit3MCg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have seen some fluctuations in the rcs of this year.  Fortunately, this week
rc release looks normal to Torvalds, though it is a big release.  I guess 5.8
will be released in the normal manner.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc7..v5.8-rc6.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-07-20 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc6-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc5</title>
      <link>/post/lkml_news_v5.8-rc5/</link>
      <pubDate>Tue, 07 Jul 2020 07:01:31 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-02-kunit-kmemleak-integration-uriel-guajardo&#34;&gt;[PATCH 0/2] KUnit-Kmemleak Integration (Uriel Guajardo)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200706210327.3313498-1-urielguajardojr@gmail.com&#34;&gt;https://lkml.kernel.org/r/20200706210327.3313498-1-urielguajardojr@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes kunit to use kmemleak to catch memory leak in the test
code.&lt;/p&gt;
&lt;h2 id=&#34;patch-codingstyle-inclusive-terminology-dan-williams&#34;&gt;[PATCH] CodingStyle: Inclusive Terminology (Dan Williams)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/159389297140.2210796.13590142254668787525.stgit@dwillia2-desk3.amr.corp.intel.com&#34;&gt;https://lkml.kernel.org/r/159389297140.2210796.13590142254668787525.stgit@dwillia2-desk3.amr.corp.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds a new document for inclusive term usage in the kernel tree.  It
suggests to stop using the terms, &amp;lsquo;slave&amp;rsquo; and &amp;lsquo;blacklist&amp;rsquo; anymore.  This patch
was revised two times and the third revision is merged in Torvalds&amp;rsquo; tree by the
Friday.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-mmvmstat-add-events-for-thp-migration-without-split-anshuman-khandual&#34;&gt;[PATCH V3] mm/vmstat: Add events for THP migration without split (Anshuman Khandual)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1594080415-27924-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1594080415-27924-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds three new vmstat events for THP migration without split
validation.  The events are &lt;code&gt;THP_MIGRATION_(SUCCESS|FAILURE|SPLIT)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-kernel-in-tree-rust-support-nick-desaulniers&#34;&gt;Linux kernel in-tree Rust support (Nick Desaulniers)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/CAKwvOdmuYc8rW_H4aQG4DsJzho=F+djd68fp7mzmBp3-wY--Uw@mail.gmail.com/&#34;&gt;https://lore.kernel.org/lkml/CAKwvOdmuYc8rW_H4aQG4DsJzho=F+djd68fp7mzmBp3-wY--Uw@mail.gmail.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nick is trying to put LLVM micro conference in the Linux Plumbers Conference.
In the micro-conference, he wants to have a session for the kernel in-tree Rust
support.  For this, this mail asks people whether have interest in the topic.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc5-linus-torvalds&#34;&gt;Linux 5.8-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgX5+Q_trdMPaaQZmko0Og_eqAYoyMa_8S3ie+1Us6rkw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgX5+Q_trdMPaaQZmko0Og_eqAYoyMa_8S3ie+1Us6rkw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rc4 was smaller than usual, and Torvalds says rc5 is bigger than usual, though
not enormous.  Nonetheless, its mainly due to the networking fixes that didn&amp;rsquo;t
come in rc4, and Torvalds doesn&amp;rsquo;t hear something really scary sound from real
people.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc6..v5.8-rc5.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-07-13 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc5 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc5-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc4</title>
      <link>/post/lkml_news_v5.8-rc4/</link>
      <pubDate>Tue, 30 Jun 2020 06:57:48 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc4/</guid>
      <description>&lt;h2 id=&#34;ksummit-discuss-tech-topic-inline-encryption-support-and-new-related-features-satya-tangirala&#34;&gt;[Ksummit-discuss] [TECH TOPIC] Inline Encryption Support and new related features (Satya Tangirala)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200629092551.GA673684@google.com&#34;&gt;https://lkml.kernel.org/r/20200629092551.GA673684@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maybe the last kernel summit proposal.  The inline encryption work was
presented in the last year LPC and a part of it has merged in the v5.8, being
tested in Android.  The talk will discuss the todo list of the work.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-define-pte_add_end-for-consistency-wei-yang&#34;&gt;[PATCH] mm: define pte_add_end for consistency (Wei Yang)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200630031852.45383-1-richard.weiyang@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/20200630031852.45383-1-richard.weiyang@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds a helper to get the address of the next boundary for pte level.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc4-linus-torvalds&#34;&gt;Linux 5.8-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whaNDpCRkeBGbdTOh84_mqfG7N1qPk8HZXJzbh8TOB_hA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whaNDpCRkeBGbdTOh84_mqfG7N1qPk8HZXJzbh8TOB_hA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fourth release candidate for the 5.8 is released.  Unlike the past week,
this week release was smaller than usual.  Maybe due to a fluctuation, or due
to a July 4th in US, Torvalds says.  Anyway, seems not a bad sign.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc5..v5.8-rc4.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-06-29 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc4 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc4-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc3</title>
      <link>/post/lkml_news_v5.8-rc3/</link>
      <pubDate>Wed, 24 Jun 2020 06:48:53 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc3/</guid>
      <description>&lt;h2 id=&#34;tech-topic-restricted-kernel-address-spaces-mike-rapoport&#34;&gt;[TECH TOPIC] restricted kernel address spaces (Mike Rapoport)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200621090539.GM6493@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20200621090539.GM6493@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A new kernel summit talk proposal is made.  This topic is recycled from the
LSF/MM/BPF, which scheduled but canceled due to the COVID19.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-filemap-clear-idle-flag-for-writes-yang-shi&#34;&gt;[PATCH] mm: filemap: clear idle flag for writes (Yang Shi)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1593020612-13051-1-git-send-email-yang.shi@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1593020612-13051-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds missed idle flag clearing in filemap writing.&lt;/p&gt;
&lt;h2 id=&#34;-mm-madvise-introduce-process_madvise-syscall-an-external-memory-hinting-api-fix-2patch-added-to--mm-tree&#34;&gt;&lt;code&gt;+ mm-madvise-introduce-process_madvise-syscall-an-external-memory-hinting-api-fix-2.patch added to -mm tree&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://marc.info/?l=linux-mm-commits&amp;amp;m=159303823314812&amp;amp;w=2&#34;&gt;https://marc.info/?l=linux-mm-commits&amp;amp;m=159303823314812&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;process_madvise()&lt;/code&gt; patch has merged in the &lt;code&gt;-mm&lt;/code&gt; tree again.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc3-linus-torvalds&#34;&gt;Linux 5.8-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whNe2Gx=kgK6ucK_Bo0xCXh6g7HLQTHacQqsVZ8G1NPpw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whNe2Gx=kgK6ucK_Bo0xCXh6g7HLQTHacQqsVZ8G1NPpw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike the rc2 release, this release is big, as expected by the huge rc1
release.  Among the 94 releases in last 2 years, this release has 20th biggest
diff.  Among the 11 -rc3 releases in the last 2 years, it&amp;rsquo;s 4th biggest diff.
That said, Torvalds says this is just the expected result and there
is no scary point.  This will not make the rc period by itself.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc4..v5.8-rc3.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-06-29 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc3 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc3-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc2</title>
      <link>/post/lkml_news_v5.8-rc2/</link>
      <pubDate>Tue, 16 Jun 2020 07:14:05 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v7-mm-proactive-compaction-nitin-gupta&#34;&gt;[PATCH v7] mm: Proactive compaction (Nitin Gupta)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200615143614.15267-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200615143614.15267-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7th version of the proactive compaction patchset.  This version fixes compile
error while THP is disabled.&lt;/p&gt;
&lt;h2 id=&#34;maintainers--kernel-summit-2020-submissions-theodore-y-tso&#34;&gt;Maintainers / Kernel Summit 2020 submissions (Theodore Y. Ts&amp;rsquo;o)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200615155839.GF2863913@mit.edu&#34;&gt;https://lkml.kernel.org/r/20200615155839.GF2863913@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There were only 5 submissions for the kernel summit talk, and no submission for
the maintainers summit.  Ted asks people to submit until this week.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-06-workingset-protectiondetection-on-the-anonymous-lru-list&#34;&gt;[PATCH v6 0/6] workingset protection/detection on the anonymous LRU list&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1592371583-30672-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1592371583-30672-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sixth version of the workingset protection for the LRU&amp;rsquo;s corner case that
comes in when a scanning of large object is made.  This version reflects new
LRU balance model and updated the performance evaluation setup.&lt;/p&gt;
&lt;h2 id=&#34;-scripts-deprecated_terms-recommend-denylist-allowlist-instead-of-blacklist-whitelistpatch-added-to--mm-tree&#34;&gt;&lt;code&gt;+ scripts-deprecated_terms-recommend-denylist-allowlist-instead-of-blacklist-whitelist.patch added to -mm tree&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://marc.info/?l=linux-mm-commits&amp;amp;m=159242954415572&amp;amp;w=2&#34;&gt;https://marc.info/?l=linux-mm-commits&amp;amp;m=159242954415572&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The patches for stop spreading of the terms, &amp;lsquo;blacklist&amp;rsquo; and &amp;lsquo;whitelist&amp;rsquo;, are
finally merged in the &amp;lsquo;-mm&amp;rsquo; tree.&lt;/p&gt;
&lt;p&gt;The second version of the patchset[1] was merged in there before, but the
maintainer of the &amp;lsquo;checkpatch.pl&amp;rsquo; complained about use of &amp;lsquo;spelling.txt&amp;rsquo;.
Therefore the author asked &amp;lsquo;-mm&amp;rsquo; tree maintainer, Andrew, to drop the patch and
made v3 and v4[2] of the patchset to convince the &amp;lsquo;checkpatch.pl&amp;rsquo; maintainer.
After some debates, the patchset has introduced by a recent LWN article[3] and
merged again into the &amp;lsquo;-mm&amp;rsquo; tree.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/&#34;&gt;https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/&lt;/a&gt;
[2] &lt;a href=&#34;https://lore.kernel.org/lkml/20200611062550.20113-1-sjpark@amazon.com/&#34;&gt;https://lore.kernel.org/lkml/20200611062550.20113-1-sjpark@amazon.com/&lt;/a&gt;
[3] &lt;a href=&#34;https://lwn.net/Articles/823224/&#34;&gt;https://lwn.net/Articles/823224/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-use-unsigned-types-for-fragmentation-score&#34;&gt;[PATCH] mm: Use unsigned types for fragmentation score&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200618010319.13159-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200618010319.13159-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This commit is for the proactive compaction.  It calculates &lt;code&gt;fragrmen score&lt;/code&gt;
for the compaction.  This commit simply converts the type for it from &lt;code&gt;int&lt;/code&gt;
to &lt;code&gt;unsigned int&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v3-01-add-rwsem-contended-hook-api-and-mmap_lock-histograms&#34;&gt;[RFC PATCH v3 0/1] Add rwsem &amp;ldquo;contended hook&amp;rdquo; API and mmap_lock histograms&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200618222225.102337-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20200618222225.102337-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patch adds tracepoints for &lt;code&gt;mmap_lock&lt;/code&gt;, to know how badly it is
contended.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc2&#34;&gt;Linux 5.8-rc2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CAHk-=whXm00G4DJ-L2XSPS+TFU_-mcL0qgcMVq62mCzuUZsCwQ@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Though the 5.8 merge window was biggest merge window of the Linux kernel
development history, rc2 release is just as usual.  Torvalds says rc2 isn&amp;rsquo;t
particularly big or scary, and falls right in the normal range.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc3..v5.8-rc2.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the y-axis is in logarithm.  I draw it using
&lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjp38/lazybox&#34;&gt;https://github.com/sjp38/lazybox&lt;/a&gt; using
below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ relstat.py --since 2018-06-22 | ~/lazybox/gnuplot/plot.py \
    --data_fmt table --type labeled-lines --xtics_rotate -90 \
    --font &amp;quot;Times New Roman, 5pt&amp;quot; --ylog --pointsize 0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, below is the diffstat of the -rc2 releases in the last two years.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v5.8-rc2-only.png&#34; alt=&#34;rc2 release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.8-rc1</title>
      <link>/post/lkml_news_v5.8-rc1/</link>
      <pubDate>Wed, 03 Jun 2020 06:45:01 +0200</pubDate>
      <guid>/post/lkml_news_v5.8-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-v6-mm-proactive-compaction-nitin-gupta&#34;&gt;[PATCH v6] mm: Proactive compaction (Nitin Gupta)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200601194822.30252-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200601194822.30252-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the sixth version of the proactive compaction patchset.  It makes
compaction to be able to triggered earlier than final memory pressure using
knobs.  The goal is better THP allocation success.&lt;/p&gt;
&lt;h2 id=&#34;patch-vmalloc-convert-to-xarray-matthew-wilcox&#34;&gt;[PATCH] vmalloc: Convert to XArray (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200603171448.5894-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200603171448.5894-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset converts the radix tree for vmap blocks into XArray.&lt;/p&gt;
&lt;h2 id=&#34;incoming-andrew-morton&#34;&gt;incoming (Andrew Morton)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200608212922.5b7fa74ca3f4e2444441b7f9@linux-foundation.org&#34;&gt;https://lkml.kernel.org/r/20200608212922.5b7fa74ca3f4e2444441b7f9@linux-foundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MM-side pull request.  It contains the &amp;ldquo;mmap locking API: initial
implementation as rwsem wrappers&amp;rdquo; patchset.  I believe this would help killing
the &lt;code&gt;mmap_sem&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ksummit-discuss-tech-topic-documentation-jonathan-corbet&#34;&gt;[Ksummit-discuss] [TECH TOPIC] Documentation (Jonathan Corbet)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200609145353.628a342d@lwn.net&#34;&gt;https://lkml.kernel.org/r/20200609145353.628a342d@lwn.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 4th kernel summit talk proposal.  Jonathan says the conversion of the
kernel doc to RST is almost done, and he wants to discuss about the next step
in the kernel summit.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v6-0051-large-pages-in-the-page-cache-matthew-wilcox&#34;&gt;[RFC v6 00/51] Large pages in the page cache (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200610201345.13273-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200610201345.13273-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yet another version of the patchset.  More bugs are fixed and therefore more of
xfstests passes, though not complete.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-scriptsspelling-recommend-blocklistallowlist-instead-of-blacklistwhitelist-seongjae-park&#34;&gt;[PATCH v2] scripts/spelling: Recommend blocklist/allowlist instead of blacklist/whitelist (SeongJae Park)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/&#34;&gt;https://lore.kernel.org/lkml/20200609122549.26304-1-sjpark@amazon.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds blacklist/whitelist in the spelling typo file of the kernel
so that every patches using the term could get warnings.  The patch merged in
the &lt;code&gt;-mm&lt;/code&gt; tree immediately, but dropped again[1] as the maintainer of the
``checkpatch.pl` required a revisement.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://marc.info/?l=linux-mm-commits&amp;amp;m=159182303424009&amp;amp;w=2&#34;&gt;https://marc.info/?l=linux-mm-commits&amp;amp;m=159182303424009&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-2425-mm-use-only-pidfd-for-process_madvise-syscall-linus-torvalds&#34;&gt;[patch 24/25] mm: use only pidfd for process_madvise syscall (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgx=-vbxpDqsunkMTqQDD+oqcU9JQeW+MApGQeZD6hr6Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgx=-vbxpDqsunkMTqQDD+oqcU9JQeW+MApGQeZD6hr6Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pull request for &lt;code&gt;process_madvise()&lt;/code&gt; patchset finally made, but Torvalds
denied it, due to the inconcrete decision of the signature.  The author of the
patchset, Minchan, promised he will revise it after this merge window finishes.&lt;/p&gt;
&lt;h2 id=&#34;linux-58-rc1-linus-torvalds&#34;&gt;Linux 5.8-rc1 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whfuea587g8rh2DeLFFGYxiVuh-bzq22osJwz3q4SOfmA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whfuea587g8rh2DeLFFGYxiVuh-bzq22osJwz3q4SOfmA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The merge window is finished and 5.8-rc1 is released.  Unexpectedly, this
release is the biggest one in the kernel history.  There is no other tricks
such as pending of the release or some strange script based change.  About 20%
of all the files in the kernel tree has modified.&lt;/p&gt;
&lt;p&gt;Below is the diffstat of the releases in the last two years.  Note that the
y-axis is in logarithm.  I draw it using &lt;a href=&#34;https://github.com/sjp38/relstat&#34;&gt;https://github.com/sjp38/relstat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/kernel_release_stat/v4.18-rc2..v5.8-rc1.png&#34; alt=&#34;Kernel release stat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7</title>
      <link>/post/lkml_news_v5.7/</link>
      <pubDate>Tue, 26 May 2020 07:04:14 +0200</pubDate>
      <guid>/post/lkml_news_v5.7/</guid>
      <description>&lt;h2 id=&#34;patch-v2-0016-introduce-kvfree_rcu1-or-2-arguments-uladzislau-rezki&#34;&gt;[PATCH v2 00/16] Introduce kvfree_rcu(1 or 2 arguments) (Uladzislau Rezki)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200525214800.93072-1-urezki@gmail.com&#34;&gt;https://lkml.kernel.org/r/20200525214800.93072-1-urezki@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the second version of the rcu-protected &lt;code&gt;kvfree()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-07-add-histogram-measuring-mmap_lock-contention-latency-axel-rasmussen&#34;&gt;[PATCH v2 0/7] Add histogram measuring mmap_lock contention latency (Axel Rasmussen)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200528235238.74233-1-axelrasmussen@google.com&#34;&gt;https://lkml.kernel.org/r/20200528235238.74233-1-axelrasmussen@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For further analysis of the &lt;code&gt;mmap_sem&lt;/code&gt; overhead from both kernel space and
user space, this commit adds the latency historgram for &lt;code&gt;mmap_sem&lt;/code&gt;
acquisition time.  Actually, &lt;code&gt;mmap_sem&lt;/code&gt; is now renamed into &lt;code&gt;mmap_lock&lt;/code&gt;,
thanks to Michel&amp;rsquo;s patch.&lt;/p&gt;
&lt;h2 id=&#34;patch--v4-swap-reduce-lock-contention-on-swap-cache-from-swap-slots-allocation-huang-ying&#34;&gt;[PATCH -V4] swap: Reduce lock contention on swap cache from swap slots allocation (Huang, Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200529010840.928819-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20200529010840.928819-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fourth version of the swap slot allocation locking contention reduction patch.
Previous version was also introduced in my previous posting.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-0039-large-pages-in-the-page-cache-matthew-wilcox&#34;&gt;[PATCH v5 00/39] Large pages in the page cache (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200529025824.32296-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200529025824.32296-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fifth version of the page cache large pages work.  The previous version was
also introduced in my previous posting.  It passes a little more test cases in
xfstests than v4 did, but seems it still not entirely passes.&lt;/p&gt;
&lt;h2 id=&#34;linux-57&#34;&gt;Linux 5.7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiZGrCkiBB1V7bxp8NZH6yWi9mPM4ptMW16OzOiNprBFA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiZGrCkiBB1V7bxp8NZH6yWi9mPM4ptMW16OzOiNprBFA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nothing worrisome happend, and therefore 5.7 has released, as expected.  In
other words, the merge window for 5.8 is open.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc7</title>
      <link>/post/lkml_news_v5.7-rc7/</link>
      <pubDate>Wed, 20 May 2020 05:52:27 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v5-mm-proactive-compaction-nitin-gupta&#34;&gt;[PATCH v5] mm: Proactive compaction (Nitin Gupta)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200518181446.25759-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200518181446.25759-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 5th version of the proactive compaction.  This patchset make the compaction
more proactive to make THP allocation easily success.&lt;/p&gt;
&lt;h2 id=&#34;patch--v2-swap-reduce-lock-contention-on-swap-cache-from-swap-slots-allocation-huang-ying&#34;&gt;[PATCH -V2] swap: Reduce lock contention on swap cache from swap slots allocation (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200520031502.175659-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20200520031502.175659-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After swap device is fragmented, there&amp;rsquo;s no free swap cluster.  Therefore, each
swap logic of each CPU will linearly scan each swap cluster to find a free
slot.  As multiple CPUs can search the slot in same cluster, the swap cache
lock contention could increase.&lt;/p&gt;
&lt;p&gt;This patchset reduces the lock contention by using percpu pointer for next
scanning cluster.  The pointer is set to random cluster.  This change is
applied to SSD swap device only.&lt;/p&gt;
&lt;h2 id=&#34;ksummit-discuss-tech-topic-seccomp-feature-development-kees-cook&#34;&gt;[Ksummit-discuss] [TECH TOPIC] seccomp feature development (Kees Cook)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/202005200917.71E6A5B20@keescook&#34;&gt;https://lkml.kernel.org/r/202005200917.71E6A5B20@keescook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first kernel summit technical topic.  Kees Cook want to talk about seccomp.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc7&#34;&gt;Linux 5.7-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whan1CiRtcgBt-5SkW-ga_GeLH5+AO26RmK7vOA5yw9ng@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whan1CiRtcgBt-5SkW-ga_GeLH5+AO26RmK7vOA5yw9ng@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rc6 was unexpectedly big, but rc7 is quite normal.  Torvalds says the
release schedule will not dealyed, unless something happens.&lt;/p&gt;
&lt;p&gt;Also, Torvalds says he upgraded his main machine for the first time in about 15
years, from Intel machine to the AMD Threadripper 3970x.  His build is not 3
times faster!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc6</title>
      <link>/post/lkml_news_v5.7-rc6/</link>
      <pubDate>Sat, 16 May 2020 09:55:20 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v4-0036-large-pages-in-the-page-cache-matthew-wilcox&#34;&gt;[PATCH v4 00/36] Large pages in the page cache (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200515131656.12890-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200515131656.12890-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the fourth version of the patchset for the huge pages in the page
cache.  Still it fails xfstests.&lt;/p&gt;
&lt;h2 id=&#34;maintainers--kernel-summit-2020-planning-kick-off-theodore-y-tso&#34;&gt;Maintainers / Kernel Summit 2020 planning kick-off (Theodore Y. Ts&amp;rsquo;o)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200515163956.GA2158595@mit.edu&#34;&gt;https://lkml.kernel.org/r/20200515163956.GA2158595@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ted annouced that the Maintainers / Kernel Summit will be held in virtual this
year, of course due to the COVID19.  With this announcement, the CFP for the
kernel summit is also opened.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc6-linus-torvalds&#34;&gt;Linux 5.7-rc6 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjP9eOr2GEpgtcpN4Hqve6YRiyEF5Pq6ZsKFKHZ_v5Bwg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjP9eOr2GEpgtcpN4Hqve6YRiyEF5Pq6ZsKFKHZ_v5Bwg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s rc6, which is supposed to be calming down.  But, rc6 was bigger than
usual.  As rc5 was also bigger than usual, this probably not a good sign for
5.7 release.  But, no detailed change seems obviously wrong.&lt;/p&gt;
&lt;p&gt;Torvalds just hope hings calm down.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc5</title>
      <link>/post/lkml_news_v5.7-rc5/</link>
      <pubDate>Thu, 07 May 2020 06:56:23 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc5/</guid>
      <description>&lt;h2 id=&#34;rfc-0043-pkram-preserved-over-kexec-ram-anthony-yznaga&#34;&gt;[RFC 00/43] PKRAM: Preserved-over-Kexec RAM (Anthony Yznaga)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1588812129-8596-1-git-send-email-anthony.yznaga@oracle.com&#34;&gt;https://lkml.kernel.org/r/1588812129-8596-1-git-send-email-anthony.yznaga@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset introduces special memory called PKRAM.  It can be used to
preserve VM guest memory across kexec boot for fast restart (VMM Fast Restart).
Compared to DRAM based PMEM simulation, PKRAM is more flexible as the memory
size is not need to be previously fixed.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-replace-zero-length-array-with-flexible-array-gustavo-a-r-silva&#34;&gt;[PATCH] mm: Replace zero-length array with flexible-array (Gustavo A. R. Silva)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200507185942.GA15193@embeddedor&#34;&gt;https://lkml.kernel.org/r/20200507185942.GA15193@embeddedor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The zero-length array of C90 are widely used in the kernel code base, but the
flexible array member of C99 would be better choice.  This commit replaces the
code to use the flexible array member instead.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc5-linus-torvalds&#34;&gt;Linux 5.7-rc5 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi5ziqqgf9dMfwoNLy8A1SX36n1RuDYTyRX6O_Vmcr42g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi5ziqqgf9dMfwoNLy8A1SX36n1RuDYTyRX6O_Vmcr42g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last 4 rc releases were slightly smaller than usual, but this week&amp;rsquo;s rc release
is bigger, though it is still in line of average.  This is maybe simply due to
the delayed pull requests from network and some drivers and thus nothing is
worrisome, Torvalds says.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc4</title>
      <link>/post/lkml_news_v5.7-rc4/</link>
      <pubDate>Thu, 30 Apr 2020 06:57:24 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-07-record-the-mm_struct-in-the-page-table-pages-matthew-wilcox&#34;&gt;[PATCH 0/7] Record the mm_struct in the page table pages (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200428194449.22615-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200428194449.22615-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Literally, this patchset adds the &lt;code&gt;mm_struct&lt;/code&gt; pointer to &lt;code&gt;struct page&lt;/code&gt; if it is
used for page tables.  This will be useful for several cases usch as
uncorrectable errors handling and task-page table relation checking, etc.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-mm-proactive-compaction-nitin-gupta&#34;&gt;[PATCH v4] mm: Proactive compaction (Nitin Gupta)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200428221055.598-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200428221055.598-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes the compaction to be more proactively done for better THP
allocation success and makes user to be able to control the proactiveness using
a sysfs file, &lt;code&gt;/sys/kernel/mm/compaction/proactiveness&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main changes from the v3 of this patchset is add of documentations.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0025-large-pages-in-the-page-cache-matthew-wilcox&#34;&gt;[PATCH v3 00/25] Large pages in the page cache (Matthew Wilcox)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200429133657.22632-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20200429133657.22632-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset is for use of huge pages in the page cache.  This will reduce
many of overheads.  However, this patchset doesn&amp;rsquo;t pass the xfs test.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc4-linus-torvalds&#34;&gt;Linux 5.7-rc4 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjRQPn6zQnR2R2M6rupXq8OZTk7z9xJsUbgEADpZFX+NA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjRQPn6zQnR2R2M6rupXq8OZTk7z9xJsUbgEADpZFX+NA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The release candidate release of this week is a bit smaller than usual.  It&amp;rsquo;s
smallest rc4 since the tiny one we had over the Christmas week.  Torvalds think
this is due to a timing issue and because there was no pull request from
network.  That said, he also says things are calm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc3</title>
      <link>/post/lkml_news_v5.7-rc3/</link>
      <pubDate>Wed, 22 Apr 2020 06:44:31 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc3/</guid>
      <description>&lt;h2 id=&#34;lsfmmbpf-2020-cancellation-announcement-josef-bacik&#34;&gt;LSFMMBPF 2020 Cancellation announcement (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/0b6d3d6f-99de-3603-4b42-c3db5113633d@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/0b6d3d6f-99de-3603-4b42-c3db5113633d@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Due to the COVID-19, LSFMM, which was supposed to be help April, has delayed
before, and now it has just canceled.  What a shame, but this might be the
right thing to do.  This mail also announce the schedule of next year LSFMM.
It will be held in Palm Springs, on May 12-14, 2021 at the Riviera Palm
Springs.&lt;/p&gt;
&lt;h2 id=&#34;patch-22-mm-support-vector-address-ranges-for-process_madvise-minchan-kim&#34;&gt;[PATCH 2/2] mm: support vector address ranges for process_madvise (Minchan Kim)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200423145215.72666-2-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200423145215.72666-2-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a modification of &lt;code&gt;process_madvise()&lt;/code&gt; interface for support of multiple
address ranges.  In Android, the applications usually has thousands of vmas due
to the Zygote and thus need a number of &lt;code&gt;process_madvise()&lt;/code&gt; calls to adjust
their memory.  The author has shown about 15% performance improvement by
comparing 2000-vma syscall and 1-vector syscall.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc3-linus-torvalds&#34;&gt;Linux 5.7-rc3 (Linus Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiDq0imdGHZwCnvWM1bc8r++==fB4BDrfenAB9_CZ45+w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiDq0imdGHZwCnvWM1bc8r++==fB4BDrfenAB9_CZ45+w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third release candidate is released.  Nothing weird, just normal, though
this release is bigger than rc2 and bigger than other rc3 of 5.x releases.&lt;/p&gt;
&lt;p&gt;As always, drivers and tooling are noticeable.  In case of tooling, it must be
due to the pm-graph update.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v5.7-rc2</title>
      <link>/post/lkml_news_v5.7-rc2/</link>
      <pubDate>Fri, 17 Apr 2020 06:46:40 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc2/</guid>
      <description>&lt;h2 id=&#34;rfc-autonuma-support-to-scan-page-table-asynchronously-huang-ying&#34;&gt;[RFC] autonuma: Support to scan page table asynchronously (Huang Ying)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200414081951.297676-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20200414081951.297676-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AutoNUMA is currently scanning page tables of the processes in the process
context and therefore this can increase the latency of the process.  This RFC
thus makes the page table scanning asynchronous if there are idle CPUs.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0010-add-a-new-mmap-locking-api-wrapping-mmap_sem-calls&#34;&gt;[PATCH v4 00/10] Add a new mmap locking API wrapping mmap_sem calls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200415004353.130248-1-walken@google.com&#34;&gt;https://lkml.kernel.org/r/20200415004353.130248-1-walken@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is just a repost of the patch series rebased on v5.7-rc1.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc2-linux-torvalds&#34;&gt;Linux 5.7-rc2 (Linux Torvalds)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiQsJu-ZFjt7+c9FVD5R40khtZiihrT+7O3UaVvHYz=HQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiQsJu-ZFjt7+c9FVD5R40khtZiihrT+7O3UaVvHYz=HQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After a week pass since the rc1 release, rc2 is released.  Torvalds says the
changes are very normal and clam as always, maybe because rc2 is usually the
time for taking breathe after the busy merge window.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.7-rc1</title>
      <link>/post/lkml_news_v5.7-rc1/</link>
      <pubDate>Sun, 05 Apr 2020 08:41:57 +0200</pubDate>
      <guid>/post/lkml_news_v5.7-rc1/</guid>
      <description>&lt;h2 id=&#34;git-pull-xarray-for-57-rc1&#34;&gt;[GIT PULL] XArray for 5.7-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200331141749.GB21484@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20200331141749.GB21484@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew&amp;rsquo;s XArray pull request for 5.7 merge window.  Quickly merged by Torvald.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-0010-workingset-protectiondetection-on-the-anonymous-lru-list&#34;&gt;[PATCH v5 00/10] workingset protection/detection on the anonymous LRU list&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1585892447-32059-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1585892447-32059-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fifth version of the workingset protection.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-02-mm-using-cma-for-1-gb-hugepages-allocation&#34;&gt;[PATCH v4 0/2] mm: using CMA for 1 GB hugepages allocation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200407010431.1286488-1-guro@fb.com&#34;&gt;https://lkml.kernel.org/r/20200407010431.1286488-1-guro@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset make hugetlb to use CMA for 1GB hugepage allocations.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-mm-compaction-avoid-migrating-non-cma-pages-to-a-cma-area&#34;&gt;[PATCH RFC] mm: compaction: avoid migrating non-cma pages to a cma area&lt;/h2&gt;
&lt;p&gt;The compaction algorithm doesn&amp;rsquo;t distinguish CMA from other movable pageblocks.
In other words, it can move non-cma pages into a cma zone.  This patch avoid
the problem by preserving non-cma pages from being moved into a cma area.&lt;/p&gt;
&lt;h2 id=&#34;linux-57-rc1&#34;&gt;Linux 5.7-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wh0F0fnOQA3dr_-QCdjc_FTTk3ccPFLU33zr3zLD9FQ7Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wh0F0fnOQA3dr_-QCdjc_FTTk3ccPFLU33zr3zLD9FQ7Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The merge window for Linux 5.7 has closed about one or two hours earlier than
usual, due to the Easter Sunday.&lt;/p&gt;
&lt;p&gt;Torvalds says the merge window was pretty normal.  Not too big, not too small.
The distribution of patches also seems quite normal.&lt;/p&gt;
&lt;p&gt;The kernel technical advisotry board (TAB) asked Torvalds to announce that they
would help people struggling their kernel work from COVID-19.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6</title>
      <link>/post/lkml_news_v5.6/</link>
      <pubDate>Sat, 28 Mar 2020 09:22:44 +0100</pubDate>
      <guid>/post/lkml_news_v5.6/</guid>
      <description>&lt;h2 id=&#34;patch-v5-0038-add-kernelmemorysanitizer-infrastructure-glider&#34;&gt;[PATCH v5 00/38] Add KernelMemorySanitizer infrastructure (glider)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200325161249.55095-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20200325161249.55095-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the fifth official patchset for kernel uninitialized memory related
error detector, KMSAN.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-mm-cma-numa-node-interface-aslan-barikov&#34;&gt;[PATCH 1/2] mm: cma: NUMA node interface (Aslan Barikov)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200326212718.3798742-1-aslan@fb.com&#34;&gt;https://lkml.kernel.org/r/20200326212718.3798742-1-aslan@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CMA provides no way to specify what NUMA node the memory area to be allocated.
This commit adds the interface to specify the NUMA node to use for the
allocation.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0010-add-a-new-mmap-locking-api-wrapping-mmap_sem-calls-michel-lespinasse&#34;&gt;[PATCH v3 00/10] Add a new mmap locking API wrapping mmap_sem calls (Michel Lespinasse)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200327225102.25061-1-walken@google.com&#34;&gt;https://lkml.kernel.org/r/20200327225102.25061-1-walken@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds new mmap locking API rather than rwsem, but just wrapping
it.  This is for further step towards rwsem substitution with better one such
as range lock.  The new interface looks like &lt;code&gt;mmap_init_lock(mm)&lt;/code&gt;,
&lt;code&gt;mmap_write_lock(mm)&lt;/code&gt; and &lt;code&gt;mmap_read_lock(mm)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-56&#34;&gt;Linux 5.6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wi9ZT7Stg-uSpX0UWQzam6OP9Jzz6Xu1CkYu1cicpD5OA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wi9ZT7Stg-uSpX0UWQzam6OP9Jzz6Xu1CkYu1cicpD5OA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As supposed, v5.6 of Linux has released after rc7.  However, the number of
changes during last week was a little bit larger than what Torvalds usually
likes for official releases.  Most of those was from David Miller&amp;rsquo;s network
change and David was comfy, and diff was not so scary.  So, Torvalds has
reeleased 5.6.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc7</title>
      <link>/post/lkml_news_v5.6-rc7/</link>
      <pubDate>Fri, 20 Mar 2020 07:04:51 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-56-rc7&#34;&gt;Linux 5.6-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wipv1y2Z7=CDQ5ajb2OvSyq-0BL9yLRPm1YqW+sjcSDzQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wipv1y2Z7=CDQ5ajb2OvSyq-0BL9yLRPm1YqW+sjcSDzQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The world is struggling due to the COVID-19, but kernel development seems quite
normal.  Torvalds released the 7th rc for the Linux 5.6.  There is nothing
strange or worrysome here.  We will get the v5.6 next week, unless something
bad happens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc6</title>
      <link>/post/lkml_news_v5.6-rc6/</link>
      <pubDate>Mon, 16 Mar 2020 07:24:24 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc6/</guid>
      <description>&lt;h2 id=&#34;lsfmmbpf-2020-postponement-announcement-josef-bacik&#34;&gt;LSF/MM/BPF 2020: Postponement announcement (Josef Bacik)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/e4f390c7-3b25-67c8-5d6d-d7e87ba1c072@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/e4f390c7-3b25-67c8-5d6d-d7e87ba1c072@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;COVID-19 outbreak has finally delayed the LSF/MM/BPF of this year.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc6&#34;&gt;Linux 5.6-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whcVTGVPtvdb9SdCcjLawG6tLvbNWfWB_Y6=QhovFy2rg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whcVTGVPtvdb9SdCcjLawG6tLvbNWfWB_Y6=QhovFy2rg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth rc release,  Torvalds says things looks quite normal.  I&amp;rsquo;m looking
forward for 5.6 official release.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc5</title>
      <link>/post/lkml_news_v5.6-rc5/</link>
      <pubDate>Tue, 03 Mar 2020 06:16:51 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v1-0011-virtio-mem-paravirtualized-memory&#34;&gt;[PATCH v1 00/11] virtio-mem: paravirtualized memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200302134941.315212-1-david@redhat.com&#34;&gt;https://lkml.kernel.org/r/20200302134941.315212-1-david@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At KVM Forum 2018, virtio-mem&amp;rsquo;s basic idea has presented and now this patchset
introduces it.  This provides a flexible, cross-architecture memory hot(un)plug
solution.&lt;/p&gt;
&lt;h2 id=&#34;patch-v7-07-introduce-memory-hinting-api-for-external-process&#34;&gt;[PATCH v7 0/7] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200302193630.68771-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200302193630.68771-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, this patchset has accepted by Andrew Morton.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mm-proactive-compaction&#34;&gt;[PATCH v2] mm: Proactive compaction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200302213343.2712-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20200302213343.2712-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset makes kernel to do compaction proactively instead of THP
allocation failures, to minimize the latency spike which comes from the
compaction.  It significantly reduces THP allocation latency under memory
fragmentation.  95th percentile of the latency has reduced from 33,799 to 429!&lt;/p&gt;
&lt;h2 id=&#34;rfc-v4-07-implement-data-access-monitoring-based-memory-operation-schemes&#34;&gt;[RFC v4 0/7] Implement Data Access Monitoring-based Memory Operation Schemes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200303121406.20954-1-sjpark@amazon.com&#34;&gt;https://lkml.kernel.org/r/20200303121406.20954-1-sjpark@amazon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My fourth RFC for DAMON-based Operation Schemes.  This time, I updated the
evaluation results of ETHP scheme with more reliable data.&lt;/p&gt;
&lt;p&gt;TL;DR: &amp;lsquo;ethp&amp;rsquo; removes 97.61% of &amp;lsquo;thp&amp;rsquo; memory space overhead while preserving
25.40% (up to 88.36%) of &amp;lsquo;thp&amp;rsquo; performance improvement in total.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-killing-lsfmmbpf&#34;&gt;[LSFMMBPF TOPIC] Killing LSFMMBPF&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/b506a373-c127-b92e-9824-16e8267fc910@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/b506a373-c127-b92e-9824-16e8267fc910@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another LSF/MM/BPF topic proposal.  Author suggests killing LSF/MM/BPF.  The
main points of problems the author feels are LSF/MM/BPF is invitation only but
there are too many people need to be involved so that cannot fully invite every
necessary people.  The author proposing LSF/MM to be somewhat like LPC instead.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-lsfmmbpf-2020-covid-19-status-update&#34;&gt;[LSFMMBPF TOPIC] LSFMMBPF 2020 COVID-19 status update&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200307185420.GG2236@42.do-not-panic.com&#34;&gt;https://lkml.kernel.org/r/20200307185420.GG2236@42.do-not-panic.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;COVID-19 is affecting so many conferences.  It seems LSF/MM/BPF also not an
exception.  The committees are trying to figure out what is the right decision
for it.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc5&#34;&gt;Linux 5.6-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjie=L9=jO-VKR5u7+5Ekis-VR5m=zUChR9djhAuAN55g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjie=L9=jO-VKR5u7+5Ekis-VR5m=zUChR9djhAuAN55g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Torvalds made this release from 28,000 feet, mainly due to flight cancellations
and travel trouble.  Maybe due to the COVID-19?&lt;/p&gt;
&lt;p&gt;The release itself shows no worrysome things, but slightly bigger than
Torvalds&amp;rsquo; preferred -rc5 size.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc4</title>
      <link>/post/lkml_news_v5.6-rc4/</link>
      <pubDate>Mon, 02 Mar 2020 06:45:18 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc4/</guid>
      <description>&lt;h2 id=&#34;lsfmm-attend-page-fault-and-mmap_sem-scalabity&#34;&gt;[LSF/MM ATTEND]: page fault and mmap_sem scalabity&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/e67a9e90-5a64-b3cc-5014-2fd1e5bf3895@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/e67a9e90-5a64-b3cc-5014-2fd1e5bf3895@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A short mail from Laurent saying he is interested in attending the discussions
about the page fault and &lt;code&gt;mmap_sem&lt;/code&gt; scalability issue.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc4&#34;&gt;Linux 5.6-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgD3=ryAapzdpcZumMK2RQWBvWVE70qp_ft_cjdRX9htQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgD3=ryAapzdpcZumMK2RQWBvWVE70qp_ft_cjdRX9htQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fourthe rc release.  5.6 official release is not so far.  Torvalds says this is
fairly reasonsable sized release.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc3</title>
      <link>/post/lkml_news_v5.6-rc3/</link>
      <pubDate>Mon, 24 Feb 2020 06:40:26 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-02-slabinfo-parse-all-numa-attributes&#34;&gt;[PATCH 0/2] slabinfo: parse all NUMA attributes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200217084828.9092-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200217084828.9092-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author of this patchset found some information regarding NUMA is missed in
slabinfo.  This patchset adds the info.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-07-introduce-memory-hinting-api-for-external-process&#34;&gt;[PATCH v6 0/7] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200219014433.88424-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200219014433.88424-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sixth version of the patchset for new system call, &amp;lsquo;madvise_process()&#39;.
Changes are not so big.  Support null task argument and requestor&amp;rsquo;s mm for
&amp;lsquo;io_madvise()&#39;.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-stop-kswapd-early-when-nothings-waiting-for-it-to-free-pages&#34;&gt;[PATCH] mm: Stop kswapd early when nothing&amp;rsquo;s waiting for it to free pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200219182522.1960-1-sultan@kerneltoast.com&#34;&gt;https://lkml.kernel.org/r/20200219182522.1960-1-sultan@kerneltoast.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once kswapd is awaken, it does many things.  To avoid that, this patch stops
kswapd prematurely if it doesn&amp;rsquo;t need to work to make and allocation succeed
anymore.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-09-workingset-protectiondetection-on-the-anonymous-lru-list&#34;&gt;[PATCH v2 0/9] workingset protection/detection on the anonymous LRU list&lt;/h2&gt;
&lt;p&gt;The second version of the patchset for workingset in LRU protection.  This
patchset avoids evicting workingset for scanning data.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc3&#34;&gt;Linux 5.6-rc3&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CAHk-=whGODQBDqPGcEFU8EVkNAzMK9+gK_sGaUNHSZnB=JL+_Q@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The third rc3 release was a little bit small.  However, there were smaller rc3
and bigger rc3, either.  Torvalds says this is fairly normal rc3, though there
are too much noise in the signal to be sure about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc2</title>
      <link>/post/lkml_news_v5.6-rc2/</link>
      <pubDate>Tue, 11 Feb 2020 07:37:21 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc2/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-03-damon-implement-the-data-access-pattern-awared-memory-management-rules&#34;&gt;[RFC PATCH 0/3] DAMON: Implement The Data Access Pattern Awared Memory Management Rules&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200210150921.32482-1-sjpark@amazon.com&#34;&gt;https://lkml.kernel.org/r/20200210150921.32482-1-sjpark@amazon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an RFC patch from me that implementing simple way to run data access
pattern awared memory system using DAMON.  Proactive reclamation or access
awared THP promotion/demotion will be easily available using this change.&lt;/p&gt;
&lt;h2 id=&#34;patch-09-workingset-protectiondetection-on-the-anonymous-lru-list&#34;&gt;[PATCH 0/9] workingset protection/detection on the anonymous LRU list&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1581401993-20041-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1581401993-20041-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset is for improving kernel&amp;rsquo;s reclamation scheme in a corner case
where pages which used only once evicting hot pages.  For example, if there are
hot working set and periodically a big region of memory is scanned, the hot
working set will be swapped out for each of the scan.  This patchset avoid the
problem by letting the scanning-like pages to be inserted into the inactive
list first.&lt;/p&gt;
&lt;p&gt;Of course, for this change, accurate working set detection is necessary.  This
patchset detects the working sets mostly based on the previous scheme, but
extends it to deal with LRU well.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-08-introduce-memory-hinting-api-for-external-process&#34;&gt;[PATCH v4 0/8] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200212233946.246210-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200212233946.246210-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the fourth version of the patchset for &lt;code&gt;madvise_common()&lt;/code&gt; system call.
Seems like the justification for the API itself has finished.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-autonuma-enhancements-to-optimize-tiered-memory&#34;&gt;[LSF/MM/BPF TOPIC] AutoNUMA enhancements to optimize Tiered Memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/87mu9mhn10.fsf@yhuang-dev.intel.com&#34;&gt;https://lkml.kernel.org/r/87mu9mhn10.fsf@yhuang-dev.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is another LSF/MM session proposal.  As current kernel reclamation scheme
is designed for universal DRAMs, it doesn&amp;rsquo;t work well with tiered memory.
Author has worked for AutoNUMA, which can find recently-accessed pages
regardless of memory pressure and even frequently-access pages.  The authors
want to discuss about this in the summit.&lt;/p&gt;
&lt;h2 id=&#34;lfsmmbpf-topic-user-space-oom-management-on-chrome-os&#34;&gt;[LFS/MM/BPF Topic] User space OOM management on Chrome OS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAPz6YkUci9=d-nkoN9e8pb1eO3Wgchh1GTNSNdWc3kYuvoQdBg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAPz6YkUci9=d-nkoN9e8pb1eO3Wgchh1GTNSNdWc3kYuvoQdBg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another proposal for LSF/MM.  The author wants to share his experience of
memory management in Chrom OS development of 8 year, including their use of
Zram and per-process reclaim.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-replacing-mmap_sem-with-finer-grained-locks&#34;&gt;[LSF/MM/BPF TOPIC] Replacing mmap_sem with finer grained locks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CANN689EippvdwsHuhU-Aq=kNdk8-cAaCzPC7v=zbe6X302NteA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CANN689EippvdwsHuhU-Aq=kNdk8-cAaCzPC7v=zbe6X302NteA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A lot of LSF/MM proposals this week, maybe because the due is this week.  This
is old topic, but not solved yet.  Authors want to keep the discussion about
mmap splitting for multi CPU this year LSF/MM.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-guest-memory-without-struct-page&#34;&gt;[LSF/MM TOPIC] Guest memory without struct page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1be38ae3-d51e-2661-d0ab-6ad8baefe804@oracle.com&#34;&gt;https://lkml.kernel.org/r/1be38ae3-d51e-2661-d0ab-6ad8baefe804@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct page&lt;/code&gt; consumes about 1.5% of total memory.  Because the structure could
be unnecessary for hypervisors, the author want to save the 1.5%.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc2&#34;&gt;Linux 5.6-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgqwiBLGvwTqU2kJEPNmafPpPe_K0XgBU-A58M+mkwpgQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgqwiBLGvwTqU2kJEPNmafPpPe_K0XgBU-A58M+mkwpgQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rc2&lt;/code&gt; was calm as usual.  More than half of the changes are kvm documentation,
due to its conversion to ReST format.  &amp;lsquo;perf&amp;rsquo; change was also remarkable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.6-rc1</title>
      <link>/post/lkml_news_v5.6-rc1/</link>
      <pubDate>Wed, 29 Jan 2020 07:11:00 +0100</pubDate>
      <guid>/post/lkml_news_v5.6-rc1/</guid>
      <description>&lt;h2 id=&#34;lsfmmbpf-topic-memory-tiering-discussion&#34;&gt;[LSF/MM/BPF TOPIC] Memory Tiering discussion&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHbLzkqOKtM684SGnCaa9ObHj082KenoPmRXvxMJ1UjcdvrhMQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHbLzkqOKtM684SGnCaa9ObHj082KenoPmRXvxMJ1UjcdvrhMQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author, Yang Shi has posted a patchset for tiered memory management last
year, but received no many comments.  Meanwhile, Dave posted another similar
patch.  He wants to discuss about this in LSF/MM this year.&lt;/p&gt;
&lt;h2 id=&#34;linux-56-rc1&#34;&gt;Linux 5.6-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjVopuAm5Vwa1kK5O1tTzQAGFtCHm8_Hzy3Us1OC=PgUw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjVopuAm5Vwa1kK5O1tTzQAGFtCHm8_Hzy3Us1OC=PgUw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the two weeks, the merge window for 5.6 has finished and therefore the
5.6-rc1 has released.&lt;/p&gt;
&lt;p&gt;This merge window was &lt;strong&gt;slightly&lt;/strong&gt; smaller than usual.  Torvalds think this is
the slow effect from the year end holiday season.  That said, there were still
huge changes (more than 10K commits) and the changes are normal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5</title>
      <link>/post/lkml_news_v5.5/</link>
      <pubDate>Sun, 26 Jan 2020 03:52:17 +0100</pubDate>
      <guid>/post/lkml_news_v5.5/</guid>
      <description>&lt;h2 id=&#34;patch-08-introduce-data-access-monitor-damon&#34;&gt;[PATCH 0/8] Introduce Data Access MONitor (DAMON)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200120162757.32375-1-sjpark@amazon.com&#34;&gt;https://lkml.kernel.org/r/20200120162757.32375-1-sjpark@amazon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the patchset for the DAMON.&lt;/p&gt;
&lt;h2 id=&#34;paging-out-when-free-memory-is-low-but-not-exhausted-and-available-memory-remains-high&#34;&gt;Paging out when free memory is low but not exhausted (and available memory remains high)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/e994b0a76099437b8edbae925e9ccac8@its-mail-p04.registry.otago.ac.nz&#34;&gt;https://lkml.kernel.org/r/e994b0a76099437b8edbae925e9ccac8@its-mail-p04.registry.otago.ac.nz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This mail introduces an issue on 5.3 and 5.4 kernel that page out is occurred
needlessly.  The author uses &lt;code&gt;stress&lt;/code&gt; and &lt;code&gt;dd&lt;/code&gt; to stress memory but still
leave some memory in the system.  However, the system does swap excessively.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-topic-do-not-pin-pages-for-various-direct-io-scheme&#34;&gt;[LSF/MM/BPF TOPIC] Do not pin pages for various direct-io scheme&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200122023100.75226-1-jglisse@redhat.com&#34;&gt;https://lkml.kernel.org/r/20200122023100.75226-1-jglisse@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another talk proposal for the LSF/MM this year.  Due to the pinning of the
pages for direct I/O, several mm activities including compaction and migration
cannot work well.  Author want to convert direct io code to obey mmu nitofier
to help this situation.&lt;/p&gt;
&lt;h2 id=&#34;linux-55&#34;&gt;Linux 5.5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wigRZ6TSJU09bMk3Df2DiOw83B7TrQUq+iXroQCK5EVAQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wigRZ6TSJU09bMk3Df2DiOw83B7TrQUq+iXroQCK5EVAQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unlike my expectation, Torvalds released 5.5 instead of eighth rc release.
There were some changes in network and some of core files, but David told
Torvalds the changes are not worth for another rc.&lt;/p&gt;
&lt;p&gt;So, the merge window has started.  That said, Torvalds says that he will have
some travel and some things to do during next two weeks, and thus he is hoping
those things to go well.  Also, he want everybody to understand though he makes
soem delay due to the reason.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc7</title>
      <link>/post/lkml_news_v5.5-rc7/</link>
      <pubDate>Sat, 18 Jan 2020 10:11:47 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc7/</guid>
      <description>&lt;h2 id=&#34;reminder-lsfmmbpf-2020-call-for-proposals&#34;&gt;REMINDER: LSF/MM/BPF: 2020: Call for Proposals&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200115215409.5pd4fnoawqzs7rvw@jbacik-mbp&#34;&gt;https://lkml.kernel.org/r/20200115215409.5pd4fnoawqzs7rvw@jbacik-mbp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is reminder of the LSF/MM/BPF of this year.  It underscores the submitters
to also send the mail to the appropriate mailing list as before.  Maybe a few
of people are missing sending mail but only wite up their proposal to the
google form.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-free-page-reporting&#34;&gt;[LSF/MM TOPIC] Free Page Reporting&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/4b8671d16573307da09afc56030c2a5f5a9c45bf.camel@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/4b8671d16573307da09afc56030c2a5f5a9c45bf.camel@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case of KVM case, as each VM guest receives virtual memory from the host,
only when host gets memory pressure the memory being used by guests will be
reclaimed.  And, the reclaimation could make the guests suffer as the host
cannot know what pages are free in the guest and thus could swap out hot data
of guests.  As an answer, free pages hinting mechanisms has discussed.  I think
the basic idea is somewhat similar to the proactive reclamation.  Author of
this mail is working for it and already posting the patchset.  He wants to
discuss about it in this year LSFMM.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-introduce-memory-hinting-api-for-external-process&#34;&gt;[PATCH v2 0/5] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200116235953.163318-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200116235953.163318-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second version of the &lt;code&gt;madvise_process()&lt;/code&gt; system call.  Modified its
interface to support both pid and pidfd.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc7&#34;&gt;Linux 5.5-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjvkH0xJF6yF72VZOF7cifFv3nH9qhGGZh8urLg5xWt=Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjvkH0xJF6yF72VZOF7cifFv3nH9qhGGZh8urLg5xWt=Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As worried, things picked up this week.  Half of all merges has arrived to
Torvalds during the last two days of the week.  That said, Torvalds says he
will release 5.5 next week if this was not real picking up of works.  If not
and it is real pick up due to the holiday season, he will instead release rc8.&lt;/p&gt;
&lt;p&gt;Other than that, things looks fairly normal.  Torvalds asks more tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc6</title>
      <link>/post/lkml_news_v5.5-rc6/</link>
      <pubDate>Sat, 11 Jan 2020 07:35:47 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc6/</guid>
      <description>&lt;h2 id=&#34;oom-killer-not-nearly-agressive-enough&#34;&gt;OOM killer not nearly agressive enough?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200107204412.GA29562@amd&#34;&gt;https://lkml.kernel.org/r/20200107204412.GA29562@amd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author if this mail, Pavel updated his userspace to x86-64 and encountered
chromium&amp;rsquo;s memory hogging.  He was required to kill the chromium himself,
because OOM killer didn&amp;rsquo;t kill it.  He asks whether this means OOM killer is
not aggressive enough.&lt;/p&gt;
&lt;h2 id=&#34;patch-04-introduce-memory-hinting-api-for-external-process&#34;&gt;[PATCH 0/4] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200110213433.94739-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20200110213433.94739-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minchan has previously posted the patchset introducing the &lt;code&gt;MADV_COLD&lt;/code&gt;,
&lt;code&gt;MADV_PAGEOUT&lt;/code&gt; and external &lt;code&gt;madvise()&lt;/code&gt; able code change.  However, he has
split the patchset into two part.  And, the first part, which adds &lt;code&gt;MADV_COLD&lt;/code&gt;
and &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; has been merged to the mainline.  This patchset is the
second part of the patchset.  Now he aims to let processes to be able to do
&lt;code&gt;madvise()&lt;/code&gt; to other processes.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc6&#34;&gt;Linux 5.5-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjZRs-nL2SQ3syoyC8-Ycaj-AcH18UHe2b3GV0ayf0ZjQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjZRs-nL2SQ3syoyC8-Ycaj-AcH18UHe2b3GV0ayf0ZjQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This release was also very calm.  Linus suspects it was due to the holiday.
Therefore, he thinks the 5.5 release will be after &amp;lsquo;-rc8&amp;rsquo;, this time.  But,
it&amp;rsquo;s not fixed plan.  If things go well, he might release the 5.5 only after
&amp;lsquo;-rc7&amp;rsquo; as usual.&lt;/p&gt;
&lt;p&gt;Most changes for rc6 was for drivers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc5</title>
      <link>/post/lkml_news_v5.5-rc5/</link>
      <pubDate>Mon, 30 Dec 2019 17:54:23 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v16-qemu-43-rfc-memory-add-support-for-madv_free-as-mechanism-to-lazy-discard-pages&#34;&gt;[PATCH v16 QEMU 4/3 RFC] memory: Add support for MADV_FREE as mechanism to lazy discard pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20200103212339.29849.99817.stgit@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/20200103212339.29849.99817.stgit@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This RFC patch modifies QEMU to able to use &lt;code&gt;MADV_FREE&lt;/code&gt; for discard of pages to
avoid the page zeroing cost.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc5&#34;&gt;Linux 5.5-rc5&lt;/h2&gt;
&lt;p&gt;https://lkml/kernel.org/r/CAHk-=whwmJQwwMD06VfPapDmc52LFQhG3HP6VyVLXVA=nYi_&lt;a href=&#34;mailto:ow@mail.gmail.com&#34;&gt;ow@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Time files, rc5 released.  Last week was also another calm week due to the new
year holidays, and thus this release is small.  Linus expects it will be
changed in this upcoming weeks, or 5.5 be the easiest release.&lt;/p&gt;
&lt;p&gt;Also, Linus is delivering one sad news that Bruce Evans has passed away.  He
was the developer behind Minix/i386, which Linus has used for early development
of Linux.  Rest in peace, Bruce.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc4</title>
      <link>/post/lkml_news_v5.5-rc4/</link>
      <pubDate>Wed, 25 Dec 2019 10:01:47 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-v11-resend-mmdebug-add-tests-validating-architecture-page-table-helpers&#34;&gt;[PATCH V11 RESEND] mm/debug: Add tests validating architecture page table helpers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1577162322-30303-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1577162322-30303-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This patchset adds tests for the page table helpers.  Those tests covers basic
page table entry transformations including old, young, dirty, clean, write,
write protect etc.  The tests are not using the kselftest or kunit, but
implemented as a kernel module with new file, &lt;code&gt;mm/debug_vm_pgtable.c&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc4&#34;&gt;Linux 5.5-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjq2b9GkLzpaDE-Xryu5c0zMM72BqkJKeZVsX+4ymH6aA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjq2b9GkLzpaDE-Xryu5c0zMM72BqkJKeZVsX+4ymH6aA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Due to the holidays, last week was unsurprisingly quiet.  Torvalds says it was
hardly even worth making an rc release.  That said, there were some fixes for
cifs, io_uring, and kunit/selftest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc3</title>
      <link>/post/lkml_news_v5.5-rc3/</link>
      <pubDate>Wed, 18 Dec 2019 20:33:01 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc3/</guid>
      <description>&lt;h2 id=&#34;problem-large-256mb-cma-allocation-fails-from-time-to-time-when-using-intel-vt-d&#34;&gt;PROBLEM: Large (256MB) CMA allocation fails from time to time when using Intel VT-d&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/5e75d900cb50457784ee1d2050b511ec@MAILER13.tech.ceia&#34;&gt;https://lkml.kernel.org/r/5e75d900cb50457784ee1d2050b511ec@MAILER13.tech.ceia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author reports a CMA allocation failure that occurs time to time if the
system is using Intel VT-d.&lt;/p&gt;
&lt;h2 id=&#34;patchv2-03-allow-zram-to-use-any-zpool-compatible-backend&#34;&gt;[PATCHv2 0/3] Allow ZRAM to use any zpool-compatible backend&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191219151928.ad4ccf732b64b7f8a26116db@gmail.com&#34;&gt;https://lkml.kernel.org/r/20191219151928.ad4ccf732b64b7f8a26116db@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ZRAM is an in-memory block device that compresses the content.  Currently, ZRAM
is used only with zsmalloc.  However, the zsmalloc is not an optimal selection
in some environment.  The author gives embedded environment which fast response
is important as an example.  In such environment, though compress ratio is a
little bit less, faster response (e..g, z3fold) is more valuable.  Thus, this
patchset changes ZRAM to be able to use multiple backend.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-v4-0042-add-kernelmemorysanitizer-infrastructure&#34;&gt;[PATCH RFC v4 00/42] Add KernelMemorySanitizer infrastructure&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191220184955.223741-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20191220184955.223741-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;KMSAN detects errors related to uses of uninitialized memory.  With a help from
syzkaller, KMSAN has already reported more than 200 bugs in the past two years.
This patch aims to be merged in the mainline.&lt;/p&gt;
&lt;h2 id=&#34;regression-seen-when-using-madv_free-vs-madv_dontneed&#34;&gt;Regression seen when using &lt;code&gt;MADV_FREE&lt;/code&gt; vs &lt;code&gt;MADV_DONTNEED&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAKgT0UeSs_qy8g5QoXpgcw2685+JtJPY+rehggraoGSYPrP1Aw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAKgT0UeSs_qy8g5QoXpgcw2685+JtJPY+rehggraoGSYPrP1Aw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author introduced a patch using &lt;code&gt;MADV_FREE&lt;/code&gt; instead of &lt;code&gt;MADV_DONTNEED&lt;/code&gt; in
the QEMU.  On &lt;code&gt;next-20191120&lt;/code&gt; kernel, it worked as the author expected.  On
&lt;code&gt;next-20191120&lt;/code&gt;, however, the author was able to encounter an issue.  The
&lt;code&gt;MADV_FREE&lt;/code&gt; has been significantly slower than &lt;code&gt;MADV_DONTNEED&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc3&#34;&gt;Linux 5.5-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiGKfWeUv294FD6bs4cw0m=nO_LdZkLz-vkp-2zwBzLcA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiGKfWeUv294FD6bs4cw0m=nO_LdZkLz-vkp-2zwBzLcA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This release has delayed a couple of hors due to Christmas preparation, but
seems the Christmas has made no big effect to the development.  Rather than
that, this release is not only bigger than rc2 (rc3 is almost always bigger
than rc2), but also bigger than recent few other rc3 releases.&lt;/p&gt;
&lt;p&gt;Torvalds assumes that this is just a normal fluctuation, as the changes are
spread around various subsystems.  Also, the merge window timing could made
some effect.  As Santa is coming to the town, Torvalds also believe that next
release will be more calm than now.  That said, he also asks some tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc2</title>
      <link>/post/lkml_news_v5.5-rc2/</link>
      <pubDate>Mon, 09 Dec 2019 18:54:28 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc2/</guid>
      <description>&lt;h2 id=&#34;patchset-05-support-for-rwf_uncached&#34;&gt;[PATCHSET 0/5] Support for &lt;code&gt;RWF_UNCACHED&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191210162454.8608-1-axboe@kernel.dk&#34;&gt;https://lkml.kernel.org/r/20191210162454.8608-1-axboe@kernel.dk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the buffered IO uses the page cache, an intensive buffered IO workload using
very huge file can cause memory pressure by inflating the page cache.
Changing the workload to do direct IO can solve this problem, but the modification is not so simple.
Jens Axboe thus implemented &lt;code&gt;RWF_UNCACHED&lt;/code&gt; flag, which skips use of the page
cache if the given IO target is not in the page cache already.
Jonathan Corbet has also introduced this patchset in LWN
(&lt;a href=&#34;https://lwn.net/Articles/806980/)&#34;&gt;https://lwn.net/Articles/806980/)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc2&#34;&gt;Linux 5.5.-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgF1O8oPL9HRwRSrHt7NeLATtE5eZjcmP1QZfkcqE-+0g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgF1O8oPL9HRwRSrHt7NeLATtE5eZjcmP1QZfkcqE-+0g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first release right after the close of the merge window, namely rc2, is
usually calm because it is too early to find bugs.  This release was also did.
It&amp;rsquo;s calm and normal.  Torvalds asks us for test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.5-rc1</title>
      <link>/post/lkml_news_v5.5-rc1/</link>
      <pubDate>Mon, 02 Dec 2019 00:28:42 +0100</pubDate>
      <guid>/post/lkml_news_v5.5-rc1/</guid>
      <description>&lt;h2 id=&#34;splitting-the-mmap_sem&#34;&gt;&lt;code&gt;Splitting the mmap_sem&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191203222147.GV20752@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20191203222147.GV20752@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mmap_sem&lt;/code&gt; is a big scalability bottleneck and there are several projects
for solving it.  In this mail, Matthew Wilcox suggests his plan for his
solution and asks whether a exceptional case in his solution is acceptable to
other people.&lt;/p&gt;
&lt;h2 id=&#34;linux-55-rc1&#34;&gt;Linux 5.5-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiEJK=yo9vEhX_4b4ROvCqUA_rjK7g996h-5MbfOMeDrw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiEJK=yo9vEhX_4b4ROvCqUA_rjK7g996h-5MbfOMeDrw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 5.5 merge window closed and the -rc1 has released.
It was a tiny bit larger release compared to recent several releases, but
fairly regular overall.
&lt;code&gt;perf&lt;/code&gt; and &lt;code&gt;kselftest&lt;/code&gt; was a standout, but Torvalds says it is normal in these
days.&lt;/p&gt;
&lt;p&gt;My favorite new feature in 5.5-rc1 is &lt;code&gt;kunit&lt;/code&gt;.  Now you can do unit test of the
kernel in very fast and convenient way!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4</title>
      <link>/post/lkml_news_v5.4/</link>
      <pubDate>Tue, 19 Nov 2019 23:13:19 +0100</pubDate>
      <guid>/post/lkml_news_v5.4/</guid>
      <description>&lt;h2 id=&#34;patch-rfc-v3-0036-add-kernelmemorysanitizer-infrastructure&#34;&gt;[PATCH RFC v3 00/36] Add KernelMemorySanitizer infrastructure&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191122112621.204798-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20191122112621.204798-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google&amp;rsquo;s third KMSAN RFC patchset that detects errors caused by accessing
uninitialized memory areas. Like other SAN series, it has been used in Google
syzkaller and found over 200 bugs in the last two years.&lt;/p&gt;
&lt;h2 id=&#34;lsfmmbpf-2020-call-for-proposals&#34;&gt;LSF/MM/BPF: 2020: Call for Proposals&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191122172502.vffyfxlqejthjib6@macbook-pro-91.dhcp.thefacebook.com&#34;&gt;https://lkml.kernel.org/r/20191122172502.vffyfxlqejthjib6@macbook-pro-91.dhcp.thefacebook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSF/MM&amp;rsquo;s CFP for the next year was released.  From next year, BPF sessions
will be added to LSF/MM, so the name has changed to LSF/MM/BPF. I can
feel the phase of BPF again!&lt;/p&gt;
&lt;h2 id=&#34;linux-54&#34;&gt;Linux 5.4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjmzaD=BZ1hjUYu+RTnSGDLfCRwCdg99GeQpCjEwo9uzw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjmzaD=BZ1hjUYu+RTnSGDLfCRwCdg99GeQpCjEwo9uzw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the end of the eight rc releases, the 5.4 official version is finally
released.  Fortunately, the past week was really calm.  Most of the pull
requests for 5.5 came early for Thanksgiving, and some updates to networking
and GPUs.&lt;/p&gt;
&lt;p&gt;In this way 5.5 merge window is open, but I&amp;rsquo;m a little worried that there&amp;rsquo;s
Thanksgiving in the merge window, but Torvalds believes it won&amp;rsquo;t be a big deal,
and it might be a little slow to take care of the children.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc8</title>
      <link>/post/lkml_news_v5.4-rc8/</link>
      <pubDate>Tue, 12 Nov 2019 20:08:10 +0100</pubDate>
      <guid>/post/lkml_news_v5.4-rc8/</guid>
      <description>&lt;h2 id=&#34;patch-0013-finish-off-smp_read_barrier_depends&#34;&gt;&lt;code&gt;[PATCH 00/13] Finish off [smp_]read_barrier_depends()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191108170120.22331-1-will@kernel.org&#34;&gt;https://lkml.kernel.org/r/20191108170120.22331-1-will@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The memory model element which is depends only on Alpha,
&lt;code&gt;smp_read_barrier_depends()&lt;/code&gt; is built into &lt;code&gt;READ_ONCE()&lt;/code&gt;, so that you don&amp;rsquo;t
have to worry about Alpha in non-alpha-specific kernel code.
Nevertheless, the author of this patchset concerned about the continuing
uploads of the code that cares it.
This patchset removes the description of the feature from all documentation and
comments in the kernel code.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0010-add-kernel-concurrency-sanitizer-kcsan&#34;&gt;[PATCH v4 00/10] Add Kernel Concurrency Sanitizer (KCSAN)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191114180303.66955-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20191114180303.66955-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the Google&amp;rsquo;s KCSAN patch that catches concurrency bugs. This version is
for x86 only, but will add ARM64 and POWER support soon. This fourth version
has a 33% performance improvement over previous versions.&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc8&#34;&gt;Linux 5.4-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiyR4Np_n5O6=rbf1GVNdr_zUd1WAC_GJDnc_hUhHqwWg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiyR4Np_n5O6=rbf1GVNdr_zUd1WAC_GJDnc_hUhHqwWg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been a week of thrilling to see if the full version or rc8 will be
available. But it wasn&amp;rsquo;t just a problem. It&amp;rsquo;s been a quiet week, even though
it&amp;rsquo;s been a week since the bustling Intel vulnerability patch.&lt;/p&gt;
&lt;p&gt;Next week is Thanksgiving. With that in mind, next week we hope to have an
early pull request for 5.5 merge windows rather than a fix for 5.4.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc7</title>
      <link>/post/lkml_news_v5.4-rc7/</link>
      <pubDate>Mon, 11 Nov 2019 07:17:00 +0100</pubDate>
      <guid>/post/lkml_news_v5.4-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-54-rc7&#34;&gt;Linux 5.4-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wivmGEOTha5XkRHgH6VwfiroiN+PFVMNK3B0r-d0eFLPQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wivmGEOTha5XkRHgH6VwfiroiN+PFVMNK3B0r-d0eFLPQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일곱번째 rc 버전이 릴리즈 되었습니다.  지난 rc6 때도 변경량이 생각보다 많아
토발즈가 고민했는데, 이번주도 토발즈가 원했던 것보단 변경량이 많았다고
하는군요.  다음주에 rc8 을 낼지 5.4 정식 버전을 낼지는 좀 더 고민해 봐야겠다고
합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc6</title>
      <link>/post/lkml_news_v5.4-rc6/</link>
      <pubDate>Sat, 02 Nov 2019 09:24:21 +0100</pubDate>
      <guid>/post/lkml_news_v5.4-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v8-mmdebug-add-tests-validating-architecture-page-table-helpers&#34;&gt;[PATCH V8] mm/debug: Add tests validating architecture page table helpers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1572240562-23630-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1572240562-23630-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아키텍쳐별 페이지 테이블 헬퍼 등을 테스트 하는 코드를 추가하는 패치입니다.
&lt;code&gt;CONFIG_DEBUG_VM_PGTABLE&lt;/code&gt; 컨피규레이션이 켜져 있으면 동작합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-v2-0025-add-kernelmemorysanitizer-infrastructure&#34;&gt;[PATCH RFC v2 00/25] Add KernelMemorySanitizer infrastructure&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191030142237.249532-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20191030142237.249532-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;초기화 되지 않은 메모리 영역에 액세스 하는 에러를 찾아주는 KMSAN 을 커널에
추가하는 패치입니다.
KCSAN 과 비슷하게 syzkaller 를 통해 돌아가게끔 되어 있군요.&lt;/p&gt;
&lt;p&gt;False positive 문제가 존재할 수는 있는 모양입니다만, 구글 내부에서 syzbot 을
통해 테스트 한 환경에서는 중요한 false positive 는 나오지 않은 모양입니다.
구글 외부에서는 또 모른다는 거죠.&lt;/p&gt;
&lt;p&gt;요즘 커널 개발 프로세스를 개선하자는 이야기가 있고, 그 중에는 패치의 히스토리를
알고 싶다는 이야기가 많죠.
그래서인지 이 메일은 구글 내부 리뷰 시스템인 Gerrit 으로의 링크를 포함시켰네요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v2-mm-proactive-compaction&#34;&gt;[RFC v2] mm: Proactive compaction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191031005127.8037-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20191031005127.8037-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 할당을 위해선 연속된 메모리 할당이 필요합니다.
Fragmentation 이 심한 시스템에선 이 할당이 어렵죠.
리눅스는 그래서 compaction 기법을 사용하는데요, 이걸 좀 더 적극적으로 하자는
패치입니다.
이를 통해 latency 가 개선될 수 있죠.&lt;/p&gt;
&lt;p&gt;단순히 hugepage 를 최대한, compaction 을 요청해가며 할당받는 드라이버를 통해 성능을 테스트 했군요.
80th percentile latency 까지는 몇십배 넘게 할당 응답시간을 줄였는데, 90th
percentile 부턴 별 차이 없군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-0010-autonuma-optimize-memory-placement-in-memory-tiering-system&#34;&gt;[RFC 00/10] autonuma: Optimize memory placement in memory tiering system&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191101075727.26683-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20191101075727.26683-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DRAM 과 PMEM 등으로 구성되어 PMEM 을 NUMA node 로 간주하는 multi-tiering memory
system 을 염두에 두고 hot page / cold page 를 구분할 수 있게 해주는
패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc6&#34;&gt;Linux 5.4-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg+8=w=sEx9WBF0OJj0SumQ4p-LuP8waRH=TSdAYDeqGg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg+8=w=sEx9WBF0OJj0SumQ4p-LuP8waRH=TSdAYDeqGg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OSSEU 가 종료되고 토발즈는 집에 잘 도착했고, 시차 적응도 큰 문제는 없었기에
평소대로의 타이밍에 릴리즈가 가능했다고 합니다.
지난 rc5 도 큰 크기였고, rc6 는 이제 슬슬 변경사항이 줄어들어야 할, 토발즈
말로는 그러길 바라는 시점인데, 그렇지 못했습니다.
네트워킹 쪽에서 시점을 맞추지 못한 뒤늦은 풀리퀘스트들이 있었기 때문인데, 딱히
급작스런 문제가 있는 건 아니라는군요.
그렇다곤 해도 토발즈는 조금 찜찜한 모양입니다.
다음주까지 동향을 지켜봐야겠지만 다음주까지도 충분히 변경사항이 줄어들지
않는다면 rc8 까지 가야할 수도 있겠다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc5</title>
      <link>/post/lkml_news_v5.4-rc5/</link>
      <pubDate>Sun, 27 Oct 2019 12:48:30 +0100</pubDate>
      <guid>/post/lkml_news_v5.4-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-0012-mm-remove-__arch_has_4level_hack&#34;&gt;&lt;code&gt;[PATCH 00/12] mm: remove __ARCH_HAS_4LEVEL_HACK&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1571822941-29776-1-git-send-email-rppt@kernel.org&#34;&gt;https://lkml.kernel.org/r/1571822941-29776-1-git-send-email-rppt@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;서로 다른 아키텍쳐 간의 페이지 테이블 구조로 인해 사용해야 했던
&lt;code&gt;__ARCH_HAS_4LEVEL_HACK&lt;/code&gt; 을 제거하는 패치입니다.  Alpha, arm, c6x 등의
아키텍쳐가 변경되는군요.
UML, qemu 등에서 부팅 테스트를 거쳤군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc5&#34;&gt;Linux 5.4-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgpewLxHxnO71tFHh=M4C4iUofJykMqq3r=eRyxUyVsiw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgpewLxHxnO71tFHh=M4C4iUofJykMqq3r=eRyxUyVsiw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다섯번째 rc 버전 릴리즈입니다.
하지만 안타깝게도 이번 릴리즈는 마냥 조용하진 않았다는군요.
최근의 다른 rc5 들에 비하면 조금 큰 크기의 릴리즈가 되었습니다.
그렇다곤 해도 아주 특이할 만한 정도는 아니라 토발즈도 큰 걱정은 없다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc4</title>
      <link>/post/lkml_news_v5.4-rc4/</link>
      <pubDate>Wed, 16 Oct 2019 20:29:00 +0200</pubDate>
      <guid>/post/lkml_news_v5.4-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-08-add-kernel-concurrency-sanitizer-kcsan&#34;&gt;[PATCH 0/8] Add Kernel Concurrency Sanitizer (KCSAN)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191016083959.186860-1-elver@google.com&#34;&gt;https://lkml.kernel.org/r/20191016083959.186860-1-elver@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;구글에서 만든 동시성 버그 탐색기능, KCSAN 을 추가하는 패치셋입니다.
처음 세상에 모습을 드러낸건 9월이었고, 최근 컨퍼런스들에서도 발표가 있었죠.
메커니즘은 간단하다면 간단한, 샘플링 기반입니다.
구글 내부 fuzzing tester 인 syzkaller 는 이미 이 기능을 켠채 돌아간다는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-22-mm-zswap-support-thp&#34;&gt;[PATCH 2/2] mm, zswap: Support THP&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1571111349-5041-2-git-send-email-teawater@gmail.com&#34;&gt;https://lkml.kernel.org/r/1571111349-5041-2-git-send-email-teawater@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zswap 이THP 를 지원하도록 수정하는 패치입니다.  그냥 &lt;code&gt;zswap_frontswap_store()&lt;/code&gt;
함수가 THP 페이지를 연속적인 4 KiB 페이지로 인식하고 처리하게끔 했군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-v1-0026-add-kernelmemorysanitizer-infrastructure&#34;&gt;[PATCH RFC v1 00/26] Add KernelMemorySanitizer infrastructure&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191018094304.37056-1-glider@google.com&#34;&gt;https://lkml.kernel.org/r/20191018094304.37056-1-glider@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;구글에서 만든 또다른 sanitizer, KMSAN 입니다.  자매품으로 address sanitizer
등이 있고, 앞서 소개한 concurrency sanitizer 도 있죠.  KMSAN 은 초기화 안된
메모리에의 접근 문제를 찾아내는 Sanitizer 입니다.
Syzkaller 에 적용되어 지난 2년간 무려 200개가 넘는 문제를 발견했다고 합니다.&lt;/p&gt;
&lt;p&gt;이 패치셋은 KMSAN 을 적용한 커널을 QEMU 에서 부팅시킬 수 있게 해줍니다.
알려진 false positive 는 없지만 실제로 적용해보면 있을수도 있다고 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc4&#34;&gt;Linux 5.4-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wh3jhffc0u7s5n=-zUFpztuh+0Hfth4vwuyfc5SpBmvSA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wh3jhffc0u7s5n=-zUFpztuh+0Hfth4vwuyfc5SpBmvSA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;네번째 rc 버전 릴리즈입니다.  딱히 특별한 일 없이 평범한 릴리즈라고
자평하는군요.  토발즈는 이번주에 OSSummit Europe 참가를 위해 프랑스로 가는
모양입니다.  하지만 지금처럼 조용하면 큰일은 없을 것 같다고 하네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc3</title>
      <link>/post/lkml_news_v5.4-rc3/</link>
      <pubDate>Sun, 13 Oct 2019 12:22:50 +0200</pubDate>
      <guid>/post/lkml_news_v5.4-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-54-rc3&#34;&gt;Linux 5.4-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjOhveT=qrq8HHyL7gpA5fmBtDa2ue7sO5ZSEBrrcY6Vg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjOhveT=qrq8HHyL7gpA5fmBtDa2ue7sO5ZSEBrrcY6Vg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;세번째 rc 릴리즈입니다.  실제 문제가 발견되고 그에 대한 수정이 본격적으로
시작되는 시즌이라 rc2보단 당연히 크지만 역대 rc3 들과 비교하면 작은 편의
릴리즈라는군요.
staging driver 일부가 사라진 게 조금 릴리즈 크기를 크게 보이게 만들 수 있다는게
그나마 유의할 점일까요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc2</title>
      <link>/post/lkml_news_v5.4-rc2/</link>
      <pubDate>Sat, 05 Oct 2019 11:46:07 +0200</pubDate>
      <guid>/post/lkml_news_v5.4-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v18-0019-kunit-introduce-kunit-the-linux-kernel-unit-testing-framework&#34;&gt;[PATCH v18 00/19] kunit: introduce KUnit, the Linux kernel unit testing framework&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190923090249.127984-1-brendanhiggins@google.com&#34;&gt;https://lkml.kernel.org/r/20190923090249.127984-1-brendanhiggins@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어떻게 보면 별거 아닌 이유로 5.4 머지윈도우에서 튕겨나가고 만 kunit.
요청받은대로 파일 위치를 하위 디렉토리로 변경한 kunit 새 버전의 패치셋이
올라왔습니다.
&amp;lsquo;kunit/&amp;rsquo; 디렉토리와 kunit 을 위한 &amp;lsquo;Kconfig&amp;rsquo; 파일을 &amp;lsquo;lib/&amp;rsquo; 아래로 옮겼군요.&lt;/p&gt;
&lt;p&gt;이후 벌어진 대화가 재미있는데요, 토발즈는 이걸 5.5에 넣을 예정인데, 가능하면
그동안 실제 테스트 코드도 추가되면 좋겠다고 했습니다.
근데 테스트 프레임웍이 머지안되었는데 테스트 코드를?  메인테이너 간에 일이
복잡해지고 컨플릭 날 확률이 높아지니 이걸로 꽤 많은 이야기가 있었습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-perf-script-python-integrate-page-reclaim-analyze-script&#34;&gt;[PATCH v2] perf script python: integrate page reclaim analyze script&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1569899984-16272-1-git-send-email-laoar.shao@gmail.com&#34;&gt;https://lkml.kernel.org/r/1569899984-16272-1-git-send-email-laoar.shao@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page reclaim 을 좀더 잘 분석하기 위한 perf script 를 추가하는 패치셋의 두번째
버전입니다.
첫번째 버전은 이 블로그에서도 소개한 바 있죠.
첫번째 버전 이후로의 변화 중 눈에 띄는 건 파이썬 2.7 과 3.6 에서 모두
돌아가게끔 한 것이군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-0011-introduces-new-count-based-method-for-tracking-lockless-pagetable-walks&#34;&gt;[PATCH v5 00/11] Introduces new count-based method for tracking lockless pagetable walks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191003013325.2614-1-leonardo@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20191003013325.2614-1-leonardo@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP promotion/demotion 과 동시에 page table 조작이 일어나는 걸 막기 위해
존재하는 &lt;code&gt;serialize_against_pte_lookup()&lt;/code&gt; 함수로 인해 발생하는 &lt;code&gt;munmap()&lt;/code&gt;
레이턴시 문제를 동시의 page table walk 존재 여부를 카운트 기반으로 추적해,
필요없을 땐 락을 잡지 않게 함으로써 레이턴시를 놀랍게 개선한 패치셋의 다섯번째
버전입니다.
이 블로그에서도 소개했죠.
지난 버전 이후로 인터럽트 처리 부분을 포함한 일부 부분이 조금 수정되었군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-export-cma-alloc-and-release&#34;&gt;[PATCH] mm: export cma alloc and release&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20191002212257.196849-1-salyzyn@android.com&#34;&gt;https://lkml.kernel.org/r/20191002212257.196849-1-salyzyn@android.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cma_alloc()&lt;/code&gt; 과 &lt;code&gt;cma_release()&lt;/code&gt; 함수를 드라이버에서도 쓸 수 있게 export 해주는
패치셋입니다.
안드로이드 ION 이라던지 RDMA, Camera 모듈들이 이에 의존적이어서 드라이버 레벨로
빌드가 안되기 때문에 이런 변경을 제안했다네요.&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc2&#34;&gt;Linux 5.4-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiNT4Yk+36OXMyPuesrU88cFyDG_XnjRiKwaac09PJpQw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiNT4Yk+36OXMyPuesrU88cFyDG_XnjRiKwaac09PJpQw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다시 일요일 오후 릴리즈로 돌아왔습니다.
큰 변화는 없고 그저 소소한 수정 사항들 뿐이었다는군요.
일반적으로 진짜 regression 에 대한 파악이 이루어지고 그에 대한 수정이
시작되는건 rc2 후라는 걸 감안하면 매우 평범한 릴리즈라고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.4-rc1</title>
      <link>/post/lkml_news_v5.4-rc1/</link>
      <pubDate>Sat, 21 Sep 2019 10:00:48 +0200</pubDate>
      <guid>/post/lkml_news_v5.4-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-02-introduce-new-perf-script-page-reclaim&#34;&gt;[PATCH 0/2] introduce new perf-script page-reclaim&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1568817522-8754-1-git-send-email-laoar.shao@gmail.com&#34;&gt;https://lkml.kernel.org/r/1568817522-8754-1-git-send-email-laoar.shao@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page reclaim 관련 성능 메트릭을 분석하기 위한 perf script 커맨드를 추가하는
패치입니다.  Direct reclaim 으로 인한 응답시간 폭증, page reclaim 이 왜
일어났는지, page reclaim 의 효과는 어땠는지 등을 알 수 있다는군요.&lt;/p&gt;
&lt;p&gt;구체적으로는 direct reclaim 이 몇번 일어났는지, 그 latency 분포는 어땠는지,
file / anon page 별로 reclaim, scan, sync write, async write 이 몇번
일어났는지, kswapd 는 몇번 일어났는지, kswapd latency 는 어땠는지 등등을
보입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ perf script report page-reclaim
    Direct reclaims: 4924
    Direct latency (ms)        total         max         avg         min
                          177823.211    6378.977      36.114       0.051
    Direct file reclaimed 22920
    Direct file scanned 28306
    Direct file sync write I/O 0
    Direct file async write I/O 0
    Direct anon reclaimed 212567
    Direct anon scanned 1446854
    Direct anon sync write I/O 0
    Direct anon async write I/O 278325
    Direct order      0     1     3
                   4870    23    31
    Wake kswapd requests 716
    Wake order      0     1
                  715     1

    Kswapd reclaims: 9
    Kswapd latency (ms)        total         max         avg         min
                           86353.046   42128.816    9594.783     120.736
    Kswapd file reclaimed 366461
    Kswapd file scanned 369554
    Kswapd file sync write I/O 0
    Kswapd file async write I/O 0
    Kswapd anon reclaimed 362594
    Kswapd anon scanned 693938
    Kswapd anon sync write I/O 0
    Kswapd anon async write I/O 330663
    Kswapd order      0     1     3
                      3     1     5
    Kswapd re-wakes 705

    Per process latency (ms):
         pid[comm]             total         max         avg         min
               timestamp  latency(ns)
           1[systemd]        276.764     248.933       21.29       0.293
           3406860552338: 16819800
           3406877381650: 5532855
           3407458799399: 929517
           3407459796042: 916682
           3407460763220: 418989
           3407461250236: 332355
           3407461637534: 401731
           3407462092234: 449219
           3407462605855: 292857
           3407462952343: 372700
           3407463364947: 414880
           3407463829547: 949162
           3407464813883: 248933444
         163[kswapd0]      86353.046   42128.816    9594.783     120.736
           3357637025977: 1026962745
           3358915619888: 41268642175
           3400239664127: 42128816204
           3443784780373: 679641989
           3444847948969: 120735792
           3445001978784: 342713657
           ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;git-pull-kselftest-update-for-linux-54-rc1&#34;&gt;[GIT PULL] Kselftest update for Linux 5.4-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/be8059f4-8e8f-cd18-0978-a9c861f6396b@linuxfoundation.org&#34;&gt;https://lkml.kernel.org/r/be8059f4-8e8f-cd18-0978-a9c861f6396b@linuxfoundation.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이블로그에서도 여러차례 소개했던 kunit 은 제가 오랫동안 메인라인에 머지되기를
기다려 왔던 기능입니다.
이번 kernel summit 에서 발표한 제 damon 이란 프로젝트도 kunit 을 이용해 test
driven development 기법을 적용했고, 그 효과를 톡톡히 봤죠.
이 패치셋이 4.9에 들어갈 예정이었고, Shuah Kahn 이 이번 머지 윈도우에
풀리퀘스트에 이 패치셋을 포함해 보냈는데요.
토발즈가 바로 퉤에엣 을 시전했습니다.&lt;/p&gt;
&lt;p&gt;이유가 재미있습니다, kunit 패치는 리눅스 소스코드 루트 디렉토리에 &lt;code&gt;kunit/&lt;/code&gt;
디렉토리를 추가하는데, 이게 토발즈 마음에 들지 않았습니다.
토발즈의 tab 키를 활용한 자동완성 기능을 부셨기 때문이죠.
&lt;code&gt;kernel/&lt;/code&gt; 디렉토리로 이용하기 위해 &lt;code&gt;k&lt;/code&gt; 만 타이핑 하고 탭키를 누르면 되었는데,
이제 &lt;code&gt;kunit/&lt;/code&gt; 디렉토리 때문에 이게 안되는 거죠.&lt;/p&gt;
&lt;p&gt;생각하기에 따라선 좀 억지 아니냐고 생각할 수 있고 저도 kunit 의 오랜 팬으로써
좀 아쉬운 마음이 있었는데요.
또 이제와서 생각해 보면 저도 &lt;code&gt;kernel/&lt;/code&gt; 넘어가기 위해 한번 더 키보드에 손대야
하는게 좀 불쾌했던 거 같기도 하네요. ;)&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0011-introduces-new-count-based-method-for-monitoring-lockless-pagetable-walks&#34;&gt;[PATCH v4 00/11] Introduces new count-based method for monitoring lockless pagetable walks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190927234008.11513-1-leonardo@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190927234008.11513-1-leonardo@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;128개 vcpu 의 qemu 가 THP 로 매핑된 496 GiB 메모리 영역을 &lt;code&gt;munmap()&lt;/code&gt; 완료하는데
무려 275초가 걸린다고 합니다.
그 원인은 &lt;code&gt;serialize_against_pte_lookup()&lt;/code&gt; 함수였다고 하는군요.
이 함수는 &lt;code&gt;find_current_mm_pte()&lt;/code&gt; 내에서의 &lt;code&gt;pmd_t&lt;/code&gt; 에서 &lt;code&gt;pte_t&lt;/code&gt; 로의 캐스팅
또는 lockless page table walk 이 THP promotion/demotion 과 동시에 이루어지지
않게끔 보호하는 용도로 사용됩니다.
그렇다면, 실제 lockless page table walk 이 없다면
&lt;code&gt;serialize_against_pte_lookup()&lt;/code&gt; 은 호출될 필요가 없겠죠.&lt;/p&gt;
&lt;p&gt;이를 위해 이 패치셋은 현재 수행되고 있는 &lt;code&gt;find_current_mm_pte()&lt;/code&gt; 함수 갯수를
세고 그 갯수가 0이면 이 오버헤드가 되는 동시성 보호 코드를 생략하게 합니다.&lt;/p&gt;
&lt;p&gt;이 패치를 적용한 후 앞의 문제시 되던 작업에 걸리는 시간이 275초에서 무려 418 ms
으로 줄었다는군요!&lt;/p&gt;
&lt;h2 id=&#34;linux-54-rc1&#34;&gt;Linux 5.4-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgbGJ-SGeevEcgrThhPp+RwYOUUgWoZ3W27cbUpuB3VgA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgbGJ-SGeevEcgrThhPp+RwYOUUgWoZ3W27cbUpuB3VgA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;평소보다 하루 늦은 월요일에 5.4 머지윈도우가 닫히고 rc1 릴리즈가
이루어졌습니다.
좀 미뤄진 머지를 처리하느라 늦어져서 하루 늦은 릴리즈가 되긴 했지만 대수로운
일은 아니라는군요.&lt;/p&gt;
&lt;p&gt;전체적인 릴리즈 내용도 평시와 크게 다른 내용은 없습니다.
AMD DRM 관련 변경이 많이 있지만 이는 하드웨어 구성에 따른 변화니까 무시하면
되고, 그걸 제외하고 보면 평소와 변경사항들의 분포도 비슷하다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3</title>
      <link>/post/lkml_news_v5.3/</link>
      <pubDate>Thu, 12 Sep 2019 17:59:25 +0200</pubDate>
      <guid>/post/lkml_news_v5.3/</guid>
      <description>&lt;h2 id=&#34;patch-x86mm-enable-5-level-paging-support-by-default&#34;&gt;[PATCH] x86/mm: Enable 5-level paging support by default&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190913095452.40592-1-kirill.shutemov@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/20190913095452.40592-1-kirill.shutemov@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 레벨 페이지 테이블 기능이 들어간지도 어느덧 시간이 지났죠.
인텔 내부적 테스트 상으론 이 기능을 켰을 때 4 레벨 페이지 테이블 기계에서도
딱히 리그레션 등은 나타나지 않았고, 주요 배포판들은 5 레벨 페이지 테이블
서포트를 기본으로 켤것으로 보인다고 합니다.
따라서 이 기능을 아예 디폴트로 켜져있게 하는 패치입니다.&lt;/p&gt;
&lt;p&gt;v5.4 에 들어가기엔 좀 늦은 관계로, v5.5 에 들어갈 것 같다는군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-53&#34;&gt;Linux 5.3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiP4K8DRJWsCo=20hn_6054xBamGKF2kPgUzpB5aMaofA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiP4K8DRJWsCo=20hn_6054xBamGKF2kPgUzpB5aMaofA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LPC 와 커널 서밋 등으로 인해 한주 늦춰진 5.3 릴리즈가 이뤄졌습니다.
지난 일주일은 고요했을 뿐더러, 이 늦춰진 일정 덕에 몇가지 수정도 더 이뤄질 수
있었다고 토발즈는 평하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc8</title>
      <link>/post/lkml_news_v5.3-rc8/</link>
      <pubDate>Wed, 04 Sep 2019 23:56:59 +0200</pubDate>
      <guid>/post/lkml_news_v5.3-rc8/</guid>
      <description>&lt;h2 id=&#34;patch-rfc-0014-the-new-slab-memory-controller&#34;&gt;[PATCH RFC 00/14] The new slab memory controller&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190905214553.1643060-1-guro@fb.com&#34;&gt;https://lkml.kernel.org/r/20190905214553.1643060-1-guro@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;슬랩 할당자의 실제 메모리 활용률이 대부분 45-65 퍼센트에 불과했다고 합니다.
이는 슬랩 페이지가 각 메모리 cgroup 마다 배타적으로 사용되기 때문입니다.  적은
메모리만 사용하는 cgroup 여러개가 존재하면 슬랩에서 크게 받아놓은 메모리에서
조금씩만 실제 사용되니까 전체 활용률은 낮게 되는거죠.  이 RFC 패치셋은 서로
다른 cgroup 들이 슬랩 페이지를 공유할 수 있게 함으로써 이 문제를 해결합니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc8&#34;&gt;Linux 5.3-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whBQ+6c-h+htiv6pp8ndtv97+45AH9WvdZougDRM6M4VQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whBQ+6c-h+htiv6pp8ndtv97+45AH9WvdZougDRM6M4VQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;평소대로라면 5.3 정식 릴리즈가 되었을테고 별다른 문제는 없었지만, rc7
릴리즈에서 이야기된대로 LPC 와 커널 서밋도 있고 한 이유로, -rc8 이 릴리즈
되었습니다.
그렇다보니 특기할 만한 사항은 없습니다만, 정식 릴리즈를 늦춘 덕에 stable 트리로
넘어갈 뻔한 수정사항 몇가지를 이번 릴리즈 내에 넣을 수 있게 되었다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc7</title>
      <link>/post/lkml_news_v5.3-rc7/</link>
      <pubDate>Mon, 02 Sep 2019 10:57:44 +0200</pubDate>
      <guid>/post/lkml_news_v5.3-rc7/</guid>
      <description>&lt;p&gt;평소보다 늦은 월요일 아침 릴리즈가 이뤄졌습니다.  일요일에 토발즈가
컴퓨터로부터 떨어져 있었다는군요.&lt;/p&gt;
&lt;p&gt;늦어진 릴리즈 덕분에 뒤늦게 들어온 풀리퀘스트를 더 받을 수 있었고, 이로 인해
이번 rc 릴리즈는 평소보다 좀 사이즈가 큽니다.
따라서 이번 릴리즈의 크기가 불안정성을 의미하는 게 아니라 5.3 정식 릴리즈를 늦출 필요는 없습니다만, 공교롭게도 또한 다음주는 LPC 와 커널 서밋이 있죠.
토발즈도 그렇고 많은 다른 개발자들도 이때 LPC 와 커널 서밋에 참가할 거라, rc7
을 마지막으로 5.3 릴리즈를 하면 5.4 머지 윈도우의 많은 시간을 여행에 보내게
되므로, 그냥 rc8 을 릴리즈 하겠다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc6</title>
      <link>/post/lkml_news_v5.3-rc6/</link>
      <pubDate>Thu, 22 Aug 2019 15:30:54 +0200</pubDate>
      <guid>/post/lkml_news_v5.3-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-53-rc6&#34;&gt;Linux 5.3-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgAKCTq+t5YnG6HzrF62=rr9H=q3LqokEP0_bQRHLwYNw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgAKCTq+t5YnG6HzrF62=rr9H=q3LqokEP0_bQRHLwYNw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;오늘은 리눅스의 28번째 생일입니다.  따라서 오늘 rc6 릴리즈는 28년만의
릴리즈이기도 하군요.  토발즈도 감회가 깊었는지 오늘의 릴리즈 메일엔 최초 릴리즈
메일에 적었던 내용과 비슷하게 시작 부분을 꾸몄네요.
감회 깊은 날, 감회 깊은 릴리즈입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;리눅스를 사용하는 여러분들 안녕하세요,

저는 486 AT 클론과 그외의 많은 다른 하드웨어를 위한 (자유) 운영체제를 (취미보단
더 진지하게) 만들고 있습니다.  이 일은 28년째 지속되고 있고, 아직도 끝나지
않았습니다.  이 릴리즈에 의해 만들어진 (또는 그보다 오래된) 모든 버그에 대한
피드백을 부탁드립니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;어쨌건, 아주 특별할 건 없는 릴리즈였습니다만, 토발즈가 원하던 것에 비하면
변경사항이 좀 많았다는군요.  다음주에 확실히 변경사항이 줄지 않는다면 rc8 을
만들어야 할 것 같다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc5</title>
      <link>/post/lkml_news_v5.3-rc5/</link>
      <pubDate>Mon, 19 Aug 2019 14:19:58 +0900</pubDate>
      <guid>/post/lkml_news_v5.3-rc5/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-02-add-predictive-memory-reclamation-and-compaction&#34;&gt;[RFC PATCH 0/2] Add predictive memory reclamation and compaction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190813014012.30232-1-khalid.aziz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20190813014012.30232-1-khalid.aziz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;커널의 page reclamation 과 compaction 등은 기본적으로 시스템 메모리 잔여량이
부족할 때 시작됩니다.  하지만 이땐 이미 때가 늦었습니다.  reclamation 과
compaction 을 열심히 하긴 하지만 어플리케이션은 이미 메모리 부족으로 인한
응답시간 폭증 등을 겪게 됩니다.&lt;/p&gt;
&lt;p&gt;이 패치셋은 시스템의 메모리 부족을 미리 예측하고 reclamation 과 compaction 을
시작하기 위한 패치셋입니다.  시간축에 따라 메모리 사용량 변화 추세를 보면 이걸
예측할 수 있지 않겠냐는 것이죠.&lt;/p&gt;
&lt;p&gt;이 패치셋은 이런 아이디어에 기반해 시스템의 메모리 부족을 예측하고 kswapd 를
깨울지 재울지를 결정합니다.  간단한 dd 기반의 테스트를 통해 그 성능을 측정한
결과도 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-kbuild-change-fallthrough-comments-to-attributes&#34;&gt;[PATCH] kbuild: Change fallthrough comments to attributes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190812214711.83710-1-nhuck@google.com&#34;&gt;https://lkml.kernel.org/r/20190812214711.83710-1-nhuck@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C 언의 &lt;code&gt;switch&lt;/code&gt; 구문의 fall-through 기능은 복잡한 기능을 구현하기 좋긴 한데
암묵적으로 이루어지는 fall-through 를 방지하기 위해 &lt;code&gt;break;&lt;/code&gt; 를 추가하는 걸
깜박하곤 하는 경우가 많습니다.  GCC 는 주석으로 이 부분은 fall-through 가 맞다,
라는걸 지정할 수 있게 하고 이 주석이 없는 경우는 모두 fall-through 를
막아버림으로써 &lt;code&gt;switch&lt;/code&gt; 의 명시적 fall-through 기능이 가능하게 합니다.&lt;/p&gt;
&lt;p&gt;리눅스 커널 역시 이런 방식으로 암묵적 fall-through 에 의한 버그를 극복하려
노력하는데요, clang 은 이걸 주석 형태가 아니라 attribute 형태로 지원합니다.  이
패치는 이런 차이를 어드레스 하기 위한 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-mm-proactive-compaction&#34;&gt;[RFC] mm: Proactive compaction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190816214413.15006-1-nigupta@nvidia.com&#34;&gt;https://lkml.kernel.org/r/20190816214413.15006-1-nigupta@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 등의 할당 시간은 fragmentation 이 심한 메모리에선 길어지거나 아예
실패할 수 있죠.  Huge page 에 성능이 의존적인 어플리케이션에겐 큰 문제입니다.&lt;/p&gt;
&lt;p&gt;이 패치는 page order 별 fragmentation threshold 를 두고 이에 맞춰 page order
별로 다른 compaction 을 수행하자는 겁니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc5&#34;&gt;Linux 5.3-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiO5-puMa30fCwtgze57MH2JOzedVcEVotEviYmmQNihQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiO5-puMa30fCwtgze57MH2JOzedVcEVotEviYmmQNihQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다섯번째 rc 릴리즈입니다.  노드 로컬 할당 대 huge page 할당 관련 커밋 일부가
리버트 시키지 않는 등의 몇가지 문제를 제외하면 조용한 릴리즈 주간이었다는군요.
잘 안정화 되어가고 있다는 증거겠지요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc4</title>
      <link>/post/lkml_news_v5.3-rc4/</link>
      <pubDate>Mon, 12 Aug 2019 01:40:13 +0900</pubDate>
      <guid>/post/lkml_news_v5.3-rc4/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v6-0092-vm-introspection&#34;&gt;[RFC PATCH v6 00/92] VM introspection&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com&#34;&gt;https://lkml.kernel.org/r/20190809160047.8319-1-alazar@bitdefender.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;호스트 또는 별도 VM 에서 돌아가는 어플리케이션이 다른 VM들을 제어하거나 상태를
알아보거나 shadow 페이지 테이블을 조정하거나 특정 이벤트 발생시 알림을 받거나
할 수 있게 해주는 KVM introspection 서브시스템을 제안하는 패치입니다.  무려
92개짜리의 거대한 패치군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-15-mmpage_idle-add-per-pid-idle-page-tracking-using-virtual-indexing&#34;&gt;[PATCH v4 1/5] &lt;code&gt;mm/page_idle&lt;/code&gt;: Add per-pid idle page tracking using virtual indexing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org&#34;&gt;https://lkml.kernel.org/r/20190805170451.26009-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;페이지 액세스 여부를 알아볼 수 있는 &lt;code&gt;page_idle&lt;/code&gt; 기능을 프로세스별로 트래킹 하기
편하게 만들어 주는 패치의 네번째 버전입니다.  저자는 구글 직원으로,
안드로이드의 heap profiler 가 이 기능을 쓰나봅니다.  이전 버전과의 차이는&amp;hellip;
Swap pte 처리가 추가되었군요.&lt;/p&gt;
&lt;p&gt;다섯번째 버전도 바로 올라왔습니다만, 큰 차이는 없어 보이는군요:
&lt;a href=&#34;https://lkml.kernel.org/r/20190807171559.182301-1-joel@joelfernandes.org&#34;&gt;https://lkml.kernel.org/r/20190807171559.182301-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc4&#34;&gt;Linux 5.3-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whWJ7Dv9yZBZpxWd1zcAMwokjt7c8YOp-FOf1PXDKGrmQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whWJ7Dv9yZBZpxWd1zcAMwokjt7c8YOp-FOf1PXDKGrmQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;세번째 rc 는 어째선지 작은 크기였다 말했었죠, 그냥 pull request 들이 천천히
왔기 때문이 맞는 것 같다고 합니다.  이번 rc 릴리즈는 평소 크기에 rc3 에
안들어간 내용이 들어간 만큼 크다고 합니다.
덕분에 최근 2년 사이의 rc4 중 가장 크다고 하네요.
rc3 에 안들어갔다가 rc4 에 뒤늦게 들어온 변경사항은 대부분 network 쪽
코드라는군요.&lt;/p&gt;
&lt;p&gt;이번 변경 중 개인적으로 눈에 띄는건 &lt;code&gt;switch-case&lt;/code&gt; 구문의 fall-through 코멘트
업데이트입니다.
LWN 에도 관련 글이 올라왔으니 한번 읽어보는 것도 좋을 겁니다:
&lt;a href=&#34;https://lwn.net/Articles/794944/&#34;&gt;https://lwn.net/Articles/794944/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 rc 릴리즈 개발 과정 시각화 동영상을 아래 링크에서 보실 수 있습니다:
&lt;a href=&#34;https://youtu.be/EB3i8iBuuHM&#34;&gt;https://youtu.be/EB3i8iBuuHM&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc3</title>
      <link>/post/lkml_news_v5.3-rc3/</link>
      <pubDate>Wed, 31 Jul 2019 08:40:48 +0900</pubDate>
      <guid>/post/lkml_news_v5.3-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-v5-0014-provide-generic-top-down-mmap-layout-functions&#34;&gt;[PATCH v5 00/14] Provide generic top-down mmap layout functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr&#34;&gt;https://lkml.kernel.org/r/20190730055113.23635-1-alex@ghiti.fr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아키텍쳐별로 다르게 구현되어 있던 mmap 레이아웃 함수들을 범용화 시키는 패치셋,
다섯번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v10-0022-generic-page-walk-and-ptdump&#34;&gt;[PATCH v10 00/22] Generic page walk and ptdump&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com&#34;&gt;https://lkml.kernel.org/r/20190731154603.41797-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;역시 아키텍쳐별로 다르게 구현되어 있던 page table walk 과 page table dump
기능을 범용화 시키는 패치입니다.  벌써 10번째 버전이군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-03-address-hugetlb-page-allocation-stalls&#34;&gt;[PATCH 0/3] address hugetlb page allocation stalls&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20190802223930.30971-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sysctl&lt;/code&gt; 이나 &lt;code&gt;procfs&lt;/code&gt; 를 통한 hugetlb 페이지 할당은 수분이나 수시간까지도 오래
걸릴 수 있습니다.  이 패치셋은 이렇게 느린 할당시간 문제를 유발하는 reclaim 과
compaction 쪽 문제를 해결할 수 있는 수정사항들을 담고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc3&#34;&gt;Linux 5.3-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiW+q32YcUL62XWjAme8giZDo-=kmB9=f_JEgyEgV7eaA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiW+q32YcUL62XWjAme8giZDo-=kmB9=f_JEgyEgV7eaA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;보통 머지 윈도우가 지난 후에는 사람들이 숨을 고르고 넘어가기 때문에 보통 rc2 가
작고 rc3 부터 변경이 많아집니다.  하지만 이번 릴리즈는 이상하게도 rc2 보다
작았다는군요.&lt;/p&gt;
&lt;p&gt;커밋 기반으로 그린 rc3 개발 시각화 동영상을 다음 링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/V1qUa2QXZes&#34;&gt;https://youtu.be/V1qUa2QXZes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc2</title>
      <link>/post/lkml_news_v5.3-rc2/</link>
      <pubDate>Fri, 26 Jul 2019 08:41:19 +0900</pubDate>
      <guid>/post/lkml_news_v5.3-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v6-05-introduce-madv_cold-and-madv_pageout&#34;&gt;[PATCH v6 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190723062539.198697-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어플리케이션의 메모리를 좀 더 적극적으로 reclaim 시킴으로써 반응성을 높이기
위한 패치셋의 일부를 따로 떼어낸, &lt;code&gt;MADV_COLD&lt;/code&gt; 와 &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 힌트를
&lt;code&gt;madvise()&lt;/code&gt; 에 추가하는 패치의 여섯번째 버전입니다.&lt;/p&gt;
&lt;p&gt;일곱번째 버전도 빠르게 올라왔군요:
&lt;a href=&#34;https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190726023435.214162-1-minchan@kernel.org&lt;/a&gt;
단순히 mmotm 최신 버전 위로 리베이스 한 것 같네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-0021-generic-page-walk-and-ptdump&#34;&gt;[PATCH v9 00/21] Generic page walk and ptdump&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com&#34;&gt;https://lkml.kernel.org/r/20190722154210.42799-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x86 과 arm64 가 범용적 페이지 테이블 워킹을 하도록 했던 해치셋을 조금 더 확장한
버전입니다.  기존 대비 페이지 테이블 덤프 기능도 일반화 시킨게 차이군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v1-12-mmpage_idle-add-support-for-per-pid-page_idle-using-virtual-indexing&#34;&gt;[PATCH v1 1/2] mm/page_idle: Add support for per-pid page_idle using virtual indexing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190722213205.140845-1-joel@joelfernandes.org&#34;&gt;https://lkml.kernel.org/r/20190722213205.140845-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널은 &lt;code&gt;page_idle&lt;/code&gt; 이라는 인터페이스를 통해 특정 페이지의 액세스 여부를
파악할 수 있게 합니다.  저도 이걸 통해서 wss 를 재거나 하는데 쓸 수 있는
&lt;a href=&#34;https://github.com/sjp38/idle_page_tracking&#34;&gt;도구&lt;/a&gt;를 만들었었죠.&lt;/p&gt;
&lt;p&gt;문제는 이 인터페이스는 쓰기가 조금 복잡합니다.  PFN 을 가지고 페이지를 지목할
수 있게 되어 있기 때문에 특정 프로세스의 데이터 액세스를 추적하려면 해당
프로세스가 사용하고 있는 가상 메모리가 어떤 PFN 으로 매핑되어 있는지 알아야
하기 때문이죠.  달리 말하면 &lt;code&gt;page_idle&lt;/code&gt; 인터페이스가 글로벌하기 때문에 생기는
문제입니다.&lt;/p&gt;
&lt;p&gt;이 패치셋은 &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/page_idle&lt;/code&gt; 파일을 생성하고 이를 통해 프로세스 단위로
virtual page frame number (VFN) 을 통해 페이지 트랙킹을 할 수 있게 합니다.
이로써 이 인터페이스를 사용하는 유저스페이스 도구의 코드가 간단해질 뿐더러 보안
이슈도 좀 더 편리해지죠.  구글에선 내부적으로 이를 통해 heap profiler
(heapprofd) 를 좀 더 쉽게 만들었나보군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-mmpage_idle-simple-idle-page-tracking-for-virtual-memory&#34;&gt;[PATCH RFC] mm/page_idle: simple idle page tracking for virtual memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/156388286599.2859.5353604441686895041.stgit@buzz&#34;&gt;https://lkml.kernel.org/r/156388286599.2859.5353604441686895041.stgit@buzz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞에서 소개한 패치와 비슷하게 &lt;code&gt;page_idle&lt;/code&gt; 을 간편화 시키는 패치셋입니다.  특정
pid 의 모든 mapped page frame 의 access bit 을 한번에 clear 할 수 있게 합니다.
인터페이스는 &lt;code&gt;echo 6 &amp;gt; /proc/&amp;lt;pid&amp;gt;/clear_refs&lt;/code&gt; 같은 형태군요.  이후,
&lt;code&gt;/proc/&amp;lt;pid&amp;gt;/smaps&lt;/code&gt; 파일을 이용해 현재 idle 한 페이지들의 갯수를 알 수
있습니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc2&#34;&gt;Linux 5.3-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiiKRJprQDJqJzdcjdaGs73UtVPTM2+jOHWdMgu5Sp2HQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiiKRJprQDJqJzdcjdaGs73UtVPTM2+jOHWdMgu5Sp2HQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;두번째 rc 버전이 예정대로 나왔습니다.  변경사항이 많은 머지윈도우였던 만큼 rc2
도 꽤 수정사항이 많은 것 같습니다.  전체적으로 문서, arch 코드, 그리고 드라이버
쪽 수정사항이 대부분인 듯 하군요.&lt;/p&gt;
&lt;p&gt;앞선 rc1 릴리즈부터 이번 릴리즈 사이의 변경 사항의 시각화 비디오를 아래
링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/yxtq3-lhebQ&#34;&gt;https://youtu.be/yxtq3-lhebQ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.3-rc1</title>
      <link>/post/lkml_news_v5.3-rc1/</link>
      <pubDate>Thu, 11 Jul 2019 02:42:22 +0900</pubDate>
      <guid>/post/lkml_news_v5.3-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-v5-05-introduce-madv_cold-and-madv_pageout&#34;&gt;[PATCH v5 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190714233401.36909-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MADV_COLD&lt;/code&gt; 와 &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 을 구현하는 패치, 어느새 다섯번째 버전입니다.  큰
변경은 없는 것 같군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-03-make-working-with-compound-pages-easier&#34;&gt;[PATCH v2 0/3] Make working with compound pages easier&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20190721104612.19120-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 를 다루기 쉽게끔 &lt;code&gt;page_size()&lt;/code&gt;, &lt;code&gt;page_shift()&lt;/code&gt;, 그리고
&lt;code&gt;compound_nr()&lt;/code&gt; 이라는 세개의 helper 함수를 추가하고 이 함수들을 사용하게끔
기존 코드를 다듬는 패치셋입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PAGE_SIZE &amp;lt;&amp;lt; compound_order(page)&lt;/code&gt; 는 &lt;code&gt;page_size(page)&lt;/code&gt; 가,
&lt;code&gt;PAGE_SHIFT + compound_order(page)&lt;/code&gt; 는 &lt;code&gt;page_shift(page)&lt;/code&gt; 가, 그리고
&lt;code&gt;1 &amp;lt;&amp;lt; compound_order(page)&lt;/code&gt; 는 &lt;code&gt;compound_nr(page)&lt;/code&gt; 가 되는 것이죠.&lt;/p&gt;
&lt;h2 id=&#34;linux-53-rc1&#34;&gt;Linux 5.3-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/wiVjkTqzP6OppBuLQZ+t1mpRQC4T+Ho4Wg2sBAapKd--Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/wiVjkTqzP6OppBuLQZ+t1mpRQC4T+Ho4Wg2sBAapKd--Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 릴리즈 사이의 변경 사항을 시각화 한 비디오를 아래 링크에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/vx_BUvs00u8&#34;&gt;https://youtu.be/vx_BUvs00u8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2주일이 지나고 5.3 을 향한 첫번째 rc 릴리즈가 이루어졌습니다.&lt;/p&gt;
&lt;p&gt;이번 rc 릴리즈는 커밋 갯수로 볼 때 꽤 큰 릴리즈입니다.  4.12, 4.15, 4.19 때의
머지 윈도우와 비슷한 정도라는군요.  참고로 가장 큰 머지윈도우는 아직 4.9 의
것이었습니다.&lt;/p&gt;
&lt;p&gt;이번 머지 윈도우는 초기에 두개의 버그가 나와서 토발즈를 괴롭게 했다고 하는데요.
하나는 토발즈의 커널 컨피규레이션이 너무 간단하게 되어 있어 어떤 코드가 테스트
되지 않아 토발즈가 만들어낸 버그였고, 다른 하나는 패치 자체에 존재하는
버그였다고 합니다.  토발즈가 유발한 버그는 토발즈가 고쳤고, 두번째 버그를
일으킨 패치는 그냥 리버트 시켰다고 하는군요.&lt;/p&gt;
&lt;p&gt;그렇다고는 해도 이번 머지 윈도우의 후반부는 충분히 스무스하게 이뤄졌다고
합니다.&lt;/p&gt;
&lt;p&gt;그리고 이번 머지 윈도우에 이름을 올린 개발자는 총 1600명이었다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2</title>
      <link>/post/lkml_news_v5.2/</link>
      <pubDate>Mon, 01 Jul 2019 15:48:04 +0900</pubDate>
      <guid>/post/lkml_news_v5.2/</guid>
      <description>&lt;h2 id=&#34;patch-v5-0012-sara-a-new-stacked-lsm&#34;&gt;[PATCH v5 00/12] S.A.R.A. a new stacked LSM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com&#34;&gt;https://lkml.kernel.org/r/1562410493-8661-1-git-send-email-s.mesoraca16@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다양한 보안 측정을 위한 공용 인터페이스를 제공하는 스택 기반의 리눅스 보안
모듈입니다.  이름이 재밌네요. S.A.R.A 는 S.A.R.A is Another Recursive Acronym
의 약자라고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-52&#34;&gt;Linux 5.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whtW3FdruS-q2zehJPSan1SKtHoFHKX28A3J_1gfTFUMw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 릴리즈 중간엔 토발즈의 여행이 있었죠.  초반엔 예상 외로 큰 rc 릴리즈도
있었구요.  해서 이번주는 rc8 이 릴리즈 될지 5.2가 릴리즈 될지 저도 좀
궁금했는데, 최종적으로 5.2 릴리즈가 되었습니다.  토발즈도 rc8 을 릴리즈 할까
망설였다고 하네요.  하지만 그래야 할만한 문제가 전혀 없었기에 5.2를 릴리즈
했다고 합니다.&lt;/p&gt;
&lt;p&gt;더불어, 토발즈는 이번 여행 중에도 스쿠버다이빙을 즐겼나보네요.  더크 혼델이
찍은 사진도 공유했습니다:
&lt;a href=&#34;https://hohndel.name/palau-2019&#34;&gt;https://hohndel.name/palau-2019&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc7</title>
      <link>/post/lkml_news_v5.2-rc7/</link>
      <pubDate>Thu, 27 Jun 2019 15:35:12 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v7-04-thp-aware-uprobe&#34;&gt;[PATCH v7 0/4] THP aware uprobe&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com&#34;&gt;https://lkml.kernel.org/r/20190625235325.2096441-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uprobe&lt;/code&gt; 가 THP 로 받쳐지고 있는 코드에 적용되면 이 THP 는 regular page 로
쪼개집니다.  이 패치셋은 이 문제를 해결합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-06-enable-thp-for-text-section-of-non-shmem-files&#34;&gt;[PATCH v9 0/6] Enable THP for text section of non-shmem files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com&#34;&gt;https://lkml.kernel.org/r/20190625001246.685563-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어플리케이션의 텍스트 섹션을 THP 로 지원해 줌으로써 iTLB 미스를 줄이고 성능을
높이고자 하는 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc7&#34;&gt;Linux 5.2-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgL5GyQ93o=VyiymFPfw=Z0TGHEPBJrCtGSqFSW2Mhx8g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여전히 토발즈의 여행 탓에 릴리즈가 평소와 조금 다른 시간대에 이뤄졌습니다,
토발즈 자신의 시점으로는 평소와 같은 일요일 오후지만요.  아마도 아시아 쪽에
있는 것 같군요.  이번 릴리즈는 심지어 바다 위에서의 릴리즈라네요.  인터넷 안될
줄 알았는데 Dirk Hohndel 이 핸폰 핫스팟을 빌려줬다고 ;)&lt;/p&gt;
&lt;p&gt;이번 릴리즈는 고요했고, 별 문제 없었다고 합니다.  다음주엔 정식 릴리즈일까요?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc6</title>
      <link>/post/lkml_news_v5.2-rc6/</link>
      <pubDate>Mon, 17 Jun 2019 19:22:48 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-notformerge-05-extend-remote-madvise-api-to-ksm-hints&#34;&gt;[PATCH NOTFORMERGE 0/5] Extend remote madvise API to KSM hints&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com&#34;&gt;https://lkml.kernel.org/r/20190616085835.953-1-oleksandr@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 여러번 소개한 remote &lt;code&gt;madvise()&lt;/code&gt; 에 대한 관심이 많이 있는 것
같네요.
이 패치셋은 &lt;code&gt;MADV_MERGEABLE&lt;/code&gt;, &lt;code&gt;MADV_UNMERGEABLE&lt;/code&gt; 을 추가해서 KSM 힌트도
&lt;code&gt;madvise()&lt;/code&gt; 를 통해 줄 수 있게 합니다.&lt;/p&gt;
&lt;p&gt;논의를 위한 패치라 이대로 머지되진 않겠지만, 사용처가 많이 늘어날 것 같네요.&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc6&#34;&gt;Linux 5.2-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg+nPKhdn=vKSgJQkfOSGhauTO4jyt=0FH9cnM_QChDLw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;안타깝게도 기대와 달리 이번 릴리즈는 조용하지 않았습니다.  이번 5.2 개발을
위한 릴리즈 중 머지 윈도우와 rc1 을 제외하면 rc6 가 오히려 가장 많은 변화를
담고 있다는군요.  TCP SACK/fragmentation/mss 수정이 영향을 끼친 것들 중
하나라고 합니다.&lt;/p&gt;
&lt;p&gt;또, 이번에도 릴리즈가 빨라진 건 내일 토발즈가 비행기 타기 때문이랍니다.
컨퍼런스도 참여해야하고 휴양도 취하는 모양입니다.  이 때문에 rc7 은 조금 늦어질
수 있다는군요.  보통은 rc6 가 가장 안정화 되었을 무렵이라 이렇게 일정을
잡았다고 합니다만, 일이 복잡해졌네요.  자신에게 무슨 일이 있으면 Greg 이 대신할
거라고 합니다.&lt;/p&gt;
&lt;p&gt;뭐, 그렇다곤 해도 5.2 릴리즈 진행은 예정대로 진행될 것 같다고도 합니다.  이번
릴리즈의 주요 변경은 SPDX 제외하면 네트워킹, 셀프테스트 그리고 문서화였군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc5</title>
      <link>/post/lkml_news_v5.2-rc5/</link>
      <pubDate>Mon, 10 Jun 2019 10:17:29 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v3-05-thp-aware-uprobe&#34;&gt;[PATCH v3 0/5] THP aware uprobe&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com&#34;&gt;https://lkml.kernel.org/r/20190612220320.2223898-1-songliubraving@fb.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;uprobe 는 THP 로 되어있는 페이지를 쪼갭니다.  이로 인해 성능 향상 효과가
사라지죠.  이 패치셋은 uprobe 가 THP 를 인식하게 해서 이런 문제를 제거합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-introduce-madv_cold-and-madv_pageout&#34;&gt;[PATCH v2 0/5] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190610111252.239156-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기존에도 소개한 MADV_COLD 와 MADV_PAGEOUT 을 madvise() 에 추가하는 패치셋의
두번째 버전입니다.  이 패치셋을 ChromeOS 팀의 Brian Geffon 은 가져다가 탭이
백그라운드로 들어가고 45초 이상 그 상태를 유지하면 이 기능을 사용해서 페이지를
proactively swap out 시켰는데, 그 결과 tab 전환 속도가 25% 나 빨라졌다고
합니다.&lt;/p&gt;
&lt;h2 id=&#34;v3-rfc-patch-09-migrate-mode-for-node-reclaim-with-heterogeneous-memory-hierarchy&#34;&gt;[v3 RFC PATCH 0/9] Migrate mode for node reclaim with heterogeneous memory hierarchy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1560468577-101178-1-git-send-email-yang.shi@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1560468577-101178-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUMA node 로 pmem 을 취급할 수 있게 된 이후, 노드간 migration 을 보다
효율적으로 하기 위한 패치셋의 세번째 버전입니다.  LSFMM 에서 이에 대해 토의가
있었는데, 이번 버전은 그에 기반해 수정되었다고 하네요.&lt;/p&gt;
&lt;h2 id=&#34;linux-v52-rc5&#34;&gt;Linux v5.2-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whEQPvLpDbx+WR4Q4jf2FxXjf_zTX3uLy_6ZzHtgTV4LA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whEQPvLpDbx+WR4Q4jf2FxXjf_zTX3uLy_6ZzHtgTV4LA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난주는 토발즈의 여행 때문에 릴리즈가 평소보다 조금 빨리 이루어졌는데요,
이번에도 마찬가지입니다.  앞으로도 2주동안 여행ㅇ을 더 한다네요.&lt;/p&gt;
&lt;p&gt;어쨌든 5.2 가 가까워졌습니다.  어느덧 rc5군요.  rc4 대비 사이즈도 많이
줄어들었습니다.  SPDX 업데이트도 없는 덕에 diff 도 깔끔하게 되었구요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc4</title>
      <link>/post/lkml_news_v5.2-rc4/</link>
      <pubDate>Tue, 04 Jun 2019 10:49:00 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc4/</guid>
      <description>&lt;h2 id=&#34;patch-0015-slab-movable-objects-smo&#34;&gt;[PATCH 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190603042637.2018-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;전에도 RFC 패치셋은 여기서도 소개했었죠.  Slab 할당자에 할당받은 객체들의
이동이 가능하게끔 하는 패치셋의 정식 패치 버전이 나왔습니다.  변경된
인터페이스는 XArray 와 dcache 에 적용되는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v1-04-introduce-madv_cold-and-madv_pageout&#34;&gt;[PATCH v1 0/4] Introduce MADV_COLD and MADV_PAGEOUT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190603053655.127730-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;바로 지난주에도 소개한 external madvise 패치셋이 쪼개졌네요.  &lt;code&gt;MADV_COLD&lt;/code&gt; 와
&lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 두개의 새로운 advice 기능 추가 버전만 담은 패치셋입니다.  이게
더 일찍 머지될 가능성이 생겼군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc4&#34;&gt;Linux 5.2-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjm7FQxdF=RKa8Xe23CLNNpbGDOACewgo8e-hwDJ8TyQg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;메일을 받고 깜짝 놀랐습니다, 평소보다 빨랐기 때문이죠.  아시아를 여행중인가?
싶기도 했는데요, 그건 아니고 비행기 여행이 예정되어 있기 때문에 평소보다 일찍
했다는군요.&lt;/p&gt;
&lt;p&gt;지난 rc3 가 좀 작았던 탓인지 이번 rc4 는 덩치가 좀 큽니다.  하지만 그걸
감안하면 별 문제 없어 보인다고 하네요.&lt;/p&gt;
&lt;p&gt;이번 릴리즈에도 SPDX 변경이 많습니다.  변경 자체야 문제가 없긴 한데 diff 를
보기 귀찮게 하는게 조금은 짜증도 나는 것 같네요.&lt;/p&gt;
&lt;p&gt;어쨌든 이렇게 네번째 rc 가 릴리즈 되었습니다.  정식 버전도 많이 남지 않았네요!&lt;/p&gt;
&lt;p&gt;이번 릴리즈의 개발 과정을 시각화 한 비디오를 아래 URL 에서 볼 수 있습니다:
&lt;a href=&#34;https://youtu.be/OooOmr4Z8dw&#34;&gt;https://youtu.be/OooOmr4Z8dw&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc3</title>
      <link>/post/lkml_news_v5.2-rc3/</link>
      <pubDate>Tue, 28 May 2019 23:28:37 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-tipcorercu-012&#34;&gt;[PATCH tip/core/rcu 0/12]&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190530145204.GA28526@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190530145204.GA28526@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul E. McKenney 로부터의 RCU flavor consolidation 관련 추가 작업과 코드 정리를
위한 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-02-documentation-updates-for-v53&#34;&gt;[PATCH tip/core/rcu 0/2] Documentation updates for v5.3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190530145504.GA29820@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190530145504.GA29820@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 문서 업데이트를 담고 있는 패치셋입니다.  &lt;code&gt;rcuref&lt;/code&gt; 의 실제 예제와
&lt;code&gt;rcu_task_stall_timeout&lt;/code&gt; 의 정의에 대한 내용이 추가되었군요!&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-021-torture-test-updates-for-v53&#34;&gt;[PATCH tip/core/rcu 0/21] Torture-test updates for v5.3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190530151650.GA422@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190530151650.GA422@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 와 spinlock 등을 위해 사용되는 torture 테스트 업데이트를 담은 패치셋입니다.
무려 21개 패치네요!&lt;/p&gt;
&lt;h2 id=&#34;rfcv2-06-introduce-memory-hinting-api-for-external-process&#34;&gt;[RFCv2 0/6] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190531064313.193437-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190531064313.193437-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다른 어플리케이션의 virtual memory 에 대해 madvise() 를 할 수 있게 하고
&lt;code&gt;MADV_COLD&lt;/code&gt; 등의 힌트를 추가한 패치셋의 두번째 RFC 버전입니다.  LWN 에서도
소개되었고 관련 반응이 매우 뜨겁네요.  저도 매우 흥미롭게 보고 있습니다.
두번째 버전에서는 &lt;code&gt;MADV_COOL&lt;/code&gt; 은 빠졌습니다.  &lt;code&gt;MADV_COLD&lt;/code&gt; 와 &lt;code&gt;MADV_PAGEOUT&lt;/code&gt; 만
남았군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc3&#34;&gt;Linux 5.2-rc3&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CAHk-=wg1evGTxx-aSNHO+m5xSa1sc6fQe7Y8fH=_ruGcwMyfyA@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;상당히 고요한 한 주였고, 그로 인해 rc3 는 rc2 와 사이즈가 비슷했습니다.  이는
조금 이상한 일인데, 보통 rc2 이후로는 사람들이 드디어 문제를 파악하기 시작하고
rc3 주간에 수정을 하느라 조금은 떠들썩해 왔기 때문이랍니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc2</title>
      <link>/post/lkml_news_v5.2-rc2/</link>
      <pubDate>Tue, 21 May 2019 01:27:47 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc2/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v5-0016-slab-movable-objects-smo&#34;&gt;[RFC PATCH v5 00/16] Slab Movable Objects (SMO)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190520054017.32299-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190520054017.32299-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 소개한 Slab movable objects 패치셋의 다섯번째 버전입니다.  RFC
로는 아마도 마지막 버전이 될거라는군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0014-mmap_sem-range-locking&#34;&gt;[RFC PATCH 00/14] mmap_sem range locking&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190521045242.24378-1-dave@stgolabs.net&#34;&gt;https://lkml.kernel.org/r/20190521045242.24378-1-dave@stgolabs.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 LSFMM 에서 개인적으로 가장 기대했던 세션이 &lt;code&gt;mmap_sem&lt;/code&gt; 해결에 대한
세션이었습니다.  해당 세션에서는 예전부터 이야기가 나온 range locking 에
대해서도 이야기가 있었는데요, 이 패치셋은 이 range locking 을 사용한 &lt;code&gt;mmap_sem&lt;/code&gt;
문제 해결 시도를 다시 정리해 RFC 의 형태로 올린 것입니다.&lt;/p&gt;
&lt;p&gt;RFC 라는 데서 알 수 있겠지만 이 패치 자체에도 문제가 많지만, 코드 자체보다는 이
range locking 이라는 아이디어가 갖는 한계와 그에 대한 대책 등을 논의해 보고자
올린 것이라고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-07-introduce-memory-hinting-api-for-external-process&#34;&gt;[RFC 0/7] introduce memory hinting API for external process&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190520035254.57579-1-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190520035254.57579-1-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 여기서도 다룬 구글의 proactive swap 의 안드로이드 버전과 비슷한 일을 위한
패치셋입니다.  안쓰는 데이터 잔뜩 쥐고서는 스왑도 안당하고 있는 앱이 문제죠.
이런 데이터를 &lt;code&gt;madvise()&lt;/code&gt; 에 &lt;code&gt;MADVISE_COLD&lt;/code&gt; 와 &lt;code&gt;MADVISE_COOL&lt;/code&gt; 이라는 추가
힌트를 줘서 어플리케이션 레벨에서 이런 스왑하는게 좋을 데이터를 알려주는
형태입니다.  기존의 &lt;code&gt;MADVISE_WONTNEED&lt;/code&gt; 는 스왑을 하는게 아니라 걍 데이터를
버려버리기 때문에 이런 두개의 힌트를 추가한거죠.&lt;/p&gt;
&lt;p&gt;인공적 벤치마크가 아니라 수백명의 진짜 사용자를 통해 성능 실험을 했다고
하는데요, 구글에서 고용한 테스트 집단일까요?&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0014-provide-generic-top-down-mmap-layout-functions&#34;&gt;[PATCH v4 00/14] Provide generic top-down mmap layout functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190526134746.9315-1-alex@ghiti.fr&#34;&gt;https://lkml.kernel.org/r/20190526134746.9315-1-alex@ghiti.fr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;각 아키텍쳐별로 존재하는 중복 코드를 제거하기 위해 만들어진 범용 top-down mmap
을 위한 패치의 네번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-03-remove-tmem-and-code-depending-on-it&#34;&gt;[PATCH 0/3] remove tmem and code depending on it&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190527103207.13287-1-jgross@suse.com&#34;&gt;https://lkml.kernel.org/r/20190527103207.13287-1-jgross@suse.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xen 의 tmem 기능이 제거되었군요.  관련 코드를 리눅스 커널에서도 제거하는
패치셋입니다.  덕분에 cleancache 가 아예 사라질 모양입니다.  Cleancache 에
의존하는 GCMA 를 만들고 있는 제 입장에선 쇼킹한 일입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc2&#34;&gt;Linux 5.2-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgob1t2g9iQZCuZ8My39CY26xGb6nqjVhCtb1nTirsR2Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgob1t2g9iQZCuZ8My39CY26xGb6nqjVhCtb1nTirsR2Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일정대로 두번째 rc2 가 릴리즈 되었습니다.  이번엔 그야말로 특기할 만한 점이
없다는군요.  그나마 큰 변화는 SPDX 관련 변경들 뿐이었다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.2-rc1</title>
      <link>/post/lkml_news_v5.2-rc1/</link>
      <pubDate>Wed, 08 May 2019 10:22:05 +0900</pubDate>
      <guid>/post/lkml_news_v5.2-rc1/</guid>
      <description>&lt;h2 id=&#34;patch-mm-introduce-page_size&#34;&gt;[PATCH] mm: Introduce page_size()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190510181242.24580-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20190510181242.24580-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 등의 경우를 위해 페이지의 실제 크기를 구하려면 &lt;code&gt;PAGE_SIZE &amp;lt;&amp;lt; compound_order(page)&lt;/code&gt; 를 해야 하는게 짜증난 Matthew Wilcox 가 별도의 함수를
만들고 기존 코드들을 이 함수를 사용하도록 변경한 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0015-remove-order-argument-from-many-mm-functions&#34;&gt;[PATCH v2 00/15] Remove &amp;lsquo;order&amp;rsquo; argument from many mm functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190510135038.17129-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20190510135038.17129-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mm 쪽 함수들은 order 를 인자로 많이 받죠.  어차피 gfp_t 는 무조건 받으니까 이
타입의 상위 bit 을 order 목적으로 사용하자는 패치입니다.  이 패치의 장점은?
커널 텍스트 사이즈를 줄인다는 것입니다 :)&lt;/p&gt;
&lt;h2 id=&#34;maintainers--kernel-summit-2019-planning-kick-off&#34;&gt;Maintainer&amp;rsquo;s / Kernel Summit 2019 planning kick-off&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190513230643.GA4347@mit.edu&#34;&gt;https://lkml.kernel.org/r/20190513230643.GA4347@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해의 커널 서밋 / 메인테이너 서밋을 위한 안내 메일입니다.  작년엔 커널 서밋은
LPC 와, 메인테이너 서밋은 OSSEU 와 함께 열렸었죠.  올해는 둘 다 LPC 와 함께
합니다.&lt;/p&gt;
&lt;p&gt;메인테이너 서밋은 올해는 아예 30명으로 더욱 작게 모이는군요.&lt;/p&gt;
&lt;p&gt;커널 서밋 발표 주제는 5월 31일까지 받습니다.  발표주제 선정되면 LPC 티켓도
준다는군요!&lt;/p&gt;
&lt;h2 id=&#34;linux-52-rc1&#34;&gt;Linux 5.2-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgxi6fnxZ+p5Zdqr-i4s=xhOCBJL6s_RauYkjxM2CpXeA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgxi6fnxZ+p5Zdqr-i4s=xhOCBJL6s_RauYkjxM2CpXeA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.2 릴리즈를 위한 머지윈도우가 끝나고 rc1 버전이 릴리즈 되었습니다.  이번 머지
윈도우 중간에 토발즈의 개인적 여행이 있다고 했지만 다행히 잘 정리되었나보군요.
별다른 건은 없었다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1</title>
      <link>/post/lkml_news_v5.1/</link>
      <pubDate>Tue, 30 Apr 2019 14:16:49 +0900</pubDate>
      <guid>/post/lkml_news_v5.1/</guid>
      <description>&lt;h2 id=&#34;rfc-patch-v4-0015-slab-movable-objects-smo&#34;&gt;[RFC PATCH v4 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190430030746.26102-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 이 블로그에서도 공유한 SMO 패치의 새 버전입니다.  이번 버전은 dcache 쪽
코드를 많이 수정했군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-51&#34;&gt;Linux 5.1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whsbDxdapMJGvy9OkVSrKMsKRJBTrH-Qj-qTbkMUGnWUw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whsbDxdapMJGvy9OkVSrKMsKRJBTrH-Qj-qTbkMUGnWUw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.1 릴리즈입니다.  일요일 오후 릴리즈란 점은 평소와 같지만 평소보다 조금 늦은
시간이긴 했는데요, 오늘 갑자기 받은 풀 리퀘스트도 있었고, 이번 머지윈도우
기간에 졸업식에 참석해야 해서 조금 망설였다는군요.&lt;/p&gt;
&lt;p&gt;하지만 풀리퀘스트도 그렇게 크진 않고, 몇일 머지윈도우에 자리 비우는 정도는
어떻게든 할 수 있을거라 생각해서 5.1 릴리즈가 이뤄졌습니다!&lt;/p&gt;
&lt;p&gt;이제 5.2 머지윈도우의 시작이군요!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc7</title>
      <link>/post/lkml_news_v5.1-rc7/</link>
      <pubDate>Fri, 26 Apr 2019 11:02:24 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc7/</guid>
      <description>&lt;h2 id=&#34;re-lsfmm-preliminary-agenda--anyone--anyone--bueller-&#34;&gt;Re: [LSF/MM] Preliminary agenda ? Anyone &amp;hellip; anyone ? Bueller ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk&#34;&gt;https://lkml.kernel.org/r/83fda245-849a-70cc-dde0-5c451938ee97@kernel.dk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해의 LSFMM 스케쥴이 구글 문서로 공유되고 있었군요:
&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0&#34;&gt;https://docs.google.com/spreadsheets/d/1Z1pDL-XeUT1ZwMWrBL8T8q3vtSqZpLPgF3Bzu_jejfk/edit#gid=0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-proactive-memory-reclaim&#34;&gt;[LSF/MM TOPIC] Proactive Memory Reclaim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CALvZod4V+56pZbPkFDYO3+60Xr0_ZjiSgrfJKs_=Bd4AjdvFzA@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이제 LSFMM 이 얼마 안남았습니다만, 또하나의 주제 제안이 올라왔습니다.&lt;/p&gt;
&lt;p&gt;메모리 오버커밋으로 인해 direct reclaim 이 발생하고, 이는 latency sensitive
어플리케이션의 latency 를 크게 저하시키니, 시스템이 좀 더 적극적으로 memory
reclaim 을 해서 direct reclaim 을 최소화 시켜보자는 건데요.  잘 접근되지 않는
cold memory 를 추적해서 미리미리 reclaim 시키자는 겁니다.  챌린지는 물론 cold
memory 를 어떻게 잘 추적하냐는 거지요.  이와 함께 커널의 &lt;code&gt;idle_page_tracking&lt;/code&gt;
의 비효율성도 이야기 했습니다.&lt;/p&gt;
&lt;p&gt;이 주제로 올해 ASPLOS 에 논문도 냈군요: &lt;a href=&#34;https://youtu.be/aKddds6jn1s&#34;&gt;https://youtu.be/aKddds6jn1s&lt;/a&gt;
개인적으로 최근 연구하고 있는 주제와도 관계 있을 수 있어서 흥미롭습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-docsvm-add-documentation-of-memory-models&#34;&gt;[PATCH] docs/vm: add documentation of memory models&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1556101715-31966-1-git-send-email-rppt@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/1556101715-31966-1-git-send-email-rppt@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FLAT, DISCONTIG, SPARSE 등의 다양한 메모리 모델에 대한 문서화 추가 패치입니다.
처음 코드 들여다 볼 때 조금 헷갈리던 부분인데 잘 설명되었군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-lightning-round&#34;&gt;[LSF/MM TOPIC] Lightning round?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190425211906.GH4739@mit.edu&#34;&gt;https://lkml.kernel.org/r/20190425211906.GH4739@mit.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 LSFMM 에는 라이트닝 토크 세션이 있는데요, 거기서 block layer 에 암호화
레이어를 추가하는 방안에 대해 이야기 해보자는 Ted 의 의견입니다.  안드로이드
쪽에서 이걸 열심히 해보고 있나보군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-04-toolsvmslabinfo-add-fragmentation-output&#34;&gt;[PATCH 0/4] tools/vm/slabinfo: Add fragmentation output&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190426022622.4089-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190426022622.4089-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SLAB vs SLUB 토론 중 현재 slab allocator 의 fragmentation 정도를 알려주는
도구가 있으면 좋겠다는 이야기가 있었는데, 이를 위한 기능을 추가한 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc7&#34;&gt;Linux 5.1-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whvWQbP20g77U4QRXQDS5w+kf=V-P2QjMkgA-OwJJjHtg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whvWQbP20g77U4QRXQDS5w+kf=V-P2QjMkgA-OwJJjHtg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난번 rc6 가 거대했던 건 역시 풀 리퀘스트 타이밍 때문이었는지, 이번 rc7 은
다행히도 크기가 작은 편이라고 합니다.  네트워킹 쪽 변경이 좀 있고, 나머진
평소같이 아키텍쳐, 파일 시스템, 그외 드라이버 등의 변경이 내용을 차지했네요.
따라서 다음주엔 5.1이 예정대로 나올 것 같다고 합니다!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc6</title>
      <link>/post/lkml_news_v5.1-rc6/</link>
      <pubDate>Tue, 16 Apr 2019 23:02:17 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v12-0031-speculative-page-faults&#34;&gt;[PATCH v12 00/31] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com&#34;&gt;https://lkml.kernl.org/r/20190416134522.17540-1-ldufour@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;오랫만에 업데이트 된 SPF 패치셋으로, 이번 패치셋은 v5.1 위로 리베이스
되었습니다.  RCU 에서 Fine-grained reader-writer locking 으로 옮겼던 vma 보호를
다시 RCU 로 되돌린 게 눈에 띄는군요.  기존엔 패치셋만 공개했는데, 이젠 패치셋이
적용된 코드 트리를 github 으로도 제공합니다:
&lt;a href=&#34;https://github.com/ldu4/linux/tree/spf-v12&#34;&gt;https://github.com/ldu4/linux/tree/spf-v12&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-0011-provide-generic-top-down-mmap-layout-functions&#34;&gt;[PATCH v3 00/11] Provide generic top-down mmap layout functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr&#34;&gt;https://lkml.kernel.org/r/20190417052247.17809-1-alex@ghiti.fr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아키텍쳐별로 별도 구현을 하지 않고도 전체 mmap 레이아웃을 접근할 수 있게 해주는
범용 함수들을 구현하는 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-v51-rc6&#34;&gt;Linux v5.1-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wii=Ym24FWf7J2s1CEwCXU3hjVXeHSkV3A8X5iAj6eT8Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wii=Ym24FWf7J2s1CEwCXU3hjVXeHSkV3A8X5iAj6eT8Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;부활절이었군요.  어쨌건 토발즈는 그런 사소한 휴일에 릴리즈 일정을 바꾸진
않았습니다.&lt;/p&gt;
&lt;p&gt;이번 rc6 는 평소보다 조금 커다란 릴리즈였고, 때문에 토발즈도 다시 한번 꼼꼼히
살펴봤지만 그렇게까지 이상한 일은 아니라는군요.  4.18 때와 5.0 때도
이정도였답니다.&lt;/p&gt;
&lt;p&gt;네트워킹 쪽 변경이 좀 컸고, 드라이버, arch, selftests 와 perf 쪽에 변경이
있었으며, core mm, filesystem, scheduler, tracing 쪽에도 변경이 조금씩 있었다고
하는군요.&lt;/p&gt;
&lt;p&gt;어쨌건 그다지 이상한 건 없다고 합니다.  적어도 아직까진 5.1 을 향한 여정엔
문제가 없어 보이네요!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc5</title>
      <link>/post/lkml_news_v5.1-rc5/</link>
      <pubDate>Tue, 09 Apr 2019 17:33:01 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc5/</guid>
      <description>&lt;h2 id=&#34;v2-rfc-patch-09-another-approach-to-use-pmem-as-numa-node&#34;&gt;[v2 RFC PATCH 0/9] Another Approach to Use PMEM as NUMA Node&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1554955019-29472-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;본 블로그를 통해 지속적으로 소개하고 있는, PMEM as NUMA node 를 위한, 보다 나은
hotness 기반 page location 을 위한 패치셋입니다.
기존 코멘트에 기반해서 두번째 버전을 내놓았군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v3-0015-slab-movable-objects-smo&#34;&gt;[RFC PATCH v3 00/15] Slab Movable Objects (SMO)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org&#34;&gt;https://lkml.kernel.org/r/20190411013441.5415-1-tobin@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;최근 LWN 에서도 소개된 (&lt;a href=&#34;https://lwn.net/Articles/784964/&#34;&gt;https://lwn.net/Articles/784964/&lt;/a&gt;) 패치입니다.
Slab allocator 에서 할당된 object 가 free page 가운데에 박혀 있어 page 를
회수할 수 없는 fragmentation 이 발생합니다.
이 패치셋은 slab allocator 로 할당된 object 의 사용자에게 가능하면 해당 object
들을 움직여 달라고 callback 할 수 있게 함으로써 이 fragmentation 을 해결하려
합니다.&lt;/p&gt;
&lt;p&gt;앞의 버전에 비해서 변경된 건 LWN 기사에 달린 코멘트를 기반으로 한 개선들이군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-guarantee-natural-alignment-for-kmalloc&#34;&gt;[LSF/MM TOPIC] guarantee natural alignment for kmalloc()?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/790b68b7-3689-0ff6-08ae-936728bc6458@suse.cz&#34;&gt;https://lkml.kernel.org/r/790b68b7-3689-0ff6-08ae-936728bc6458@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSFMM 을 위한 늦은 주제네요.
kmalloc() 이 2의 승수 크기 얼라인먼트를 지키도록 하는 패치에 대해서 논의하고
싶어합니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc5&#34;&gt;Linux 5.1-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjvcuyCQGnfOhooaL1H4H63qXO=xgo+9yncSOG=eK+kbA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjvcuyCQGnfOhooaL1H4H63qXO=xgo+9yncSOG=eK+kbA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다섯번째 rc 커널입니다.  v5.1이 얼마 남지 않았군요.
이번 릴리즈에선 대부분 드라이버 쪽 변경이 있었으며, 딱히 이상하거나 수상한
움직임은 없다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc4</title>
      <link>/post/lkml_news_v5.1-rc4/</link>
      <pubDate>Sun, 07 Apr 2019 23:17:55 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc4/</guid>
      <description>&lt;p&gt;Linux v5.1-rc3 릴리즈 후 Linux v.5.1-rc4 릴리즈 사이 기간에 LKML 에 올라온
흥미로운 메일들을 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v8-0020-convert-x86--arm64-to-use-generic-page-walk&#34;&gt;[PATCH v8 00/20] Convert x86 &amp;amp; arm64 to use generic page walk&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com&#34;&gt;https://lkml.kernel.org/r/20190403141627.11664-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;전에 이 블로그에도 공유했던, &lt;code&gt;walk_page_range()&lt;/code&gt; 함수가 커널에서 사용하는
페이지 테이블은 지원하지 않아서 아키텍쳐별로 page table walk 기능을 구현한 걸
&lt;code&gt;walk_page_range()&lt;/code&gt; 의 개선을 통해 가능하게 하고자 하는 패치의 여덟번째
버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-add-vm-event-for-page-cache-miss&#34;&gt;[PATCH] mm: add vm event for page cache miss&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com&#34;&gt;https://lkml.kernel.org/r/1554185720-26404-1-git-send-email-laoar.shao@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page cache miss 로 인해 사용중인 데이터베이스에 레이턴시가 증가하는 문제가
있는데, 기존 커널에는 페이지 캐시 미스 카운트를 세는 기능이 없기 때문에 만들어
봤다고 합니다.  반응은&amp;hellip; 별로 좋지 않군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0025-accelerate-page-migration-and-use-memcg-for-pmem-management&#34;&gt;[RFC PATCH 00/25] Accelerate page migration and use memcg for PMEM management&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190404020046.32741-1-zi.yan@sent.com&#34;&gt;https://lkml.kernel.org/r/20190404020046.32741-1-zi.yan@sent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 이 블로그에서도 소개한대로 PMEM 을 좀 많이 느린 NUMA node 로 다룰 수 있게
되었습니다.  따라서 적절한 페이지 마이그레이션이 중요해지죠.  리눅스 자체 page
replacement policy 를 이용해 page migration 을 하는 방법이 제기되었지만 그
방법은 충분한 쓰루풋을 제공하지 않고 너무 가끔 replacement 가 일어나 hot / cold
를 제대로 구분하기 어려운 문제가 있다고 이 메일은 주장하고, 자신이 생각하는
해결책을 RFC 의 형태로 제시하고 있습니다.&lt;/p&gt;
&lt;p&gt;실제 기존 방식의 마이그레이션 쓰루풋과 자신이 제안한 방식의 쓰루풋을 비교하면서
설명하는데, 재밌네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-tipcorercu-04-forbid-static-srcu-use-in-modules&#34;&gt;[PATCH RFC tip/core/rcu 0/4] Forbid static SRCU use in modules&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190402142816.GA13084@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190402142816.GA13084@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;로드될 수 있는 모듈 내에서의 &lt;code&gt;DEFINE_SRCU()&lt;/code&gt; 와 &lt;code&gt;DEFINE_STATIC_SRCU()&lt;/code&gt; 사용을
급지하는 패치셋입니다.  로드 되는 모듈에서 이걸 사용하면 메모리 회수가 안될
것이기 때문이죠.  대신 동적으로 메모리 할당받고 초기화 해서 쓰고, 모듈 exit 될
때 제대로 메모리 해제 시키라고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc4&#34;&gt;Linux 5.1-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=widsb0vN7kqt8ATfNuNW6a54JpKjc6W0XPjt5=LW7UeGQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=widsb0vN7kqt8ATfNuNW6a54JpKjc6W0XPjt5=LW7UeGQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 릴리즈는 초반 rc 들이 좀 커서 걱정을 끼쳤었는데, rc4 는 다행히도
작아졌다고 합니다.  딱히 별다른 게 없다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc3</title>
      <link>/post/lkml_news_v5.1-rc3/</link>
      <pubDate>Tue, 26 Mar 2019 08:53:41 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc3/</guid>
      <description>&lt;h2 id=&#34;patch-tipcorercu-04-documentation-updates-for-v52&#34;&gt;[PATCH tip/core/rcu 0/4] Documentation updates for v5.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190326230408.GA17069@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;v5.2 에 머지될 목적의 RCU 문서화 업데이트 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-018-miscellaneous-fixes-for-v52&#34;&gt;[PATCH tip/core/rcu 0/18] Miscellaneous fixes for v5.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190326231253.GA18343@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;v5.2 를 위한 RCU 의 다양한 업데이트 패치셋입니다.  rcu 를 위한 메일링 리스트도
추가되었군요.  &lt;a href=&#34;mailto:rcu@vger.kernel.org&#34;&gt;rcu@vger.kernel.org&lt;/a&gt; 입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-09-torture-test-updates-for-v52&#34;&gt;[PATCH tip/core/rcu 0/9] Torture-test updates for v5.2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20190326233054.GA21523@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;v5.2 를 위한 torture test 의 업데이트 패치셋입니다.  LKMM 이라던지 formal
verification 도 많은 발전이 있었지만, torture test 도 없어질 순 없겠죠.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc3&#34;&gt;Linux 5.1-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiHmEqxBvp3dfTqOut+NHzbNaip=BrnBO48SCTfnApLRg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiHmEqxBvp3dfTqOut+NHzbNaip=BrnBO48SCTfnApLRg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;한국시간으로 만우절 아침, 5.1 을 위한 세번째 rc 버전이 릴리즈 되었습니다.  이번
릴리즈는 다른 rc3 들에 비해 조금 많은 변화가 있었기에 좋은 현상은 아니지만
그렇다 해도 아직 rc3 정도니까 큰 문제는 아닐 거라 하는군요.  전체적으로 코드가
추가된 것보다 제거된 게 많은 것 같습니다.
어쨌건 앞으로는 점점 변경양이 줄었으면 좋겠다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc2</title>
      <link>/post/lkml_news_v5.1-rc2/</link>
      <pubDate>Tue, 19 Mar 2019 12:11:11 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v5-0019-convert-x86--arm64-to-use-generic-page-walk&#34;&gt;[PATCH v5 00/19] Convert x86 &amp;amp; arm64 to use generic page walk&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com&#34;&gt;https://lkml.kernel.org/r/20190321141953.31960-1-steven.price@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;커널이 &lt;code&gt;walk_page_range()&lt;/code&gt; 함수를 제공하긴 하지만 이 함수는 커널에 의해
사용되는 페이지 테이블은 볼수가 없기 때문에 각 아키텍쳐별로 페이지 테이블
순회를 위한 기능을 별도로 만들어 사용하고 있습니다.&lt;/p&gt;
&lt;p&gt;이 패치셋은 &lt;code&gt;walk_page_range()&lt;/code&gt; 가 커널의 페이지 테이블을 만질 수 있도록
확장함으로써 그런 불필요한 아키텍쳐별 파편화를 줄이려 합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-07-psi-pressure-stall-monitors-v6&#34;&gt;[PATCH v6 0/7] psi: pressure stall monitors v6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20190319235619.260832-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시스템이 어떤 부분의 pressure 를 받는지 쉽게 확인하기 위한 pressure stall
monitor 구현 패치의 여섯 번째 버전입니다.  안드로이드는 이미 이 기능을 적용해서
모바일 기기의 메모리 부족 문제를 해결하고 있다는군요.&lt;/p&gt;
&lt;p&gt;파일 기반의 기존 인터페이스는 자주 들여다보면 오버헤드가 있기 때문에 유저가
&lt;code&gt;poll()&lt;/code&gt; 할 수 있는 형태로 인터페이스를 개선한 것 같습니다.&lt;/p&gt;
&lt;p&gt;이 패치 기반으로 안드로이드의 low memory killer daemon 을 개선했고, 결과 false
positive memory pressure 를 vmpressure signal 대비 약 10배까지 줄일 수 있었다고
합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-remove-support-for-deprecated-pf-and-pf-in-vsprintf&#34;&gt;[PATCH 0/2] Remove support for deprecated %pf and %pF in vsprintf&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190322132108.25501-1-sakari.ailus@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/20190322132108.25501-1-sakari.ailus@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;함수 포인터의 프린트를 위해 사용되는 프린트 포맷 지시어인 %pf 와 %pF 를 거의
같은 일을 하면서 ia64, ppc64, parisc64 아키텍쳐에선 좀 더 많은 일을 해주는 $ps
와 %pS 로 대체하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-010-another-approach-to-use-pmem-as-numa-node&#34;&gt;[RFC PATCH 0/10] Another Approach to Use PMEM as NUMA Node&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1553316275-21985-1-git-send-email-yang.shi@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1553316275-21985-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 이 블로그에서도 소개한 바 있는 PMEM 을 매우 느린 NUMA node 로 쓰는 패치가
머지되었습니다.
&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c221c0b0308fd01d9fb33a16f64d2fd95f8830a4&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c221c0b0308fd01d9fb33a16f64d2fd95f8830a4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;그럼 이렇게 평범한 NUMA node 로 인식되는 PMEM 을 어떻게 잘 쓸 것인가? 하는
문제가 남아있는데, 이 패치셋은 이를 위한 패치입니다.&lt;/p&gt;
&lt;p&gt;기본적으로 DRAM 을 먼저 쓰게 만들고, 사용자가 기존의 방식대로 명시적으로 NUMA
인터페이스를 사용해 PMEM 을 요청하면 할당해 줍니다.  그리고, 자주 접근되는
페이지는 vma 단위로 조사해서 DRAM 으로 migrate 시킵니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc2&#34;&gt;Linux 5.1-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgg_PRWs3a6u2gnFLQjhxOJcrFkqqWVnLw60eQAwD-DNw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgg_PRWs3a6u2gnFLQjhxOJcrFkqqWVnLw60eQAwD-DNw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;두번째 rc 입니다.  아직 rc 라고 하기엔 고칠 문제도 찾지 못한 상태라고 할 수
있겠지만요.  따라서 토발즈는 열심히 테스트 해달라고 하네요.&lt;/p&gt;
&lt;p&gt;어쨌건 이번 릴리즈도 크게 특이한 사항은 없다고 합니다, 다만 이번 수정사항 중
2/3 가량이 tools/ 쪽에 집중되었다고 하네요.  perf 쪽의 변경 때문이라고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.1-rc1</title>
      <link>/post/lkml_news_v5.1-rc1/</link>
      <pubDate>Mon, 04 Mar 2019 13:07:30 +0900</pubDate>
      <guid>/post/lkml_news_v5.1-rc1/</guid>
      <description>&lt;p&gt;Linux v5.0 릴리즈 (2019-03-03) 부터 v5.1-rc1 릴리즈 (2019-03-17) 사이의 머지
윈도우 기간 LKML 에 올라온 흥미로운 메일들을 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;cma-allocation-failure&#34;&gt;CMA allocation failure&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com&#34;&gt;https://lkml.kernel.org/r/57e0bc63-0be9-498b-8ffc-3b073e01e299@email.android.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;제게도 GCMA 레이턴시 관련 문의를 보냈던 분인데, LKML 에도 관련 도움을 요청하는
메일을 보냈군요.&lt;/p&gt;
&lt;p&gt;왜 CMA 가 할당에 실패하는지 이유를 묻는 메일인데요, 답은 없습니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-using-xarray-to-manage-the-vma&#34;&gt;[LSF/MM TOPIC] Using XArray to manage the VMA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/7da20892-f92a-68d8-4804-c72c1cb0d090@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MM 의 오랜 숙원 중 하나는 &lt;code&gt;mmap_sem&lt;/code&gt; 으로 인한 확장성 문제 해결이죠.  기존의 RB
tree 대신 XArray 를 사용하는 것으로 새로운 시도를 시작해 보는건 어떨지 LSFMM
에서 토의해보자는, speculative page fault 의 최근 메인테이너인 Laurent 의
메일입니다.
곧바로 XArray 메인테이너인 Matthew 의 답장이 오는군요.
꼭 해보려는 의지가 강력해 보입니다.&lt;/p&gt;
&lt;h2 id=&#34;mmcmac-high-latency-for-cma-allocation&#34;&gt;mm/cma.c: High latency for cma allocation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/SG2PR02MB3098E44824F5AA69BC04F935E8470@SG2PR02MB3098.apcprd02.prod.outlook.com&#34;&gt;https://lkml.kernel.org/r/SG2PR02MB3098E44824F5AA69BC04F935E8470@SG2PR02MB3098.apcprd02.prod.outlook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이어지는 CMA 레이턴시에 대한 문의입니다.  제게 GCMA 레이턴시에 대해 온 문의에
대해서는 제 실험 환경을 보내주고 그쪽 환경에서 돌려본 후 결과를 알려달라
했는데, 아직 답이 없군요.
좀 더 자세한 분석 결과를 달라는 Michal 의 답변이 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-51-rc1&#34;&gt;Linux 5.1-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wj1c_Tb-wwM6qaPLdggXtW3rOh1JzYUOs+O7PsHt-=+jg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wj1c_Tb-wwM6qaPLdggXtW3rOh1JzYUOs+O7PsHt-=+jg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;v5.1 머지 윈도우가 종료되고 v5.1-rc1 이 릴리즈 되었습니다.  이번 릴리즈도 크게
다른 건 없고 매우 평범했다고 합니다.  좋은 징조인데요, 변경사항의 60%를 차지한
드라이버 가운데 habanalab 의 AI 가속기 칩 드라이버를 조금 특별한 변경사항으로
토발즈는 꼽네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0</title>
      <link>/post/lkml_news_v5.0/</link>
      <pubDate>Mon, 25 Feb 2019 13:16:39 +0900</pubDate>
      <guid>/post/lkml_news_v5.0/</guid>
      <description>&lt;p&gt;Linux v5.0-rc8 릴리즈 (2019-02-24) 부터 Linux v5.0 릴리즈 (2019-03-03) 사이
기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-v5-allow-persistent-memory-to-be-used-like-normal-ram&#34;&gt;&lt;code&gt;[PATCH 0/5] [v5] Allow persistent memory to be used like normal RAM&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20190225185727.BCBD768C@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 몇번 소개했던, persistent memory 를 좀 많이 느린 numa node 인 것처럼 해서
시스템이 사용할 수 있게 하는 접근법의 패치 다섯번째 버전입니다.
이제 개선은 어느정도 된 것 같으니 슬슬 머지되야하지 않겠냐고 주장하는군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-v50&#34;&gt;Linux v5.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;마침내 5.0 릴리즈입니다!  제 랩톱에도 바로 받아다가 설치했습니다! ;)  물론 5.0
릴리즈에 특별한 기능 추가라던지 하는건 없고 그저 시간이 꽤 지나서 이렇게
된거라곤 하지만 어쨌든 느낌은 새롭군요.&lt;/p&gt;
&lt;p&gt;rc8 릴리즈 후에도 양은 크게 줄었지만 패치가 좀 있었습니다.  그렇게 고쳐진 버그
중 하나로는 uninitialized variable 문제가 있었는데, gcc 가 알아서 초기화를
시켜주다보니 워닝이 안떴었군요.  물론 다른 컴파일러를 사용하면 문제가 생기게
되니 무쓸모한 변경은 아니었다 자평합니다.&lt;/p&gt;
&lt;p&gt;어쨌든, 이렇게 v5.0 커널이 정식으로 나왔고, v5.1 을 향한 여정이 시작되었습니다!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc8</title>
      <link>/post/lkml_news_v5.0-rc8/</link>
      <pubDate>Tue, 19 Feb 2019 08:33:37 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc8/</guid>
      <description>&lt;p&gt;Linux v5.0-rc7 릴리즈 (2019년 2월 17일) 부터 v5.0-rc8 릴리즈 (2019년 2월 24일)
사이의 기간에 LKML 에 올라온 흥미로운 메일들을 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-attend-mm-track-numa-thp-locality-reclaim&#34;&gt;[LSF/MM ATTEND] MM track: NUMA, THP locality, reclaim&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190218143203.GW9565@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20190218143203.GW9565@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mel Gorman 의 LSF/MM 참여 메일입니다.  NUMA remote THP vs NUMA local non-THP,
NUMA, 메모리 계층 그리고 디바이스 메모리, NUMA rebalancing 과 메모리 reclaim 에
참여하고 싶다고 이야기 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-lsfmm-attend-read-only-mapping-of-program-text&#34;&gt;&lt;code&gt;[LSF/MM TOPIC ][LSF/MM ATTEND] Read-only Mapping of Program Text&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/379F21DD-006F-4E33-9BD5-F81F9BA75C10@oracle.com&#34;&gt;https://lkml.kernel.org/r/379F21DD-006F-4E33-9BD5-F81F9BA75C10@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 를 활용해 read-only text 를 매핑함으로써 성능을 높이려는 시도를 해오고
있는데, 하나의 base page 를 먼저 읽고 이어서 추가적인 page 를 읽는게 진짜로
사용될지 모르는 readahead 때문에 의논을 해보고 싶다고 하네요.
또, 파일시스템에게 컨텐츠가 큰 청크를 필요로 할지 알려주는 인터페이스가 있으면
좋겠다는군요.&lt;/p&gt;
&lt;h2 id=&#34;linux-v50-rc8&#34;&gt;Linux v5.0-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgtNhecfn_nOi0Yuy7XQSswfozz0CvRMn0WsQhk0YZfyw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgtNhecfn_nOi0Yuy7XQSswfozz0CvRMn0WsQhk0YZfyw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rc8 이 나올지 바로 v5.0 이 나올지 궁금했는데, 결국 v5.0 릴리즈는 한주 더
미뤄지게 되었습니다.  rc7 때보다도 많은 패치가 이번 기간에 들어왔다는군요.&lt;/p&gt;
&lt;p&gt;그렇다고 아주 특별한 변경이 있었던 건 아니지만 그렇다고 서두를 것도 없으므로
그냥 rc8 을 릴리즈하기로 결정했다고 하네요.&lt;/p&gt;
&lt;p&gt;어쨌건 다음주에는 분명 v5.0 이 나오겠죠!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc7</title>
      <link>/post/lkml_news_v5.0-rc7/</link>
      <pubDate>Mon, 18 Feb 2019 12:30:24 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc7/</guid>
      <description>&lt;h2 id=&#34;patch-v15-0018-block-support-multi-page-bvec&#34;&gt;[PATCH V15 00/18] block: support multi-page bvec&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190215111324.30129-1-ming.lei@redhat.com&#34;&gt;https://lkml.kernel.org/r/20190215111324.30129-1-ming.lei@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시스템의 RAM 이 커지고 huge page 가 널리 사용되면서 물리적으로 연속된
페이지들의 I/O 가 흔해지고 있습니다.  이를 위해 &lt;code&gt;struct bio_bvec&lt;/code&gt; 이 물리적으로
연속된 여러 페이지를 다룰 수 있게 해주는 패치의 15번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;memory-management-facing-a-400gpbs-network-link&#34;&gt;Memory management facing a 400Gpbs network link&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/01000168e2f54113-485312aa-7e08-4963-af92-803f8c7d21e6-000000@email.amazonses.com&#34;&gt;https://lkml.kernel.org/r/01000168e2f54113-485312aa-7e08-4963-af92-803f8c7d21e6-000000@email.amazonses.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해 내로 400Gbps 인피니밴드가 가능해질 거라고 합니다!  이건 프로세서-메모리
사이의 밴드위쓰를 넘길 수 있는 스피드죠!  단일 하드웨어 쓰레드는 20GB/s 이기
때문입니다.  이 재미있는 트렌드를 커널은 어떻게 대처해야 할 것인가 하는
메일입니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-generating-physically-contiguous-memory&#34;&gt;[LSF/MM TOPIC] Generating physically contiguous memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CEDBC792-DE5A-42CB-AA31-40C039470BD0@nvidia.com&#34;&gt;https://lkml.kernel.org/r/CEDBC792-DE5A-42CB-AA31-40C039470BD0@nvidia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GPU, FPGA, NIC, RDMA 같은 고성능 디바이스들에게 있어 물리적 연속 메모리는 매우
중요합니다.  이 디바이스들은 내부적으로 고밀도의 computation 을 하는데 tlb miss
와 이어지는 page table walk 로 인한 성능 문제가 CPU 에 비해서도 매우 크기
때문이라는군요.&lt;/p&gt;
&lt;p&gt;Boot time reservation 도, THP 도 유연성이 부족하기 때문에 새로운 패치도 만들고,
관련해서 LSF/MM 에서 논의해 보자는군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v4-0017-kunit-introduce-kunit-the-linux-kernel-unit-testing-framework&#34;&gt;[RFC v4 00/17] kunit: introduce KUnit, the Linux kernel unit testing framework&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190214213729.21702-1-brendanhiggins@google.com&#34;&gt;https://lkml.kernel.org/r/20190214213729.21702-1-brendanhiggins@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널은 다양한 테스트를 가지고 있지만 unit test framework 은 아직 없었죠.
그걸 만든 패치입니다!&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc7&#34;&gt;Linux 5.0-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgvF18PqBch4=56DFwCamYpy+owngTZXGnjVbFgKq467g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgvF18PqBch4=56DFwCamYpy+owngTZXGnjVbFgKq467g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;휴일을 끼고 시작된 머지 윈도우로 이래저래 걱정도 있던 5.0 릴리즈들이었습니다만
이번 rc 릴리즈는 정말 별다른 게 없네요.  매우 고요한 릴리즈였다고 합니다.
아마도 다음주에 5.0 정식 릴리즈가 될 걸로 보이네요!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc6</title>
      <link>/post/lkml_news_v5.0-rc6/</link>
      <pubDate>Mon, 11 Feb 2019 12:40:20 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-v4-11-psi-introduce-psi-monitor&#34;&gt;[PATCH v4 1/1] psi: introduce psi monitor&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190206023446.177362-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20190206023446.177362-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시스템의 메모리 부족 등의 현상이 어떻게 일어나고 있는지 쉽게 파악할 수 있는
장치를 추가하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-address-space-isolation-inside-the-kernel&#34;&gt;[LSF/MM TOPIC] Address space isolation inside the kernel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190207072421.GA9120@rapoport-lnx&#34;&gt;https://lkml.kernel.org/r/20190207072421.GA9120@rapoport-lnx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스의 어드레스 스페이스 기능은 유저스페이스 프로그램들이 서로에게 영향을
끼치지 못하게 해줘서 컨테이너 등에 쓰이고 있죠.  하지만 커널은 공유하기 때문에
커널 버그는 여전히 영향을 끼칠 수 있습니다.  커널 코드도 어드레스 스페이스를
어느정도 인식하고 코드 분류를 시킴으로써 그 문제를 줄여보자는 LSF/MM 토론 주제
제안입니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-2019-call-for-proposals-updated&#34;&gt;LSF/MM 2019: Call for Proposals (UPDATED!)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/4f5a15c1-4f9e-acae-5094-2f38c8eebd96@kernel.dk&#34;&gt;https://lkml.kernel.org/r/4f5a15c1-4f9e-acae-5094-2f38c8eebd96@kernel.dk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해 LSF/MM 에는 BPF 트랙이 있을 거라는군요.  이에 따른 공지 업데이트입니다.
BPF 의 상승세가 올해도 계속될 것 같군요!&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-bpf-for-block-devices&#34;&gt;[LSF/MM TOPIC] BPF for Block Devices&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/40D2EB06-6BF2-4233-9196-7A26AC43C64E@raithlin.com&#34;&gt;https://lkml.kernel.org/r/40D2EB06-6BF2-4233-9196-7A26AC43C64E@raithlin.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSF/MM 에 BPF 라면 당연히 block device 와 BPF 의 결합을 이야기 해야하지
않겠냐는 LSF/MM 토론 제안입니다.  Computational Storage 개념을 이야기 하는데요,
I/O 레이어에서 간단한 연산을 처리해 줌으로써 성능을 높이자는 거죠.  그러기 위한
연산 요청에 BPF 를 쓰자는 것 같습니다.  말 되네요!&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc6&#34;&gt;Linux 5.0-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whuSY_-hAU8ugVR7a=xz3uZeRrAPdhsoMZHmZ_7Qc49YQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whuSY_-hAU8ugVR7a=xz3uZeRrAPdhsoMZHmZ_7Qc49YQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이제 리눅스 5.0 정식 릴리즈가 얼마 남지 않았네요, 여섯번째 rc 가 나왔습니다.
그런데 이번 rc 는 토발즈가 바랬던 것보다는 조금 변경사항이 많았군요.  대부분
네트워킹 쪽 변경이었다고 합니다만, 그래도 나머지는 큰 문제 없어 보인다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc5</title>
      <link>/post/lkml_news_v5.0-rc5/</link>
      <pubDate>Mon, 04 Feb 2019 09:18:08 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc5/</guid>
      <description>&lt;h2 id=&#34;lsfmm-topic-page-flags-can-we-free-up-space-&#34;&gt;[LSF/MM TOPIC] Page flags, can we free up space ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190122201744.GA3939@redhat.com&#34;&gt;https://lkml.kernel.org/r/20190122201744.GA3939@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널의 page 정보는 &lt;code&gt;PG_&lt;/code&gt; 로 시작하는 플래그를 사용해 현재 상태를
알리는데요, 이걸 저장하는데 사용되는 공간을 더 줄일 수 있을지에 대한 논의를
해보고 싶다는 LSF/MM 제안입니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-use-nvdimm-as-numa-node-and-numa-api&#34;&gt;[LSF/MM TOPIC] Use NVDIMM as NUMA node and NUMA API&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/f0d66b0c-c9b6-a040-c485-1606041a70a2@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/f0d66b0c-c9b6-a040-c485-1606041a70a2@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;알리바바에서는 NVDIMM 을 클라우드 고객들에게 싼 비용의 메모리로 제공하려
한다는군요.  이를 위해 여러 필요성이 있고, 현재 NUMA API 로는 모든 경우를
커퍼하기가 어렵다고 합니다.  때문에, LSFMM 에서 어떤 use-case 와 needs 가
있는지 공유하고 더 나은 NUMA API 에 대해 논의하고자 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-memory-reclaim-with-numa-rebalancing&#34;&gt;[LSF/MM TOPIC] memory reclaim with NUMA rebalancing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190130174847.GD18811@dhcp22.suse.cz&#34;&gt;https://lkml.kernel.org/r/20190130174847.GD18811@dhcp22.suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NVDIMM 을 싸고 무척 느린 NUMA 노드로 인식되고 사용되게끔 하고자 하는 노력들이
있습니다.  이게 완벽하게 동작하려면 hot page 는 가깝고 빠른 NUMA node 에, cold
page 는 멀고 느린 NUMA node 에 위치되도록 커널이 조정해줄 필요가 있겠죠.  NUMA
balancing 기능이 있긴 하지만 cold page 를 멀고 느린 NUMA node 로 보내는 기능은
현재까지는 없습니다.  이에 대한 논의를 LSF/MM 에서 시작해 보자고 하네요.&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc5&#34;&gt;Linux 5.0-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjoGOgYFCbpazT2Fyv=zHaiagU5PhmiAfrZ5DOmE-y0rg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjoGOgYFCbpazT2Fyv=zHaiagU5PhmiAfrZ5DOmE-y0rg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아무래도 이번 릴리즈들은 머지 윈도우가 길고 연휴와 함께 있었던 탓인지
전체적으로 뭔가 변경사항이 줄지 않는듯 보였는데, 드디어 변경사항이 줄어들고
있다고 합니다.  좋은 신호죠.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc3</title>
      <link>/post/lkml_news_v5.0-rc3/</link>
      <pubDate>Mon, 21 Jan 2019 09:21:14 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc3/</guid>
      <description>&lt;h2 id=&#34;lsfmm-2019-call-for-proposals&#34;&gt;LSF/MM 2019: Call for Proposals&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/51b4b263-a0f2-113d-7bdc-f7960b540929@kernel.dk&#34;&gt;https://lkml.kernel.org/r/51b4b263-a0f2-113d-7bdc-f7960b540929@kernel.dk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해의 LSF/MM 을 위한 발표 모집입니다.  올해는 푸에르토리코에서 4월 30일부터
5월 2일까지 열리는군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-numa-memory-hierarchy-and-device-memory&#34;&gt;[LSF/MM TOPIC] NUMA, memory hierarchy and device memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190118174512.GA3060@redhat.com&#34;&gt;https://lkml.kernel.org/r/20190118174512.GA3060@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSF/MM 을 위한 발표 지원입니다.
NUMA API 가 다계층 메모리에 적용될 때의 단점에 대해서 이야기 해보겠다는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0022-increase-success-rates-and-reduce-latency-of-compaction-v3&#34;&gt;[PATCH 00/22] Increase success rates and reduce latency of compaction v3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190118175136.31341-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20190118175136.31341-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mel Gorman 의 compaction 개선 패치셋 세번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc3&#34;&gt;Linux 5.0-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whS=6Z_UxzoMjLANupOk3u-8ycERLPnaZxShMTviW0jkQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whS=6Z_UxzoMjLANupOk3u-8ycERLPnaZxShMTviW0jkQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.0 세번째 릴리즈입니다.  지난 릴리즈에서 여행 중이지만 항상 그렇듯 일요일
릴리즈를 하려 한다고 했는데, 이번에도 성공적이군요.  더불어 어디 여행 중인지도
나왔습니다, LCA 2019 여행 중이었군요.  여담이지만 올해 LCA 도 재밌는 발표가
많은 것 같습니다.&lt;/p&gt;
&lt;p&gt;지난 rc2 에서 머지하는 걸 빼먹은 네트워킹 쪽 풀리퀘스트를 이번에 머지했기
때문에 이번 rc3 는 조금 크다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc2</title>
      <link>/post/lkml_news_v5.0-rc2/</link>
      <pubDate>Tue, 15 Jan 2019 09:06:44 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-v11-0026-speculative-page-faults&#34;&gt;[PATCH v11 00/26] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/8b0b2c05-89f8-8002-2dce-fa7004907e78@codeaurora.org&#34;&gt;https://lkml.kernel.org/r/8b0b2c05-89f8-8002-2dce-fa7004907e78@codeaurora.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SPF 패치에서 발견된 버그 레포트입니다.  ARM 위에서 데드락 문제가 발견되었군요.
버그 발견자가 패치도 같이 내놓았는데, 이에 대한 토론은 아직도 계속되고 있네요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v7-0016-add-support-for-exclusive-page-frame-ownership&#34;&gt;[RFC PATCH v7 00/16] Add support for eXclusive Page Frame Ownership&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cover.1547153058.git.khalid.aziz@oracle.com&#34;&gt;https://lkml.kernel.org/r/cover.1547153058.git.khalid.aziz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lsquo;ret2dir&amp;rsquo; 보안 공격[1]에 대비하기 위한 패치입니다.  하지만 이로 인해 tlb 를 좀
많이 flush 해야 하는 문제가 있었고, 이 패치셋은 그에 대한 해결책도 의논하고
있습니다.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://www.cs.columbia.edu/~vpk/papers/ret2dir.sec14.pdf&#34;&gt;http://www.cs.columbia.edu/~vpk/papers/ret2dir.sec14.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-04-allow-persistent-memory-to-be-used-like-normal-ram&#34;&gt;[PATCH 0/4] Allow persistent memory to be used like normal RAM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190116181859.D1504459@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20190116181859.D1504459@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PMEM 을 사용하기 위해선 현재로썬 어플리케이션 코드를 수정해야 합니다.  그냥
평범한, 조금 느린 RAM 처럼 어플리케이션이 기존에 RAM 접근하듯 접근할 수 있게
하면 안될까요?  이 패치셋은 그런 경우를 위한 드라이버를 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-05-psi-pressure-stall-monitors-v2&#34;&gt;[PATCH v2 0/5] psi: pressure stall monitors v2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190110220718.261134-1-surenb@google.com&#34;&gt;https://lkml.kernel.org/r/20190110220718.261134-1-surenb@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LWN 에서도 소개된 pressure stall monitor 의 두번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc2&#34;&gt;Linux 5.0-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wicCXd7nALwEz+022iNesJV3DUmejS+dzVRE0D3UGzs_g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wicCXd7nALwEz+022iNesJV3DUmejS+dzVRE0D3UGzs_g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.x 로 나아가는 두번째 릴리즈 후보가 나왔습니다.  이번 머지 윈도우가 휴일이
섞여 있었기 때문에 두번째 rc 를 위한 과정에 문제가 있지 않을까 싶었지만 별 문제
없었다는군요.  그리고 지금 토발즈는 여행중이라 현지시간으로는 항상 하는 일요일
릴리즈가 아니라 월요일 릴리즈라 합니다만, 뭐&amp;hellip; 큰 이슈는 아니죠 ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v5.0-rc1</title>
      <link>/post/lkml_news_v5.0-rc1/</link>
      <pubDate>Mon, 07 Jan 2019 11:18:50 +0900</pubDate>
      <guid>/post/lkml_news_v5.0-rc1/</guid>
      <description>&lt;h2 id=&#34;rfc-v3-03-test-driver-to-analyse-vmalloc-allocator&#34;&gt;[RFC v3 0/3] test driver to analyse vmalloc allocator&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20190102085924.14145-1-urezki@gmail.com&#34;&gt;https://lkml.kernel.org/r/20190102085924.14145-1-urezki@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vmalloc 의 성능과 스트레스 테스트를 위한 모듈을 구현한 패치입니다.  Selftests
에도 테스트 스크립트를 추가했군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-01-mm-add-a-warning-about-high-order-allocations&#34;&gt;[RFC PATCH 0/1] mm: add a warning about high order allocations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181225153927.2873-1-khorenko@virtuozzo.com&#34;&gt;https://lkml.kernel.org/r/20181225153927.2873-1-khorenko@virtuozzo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;특정 노드의 메모리에 접근이 많이 되고 있는 상황에서 해당 메모리가 fragment 되어
있고 이 시점에서 high order allocation 이 요청되면 이걸 위해 compaction 등이
작동하니까 다른 태스크의 latency 가 떨어질 수 있습니다.  이런 상황을 모니터링
할 수 있게끔, 이 패치는 &lt;code&gt;vm.war_high_order&lt;/code&gt; 라는 값을 sysctl 통해 설정하면 이
값을 넘는 order 의 allocation 이 요청되었을 때 워닝을 뱉어 줍니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-introduce-page_size&#34;&gt;[PATCH] mm: Introduce page_size()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181231134223.20765-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20181231134223.20765-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 의 존재로 인해 페이지의 실제 크기는 모두 똑같지가 않기 때문에 이를
판별할 방법이 필요하죠.  이 패치는 단순히 기존에 좀 복잡하게 직접 페이지 크기를
구하던 것을 별도의 wrapper function 으로 대체하기 위한 준비 작업입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-50-rc1&#34;&gt;Linux 5.0-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/wgKYnrL3LjhVkH2Fp+ecmWhLqezT9zmR6CzfcpwcJX0qA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/wgKYnrL3LjhVkH2Fp+ecmWhLqezT9zmR6CzfcpwcJX0qA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널 버전의 숫자가 큰 의미 없게 된지도 오래이긴 합니다만 그래도 메이저
버전 변경은 항상 뭔가 들뜨게 마련이죠.
드디어 5.x 커널의 시대가 시작되었습니다.&lt;/p&gt;
&lt;p&gt;연말/연처 휴일이 섞여 있는 덕에 꽤 오랫만의 릴리즈가 되었고, 그덕에 좀 늦게
풀리퀘스트가 온 것들도 있었지만 큰 문제는 없었다고 하네요.&lt;/p&gt;
&lt;p&gt;메이저 버전이 4.x 에서 5.x 로 바뀌긴 했지만 손가락 발가락 다 써도 4.21 의
버전은 셀수가 없기 때문에 5.x 로 바뀌었을 뿐 특별한 변경이나 새로운 기능은
없다는 점도 한번 더 공지합니다.
하지만 많은 기능들이 추가된 것도 사실이니 원하면 하나 꼽아들고 이거 때문에 5.x
로 업데이트 되었다고 생각해도 좋다고 하는군요.&lt;/p&gt;
&lt;p&gt;이번 릴리즈는 총 11000여개의 커밋을 받아들인 긴 머지 윈도우를 거쳤지만,
그렇다고 유별날 건 없다는군요.  절반 가량이 드라이버, 20%는 아키텍쳐, 10% 툴링,
나머진 여기저기.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News for v4.20</title>
      <link>/post/lkml_news_v4.20/</link>
      <pubDate>Fri, 21 Dec 2018 08:35:03 +0900</pubDate>
      <guid>/post/lkml_news_v4.20/</guid>
      <description>&lt;h2 id=&#34;patch-v5-03-mmkvmvfioppc64-migrate-compound-pages-out-of-cma&#34;&gt;[PATCH V5 0/3] mm/kvm/vfio/ppc64: Migrate compound pages out of CMA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181219034047.16305-1-aneesh.kumar@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20181219034047.16305-1-aneesh.kumar@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ppc64 에서는 guest os page table 을 CMA area 내에 할당하는데, VFIO 를 쓰는 경우
이게 pinning 되어 있다 보니 CMA area 밖으로 migrate 하는데 실패해, guest os
page table 할당에 실패하고, 이로 인해 guest 시작조차 불가능하게 되는 문제가
있었습니다.&lt;/p&gt;
&lt;p&gt;이 패치는 compound page 에 대해서도 CMA area 밖으로의 migration 이 가능하게
합니다.&lt;/p&gt;
&lt;h2 id=&#34;resend-patch-v3-05-arm64mm-enable-hugetlb-migration&#34;&gt;[RESEND PATCH V3 0/5] arm64/mm: Enable HugeTLB migration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1545121450-1663-1-git-send-email-anshuman.khandual@arm.com&#34;&gt;https://lkml.kernel.org/r/1545121450-1663-1-git-send-email-anshuman.khandual@arm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HugeTLB 를 통째로 migrate 할 수 있게 하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-02-hugetlbfs-use-i_mmap_rwsem-for-better-synchronization&#34;&gt;[PATCH v2 0/2] hugetlbfs: use i_mmap_rwsem for better synchronization&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181218223557.5202-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20181218223557.5202-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hugetlbfs 와 truncation 사이에 race conditional bug 가 존재해 왔는데, 이 패치는
&lt;code&gt;i_mmap_rwsem&lt;/code&gt; 을 사용해 동기화를 적용함으로써 이 race bug 를 제거합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-12-mm-swap-check-if-swap-backing-device-is-congested&#34;&gt;[RFC PATCH 1/2] mm: swap: check if swap backing device is congested&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1545115948-25467-1-git-send-email-yang.shi@linux.alibaba.com&#34;&gt;https://lkml.kernel.org/r/1545115948-25467-1-git-send-email-yang.shi@linux.alibaba.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swap readahead 기능이 이미 다른 요청으로 바쁜 storage device 에 행해진다면 swap
자체 성능도 떨어지고 storage 를 더욱 바빠지게 해서 남들에게도 민폐가 됩니다.
&lt;code&gt;vma_cluster_radahead()&lt;/code&gt; 에서 먼저 storage 의 congestion 을 체크해 보게 하는
패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-released&#34;&gt;Linux 4.20 released..&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wg0zF4wa87Q5rAhFe2es0t0eExX2UjvKD7-Pghvcbt5Vw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wg0zF4wa87Q5rAhFe2es0t0eExX2UjvKD7-Pghvcbt5Vw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;예정대로 4.20 이 정식 릴리즈 되었습니다.  원했던 것보단 조금 시끄러운
주간이었지만 어쨌건 연말 휴일을 방해하고 싶진 않고 정말 큰 문제가 있는 것 같아
보이진 않기에 릴리즈 했다고 합니다.&lt;/p&gt;
&lt;p&gt;이번 정식 릴리즈에서 개인적으로 눈길 가는건 XArray 입니다.  앞으로도 많은
영역에 쓰이고자 하는 것 같던데, 향후 행보도 궁금합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc7</title>
      <link>/post/lkml_news_v4.20-rc7/</link>
      <pubDate>Mon, 17 Dec 2018 09:16:11 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc7/</guid>
      <description>&lt;h2 id=&#34;patch--v9-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V9 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181214062754.13723-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20181214062754.13723-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아직 머지되지 못한 THP swap in 패치셋의 아홉번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-03-reduce-thp-fault-thrashing&#34;&gt;[RFC 0/3] reduce THP fault thrashing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181211142941.20500-1-vbabka@suse.cz&#34;&gt;https://lkml.kernel.org/r/20181211142941.20500-1-vbabka@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP fault 로 인한 로컬 노드 thrashing 을 해결하기 위한 패치의 RFC 입니다.  THP
fault 성공률을 낮추는 부작용도 있긴 하군요.  아직 테스트도 안된 첫번째 RFC
이니, 이대로 머지되진 않겠지 싶긴 합니다만 재밌네요.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-rc76&#34;&gt;Linux 4.20-rc76&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=whv9u9aTEPoCz8h83JJbVK4fmHELJF=GG01ht9=1_MaCQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=whv9u9aTEPoCz8h83JJbVK4fmHELJF=GG01ht9=1_MaCQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일곱번째 rc 버전의 릴리즈입니다&amp;hellip; 만, 이번엔 릴리즈 메일 제목에 오타가
있었군요.  전체적으로 일곱번째인만큼 변경사항이 적습니다.  릴리즈 하는 토발즈
입장에선 반가운 일이군요.  특히나 연휴가 다가오니까요.&lt;/p&gt;
&lt;p&gt;릴리즈 계획은 기존과 같이, 크리스마스 전에 4.20 버전을 릴리즈하고, 이후에 머지
윈도우를 가질텐데, 가급적이면 연휴 전에 미리미리 풀리퀘스트를 보내달라고
하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc6</title>
      <link>/post/lkml_news_v4.20-rc6/</link>
      <pubDate>Wed, 05 Dec 2018 08:20:36 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc6/</guid>
      <description>&lt;h2 id=&#34;patch-memory-model-03-updates-to-the-formal-memory-model&#34;&gt;[PATCH memory-model 0/3] Updates to the formal memory model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181203230411.GA27476@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20181203230411.GA27476@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널 메모리 모델의 업데이트 입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;smp_mb__after_unlock_lock()&lt;/code&gt; 을 추가로 모델링했고, github 리트머스 테스트를
체크하기 위한 스크립트가 추가되었으며, &lt;code&gt;-j&lt;/code&gt; 옵션을 서포트 하게 되었습니다.&lt;/p&gt;
&lt;h2 id=&#34;tipcorercu-tracing-replace-synchronize_sched-and-call_rcu_sched&#34;&gt;[tip:core/rcu] tracing: Replace synchronize_sched() and call_rcu_sched()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/tip-7440172974e85b1828bdd84ac6b23b5bcad9c5eb@git.kernel.org&#34;&gt;https://lkml.kernel.org/r/tip-7440172974e85b1828bdd84ac6b23b5bcad9c5eb@git.kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;synchronize_rcu()&lt;/code&gt; 가 이제는 RCU read-side 크리티컬 섹션 만이 아니라
preempt-disable 코드 영역도 기다리므로, &lt;code&gt;synchronize_sched()&lt;/code&gt; 를 대체할 수
있고, &lt;code&gt;call_rcu_sched()&lt;/code&gt; 도 &lt;code&gt;call_rcu()&lt;/code&gt; 로 대체될 수 있습니다.  이 패치는 이
대체를 진행하고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch--v8-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V8 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181207054122.27822-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20181207054122.27822-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그를 통해 여러번 공유한 THP 를 통째로 스왑아웃 / 스왑인 하는 패치입니다.
Daniel 에 의해 레포트된 버그 하나를 고쳐서 여덟번째 버전이 올라왔습니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-rc6&#34;&gt;Linux 4.20-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/wgHSX8x6mOB0xZibbg-xc3veqsQEnHZ1+3H2DbO5MU5Rw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/wgHSX8x6mOB0xZibbg-xc3veqsQEnHZ1+3H2DbO5MU5Rw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난 rc5 릴리즈는 평소와 달리 굉장히 규모가 컸기에 걱정이 있었죠.  이번
릴리즈에는 확연히 변경의 양이 줄어들었다고 합니다.  뭔가 다시 정상적으로 간다는
거죠.  토발즈는 어쨌건 4.20 릴리즈 전에 최소한 하나의 rc 릴리즈는 더 있을
거라고 하는군요.  하지만 여전히 크리스마스 휴일 시즌을 위해 크리스마스 전에
릴리즈를 마치고, 이후 일주일은 푹 쉴테니 그전에 풀리퀘스트도 준비해 두라고
하네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by 4.20-rc5</title>
      <link>/post/lkml_news_v4.20-rc5/</link>
      <pubDate>Thu, 29 Nov 2018 08:14:01 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc5/</guid>
      <description>&lt;h2 id=&#34;patch-v12-0020-block-support-multi-page-bvec&#34;&gt;[PATCH V12 00/20] block: support multi-page bvec&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181126021720.19471-1-ming.lei@redhat.com&#34;&gt;https://lkml.kernel.org/r/20181126021720.19471-1-ming.lei@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct bio_bvec&lt;/code&gt; 하나가 물리적으로 연속적인 여러개의 페이지를 담을 수 있게
해서 block layer 의 효율성을 높이기 위한 시도입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-aio-convert-ioctx_table-to-xarray&#34;&gt;[PATCH] aio: Convert ioctx_table to XArray&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181128183531.5139-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20181128183531.5139-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;aio 쪽의 &lt;code&gt;ioctx_table&lt;/code&gt; 이라는 자료구조가 스펙터에 취약한 자료구조인데, 인덱스
오버플로 문제가 없는 XArray 로 교체하는 패치입니다.  정말 코드가
깔끔해지는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-04v4-drop-the-mmap_sem-when-doing-io-in-the-fault-path&#34;&gt;&lt;code&gt;[PATCH 0/4][V4] drop the mmap_sem when doing IO in the fault path&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181130195812.19536-1-josef@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/20181130195812.19536-1-josef@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; 등의 도구를 사용해 시스템 상황을 모니터링하는 커다란 어플리케이션을 사용
중인데, 이 과정에서 다른 &lt;code&gt;task&lt;/code&gt; 의 &lt;code&gt;mmap_sem&lt;/code&gt; 을 &lt;code&gt;down_read()&lt;/code&gt; 해야 하는 경우가
종종 생긴다는군요.  문제는 이 &lt;code&gt;mmap_sem&lt;/code&gt; 의 쓰기 권한을 얻어오는 과정이 사실상
mutex 와 동일하니 레이턴시가 크게 늘어날 때가 종종 생긴다고 합니다.  이 문제를
해결하기 위해 &lt;code&gt;retry&lt;/code&gt; 메커니즘을 적용하는 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-09-use-vm_insert_range&#34;&gt;[PATCH v2 0/9] Use vm_insert_range&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181202061707.GA3070@jordon-HP-15-Notebook-PC&#34;&gt;https://lkml.kernel.org/r/20181202061707.GA3070@jordon-HP-15-Notebook-PC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;드라이버가 자신의 커널 메모리를 사용자 vma 로 매핑하는 방법은
&lt;code&gt;vm_insert_page()&lt;/code&gt; 를 사용하는 방식이었고, 여러 페이지를 매핑하려면 이 함수를
루프를 돌면서 수행해야 했는데요, 이게 좀 귀찮으므로 아예 &lt;code&gt;vm_insert_range()&lt;/code&gt;
라는 함수를 추가한 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-rc5&#34;&gt;Linux 4.20-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wizcNrsoyCM1EXQqoswMCYsJaby2iAkZb9wBAzDEhvxNg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wizcNrsoyCM1EXQqoswMCYsJaby2iAkZb9wBAzDEhvxNg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;벌써 다섯번째 rc 릴리즈이므로 변경내용이 줄어들어야 할 타이밍이지만, 이상하게도
이번 릴리즈는 -rc1 을 제외하고는 가장 변경이 큰 릴리즈라는군요.  게다가 arch 쪽
변경사항이 꽤 많은데, 아마도 STIPB 쪽 성능 리그레션 때문인 것으로 보인다고
합니다.  아무튼 일반적인 모습은 아니다보니 릴리즈 일정이 변경될 가능성이
생겼는데요, 너무 미루면 연말연초 휴일에 머지 윈도우가 겹치게 되는데 토발즈는
휴일 동안 머지 윈도우 관리하기 싫고, 그렇다고 더 미루면 토발즈도 1월 후반에
여행 갈거고, 남들도 휴일에 머지 윈도우를 준비하기가 싫을 거라 고민이라
하는군요.&lt;/p&gt;
&lt;p&gt;결국 일단은 크리스마스 직전 쯤 4.20 을 릴리즈 하고, 남들도 머지 윈도우 준비를
그 전까지 마치는 걸 제안하고 있습니다.  물론, rc6 에서도 변경사항이 충분히
줄어들지 않는다면 릴리즈 일정은 더 늦춰질 수 있겠죠.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc4</title>
      <link>/post/lkml_news_v4.20-rc4/</link>
      <pubDate>Mon, 26 Nov 2018 08:06:40 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc4/</guid>
      <description>&lt;h2 id=&#34;patch--v7-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V7 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181120085449.5542-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20181120085449.5542-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transparent Huge Page 를 쪼개지 않고 swap out / swap in 함으로써 스왑 성능을
최적화 하는 패치의 일곱번째 버전입니다.  이 블로그에서도 소개한 바 있죠.  크게
바뀐 부분은 없지만 최신 버전에 맞춰 리베이스 되었고, Daniel 에 의해 발견된 주소
정렬 관련 문제를 해결했군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-05-fragmentation-avoidance-improvements-v5&#34;&gt;[PATCH 0/5] Fragmentation avoidance improvements v5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181123114528.28802-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20181123114528.28802-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시스템이 충분히 오래 운영되거나 특정한 패턴의 워크로드가 동작하게 되면 시스템의
메모리는 fragment 되게 마련이어서, 장기적으로 물리적 연속 페이지 할당이
실패하게 됩니다.  이 패치셋은 메모리 분절화를 야기하는 워크로드 (이벤트)를
정의하고 그런 이벤트의 발생을 줄이는 내용을 담고 있습니다.&lt;/p&gt;
&lt;p&gt;최적화 방법은 다음과 같습니다.  먼저, lower id free list 가 사용 가능하면 high
order free list 를 쪼개기보다 그걸 먼저 사용합니다.  메모리 분절화 이벤트가
발생하면 임시적으로 워터마크를 높입니다.  kswapd 가 일어나서 적은양의 오래된
메모리를 리클레임하고, 이어서 kcompactd 가 일어나서 시스템 메모리 연속성을
복구시킵니다.  물론 이는 오버헤드를 추가합니다.  마지막으로, kswapd 가 진전을
일으킬 수 있도록 일부 movable 페이지 할당을 기다리게 합니다.  이 기다리는 시간
역시 오버헤드와 연관되므로 적절히 맞춰질 필요가 있겠죠.&lt;/p&gt;
&lt;p&gt;이 패치셋을 적용한 결과 94% 이상 메모리 분절화를 줄일 수 있었다고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-xarray-updates&#34;&gt;[GIT PULL] XArray updates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181124173209.GZ3065@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20181124173209.GZ3065@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XArray 는 작년 OSSummit 에서 처음 발표를 들은 후 주의 깊게 보고 있었는데 이번에
머지되었고 커널 서밋에서도 발표를 들었는데 매우 인상적이었습니다.  DAX 가
XArray 를 사용하도록 수정한 후 DAX 의 버그가 발견되었고, 그에 대한 수정을
포함한 수정사항들을 담은 풀 리퀘스트입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-rc4&#34;&gt;Linux 4.20-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wgdsXyCaLsFEpyUpAeRqVS69u=xo4rzEN+cS=xwz2gajg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wgdsXyCaLsFEpyUpAeRqVS69u=xo4rzEN+cS=xwz2gajg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.x 의 마지막이 될 예정인 4.20을 향한 네번째 rc 버전 릴리즈입니다.  변경의 60
퍼센트가 드라이버고, 나머진 네트워킹, 파일시스템쪽 수정과 arch, 문서화
업데이트고 xarray 쪽 수정도 있었군요.  평소와 다를바 없어서 평이한 릴리즈라 할
수 있지만, STIBP 수정이라던지 mm 쪽 수정에 대한 논의가 안끝났다던지 하는 부분은
남아있다는군요.&lt;/p&gt;
&lt;p&gt;한가지 지난 릴리즈 때 이야기 할 것을 빼먹은 것도 이야기 하는데, 풀 리퀘스트에
대한 응답 메일을 Konstantin 이 자동화 했기 때문에 더이상 토발즈 자신이 하나하나
답장을 보내지 않는다는 겁니다.  그리고 이 자동화의 구성상 LKML 의 &lt;code&gt;linux-*&lt;/code&gt;
그룹을 cc 하지 않으면 ack 을 주지 않는데, 그걸로 인해 혼동이 있을 수 있었겠다고
하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc3</title>
      <link>/post/lkml_news_v4.20-rc3/</link>
      <pubDate>Mon, 19 Nov 2018 16:53:04 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-420-rc3&#34;&gt;Linux 4.20-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wiZmPvR64hDy-pcVJqcxoAwMRd4GrRhRjK04Mhng4nL4g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wiZmPvR64hDy-pcVJqcxoAwMRd4GrRhRjK04Mhng4nL4g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리누스 토발즈의 개인적 여행이 있었다는 점을 제외하고는 이상할 것 없는
한주였습니다만, 이번 릴리즈의 변경 사항은 rc3 치고는 상당히 적었다고 하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc2</title>
      <link>/post/lkml_news_v4.20-rc2/</link>
      <pubDate>Mon, 12 Nov 2018 08:30:21 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc2/</guid>
      <description>&lt;h2 id=&#34;patch-05-fragmentation-avoidance-improvements-v2&#34;&gt;[PATCH 0/5] Fragmentation avoidance improvements v2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181107183822.15567-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20181107183822.15567-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;장시간 운영되는 시스템은 결국 메모리가 단편화 (fragmentation) 되게 되어
있습니다.  페이징을 사용하면 단일 페이지 단위 할당은 문제가 없지만, 물리적으로
연속적인 페이지를 할당받기가 어려워지죠.  Mel Gorman 의 이 패치는 이런 메모리
분절화를 좀 더 잘 막을 수 있는 방법을 포함하고 있습니다.&lt;/p&gt;
&lt;p&gt;첫번째 패치는 단일 페이지 또는 적은 물리적 연속 페이지들의 할당 시에 불필요하게
higher order free page zone 을 사용하지 않게 하고, 두번째와 세번째 패치는
kswapd 와 kcompactd 를 사용한 defragmentation 을 좀 더 적극적으로 하게 합니다.
네번째 패치는 movable allocation request 시에 kswapd 를 또 깨우고, kswapd 가
일을 마칠 때까지 멈춰서 기다려 줍니다.
마지막으로 다섯번째 패치는 분절화가 발생해야만 하는 경우, kcompactd 가 처리할
블록들로 해당 분절된 영역을 마크해 둡니다.&lt;/p&gt;
&lt;p&gt;물론 분절화를 막는 대신 오버헤드를 가져올 수 있겠고, Mel 은 이 기능들을 tuning
하거나 꺼버릴 수 있게 했군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-04-fragmentation-avoidance-improvements-v3&#34;&gt;[PATCH 0/4] Fragmentation avoidance improvements v3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181108091218.32715-1-mgorman@techsingularity.net&#34;&gt;https://lkml.kernel.org/r/20181108091218.32715-1-mgorman@techsingularity.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mel 의 분절화 방지 패치셋은 오버헤드를 가질 수밖에 없었죠.  결국 얼마 되지 않아
세번째 버전의 패치셋[1]을 내놓았는데, 여기선 다섯번째 패치를 걍 없애버렸고,
네번째 패치도 그 오버헤드가 덜하게끔 만들었습니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-thp-implement-thp-reservations-for-anonymous-memory&#34;&gt;[RFC PATCH] mm: thp: implement THP reservations for anonymous memory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1541746138-6706-1-git-send-email-anthony.yznaga@oracle.com&#34;&gt;https://lkml.kernel.org/r/1541746138-6706-1-git-send-email-anthony.yznaga@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transparent huge page (THP) 가 켜져 있는 경우, promotion 이 꽤나 급하게
이루어지기 때문에 huge page 를 할당받고는 정작 그 영역을 모두 접근하지 않는
경우엔 메모리 소모가 큽니다.  기존에 이 문제를 해결하기 위한 패치가 있었는데,
그에 대해 Mel Gorman 의 피드백이 있었고, 이 패치는 그 피드백을 받아들여 새로
작성된 패치셋입니다.&lt;/p&gt;
&lt;p&gt;Page fault 가 날 경우 huge page 를 할당할 수 있는 양의 페이지를 할당받되 페이지
한개만 map 해두고 나머지는 reserve 를 해두고, 이후 주변 영역에 fault 가 날
때마다 나머지 페이지들을 계속 map 해주다가 충분히 많은 영역이 fault 났을 경우에
huge page 로 promote 를 해주고, 그 전에 memory pressure 가 발생하면 reserve
해둔 페이지들을 reclaim 하는 형태입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-020-documentation-updates-for-v421v50&#34;&gt;[PATCH tip/core/rcu 0/20] Documentation updates for v4.21/v5.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181111195619.GA6958@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20181111195619.GA6958@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 문서 업데이트 패치셋입니다.  생각해 보면 리눅스 커널만큼 문서화 잘 된
프로젝트도 드물죠.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-08-automate-initrd-generation-for-v421v50&#34;&gt;[PATCH tip/core/rcu 0/8] Automate initrd generation for v4.21/v5.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181111200127.GA9511@linux.ibm.com&#34;&gt;https://lkml.kernel.org/r/20181111200127.GA9511@linux.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 테스트 프레임웍인 rcutorture 는 가상머신 환경을 사용하는데, 이를 위한
initrd 생성을 자동화 하는 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-v420-rc2&#34;&gt;Linux v4.20-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/R7SW0SuwOMMMyRgTFGA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/R7SW0SuwOMMMyRgTFGA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;토발즈가 여행 중이란 걸 제외하고는 별 특이사항 없는 두번째 rc 버전
릴리즈입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News by v4.20-rc1</title>
      <link>/post/lkml_news_v4.20-rc1/</link>
      <pubDate>Wed, 07 Nov 2018 14:43:56 +0900</pubDate>
      <guid>/post/lkml_news_v4.20-rc1/</guid>
      <description>&lt;p&gt;리눅스 4.19 버전 릴리즈 후부터 4.20-rc1 버전의 릴리즈까지 LKML 에 오간 메일 중
흥미로운 메일들을 소개합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v4-0013-ktask-multithread-cpu-intensive-kernel-work&#34;&gt;[RFC PATCH v4 00/13] ktask: multithread CPU-intensive kernel work&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181105165558.11698-1-daniel.m.jordan@oracle.com&#34;&gt;https://lkml.kernel.org/r/20181105165558.11698-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU intensive 한 커널의 일을 여러 work queue 를 이용해 병렬화 시키기 위한
새로운 프레임웍, ktask 구현 및 적용 패치입니다.  이 프레임웍을 이용해 병렬화
시킬 일은 여러가지가 있을텐데, 이 패치는 ktask 프레임웍의 구현과 함께 VFIO
페이지 pinning, 부팅 시점에서의 &lt;code&gt;struct page&lt;/code&gt; 초기화, &lt;code&gt;gigantic page&lt;/code&gt; 의
초기화, 그리고 &lt;code&gt;HugeTLB&lt;/code&gt; 페이지의 할당에 ktask 를 적용하고 있습니다.&lt;/p&gt;
&lt;p&gt;예전에도 올라온 패치인데 이번에 Linux Plumbers Conference 에서 발표할
예정이기에 기존 피드백을 반영한 버전을 올렸군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-09-allow-persistent-memory-to-be-used-like-normal-ram&#34;&gt;[PATCH 0/9] Allow persistent memory to be used like normal RAM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181022201317.8558C1D8@viggo.jf.intel.com&#34;&gt;https://lkml.kernel.org/r/20181022201317.8558C1D8@viggo.jf.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기존의 메인 메모리로 쓰이는 DRAM 과 달리 파워가 꺼져도 내용이 날아가지 않는
메모리를 Non-volatile memory 또는 persistent memory 라 하죠.  최근 들어서는
정말 상용으로도 나오고 있는데, 현재로썬 이 pmem 을 쓰려면 어플리케이션을 고쳐야
합니다.&lt;/p&gt;
&lt;p&gt;이 패치는 그러지 않고도 일반 RAM 처럼 pmem 을 사용할 수 있도록 하는 pmem 용
드라이버를 구현했습니다.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-xarray-for-420&#34;&gt;[GIT PULL] XArray for 4.20&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181023200825.GA25444@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20181023200825.GA25444@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 여러번 소개한, XArray 의 4.20 버전을 향한 pull request 입니다.
4.19 때도 시도했지만 들어가지 못했죠.&lt;/p&gt;
&lt;p&gt;이번엔 일단 토발즈에 의해 pull 되었습니다.  그리고 토발즈도 XArray 의
인터페이스 덕에 코드가 한결 간결하고 깔끔해졌음을 이야기 하네요.  특히, dax 쪽
수정사항과 conflict 이 있었는데 이는 dax 쪽의 버그 수정에 의한 것으로, XArray
인터페이스를 쓰면 애초에 그 버그가 발생도 안한다고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;linux-420-rc1&#34;&gt;Linux 4.20-rc1&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CAHk-=whDiwASMgw8Q7TNA2MJhf3s=ouK4+_3ioqmobs-yagnkQ@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;오랫만에 토발즈가 하는 릴리즈입니다.  3.19 다음 4.0 버전이 릴리즈 되었으니 이번
버전은 5.0 이 될 것인지, 4.20 이 될 것인지 흥미진진한 릴리즈였는데요.
결론적으로 4.20 이 되었습니다.  이제 버전을 셀 손가락도 발가락도 남지
않았으므로 다음 버전은 5.0 이 될 거라고 하는군요.&lt;/p&gt;
&lt;p&gt;꽤 많은 변경 사항이 있던 머지 윈도우였지만 그렇다고 기록적인 수준은 아닙니다.&lt;/p&gt;
&lt;p&gt;한편 2주일로 예정되는 머지 윈도우에서 첫번째 주에는 일반적인 풀리퀘스트를 받고,
좀 시간을 두고 들여다봐야 하겠다 싶은 패치들은 두번째 주까지 미뤄뒀다 천천히
보면서 머지하는게 토발즈의 작업 습관이고 다른 메인테이너들도 이 습관을 알고
암묵적으로 지켜왔던 모양인데, 이번엔 두번째 주 수요일에 새로운 풀 리퀘스트가
들어와 토발즈가 조금 불편했던 모양입니다.&lt;/p&gt;
&lt;p&gt;이걸 명시적인 규칙으로 만들어야 할지도 모르겠다 싶기 시작했는데, 빈번하게 있는
일도 아니므로 아직은 그래야 할 필요성이 있을지도 모르겠다 하는 수준의
이야기군요.&lt;/p&gt;
&lt;p&gt;그리고 이번 머지 윈도우에서는 Greg 이 그랬던 것처럼 토발즈도 풀리퀘스트에 ack
메일을 보냈었죠.  이런 작업 방식에 대해서 고민을 하는 이야기도 있었구요.
하지만 아무래도 몇개는 빼먹은 것 같다고 하는군요.  이런 경우 결론은 자동화.
다음 머지 윈도우까지는 이 ack 메일을 자동화 되길 바란다고 하네요.  물론,
토발즈의 바람대로 자동화가 잘 마무리 되지 않으면 운좋게도 토발즈로부터의 ack
메일을 받을 수 있겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19</title>
      <link>/post/lkml_news_v4.19/</link>
      <pubDate>Mon, 22 Oct 2018 17:45:08 +0900</pubDate>
      <guid>/post/lkml_news_v4.19/</guid>
      <description>&lt;h2 id=&#34;linux-419&#34;&gt;Linux 4.19&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181022073224.GA5658@kroah.com&#34;&gt;https://lkml.kernel.org/r/20181022073224.GA5658@kroah.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;드디어 9 주간의 안정화를 거쳐 4.19 버전이 릴리즈 되었습니다.  역시 토발즈가
쉬고 있는 관계로 Greg KroahHartman 이 릴리즈 했습니다.  지난 네번의 릴리즈
가운데 가장 큰 릴리즈군요.  그리고 이 버전은 &amp;ldquo;Long Tern&amp;rdquo; 커널 중 하나가 될
예정입니다.&lt;/p&gt;
&lt;p&gt;이번 릴리즈 메일은 토발즈가 잠시 쉬겠다고 했던 메일을 연상케 할정도로 내용이
긴데요, 꽤 많은 부분은 이번 버전 개발 과정에서 이야기 되었던, 새로운 커뮤니티
참여자들과의 관계와 태도에 대한 내용입니다.  Greg 이 매년 발표하고 있는 커널
커뮤니티의 작업 방식 이야기를 예로 들며 설명하네요.  관련해서는 다음주 영국에서
열리는 Maintainers Summit 에서도 좀 더 이야기 할 생각인가 봅니다.&lt;/p&gt;
&lt;p&gt;그리고, 릴리즈 메일의 말미에서 이렇게 이야기 하며 릴리즈 메일을 끝맺는군요:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;And with that, Linus, I&#39;m handing the kernel tree back to you.  You can
have the joy of dealing with the merge window :)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;토발즈가 돌아오려나요?  아니면 새로운 대리인이?&lt;/p&gt;
&lt;h2 id=&#34;git-pull-ack-emails&#34;&gt;Git pull ack emails..&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CAHk-=wjS6cjjP+fkZWzzrdZ_fZ1F=PrAGcBc57vKCpNyoD73Vw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CAHk-=wjS6cjjP+fkZWzzrdZ_fZ1F=PrAGcBc57vKCpNyoD73Vw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;앞서 4.19 릴리즈와 함께 Greg 이 토발즈의 대리인을 그만두기로 했다고 했지만,
그에 대한 토발즈의 공식적 답변은 없었습니다.  때문에 토발즈가 돌아오는건지,
또는 Greg 이 아닌 또다른 사람이 릴리즈 관리를 할지 애매했는데, 토발즈가
돌아왔습니다.&lt;/p&gt;
&lt;p&gt;이 메일을 이렇게 시작하는군요:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So I&amp;rsquo;ve obviously started pulling stuff for the merge window,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;마침 Maintainers Summit 이 있었으니, 거의 Summit 직후 돌아왔다고 볼 수 있을 것
같네요.&lt;/p&gt;
&lt;p&gt;이 메일에선 이와 함께 Greg 이 pull request 마다 꼬박꼬박 응답을 보내줬던 걸
지속할지 말지에 대한 이야기를 하고 있습니다.  토발즈는 풀 리퀘스트를 받으면
일단 빌드 테스트를 진행하고, 그동안 다른 풀 리퀘스트를 보고 그 빌드 테스트도
병렬로 진행하는 파이프라인 형태의 작업 형태를 가지고 있는데, Greg 처럼 하나하나
순차적으로 응답하려면 좀 애매하기 때문입니다.  일단은 응답 보내보고, 그게 정말
중요한지 판단해 보겠다는군요.&lt;/p&gt;
&lt;p&gt;아무튼, 잘 돌아왔어요, 리누스!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc7</title>
      <link>/post/lkml_news_v4.19-rc7/</link>
      <pubDate>Mon, 08 Oct 2018 07:54:09 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc7&#34;&gt;Linux 4.19-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181007154529.GA4493@kroah.com&#34;&gt;https://lkml.kernel.org/r/20181007154529.GA4493@kroah.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;토발즈 없이 진행되는 4.19를 위한 일곱번째 rc 릴리즈입니다.  이번에도 그렉이
대신 하는군요.  이번 릴리즈는 후반부임에도 rc6 보다 조금 더 커졌습니다.  하지만
그렇게까지 큰 차이는 아니라고 하는군요.&lt;/p&gt;
&lt;p&gt;일반적이라면 다음 릴리즈가 4.19 정식 릴리즈일텐데, 10월에 컨퍼런스가 많이
있다보니 rc 릴리즈를 한번 더 할 생각이라는군요.  간만에 rc8 을 보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch--v6-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V6 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20181010071924.18767-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20181010071924.18767-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 를 한방에 swap out / swap in 하는 Huang Ying 의 패치, 여섯번째 버전입니다.
기존 버전 대비 달라진 점은 크지 않군요.  좀 더 최신 mmotm/master 위로 rebase 한
정도입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc6</title>
      <link>/post/lkml_news_v4.19-rc6/</link>
      <pubDate>Mon, 01 Oct 2018 12:20:27 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc6&#34;&gt;Linux 4.19-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180930150308.GA5010@kroah.com&#34;&gt;https://lkml.kernel.org/r/20180930150308.GA5010@kroah.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번주도 Greg 에 의해 여섯번째 rc 버전이 릴리즈 되었습니다.  평소 일정대로면
2주일 후 4.19 정식 버전이 릴리즈 될텐데, 아마도 그때까지도 Greg 이 릴리즈 하지
않을까 싶기도 하군요.
전체적으로 특이사항은 없고 Greg 의 시스템에서는 잘 동작하고 있으며 별다른
이슈를 보고받지도 못했다는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc5</title>
      <link>/post/lkml_news_v4.19-rc5/</link>
      <pubDate>Mon, 24 Sep 2018 10:10:40 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc5/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc5&#34;&gt;Linux 4.19-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180923175547.GA4462@kroah.com&#34;&gt;https://lkml.kernel.org/r/20180923175547.GA4462@kroah.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난주 토발즈가 휴식을 선언한 이유로 한동안 릴리즈는 Greg 이 맡게 되었죠.  이번
릴리즈는 그래서 Greg 이 합니다.&lt;/p&gt;
&lt;p&gt;사회적으로야 이런저런 일이 많았지만 (토발즈의 휴가, Code of Conduct 머지에
관련해 갑론을박이 많군요.) 기술적으로는 별 일 없었던 한주라 평가되는군요.&lt;/p&gt;
&lt;p&gt;사소하지만 재밌는 건 Greg 의 자기 서명.
&lt;code&gt;greg &amp;quot;keeping the seat warm for a few weeks&amp;quot; k-h&lt;/code&gt; 라고 하는군요.
토발즈가 휴가 가있는 동안 의자를 뎁혀 두는 역할이라는 겸손함이 눈에 띄네요.&lt;/p&gt;
&lt;h2 id=&#34;patch--v5-resend-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V5 RESEND 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180925071348.31458-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180925071348.31458-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 의 Swap in/out 을 regular page 로 쪼개지 않고 한방에 하는 패치의 최신
버전입니다&amp;hellip; 만, 기존 대비 버전업이 되진 않았고 리뷰를 요청하기 위해 다시 한번
보냈군요.  그런데 아직 별다른 리뷰가 없네요&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc4</title>
      <link>/post/lkml_news_v4.19-rc4/</link>
      <pubDate>Mon, 17 Sep 2018 08:03:05 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc4-released-an-apology-and-a-maintainership-note&#34;&gt;Linux 4.19-rc4 released, an apology, and a maintainership note&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFy+Hv9O5citAawS+mVZO+ywCKd9NQ2wxUmGsz9ZJzqgJQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFy+Hv9O5citAawS+mVZO+ywCKd9NQ2wxUmGsz9ZJzqgJQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;한국시간 새벽 네시 좀 넘어 이 메일을 받았습니다.  평범한 릴리즈 메일이겠거니
했는데 제목이 뭔가 심상치 않군요.&lt;/p&gt;
&lt;p&gt;일단 4.19를 위한 네번째 release candidate 릴리즈가 되었습니다.  약 3주 후 정식 4.19 버전이 릴리즈 되겠군요.  하지만 이 메일은 그보다 많은 내용을 담고 있습니다.&lt;/p&gt;
&lt;p&gt;자유분방하고 형식에 구애되지 않는 해커 문화에 기원을 두고 있는 리눅스
커뮤니티는 조금 거친 언어 문화로 유명했습니다.  예를 들어 이상한 코드를 보내면
리누스 토발즈와 커뮤니티의 일부 사람들이 이 코드를 꾸짖을 수 있는데 그 과정에서
욕설도 있을 수 있다는 거죠.  어느새 5년이 넘게 흐른 사건이지만 토발즈는
공식석상에서 Nvidia 에 가운데 손가락을 펴서 보여주기도 했죠.  이로 인해 마음에
상처를 받았다는 사람도 꽤 되고, 7년간 리눅스에 패치를 올렸던 Sarah Sharp 라는
인텔의 프로그래머는 이를 이유로 들어 결국 리눅스 커뮤니티에서 빠지기로 해서[1]
한때 많은 논란이 있기도 했습니다.  당시 토발즈는 욕설을 멈출 생각이 없다고
강경하게 맞서기도 했죠[2].&lt;/p&gt;
&lt;p&gt;그랬던 토발즈가 생각이 바뀌었다고 합니다.  올해 커널 메인테이너 서밋은 Linux
Plumbers Conference 와 함께 열릴 예정이었는데 토발즈가 그걸 깜박하고 가족
휴가를 잡는 바람에 토론이 있었고, 이 토론 과정에서 토발즈는 자신의 행위가 커널
개발에 정말로 악영향을 끼치고 있다고 느낀 것 같습니다.  이로 인해 토발즈는 이
메일을 통해 자신의 행위가 잘못되었음을 인정하고 그로 인해 상처 받은 사람들에게
공식적으로 사과를 하고 있습니다.  또한 앞으로 그런 행위를 반복하지 않기 위해
커널 개발에서 잠시 손을 떼고 거울 속의 자신을 바라보며 더 낫게 행동할 수 있도록
하는 시간을 갖겠다고 하는군요.&lt;/p&gt;
&lt;p&gt;리누스 토발즈가 커널 개발에서 손을 떼는건 과거 git 개발을 위해 손을 뗐던
사건[3] 후 처음입니다.  이 사이의 릴리즈 작업은 Greg Kroah-Hartman 에게
부탁했다고 하니 곧바로 전체 개발 작업이 멈추진 않겠습니다.&lt;/p&gt;
&lt;p&gt;이 휴식 시간이 아주 길지는 않을 거고, 토발즈 자신은 너무 지쳐 더이상 리눅스
커널 개발에 손을 데고 싶지 않다는 의도가 아니라고 합니다.  이건 얼마전 너무
지쳤다며 자비로운 종신 독재자 직을 그만둔 귀도 반 로썸의 예[4]와 비교되기도
하는군요, 토발즈도 이를 조금 의식한 거 아닐까 싶습니다.  토발즈는 자신은 여전히
리눅스 커널 개발을 하고 싶고, 잘하고 싶기 때문에 이 선택을 한 것 뿐이며, 어쩌면
단순히 욕설을 감지해 욕설이 포함된 메일은 자동으로 보내지 않는 메일
클라이언트를 개발하고 복귀하는 간단한 일이 될수도 있을 거라고 합니다.&lt;/p&gt;
&lt;p&gt;개인적인 감상은, 글쎄요.  조금 반갑기도 하고 조금 아쉽기도 합니다.  커널
커뮤니티가 거칠고 모욕적인건 사실이지만 어느정도의 긴장감은 필요하다고
생각하기도 했고, 어떤 면에선 더욱 자유분방한 그 분위기를 저는 좋아했던 것도
같아서일 겁니다.  특히 AOSP 와 같이 악플은 커녕 무플이 심한 프로젝트에 참여했던
경험이 있는 저로썬 무플보단 악플이 낫다는 주의를 가졌던 것도 한 이유겠죠.
분명한 건 이 선언은 리눅스 커뮤니티의 외연 확장을 크게 도울 것 같습니다.  그게
마냥 좋기만 한 일일지, 윤리에 대한 자기검열이 커뮤니티의 토론 열기를 식히지는
않을지 걱정되기도 하지만요.  그리고, 이 선언의 최종 결과가 어떨지를 떠나,
그정도 위치에 있고 과거에 뱉어놓은 말들이 많은 리누스 토발즈가 이렇게 깔끔하게
사과를 하는 것도 대단한 멘탈이라 생각됩니다.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://sarah.thesharps.us/2013/07/15/no-more-verbal-abuse/&#34;&gt;http://sarah.thesharps.us/2013/07/15/no-more-verbal-abuse/&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;https://arstechnica.com/information-technology/2013/07/linus-torvalds-defends-his-right-to-shame-linux-kernel-developers/&#34;&gt;https://arstechnica.com/information-technology/2013/07/linus-torvalds-defends-his-right-to-shame-linux-kernel-developers/&lt;/a&gt;&lt;br&gt;
[3] &lt;a href=&#34;https://sjp38.github.io/post/git_origin_story_ko/&#34;&gt;https://sjp38.github.io/post/git_origin_story_ko/&lt;/a&gt;&lt;br&gt;
[4] &lt;a href=&#34;https://www.i-programmer.info/news/216-python/11967-guido-van-rossum-quits-as-python-bdfl.html&#34;&gt;https://www.i-programmer.info/news/216-python/11967-guido-van-rossum-quits-as-python-bdfl.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc3</title>
      <link>/post/lkml_news_v4.19-rc3/</link>
      <pubDate>Tue, 11 Sep 2018 06:01:49 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc3&#34;&gt;Linux 4.19-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwSxCt0aKkTxcBstthYXqJ5LtxRbO-CDyqgNwU94Ldq+w@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwSxCt0aKkTxcBstthYXqJ5LtxRbO-CDyqgNwU94Ldq+w@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;세번째 rc 릴리즈입니다.  어느새 이번 안정화 기간도 중반을 향하는군요.  시간 참
빠릅니다.  전체적으로 평범한 릴리즈입니다.  딱히 언급할 거리가 없군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v2-08-lru_lock-scalability-and-smp-list-functions&#34;&gt;[RFC PATCH v2 0/8] lru_lock scalability and SMP list functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180911004240.4758-1-daniel.m.jordan@oracle.com&#34;&gt;https://lkml.kernel.org/r/20180911004240.4758-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해 LSF/MM 서밋에서도 이야기되었던, &lt;code&gt;lru_lock&lt;/code&gt; 의 확장성을 개선하기 위한
노력의 정리입니다.  LRU 리스트에 여러 쓰레드가 실제 데이터를 겹쳐 쓰지 않는다면
동시에 접근할 수 있는 새로운 오퍼레이션 세개 (&lt;code&gt;smp_list_del()&lt;/code&gt;,
&lt;code&gt;smp_list_splice()&lt;/code&gt;, &lt;code&gt;smp_list_add()&lt;/code&gt;)을 추가했구요.  두번째로, &lt;code&gt;lru_lock&lt;/code&gt; 을
&lt;code&gt;spinlock&lt;/code&gt; 에서 &lt;code&gt;rwlock&lt;/code&gt; 으로 교체했군요.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;will-it-scale/page_fault1&lt;/code&gt; 이라는 마이크로 벤치마크를 사용해서 성능을
비교했는데, 44 코어 시스템에서 최대 73.8% 더 초당 페이지 폴트 처리량을 늘릴 수
있었다고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-09-improve-zone-lock-scalability-using-daniel-jordans-list-work&#34;&gt;[RFC PATCH 0/9] Improve zone lock scalability using Daniel Jordan&amp;rsquo;s list work&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180911053616.6894-1-aaron.lu@intel.com&#34;&gt;https://lkml.kernel.org/r/20180911053616.6894-1-aaron.lu@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;바로 앞에서 설명한, 여러 쓰레드가 동시에 리스트에 접근할 수 있도록 새로
만들어진 메커니즘은 &lt;code&gt;zone lock&lt;/code&gt; 에도 도움이 될 수 있다고 LSF/MM 에서 여럿이
생각했다고 합니다.  이 패치셋은 실제로 이 기능들을 이용해 &lt;code&gt;zone lock&lt;/code&gt; 의
확장성을 개선했습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch--v5-resend-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V5 RESEND 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180912004414.22583-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180912004414.22583-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 를 덩어리째 스왑아웃 / 스왑인 하기 위한 패치, 다섯번째 버전입니다.
생각보다 쉽게 머지되지 못하고 있군요.  리뷰가 많지 않은 것도 한 이유 아닐까
싶습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc2</title>
      <link>/post/lkml_news_v4.19-rc2/</link>
      <pubDate>Mon, 03 Sep 2018 11:34:35 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc2/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc2&#34;&gt;Linux 4.19-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFyG0GbDfoghEhAmKBPcZCiPu6CCpPRz9GwjCzLuP_Vv5Q@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 4.19 두번째 릴리즈 후보 버전의 릴리즈입니다.  첫번째 릴리즈 후보 버전
릴리즈 후엔 사람들이 좀 쉬게 마련이고 버그를 찾기엔 시간이 많지 않았기에 큰
변화는 없었습니다.  유럽사람들의 경우 아직 휴가기간인 사람도 많구요.  미국
OSSummit 이 지난주 진행된 것도 한 영향이겠네요.&lt;/p&gt;
&lt;h2 id=&#34;patch--v5-0021-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -V5 00/21] swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180903072214.24602-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180903072214.24602-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;관심있게 지켜보고 있는, THP swapout/in 패치입니다.  다음 머지 윈도우에선 들어갈 수 있을까요?&lt;/p&gt;
&lt;h2 id=&#34;plumbers-2018---performance-and-scalability-microconference&#34;&gt;Plumbers 2018 - Performance and Scalability Microconference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1dc80ff6-f53f-ae89-be29-3408bf7d69cc@oracle.com&#34;&gt;https://lkml.kernel.org/r/1dc80ff6-f53f-ae89-be29-3408bf7d69cc@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;올해 Linux Plumbers Conference 에 &amp;lsquo;Performance and Scalability Microconference&amp;rsquo;
가 열립니다.  Huge page, mmap_sem, cpu 병렬화 등등 재밌는 주제가 많네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.19-rc1</title>
      <link>/post/lkml_news_v4.19-rc1/</link>
      <pubDate>Mon, 27 Aug 2018 17:11:28 +0900</pubDate>
      <guid>/post/lkml_news_v4.19-rc1/</guid>
      <description>&lt;h2 id=&#34;linux-419-rc1&#34;&gt;Linux 4.19-rc1&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CA+55aFw9mxNPX6OtOp-aoUMdXSg=gBkQudGGamo__sh_ts_LdQ@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이주일의 머지 윈도우가 끝나고 리눅스 4.19 버전을 향한 안정화 단계가
시작되었습니다.&lt;/p&gt;
&lt;p&gt;토발즈에겐 결코 즐겁지 않은 머지 윈도우였습니다 (frustrating merge window
였다고 표현하는군요).  일단 머지 윈도우 초기부터 L1TF 취약점 이슈가 나왔죠.
하지만 이슈가 처음 발견된 건 아니고 공식 보고된 거다보니 그 전부터 수정은 하고
있었기에 머지만 하면 됐습니다.  토발즈는 &lt;code&gt;-next&lt;/code&gt; 트리와 다양한 커널 테스트
시스템들이 잘 갖추어져 있다는 증거라고 이야기 합니다.&lt;/p&gt;
&lt;p&gt;또, TLB 슛다운 버그에 대한 보고가 있었군요.  결국은 큰 문제는 아니었다고
결론났음에도 토발즈의 신경을 많이 긁었다고 합니다.  이 과정에서 관련 코드가
매우 복잡하고 디버깅 하기 어렵다고 이야기 되었기에 차후 정리가 필요할 것
같다는군요.&lt;/p&gt;
&lt;p&gt;또한, 이번 릴리즈는 꽤 많은 변경이 있는 편이라고 합니다, 물론 커밋 수
기반으로요.&lt;/p&gt;
&lt;h2 id=&#34;rfcpatch-05-introduce-procpididle_bitmap&#34;&gt;[RFC][PATCH 0/5] introduce /proc/PID/idle_bitmap&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180901112818.126790961@intel.com&#34;&gt;https://lkml.kernel.org/r/20180901112818.126790961@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/sys/kernel/mm/page_idle/bitmap&lt;/code&gt; 을 사용하면 시스템의 실제 워킹셋 페이지가
무엇무엇인지 알 수 있는데요, 이걸 &lt;code&gt;/proc/PID/idle_bitmap&lt;/code&gt; 으로 옮겨서 좀 더
finer-grained 하게 특정 프로세스의 워킹셋을 추적할 수 있게 하려는 RFC
패치입니다.  기존의 글로벌한 비트맵은 아무래도 사용하기에 오버헤드가 있기
때문이죠.  특히 NVIDMM 을 고려하면 수 테라바이트도 쉽게 보인다는 이야기를
하는군요.  저도 해당 bitmap 을 사용해 워킹셋 추적 프로그램을 만들었다가
오버헤드로 고민이 깊어져서 커널을 좀 고치긴 해야겠다 싶었는데, 잘 머지되면
좋겠습니다.&lt;/p&gt;
&lt;p&gt;이와 함께 인텔의 Apache Pass NVDIMM 에 대한 이야기도 하는군요.  옵테인 기반의
NVDIMM 제품인 거 같은데, NVDIMM 도 현물이 나오기 시작하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-lkmm-17-toolsmemory-model-add-extra-ordering-for-locks-and-remove-it-for-ordinary-releaseacquire&#34;&gt;[PATCH RFC LKMM 1/7] tools/memory-model: Add extra ordering for locks and remove it for ordinary release/acquire&lt;/h2&gt;
&lt;p&gt;이 락킹 앞뒤의 액세스 순서를 지켜주는게 LKMM 에는 반영되어 있지 않습니다.
이걸로 몇명의 커널 프로그래머들이 항의했나 보네요.  이런 부분들을 추가하는
패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-06-documentation-updates-for-v420v50&#34;&gt;[PATCH tip/core/rcu 0/6] Documentation updates for v4.20/v5.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180829211637.GA20980@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180829211637.GA20980@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다음 리눅스 머지 윈도우를 겨냥하는 RCU 쪽 문서 업데이트입니다.  다음 버전은
4.20이 될지 5.0이 될지 Paul 도 모르겠나보군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-03-srcu-updates-for-v420v50&#34;&gt;[PATCH tip/core/rcu 0/3] SRCU updates for v4.20/v5.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180829212036.GA22033@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180829212036.GA22033@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다음 리눅스 머지 윈도우를 향한 SRCU 업데이트 입니다.  &lt;code&gt;call_srcu()&lt;/code&gt; 를 부팅
초기부터 사용할 수 있도록 하는군요.  테스트도 작성했습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-024-additional-rcu-consolidation-cleanups-for-v420v50&#34;&gt;[PATCH tip/core/rcu 0/24] Additional RCU-consolidation cleanups for v4.20/v5.0&lt;/h2&gt;
&lt;p&gt;RCU 는 여러 변종 (flavor) 들이 있는데, 이것들을 최대한 합치려 하고 있는 듯
하군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.18</title>
      <link>/post/lkml_news_v4.18/</link>
      <pubDate>Mon, 13 Aug 2018 10:50:27 +0900</pubDate>
      <guid>/post/lkml_news_v4.18/</guid>
      <description>&lt;h2 id=&#34;linux-418&#34;&gt;Linux 4.18&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzos7tr=OLju10Oe-z7r=eB2dSaFa7vwz2ApGO13B=z_g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;자, 오랫만에 rc 버전을 8개나 내며 긴 안정화 기간을 거친 4.18 버전이 릴리즈
되었습니다.  따라서 지난주는 조용해야 했고 실제로 조용했지만 그럼에도 불구하고
vfs 레이스 컨디션 문제 수정 등의 변경도 있긴 했습니다.  이번 정식 릴리즈로
포함된 기능 중 개인적으로는 Restartable Sequence 가 눈에 띄고 흥미롭군요.  아마
2015년? 인가에 서울에서 커널 서밋 열려서 거기서 발표 들었을 때부터
관심있었거든요.  유저스페이스에서 이 기능을 잘 사용하면 멀티코어 성능확장성에
큰 개선이 가능할 것 같습니다.&lt;/p&gt;
&lt;p&gt;어쨌건, 이로써 4.19 버전을 향한 머지 윈도우가 열렸습니다.  5.x 는 언제
시작되려나요?&lt;/p&gt;
&lt;h2 id=&#34;git-pull-xarray-for-419&#34;&gt;[GIT PULL] XArray for 4.19&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180813161357.GB1199@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20180813161357.GB1199@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 몇번 소개한 XArray 의 개발자, Matthew 가 충분히 리뷰도 받고
수정도 했다고 생각하는 것 같습니다.  4.18 릴리즈와 함께 열린 4.19 머지윈도우에
XArray 풀리퀘스트를 리누스 토발즈에게 던졌군요!&lt;/p&gt;
&lt;p&gt;이 풀리퀘스트는 XArray 의 구현과 &lt;code&gt;pagecache&lt;/code&gt; 가 XArray 를 사용하도록 하는
변경을 담고 있습니다.&lt;/p&gt;
&lt;p&gt;그러나, 리눅스는 이 패치셋을 받아들이지 않기로 결정했습니다.  XArray 자체에
문제가 있어서느 아니고, 이 패치셋이 &lt;code&gt;libnvdimm&lt;/code&gt; 소스트리 위에서 만들어졌기
때문입니다.  &lt;code&gt;-next&lt;/code&gt; 트리 관리자가 그렇게 하자고 조언한 것 같은데, 어쨌든
Mattew 에겐 안됐지만 다음 버전에서 머지되길 기대해야겠군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-03-docscore-api-add-memory-allocation-guide&#34;&gt;[PATCH v3 0/3] docs/core-api: add memory allocation guide&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1534517236-16762-1-git-send-email-rppt@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1534517236-16762-1-git-send-email-rppt@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;메모리 관리쪽 커널 문서가 지속적으로 업데이트 되고 있습니다.  개인적으로는
커널을 공부할 때 공식 문서를 선호하는 편이라 반가운 일이군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.18-rc8</title>
      <link>/post/lkml_news_v4.18-rc8/</link>
      <pubDate>Mon, 06 Aug 2018 17:53:02 +0900</pubDate>
      <guid>/post/lkml_news_v4.18-rc8/</guid>
      <description>&lt;h2 id=&#34;linux-418-rc8&#34;&gt;Linux 4.18-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFw49Bh9u3KvGsMbnSLfHvevpWPuqgrWQT0tC0XCajNwzA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;원래대로라면 오늘 4.18 정식 릴리즈가 있어야 했지만, 지난주 동안 여러 일이
있었고, 결국 여덟번째 rc 버전이 나오고 말았습니다.  VM 쪽 이슈가 큰 이유였고,
그것만 문제였으면 그냥 정식 릴리즈를 하려 했지만 네트워킹 쪽에서도 뒤늦은
문제가 터지고 VFS 쪽에도 이슈가 있었던 관계로 정식 릴리즈를 미루기로 결심했다고
합니다.&lt;/p&gt;
&lt;p&gt;8월에 휴가를 많이 떠나는 유럽 개발자들을 고려해서 토발즈는 휴가가 예정되어
있다면 그냥 원래 예상된 스케쥴대로 이번주부터 머지 윈도우 열렸다고 생각하고
풀리퀘스트 보내고 휴가 가라고 대인배라면 대인배 같은 면모를 보이는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-rfc-0010-introduce-lockless-shrink_slab&#34;&gt;[PATCH RFC 00/10] Introduce lockless shrink_slab()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/153365347929.19074.12509495712735843805.stgit@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/153365347929.19074.12509495712735843805.stgit@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 이야기 했던 &amp;ldquo;Improve shrink_slab() scalability&amp;hellip;&amp;rdquo; 패치의 머지
후, 성능 병목 지점이 &lt;code&gt;shrink_lab()&lt;/code&gt; 에서 &lt;code&gt;down_read_trylock()&lt;/code&gt; 으로
넘어갔습니다!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &amp;gt; I created 255 memcgs, 255 ext4 mounts and made each memcg create a
     &amp;gt; file containing few KiBs on corresponding mount. Then in a separate
     &amp;gt; memcg of 200 MiB limit ran a fork-bomb.
     &amp;gt;
     &amp;gt; I ran the &amp;quot;perf record -ag -- sleep 60&amp;quot; and below are the results:
     &amp;gt; +  47.49%            fb.sh  [kernel.kallsyms]    [k] down_read_trylock
     &amp;gt; +  30.72%            fb.sh  [kernel.kallsyms]    [k] up_read
     &amp;gt; +   9.51%            fb.sh  [kernel.kallsyms]    [k] mem_cgroup_iter
     &amp;gt; +   1.69%            fb.sh  [kernel.kallsyms]    [k] shrink_node_memcg
     &amp;gt; +   1.35%            fb.sh  [kernel.kallsyms]    [k] mem_cgroup_protected
     &amp;gt; +   1.05%            fb.sh  [kernel.kallsyms]    [k] queued_spin_lock_slowpath
     &amp;gt; +   0.85%            fb.sh  [kernel.kallsyms]    [k] _raw_spin_lock
     &amp;gt; +   0.78%            fb.sh  [kernel.kallsyms]    [k] lruvec_lru_size
     &amp;gt; +   0.57%            fb.sh  [kernel.kallsyms]    [k] shrink_node
     &amp;gt; +   0.54%            fb.sh  [kernel.kallsyms]    [k] queue_work_on
     &amp;gt; +   0.46%            fb.sh  [kernel.kallsyms]    [k] shrink_slab_memcg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 패치셋은 계속해서 &lt;code&gt;shrink_slab()&lt;/code&gt; 의 멀티코어 성능 확장성을 위해 lock 을
사용하지 않게끔 경로를 최적화 하고 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;code&gt;shrink_slab()&lt;/code&gt; 과 &lt;code&gt;unregister_shrinker()&lt;/code&gt; 사이의 동기화에 SRCU 를
사용하고, 그럴 수 없는 경우에는 &lt;code&gt;percpu_rw_semaphore&lt;/code&gt; 를 사용합니다.  그리고
&lt;code&gt;shrinker_rwsem&lt;/code&gt; 을 뮤텍스로 교체합니다.&lt;/p&gt;
&lt;p&gt;SRCU 를 사용함으로 인해 커널 바이너리 사이즈가 커지는 문제가 있는데, 과거에도
비슷한 시도가 이런 이유로 취소된 적 있었군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.18-rc7</title>
      <link>/post/lkml_news_v4.18-rc7/</link>
      <pubDate>Mon, 30 Jul 2018 08:49:12 +0900</pubDate>
      <guid>/post/lkml_news_v4.18-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-418-rc7&#34;&gt;Linux 4.18-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxpFefwVdTGVML99PSFUqwpJXPx5LVCA3D=g2t2_QLNsA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일곱번째 rc 릴리즈입니다.  별다른 일 없으면 다음주에 4.18이 릴리즈 되겠다고
토발즈도 이야기 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-06-kmalloc-reclaimable-caches&#34;&gt;[PATCH v4 0/6] kmalloc-reclaimable caches&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180731090649.16028-1-vbabka@suse.cz&#34;&gt;https://lkml.kernel.org/r/20180731090649.16028-1-vbabka@suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;내부적으로 SLAB 할당자를 사용하는 kmem cache 들은 &lt;code&gt;SLAB_RECLAIM_ACCOUNT&lt;/code&gt;
플래그를 가지고 생성될 경우에 시스템 메모리가 부족한 경우 기존에 할당받은
오브젝트들을 회수해도 좋다고 알리게 됩니다.&lt;/p&gt;
&lt;p&gt;일반적인 kmem cache 들은 이 플래그 없이 생성되서는 시스템의 메모리가 부족한
경우에 회수되어도 좋은 오브젝트의 할당에 사용되기도 하는데, 다양한 크기의
오브젝트들은 &lt;code&gt;SLAB_RECLAIM_ACCOUNT&lt;/code&gt; 플래그를 가진 하나의 kmem cache 에서 처리될
수 없기 때문이죠.  &lt;code&gt;dcache&lt;/code&gt; 의 &lt;code&gt;external name&lt;/code&gt; 들이 그 예입니다.&lt;/p&gt;
&lt;p&gt;이와 비슷한 경우들을 해결하기 위해 이 패치셋은 kmalloc cache 에
SLAB_RECLAIM_ACCOUNT  와 비슷한 특성을 갖는 변종을 kmalloc-rcl-x 라는 이름으로
만들었습니다.  kmalloc() 시에 &lt;code&gt;__GFP_RECLAIMABLE&lt;/code&gt; 플래그를 넣으면 이 캐시에서
메모리가 할당됩니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-swap-use-__try_to_reclaim_swap-in-free_swap_and_cache&#34;&gt;&lt;code&gt;[PATCH] swap: Use __try_to_reclaim_swap() in free_swap_and_cache()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180803123014.15431-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180803123014.15431-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;스왑 엔트리를 회수하는 코드 경로는 &lt;code&gt;free_swap_and_cache()&lt;/code&gt; 가 있고
&lt;code&gt;__try_to_reclaim_swap()&lt;/code&gt; 이 있는데, 코딩 스타일 빼고는 실제 하는 일이 거의
똑같습니다.  이 패치는 &lt;code&gt;free_swap_and_cache()&lt;/code&gt; 에서 내부적으로
&lt;code&gt;__try_to_reclaim_cache()&lt;/code&gt; 를 사용하게 함으로써 코드의 가독성을 높이고 잠재적
버그를 줄였습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.18-rc6</title>
      <link>/post/lkml_news_v4.18-rc6/</link>
      <pubDate>Tue, 24 Jul 2018 06:19:53 +0900</pubDate>
      <guid>/post/lkml_news_v4.18-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-418-rc6&#34;&gt;Linux 4.18-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzMheDA-2z=MdGgJrz-REcrknb+4OEvRKaJipm+x6xEhw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 rc는 평소보다 조금 크게 되었는데, 네트워킹 쪽 메인테이너인 David 가 많은
수정사항을 아직 보내지 않았다가 이번에 모아서 보냈기 때문이라는군요.  그렇다
해도 그렇게 큰 양까진 아니라는 토발즈의 설명입니다.&lt;/p&gt;
&lt;p&gt;지난 rc5 작업 주간을 귀찮게 했던 VM 버그에 대한 두줄의 수정이 rc5 에
들어갔었지만 32비트 환경에 대한 고려가 없었기에 이번에 그 수정이
들어갔다는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-07-memory-management-documentation-updates&#34;&gt;[PATCH 0/7] memory management documentation updates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1532517970-16409-1-git-send-email-rppt@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1532517970-16409-1-git-send-email-rppt@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;메모리 관리 부분 문서화 업데이트입니다.  sphinx 기반 문서화 업데이트를 일부
메인테이너들은 반기지 않는 것도 사실이지만, 확실히 가독성이 좋아진 덕에 이런
문서화 노력이 더 활발해 지는 것 아닌가 하는 생각도 드는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.18 Rc4</title>
      <link>/post/lkml_news_v4.18-rc4/</link>
      <pubDate>Mon, 09 Jul 2018 10:01:05 +0900</pubDate>
      <guid>/post/lkml_news_v4.18-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-418-rc4&#34;&gt;Linux 4.18-rc4&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CA+55aFwXGyZ1Yx+Z8a93gpvb596ZRJ5ppiQL_+-k7gjeQLtcsQ@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;어느덧 네번째 RC 버전 릴리즈입니다.  지루할 정도로 평범한 릴리즈라는군요.
대부분 드라이버쪽 업데이트이고, bpf, cifs, ext4, 스케쥴러, 그리고 일부 arch
업데이트가 대부분입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-0017-improve-shrink_slab-scalability-old-complexity-was-on2-new-is-on&#34;&gt;[PATCH v9 00/17] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n))&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/153112469064.4097.2581798353485457328.stgit@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/153112469064.4097.2581798353485457328.stgit@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shrink_slab()&lt;/code&gt; 의 compexity 를 O(n^2) 에서 O(n) 으로 낮춰 확장성을 높인 패치의
아홉번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-cma-remove-unsupported-gfp-mask-parameter&#34;&gt;[PATCH 0/2] CMA: remove unsupported gfp mask parameter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180709122018eucas1p277147b1e6385d552b5a8930d0a8ba91c~-sqSan6292733527335eucas1p2-@eucas1p2.samsung.com&#34;&gt;https://lkml.kernel.org/r/20180709122018eucas1p277147b1e6385d552b5a8930d0a8ba91c~-sqSan6292733527335eucas1p2-@eucas1p2.samsung.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cma_alloc()&lt;/code&gt; 과 &lt;code&gt;dma_alloc_from_contiguous()&lt;/code&gt; 함수는 gfp mask 패러미터를
받지만 실질적으론 &lt;code&gt;__GFP_NORARN&lt;/code&gt; 플래그만을 지원하고 있습니다.  이 패치는
따라서 해당 패러미터를 &lt;code&gt;no_warn&lt;/code&gt; 이란 이름의 boolean 타입으로 교체합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-page_alloc-double-zones-batchsize&#34;&gt;[RFC PATCH] mm, page_alloc: double zone&amp;rsquo;s batchsize&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180711055855.29072-1-aaron.lu@intel.com&#34;&gt;https://lkml.kernel.org/r/20180711055855.29072-1-aaron.lu@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널 페이지 할당자는 잘 알려진 Buddy allocator 입니다만, 멀티 CPU
환경에서의 컨텐션을 줄이기 위해 per-CPU pageset 이란 걸 존별로 가지고 있어서
Buddy allocator 로부터는 한번에 듬뿍 페이지를 할당받아와 CPU 별 pageset 에
넣어두고서 여기서 한동안 할당받고, 이게 텅 비었을 때 buddy allocator 에게 다시
여러개 page 를 할당받습니다.  이런 형태를 batching 이라고 하죠.&lt;/p&gt;
&lt;p&gt;이 batch 크기, 즉 한번에 buddy allocator 에서 할당받는 페이지의 갯수는 적정해야
합니다.  이 값이 10년전에 두배로 커져 31이 된 후 유지되고 있습니다.  따라서
오늘날에는 이 값이 너무 작다는 생각이 있어 다시 한번 두배로 늘리는 (31에서 63
으로) 패치입니다.&lt;/p&gt;
&lt;p&gt;will-it-scale/page_fault1, ebizzy, oltp, kbuild, pigz, netperf, vm-scalability
등의 벤치마크를 사용했군요.&lt;/p&gt;
&lt;p&gt;전체적으로 성능 향상이 있었지만 batch 크기가 커진만큼 실제 buddy allocator 에게
할당을 요청할 때 반응시간이 느려지는 문제가 있긴 합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-kvmx86-inform-rcu-of-quiescent-state-when-entering-guest-mode&#34;&gt;[PATCH v2] kvm/x86: Inform RCU of quiescent state when entering guest mode&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180711180101.3711464-1-dwmw2@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180711180101.3711464-1-dwmw2@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU reader critical section 은 가능한 빨리 끝나야 합니다.  그렇지 않으면 grace
period 가 길어져 시스템 메모리 사용량이 늘어날 수 있죠.  RCU reader critical
section 내에서의 sleeping 을 하지 못하게 함으로써 리눅스 커널은 이를 가능하게
합니다만, VM 환경에서는 reader critical section 내에서 VM 자체가 CPU 를 놓을 수
있으므로 critical section 이 길어지는 문제가 가능합니다.  이 패치는 guest mode
에 들어갈 때 이에 관한 정보를 알림으로써 이 문제를 해결할 수 있게 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17</title>
      <link>/post/lkml_news_v4.17/</link>
      <pubDate>Mon, 04 Jun 2018 11:29:16 +0900</pubDate>
      <guid>/post/lkml_news_v4.17/</guid>
      <description>&lt;h2 id=&#34;linux-417&#34;&gt;Linux 4.17&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxhx_tKGm02UySguvbyfB_7oTF31QfgOHCK0YkBvmfV0g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxhx_tKGm02UySguvbyfB_7oTF31QfgOHCK0YkBvmfV0g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.17 버전 리눅스 릴리즈입니다.  지난주에 토발즈가 이야기한 것처럼 별다른 지연
없이 릴리즈 되었군요.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git object&lt;/code&gt; 의 갯수라던지 릴리즈를 위한 스크립트 등이 리눅스 5.x 버전으로의
메이저 버전 업데이트가 될 준비가 되었다고 하지만 토발즈는 딱히 5.x 로 아직은
넘어갈 생각이 없군요.  너무 멀지 않은 미래에 넘어가겠지만, 적어도 지금은
아니라고 합니다.&lt;/p&gt;
&lt;p&gt;항상 그렇듯 이 릴리즈는 4.18을 위한 머지 윈도우의 시작이기도 한데, 토발즈는
두번째 주에 여행을 갈거라 가능하면 첫째주에 중요한 머지를 마무리 했으면 한다고
하네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v13-0072-convert-page-cache-to-xarray&#34;&gt;[PATCH v13 00/72] Convert page cache to XArray&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180611140639.17215-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180611140639.17215-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Radix tree 를 대체하기위한 목적으로 Matthew Wilcox 가 개발중인 XArray 의 구현과
Page cache 가 이 자료구조를 사용하도록 변경하는 패치의 13번째 버전입니다.  작년
OSSummit Europe 에서 처음 XArray 에 대한 발표를 들었는데 계속 발전중인 것
같군요.&lt;/p&gt;
&lt;h2 id=&#34;re-417-regression-performance-drop-on-kernel-417-visible-on&#34;&gt;Re: [4.17 regression] Performance drop on kernel-4.17 visible on&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180607110713.GJ32433@dhcp22.suse.cz&#34;&gt;https://lkml.kernel.org/r/20180607110713.GJ32433@dhcp22.suse.cz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16 대비 4.17 의 NUMA 시스템에서 Stream, Linpack, NAS 벤치마크 성능이 크게
떨어졌다는 레포트입니다.  최대 50% 까지의 성능 하락이 있었군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after 4.17-rc7</title>
      <link>/post/lkml_news_v4.17-rc7/</link>
      <pubDate>Mon, 28 May 2018 10:41:50 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-417-rc7&#34;&gt;Linux 4.17-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwUqz9z1Rf4Wwr29W7DeKxQ67qKEW5xty+JPyCY3aNQ=A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwUqz9z1Rf4Wwr29W7DeKxQ67qKEW5xty+JPyCY3aNQ=A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일곱번째 rc 입니다.  지난 몇주보다는 조금 변경사항이 있었지만 그렇다 해도
그렇게 심한 정도는 아니었기에 아마도 이게 마지막 rc 일 거라는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0013-introdue-iolatency-io-controller-for-cgroups&#34;&gt;[PATCH 00/13] Introdue io.latency io controller for cgroups&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180529211724.4531-1-josef@toxicpanda.com&#34;&gt;https://lkml.kernel.org/r/20180529211724.4531-1-josef@toxicpanda.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cgroup 에 응답시간 (latency) 기반의 I/O 컨트롤러를 추가하는 패치셋입니다.
Cgroup 은 용량 기반의 컨트롤러는 많지만 응답시간 기반의 컨트롤러가 부족하다고
느껴왔는데, 역시 추가되어 가는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc6</title>
      <link>/post/lkml_news_v4.17-rc6/</link>
      <pubDate>Mon, 21 May 2018 10:19:16 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-v417-rc6&#34;&gt;Linux v4.17-rc6&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://lkml.kernel.org/r/CA+55aFxxYQFL3mwsQcC+__R23ZmO8c3F0SThi6r44TdK0ePNDQ@mail.gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;여섯번째 release candidate 버전입니다.  이번 릴리즈에도 특기할 만한 일은
없었습니다.  이제 충분히 안정화 되었을 거라고 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch--mm--v3-0021-mm-thp-swap-swapoutswapin-thp-in-one-piece&#34;&gt;[PATCH -mm -V3 00/21] mm, THP, swap: Swapout/swapin THP in one piece&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180523082625.6897-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180523082625.6897-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이전에도 이 시리즈로 소개했던, THP 의 swap out 과 swap in 최적화 마지막 단계
패치의 세번째 버전입니다.  마지막 단계 이야기 하니 문득 인피니티워의 오역
논란이 떠오르는군요 ;)  두번째 버전 이후 특정 컨피규레이션에서의 빌드 버그를
수정했고, mmotm/master 브랜치의 5월 18일자 버전으로 rebase 한게 차이점의
전부군요.&lt;/p&gt;
&lt;p&gt;RAM 으로 PMEM 을 시뮬레이션 하는 환경에서 vm-scalability 라는 벤치마크를 사용해
16개 프로세스가 anonymous page 를 상당량 할당받고 반복해서 접근하는 워크로드로
성능 차이를 비교했습니다.  이로 인해 패치 전 대비 워크로드 처리량 (throughput)
이 992.8% 향상되었습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-04-fixes-cleanups-for-rcudev&#34;&gt;[PATCH v3 0/4] fixes, cleanups for rcu/dev&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180521044220.123933-1-joel@joelfernandes.org&#34;&gt;https://lkml.kernel.org/r/20180521044220.123933-1-joel@joelfernandes.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 코드의 주석, 변수 사용, 변수 이름 등의 개선 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;resend-patch-v5-0033-block-support-multipage-bvec&#34;&gt;[RESEND PATCH V5 00/33] block: support multipage bvec&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180525034621.31147-1-ming.lei@redhat.com&#34;&gt;https://lkml.kernel.org/r/20180525034621.31147-1-ming.lei@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;하나의 &lt;code&gt;struct bio_bvec&lt;/code&gt; 이 물리적으로 연속적인 복수개의 페이지를 가질 수 있게
하는 패치입니다.  시스템의 메모리가 거대해지고 THP 등이 널리 쓰임에 따라 이런
변화가 필요했다는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch--v2--mm-04-mm-huge-page-copy-target-sub-page-last-when-copy-huge-page&#34;&gt;[PATCH -V2 -mm 0/4] mm, huge page: Copy target sub-page last when copy huge page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180524005851.4079-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180524005851.4079-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge page 의 복사 시에는 source 와 destination page 각각에 접근을 해야 하므로,
2 MiB huge page 를 사용한다 가정하면 총 4 MiB 데이터 액세스가 필요합니다.
예컨대 Xeon E5 v3 2699 CPU 는 18개의 코어, 36개 쓰레드, 그리고 45 MiB Last
Level Cache 를 가지므로 코어별로는 2.5 MiB, 쓰레드별로는 1.25 MiB 의 Last Level
Cache 밖에 갖지 못하므로, 여기서 huge page 복사가 일어나면 자신의 Last Level
Cache 를 모조리 접근해서 데이터가 flooding 나고 이후 데이터 접근은 cache miss
가 날 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;이 패치셋은 target huge page 의 sub-page 를 마지막에 복사하도록 복사 시의
데이터 접근 순서를 약간 바꿔서 대부분의 경우에는 캐시 미스를 좀 더 줄일 수
있도록 했습니다.&lt;/p&gt;
&lt;p&gt;vm-scalability 의 anon-cow-seq 테스트 케이스를 2 socket Xeon E5 v3 2699
시스템에서 돌려본 결과, 약 16.6% 까지의 성능 향상이 있었다고 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc5</title>
      <link>/post/lkml_news_v4.17-rc5/</link>
      <pubDate>Mon, 14 May 2018 10:23:45 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc5/</guid>
      <description>&lt;h2 id=&#34;linux-417-rc5&#34;&gt;Linux 4.17-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxi-Q6hvdHn+JwYSQ9b3feNGoFM3eeAuKNhpkfxVNAGpA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxi-Q6hvdHn+JwYSQ9b3feNGoFM3eeAuKNhpkfxVNAGpA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.17을 향한 다섯번째 rc 릴리즈입니다.  이번 릴리즈도 여느 때와 다름없이
평범하군요.  대부분 드라이버 변경들이고, amd gpu 쪽 변경이 있지만 나머지
부분들은 그렇게 많지 않고 대부분 한두줄 짜리 변경들입니다.  이대로라면 이번
4.17 릴리즈는 꽤 무난무난하게 끝나겠군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v11-0026-speculative-page-faults&#34;&gt;[PATCH v11 00/26] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1526555193-7242-1-git-send-email-ldufour@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1526555193-7242-1-git-send-email-ldufour@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 몇차례 소개한, speculative page fault 의 11번째 버전입니다.
지난 LSFMM 에서도 관련해 논의를 한 것 같던데, 아주 긍정적 반응은 아니었던 것
같습니다만, 어쨌든 오랫만에 올라온 새로운 버전의 패치셋이군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v6-0017-rearrange-struct-page&#34;&gt;[PATCH v6 00/17] Rearrange struct page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180518194519.3820-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180518194519.3820-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct page&lt;/code&gt; 의 구조를 좀 더 사용하기 쉽게 개선하는 패치의 여섯번째
버전입니다.  LSFMM 에서는 그 구조를 구글 문서[1]를 사용해 그림으로 그려가며
설명했고, 꽤 괜찮은 반응을 얻었던 것 같더군요.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing&#34;&gt;https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc4</title>
      <link>/post/lkml_news_v4.17-rc4/</link>
      <pubDate>Mon, 07 May 2018 12:12:32 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-417-rc4&#34;&gt;Linux 4.17-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFyry0qeZvYjU5pf8a6zvb_ALmP-2T9+HZH2DHK93P6rQg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFyry0qeZvYjU5pf8a6zvb_ALmP-2T9+HZH2DHK93P6rQg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어느새 네번째 rc 버전입니다.  v4.17 을 향한 여정이 절반을 넘어가는군요.  이번 릴리즈도 특이사항 없이 평범합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc3</title>
      <link>/post/lkml_news_v4.17-rc3/</link>
      <pubDate>Mon, 30 Apr 2018 12:59:19 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-417-rc3&#34;&gt;Linux 4.17-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFyu=y0SBesB+vx3JZFGcOhP+tuVG7sjfrkfBhXHTe0Skg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFyu=y0SBesB+vx3JZFGcOhP+tuVG7sjfrkfBhXHTe0Skg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;세번째 rc 버전이 나왔습니다.  평소보다 좀 일찍 왔군요.  rc2 에 비해 커다란
릴리즈이긴 한데, 그렇다 해도 평범한 릴리즈라고 리누스는 이야기 합니다.
대부분의 변경 사항이 드라이버 쪽 수정이기 때문이라고 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0016-rearrange-struct-page&#34;&gt;[PATCH v4 00/16] Rearrange struct page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180430202247.25220-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180430202247.25220-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 블로그에서도 소개했던, Matthew Wilcox 의 &amp;lsquo;struct page&amp;rsquo; 정리 패치의 네번째
버전입니다.  지난주 LSFMM 에서도 소개한 모양인데, 이 변화의 전/후를 google
spread sheet 로 정리한 문서도 여기서 공개했나보군요:
&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing&#34;&gt;https://docs.google.com/spreadsheets/d/1tvCszs_7FXrjei9_mtFiKV6nW1FLnYyvPvW-qNZhdog/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-04-interface-for-higher-order-contiguous-allocations&#34;&gt;[PATCH v2 0/4] Interface for higher order contiguous allocations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180503232935.22539-1-mike.kravetz@oracle.com&#34;&gt;https://lkml.kernel.org/r/20180503232935.22539-1-mike.kravetz@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mmap(MAP_CONTIG)&lt;/code&gt; 를 추가하자는 아이디어가 있었습니다.  현재 리눅스 커널에서
연속된 메모리 공간 할당에 사용되기 위해 만들어진 인터페이스는 CMA가 있는데, 그
목적이 좀 특수한 상황에 맞춰져 있다보니 좀 더 범용적 인터페이스가 있으면
어떻겠나 하는 이야기가 나와, 그런 인터페이스를 만들어 제시하는 패치입니다.
제안하는 인터페이스는 다음과 같습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct page *find_alloc_contig_pages(unsigned long nr_pages, gfp_t gfp,
                                        int nid, nodemask_t *nodemask)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rfc-distinguish-vmalloc-pages&#34;&gt;[RFC] Distinguish vmalloc pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180502152733.GB2737@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20180502152733.GB2737@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VMalloc 페이지는 유저스페이스에 매핑될 수도 있으므로 성능 분석과 memory leak
문제 분석의 편의를 위해  page-&amp;gt;mapping 값에 이를 가리키는 표식과 해당 페이지를
가리키는 &lt;code&gt;vm_struct&lt;/code&gt; 와 그 안에서의 &lt;code&gt;offset&lt;/code&gt; 을 저장하는 RFC 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;introduce-atomic_dec_and_lock_irqsave&#34;&gt;Introduce atomic_dec_and_lock_irqsave()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180504154533.8833-1-bigeasy@linutronix.de&#34;&gt;https://lkml.kernel.org/r/20180504154533.8833-1-bigeasy@linutronix.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;local_irq_save()&lt;/code&gt; + &lt;code&gt;atomic_dec_and_lock()&lt;/code&gt; 조합을 써야 하던 코드를 위해 이를
감싸는 새로운 함수, &lt;code&gt;atomic_dec_and_lock_irqsave()&lt;/code&gt; 를 만들고 기존의 코드가
이를 사용하도록 고친 패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc2</title>
      <link>/post/lkml_news_v4.17-rc2/</link>
      <pubDate>Mon, 23 Apr 2018 12:03:23 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc2/</guid>
      <description>&lt;h2 id=&#34;linux-v417-rc2&#34;&gt;Linux v4.17-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwzkGuq5ASF-vhYj7mEX26V0K+uZCLWi1BLYq+9F1n-Rw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwzkGuq5ASF-vhYj7mEX26V0K+uZCLWi1BLYq+9F1n-Rw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;두번째 rc 버전의 릴리즈입니다.  &lt;code&gt;perf&lt;/code&gt; 와 테스트 스크립트 쪽에 변경사항이 좀
많긴 하지만 평소와 크게 다르지 않은 추이라는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.17-rc1</title>
      <link>/post/lkml_news_v4.17-rc1/</link>
      <pubDate>Mon, 16 Apr 2018 10:59:58 +0900</pubDate>
      <guid>/post/lkml_news_v4.17-rc1/</guid>
      <description>&lt;h2 id=&#34;linux-v417-rc1&#34;&gt;Linux v4.17-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFx62iBkj+hOmhLksUtvjwTcm_o1dwcyvaNnVpJ-AmvzVQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFx62iBkj+hOmhLksUtvjwTcm_o1dwcyvaNnVpJ-AmvzVQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2주간의 머지 윈도우가 지나고, v4.17-rc1 이 릴리즈 되었습니다.  크게 특별할 것
없이 평범한 머지 윈도우였다고 토발즈는 평하는군요.  그리고 이번에 git objects
mark 가 4백만을 넘겼습니다.  따라서 다음 커널이 v5.0 이어도 될 것 같은데, 꼭
다음 버전에서 그렇게 할지는 모르겠다는군요.  리눅스 커널에서 버전은 그저 시간이
흘렀음을 의미할 뿐, 큰 변화가 있어서 메이저 버전 넘버가 바뀌는게 아니기
때문이죠.  참고로 v3.0 과 v4.0 은 각각 git objects mark 2백만과 4백만에서
이루어졌군요.&lt;/p&gt;
&lt;p&gt;암튼 언젠가는 v5.0 을 릴리즈 하겠지만 너무 큰 의미를 부여하지 말아달라고 이야기 하고 있습니다.&lt;/p&gt;
&lt;p&gt;토발즈는 또한 이번 머지 윈도우에서의 변화로 몇가지를 꼽는데요.
오래된 아키텍쳐인 backfin, cris, frv, m32r, metag, mn10300, score, tile
아키텍쳐의 지원을 끊기로 했고 nds32 라는 새로운 아키텍쳐를 지원하게 되었군요.
해당 아키텍쳐에 지원이 더 필요하다면 언제든 되살려도 좋지만 본인이 잘 관리할 수
있음을 증명해야 함을 한번 더 언급하고 있습니다.&lt;/p&gt;
&lt;p&gt;또한, 이번 머지 윈도우에선 클린업이 꽤 있었습니다.  staging 드라이버들 몇개가
제거되었고, spdx 를 사용함으로써 카피라이트 문구도 많이 줄었습니다.
pre-shipped lexer / parser 파일들도 사라졌구요.&lt;/p&gt;
&lt;p&gt;결국, 이번 릴리즈는 추가된 코드 라인보다 삭제된 코드 라인이 많았던 릴리즈군요.
프로젝트 관리자로써 토발즈가 속시원할 것 같습니다.  이런 경우는 커널 릴리즈
역사상 처음이라는군요.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 13538 files changed, 627723 insertions(+), 818855 deletions(-)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;patch-v10-0025-speculative-page-faults&#34;&gt;[PATCH v10 00/25] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1523975611-15978-1-git-send-email-ldufour@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1523975611-15978-1-git-send-email-ldufour@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어느새 열번째 버전의 speculative page faults 패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-0012-improve-shrink_slab-scalability-old-complexity-was-on2-new-is-on&#34;&gt;[PATCH v2 00/12] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n))&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/152397794111.3456.1281420602140818725.stgit@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/152397794111.3456.1281420602140818725.stgit@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;많은 memort shrinker 들 또는 메모리 cgroups 를 가진 시스템에서는 그 수의 제곱에
비례해 &lt;code&gt;shrink_slab()&lt;/code&gt; 의 수행시간이 증가하는데, 이 문제를 해결하고자 하는
패치셋입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# echo 3 &amp;gt; /proc/sys/vm/drop_caches&lt;/code&gt; 의 수행시간을 사용해 성능 차이를
측정했군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0021-mm-thp-swap-swapoutswapin-thp-as-a-whole&#34;&gt;[PATCH 00/21] mm, THP, swap: Swapout/swapin THP as a whole&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180417020230.26412-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180417020230.26412-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP (Transparent Huge Page) 는 swap out 되기 전에 regular page 로 쪼개져야
했습니다.  이 작업에 많은 시간이 걸렸기에 한번에 THP 를 swap out 하기 위한
작업을 Huang Ying 이 해왔고 일단 쪼개는 작업은 최후로 미뤄뒀는데 마침내 완전히
THP 단위로 swap out 을 행하는 패치셋을 올렸습니다.&lt;/p&gt;
&lt;p&gt;RAM 으로 PMEM swap device 를 시뮬레이션 해서 vm-scalability 벤치마크의
swap-w-seq 테스트를 16개 프로세스로 실험한 결과, 약 10배의 성능 개선을
보았군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-021-contention-reduction-for-v418&#34;&gt;[PATCH tip/core/rcu 0/21] Contention reduction for v4.18&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180423030258.GA23370@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180423030258.GA23370@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 의 루트 &amp;lsquo;rcu_node&amp;rsquo; 구조체로의 락 컨텐션을 줄이는 Paul McKenney 의
패치셋입니다.  별 문제 없으면 4.18 버전에 들어가겠군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16</title>
      <link>/post/lkml_news_v4.16/</link>
      <pubDate>Mon, 02 Apr 2018 07:13:40 +0900</pubDate>
      <guid>/post/lkml_news_v4.16/</guid>
      <description>&lt;h2 id=&#34;linux-416&#34;&gt;Linux 4.16&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFyxn0bu5jOAJvO_63GHaGMkJ0uA=bVBm2T3HVX9SimZzw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFyxn0bu5jOAJvO_63GHaGMkJ0uA=bVBm2T3HVX9SimZzw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;릴리즈 마지막 주 치고는 네트워킹 쪽에 조금 변경사항이 있었습니다만, 큰 문제가
될 정도는 아니었습니다.  결과, 4.16이 드디어 릴리즈 되었습니다!  동시에 4.17
머지 윈도우가 시작되는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-move-kfree_rcu-out-of-rcu-code-and-use-kfree_bulk&#34;&gt;[PATCH 0/2] Move kfree_rcu out of rcu code and use kfree_bulk&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1522647064-27167-1-git-send-email-rao.shoaib@oracle.com&#34;&gt;https://lkml.kernel.org/r/1522647064-27167-1-git-send-email-rao.shoaib@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kfree_rcu() 대신 kfree_bulk() 라는 새로 만들어진, 더 효율적인 기능을 사용하도록
하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-01-mm-support-multiple-kswapd-threads-per-node&#34;&gt;[RFC PATCH 0/1] mm: Support multiple kswapd threads per node&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1522661062-39745-1-git-send-email-buddy.lumpkin@oracle.com&#34;&gt;https://lkml.kernel.org/r/1522661062-39745-1-git-send-email-buddy.lumpkin@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUMA 아키텍쳐에서 리눅스 커널은 NUMA 노드당 하나의 kswapd 쓰레드를 띄웁니다.
노드당 kswapd 쓰레드 수를 늘려 성능을 높이려는 쓰레드입니다.  결국은 이런
움직임이 있어야 할거라고 봅니다만, 당장 이 패치에 대해서는 수정 요청 의견도 꽤
있군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-group-struct-page-elements&#34;&gt;[RFC] Group struct page elements&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180408142334.GA29357@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20180408142334.GA29357@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;커널에서 페이지를 관리하는 구조체인 &lt;code&gt;struct page&lt;/code&gt; 는 매우 복잡한 구조로
되어있고, 페이지가 어떤 목적으로 쓰이느냐에 따라 같은 필드가 다른 목적으로
쓰이기도 합니다.
이 RFC 패치는 이 혼란스러운 구조를 좀 개선해 보려는 시도를 담고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-slab-__gfp_zero-is-incompatible-with-a-constructor&#34;&gt;[PATCH 1/2] slab: &lt;code&gt;__GFP_ZERO&lt;/code&gt; is incompatible with a constructor&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180410125351.15837-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180410125351.15837-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시작은 김민찬 님의 null pointer dereference 문제에 대한 수정을 담은
패치셋이었습니다
(&lt;a href=&#34;https://lkml.kernel.org/r/20180409015815.235943-1-minchan@kernel.org)&#34;&gt;https://lkml.kernel.org/r/20180409015815.235943-1-minchan@kernel.org)&lt;/a&gt;.
이걸 Matthew 는 근본적인 실수가 있었던 것 같다고 보고 이 패치셋을 내놓았습니다.
메모리 할당 요청에 &lt;code&gt;__GFP_ZERO&lt;/code&gt; 플래그를 넣으면 메모리 영역을 0으로 초기화 해서
할당을 해줍니다.  그런데 constructor 가 있다면 초기화 작업을 constructor 에서
해야 하기에 &lt;code&gt;__GFP_ZERO&lt;/code&gt; 플래그를 여기에 넣는건 뭔가 이상하죠.
이 패치셋은 그런 경우는 모두 실수에 의한 것이라 보고 경고를 표시해 주도록
합니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-tiplockinglockdep-v6-2020-lockdepselftest-add-a-test-case-for-srcu&#34;&gt;[RFC tip/locking/lockdep v6 20/20] lockdep/selftest: Add a test case for SRCU&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180411135721.22723-1-boqun.feng@gmail.com&#34;&gt;https://lkml.kernel.org/r/20180411135721.22723-1-boqun.feng@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널의 락킹 관련 문제 추적 기능인 &lt;code&gt;lockdep&lt;/code&gt; 이 SRCU 를 지원하게 하는
패치와 함께 올라온 패치입니다.
&lt;code&gt;lockdep&lt;/code&gt; 을 위한 selftest 에 SRCU 기능 역시 테스트하도록 테스트를
추가했습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16-rc7</title>
      <link>/post/lkml_news_v4.16-rc7/</link>
      <pubDate>Mon, 26 Mar 2018 08:45:19 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc7&#34;&gt;Linux 4.16-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxpxHnWBeTXN+DKqwCMW_=T2cR8UxSBVk_6c8LL7Et5JQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxpxHnWBeTXN+DKqwCMW_=T2cR8UxSBVk_6c8LL7Et5JQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16을 향한 일곱번째 rc 가 릴리즈 되었습니다.  평소대로라면 이게 마지막 rc 여야
할텐데, 평소와 다름없거나 변경사항이 적은 편이던 그동안의 rc와 달리 이번 rc 는
좀 변경사항이 많군요.  그렇다곤 해도 아마도 네트워킹 쪽 코드 머지가 늦었기
때문으로 보이며 rc8을 릴리즈할 생각은 아직은 없다고 토발즈는 이야기 하네요.&lt;/p&gt;
&lt;p&gt;더불어, 토발즈가 rc 릴리즈 때마다 변경 사항들을 정리하기 위해 주로 사용하는 git
사용 스크립트를 공개했습니다.&lt;/p&gt;
&lt;p&gt;다음주는 4.16이 릴리즈 될까요?  아니면, rc8이?&lt;/p&gt;
&lt;h2 id=&#34;patch-mmlist_lru-replace-spinlock-with-rcu-in-__list_lru_count_one&#34;&gt;[PATCH] mm/list_lru: replace spinlock with RCU in &lt;code&gt;__list_lru_count_one&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1522137544-27496-1-git-send-email-lirongqing@baidu.com&#34;&gt;https://lkml.kernel.org/r/1522137544-27496-1-git-send-email-lirongqing@baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list_lru_count_one()&lt;/code&gt; 이 스핀락을 잡기 때문에 &lt;code&gt;shrink_slab()&lt;/code&gt; 이 많은 시간을
소모하게 되는데, 이를 스핀락 대신 RCU 를 사용하게 해서 최적화 시킨 패치입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; 를 사용해 커다란 메모리를 사용한 후 파일을 제거하고서
&lt;code&gt;/cgroup/memory/test/memory.limit_in_bytes&lt;/code&gt; 의 크기를 작게 잡아 인위적으로
reclaim 을 유발시키고 여기에 걸리는 시간을 측정했군요.  기존 0.415초에서 최적화
후 0.395초로 개선되었습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v10-0062-convert-page-cache-to-xarray&#34;&gt;[PATCH v10 00/62] Convert page cache to XArray&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180330034245.10462-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20180330034245.10462-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XArray 패치 중 일부가 이미 Andrew Morton 의 -next 트리에 들어갔습니다.  Matthew
Wilcox 는 XArray 를 활용하는 패치를 이어서 계속 올리고 있군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-limit-a-process-rss&#34;&gt;[PATCH] mm: limit a process RSS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1522386674-12047-1-git-send-email-lirongqing@baidu.com&#34;&gt;https://lkml.kernel.org/r/1522386674-12047-1-git-send-email-lirongqing@baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ulimit -m&lt;/code&gt; 명령을 이용해 프로세스의 최대 RSS (Resident Set Size) 를 제어할 수
있는 인터페이스가 있지만 실제로 커널이 제한을 하고 있진 않습니다.  제한하도록
구현하는 패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16-rc6</title>
      <link>/post/lkml_news_v4.16-rc6/</link>
      <pubDate>Mon, 19 Mar 2018 10:19:34 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc6&#34;&gt;Linux 4.16-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzV1nffUeriZLksK90noD49T+w+WmgBsYMAO13rTbn3Pg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzV1nffUeriZLksK90noD49T+w+WmgBsYMAO13rTbn3Pg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16 여섯번째 rc 버전이 나왔습니다.  4.16을 향한 이번 사이클은 상당히 순탄하게
진행되는군요.  rc7 까진 만들 예정이라고 하는데, 그 후엔 4.16이 안정적으로
나오게 될 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16-rc5</title>
      <link>/post/lkml_news_v4.16-rc5/</link>
      <pubDate>Mon, 12 Mar 2018 10:08:11 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc5/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc5&#34;&gt;Linux 4.16-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxXAMHeD8zz1BLv9r_2rjWJ6xE=cNGVAoWOvQJog7oz9A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxXAMHeD8zz1BLv9r_2rjWJ6xE=cNGVAoWOvQJog7oz9A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여전히 특이사항 없는 한주를 거쳐 다섯번째 rc 버전이 나왔습니다.  이번 릴리즈가
기존의 rc5 단계보단 조금 크지만 특이할 정도는 아닌 모양이군요.  개인적으로 눈에
띈 부분은, overlayfs, xfs 등의 파일시스템의 변경, 그리고 perf 와 selftest 쪽
변경이 있군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v9-0024-speculative-page-faults&#34;&gt;[PATCH v9 00/24] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1520963994-28477-1-git-send-email-ldufour@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1520963994-28477-1-git-send-email-ldufour@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speculative page faults 의 9번째 패치셋입니다.  Michael Hocko 가 이거 너무 자주
올리는 거 아니냐고 한마디 했고, 패치 저자인 Laurent Dufour 도 오케이 했네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0032-docsvm-convert-to-rest-format&#34;&gt;[PATCH 00/32] docs/vm: convert to ReST format&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1521660168-14372-1-git-send-email-rppt@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1521660168-14372-1-git-send-email-rppt@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;커널 문서의 ReST 화는 많은 사람들이 반기고 있는 변화지만 일부 메인테이너는 썩
반기지 않기도 합니다.  vm/ 쪽 문서를 모두 ReST 로 바꾸는 패치가 올라왔습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16-rc4</title>
      <link>/post/lkml_news_v4.16-rc4/</link>
      <pubDate>Mon, 05 Mar 2018 10:50:48 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc4&#34;&gt;Linux 4.16-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxXg8hi+T_DNCG_OrAotqSheyREw-Njf9XgUD1vXqAyHQ@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;벌써 개발 단계의 중반이라 할 수 있는 rc4 의 릴리즈입니다.  4.16 버전의 릴리즈도
얼마 남지 않았군요.  여전히 충분히 조용한 한주였습니다.  다만 여기저기에 조금씩
변경사항이 골고루 있군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0034-v3-pti-support-for-x32&#34;&gt;[PATCH 00/34 v3] PTI support for x32&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1520245563-8444-1-git-send-email-joro@8bytes.org&#34;&gt;https://lkml.kernel.org/r/1520245563-8444-1-git-send-email-joro@8bytes.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x86-32 를 위한 Page Table Isolation 패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lkml_news_v4.16 Rc3</title>
      <link>/post/lkml_news_v4.16-rc3/</link>
      <pubDate>Mon, 26 Feb 2018 18:38:53 +0100</pubDate>
      <guid>/post/lkml_news_v4.16-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc3&#34;&gt;Linux 4.16-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxk5KBxL9DvRtBivP3hKT-aOAzvSA_B47L1+y0P2GLe_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16 세번째 rc 버전이 릴리즈 되었습니다.  rc2 보단 변경사항이 많지만, rc2 때
이야기 했듯 rc2 때는 대부분의 경우 고칠 것들을 찾지도 못했기 때문이 크기
때문이죠.  즉, 스펙터와 멜트다운으로 끔찍했던 4.15 때와 달리, 모든게 정상적이고
예상대로라고 합니다.&lt;/p&gt;
&lt;p&gt;대부분의 변경은 드라이버이고, 네트워킹 쪽 변경도 좀 크군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-05-srcu-updates&#34;&gt;[PATCH tip/core/rcu 0/5] SRCU updates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180226215614.GA31616@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180226215614.GA31616@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU critical section 안에서 sleep 을 할 수 있는 SRCU 의 간단한 업데이트
패치셋입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-012-torture-test-updates&#34;&gt;[PATCH tip/core/rcu 0/12] Torture-test updates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180226220225.GA32136@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180226220225.GA32136@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 등의 동기화 도구의 동시성 버그를 찾는데 사용되는 torture test 의 업데이트
패치셋입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News v4.16-rc2</title>
      <link>/post/lkml_news_v4.16-rc2/</link>
      <pubDate>Mon, 19 Feb 2018 11:09:15 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc2/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc2&#34;&gt;Linux 4.16-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwDnBq9V6TVbc82DzVYpf-ELF7UcYzHuY0ei1Xjnob+0A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16 두번째 rc 버전의 릴리즈입니다.  이번 한주는 매우 조용한 한주였군요.  머지
윈도우가 끝나고 사람들이 좀 쉬기 때문일수도, 아직 버그를 찾지 못해서일 수도
있고 일반적으로 rc2 는 조용한 편이지만, 어쨌든 토발즈는 만족스러운 눈치입니다.
4.15 에서의 spectre &amp;amp; meltdown 때문에 더 그럴지도 모르겠지만요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.16-rc1</title>
      <link>/post/lkml_news_v4.16-rc1/</link>
      <pubDate>Tue, 13 Feb 2018 13:56:47 +0900</pubDate>
      <guid>/post/lkml_news_v4.16-rc1/</guid>
      <description>&lt;h2 id=&#34;linux-416-rc1&#34;&gt;Linux 4.16-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzXVqgCMhPL9EaMW_D9E=HCQ9+JSQAbBPe3Oa_iQtky=g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;어느덧 2주일이 지났습니다.  머지 윈도우가 닫히고 4.16 첫번째 rc 버전이
나왔습니다.  4.15는 역시 토발즈에게 고통스러웠던 시간이었던지 이번 머지
윈도우는 4.15 보다 훨씬 나았다는 토발즈의 이야기입니다.&lt;/p&gt;
&lt;p&gt;이번 릴리즈에서는 GPU 쪽 변경 사항이 많고 대부분은 드라이버라 아주 큰 변화는
거의 없지만, 여전히 arch 쪽에도, 네트워킹과 파일시스템 등에도 변경이 없지는
않다고 정리하고 있습니다.
스펙터 / 멜트다운 이슈에 대한 x86 외 아키텍쳐의 변경사항들도 들어왔군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v8-0024-speculative-page-faults&#34;&gt;[PATCH v8 00/24] Speculative page faults&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 릴리즈와 함께 4.15 위로 포팅된 Speculative page faults 패치가 계속
올라오고 있습니다.  이 패치셋은 예전부터 제가 관심을 두고 보고 있는 패치인데,
page fault handling 을 speculative 하게 함으로써 병렬성을 높이려는 패치입니다.
아이디어가 시작된 건 오래되었고 그 아이디어를 이어와 다시 제안되고 있는
패치이죠.  이번엔 업데이트 될런지 궁금하네요.&lt;/p&gt;
&lt;h2 id=&#34;patch--mm--v5-resend-mm-swap-fix-race-between-swapoff-and-some-swap-operations&#34;&gt;[PATCH -mm -v5 RESEND] mm, swap: Fix race between swapoff and some swap operations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180213014220.2464-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180213014220.2464-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;swapin 작업과 swapoff 작업 사이를 락으로 보호하지 않고 있기 때문에 segmentation
fault 문제가 있을 수 있습니다.  swapoff 가 자주 불리진 않다보니 이 문제가 크게
불거진 적 없는데, 어쨌건 race 는 race 라 고쳐야 한다는 Huang Ying 의
패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15</title>
      <link>/post/lkml_news_v4.15/</link>
      <pubDate>Mon, 29 Jan 2018 09:20:38 +0900</pubDate>
      <guid>/post/lkml_news_v4.15/</guid>
      <description>&lt;h2 id=&#34;linux-415&#34;&gt;Linux 4.15&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzARtx-nA=d1j7vLOLf4FHMJLyRiQ-PKkoexJuTUHogdw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;드디어 4.15 버전이 릴리즈 되었습니다.  지난 한주는 매우 조용하고 변경된 사항이
거의 없었다는군요.&lt;/p&gt;
&lt;p&gt;이렇게 meltdown/spectre 로 시끄럽고 길었던, 평범하지 않았던 릴리즈 사이클이
끝났습니다.
하지만, meltdown/spectre 관련한 일이 아주 끝난 건 아니라고 이야기 하는군요.
특히, indirect bracnh mitigation 을 위한 가장 큰 수정사항을 반영받기 위해선
커널만 업데이트 해선 안되고 컴파일러의 &amp;ldquo;retpoline&amp;rdquo; 지원이 있어야 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /sys/devices/system/cpu/vulnerabilities/spectre_v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;로 컴파일러 지원이 있는지 알 수 있는데, 컴파일러 지원이 없다면&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Vulnerable: Minimal generic ASM retpoline
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이란 출력이 뜰겁니다.&lt;/p&gt;
&lt;p&gt;한가지 더 이야기 해둬야 할건, 이번 릴리즈에 meltdown/spectre 가 많은 영향을
끼치긴 했지만 그래도 다른 부분들은 평범하게 업데이트가 진행되었다는 겁니다.
즉, 이번 릴리즈는 좀 평범하지 않기 했지만 그렇다고 아주 이상하기만 한 릴리즈도
아니었다는 거죠.&lt;/p&gt;
&lt;p&gt;어쨌든 4.15 버전이 드디어 나왔습니다!&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-addressing-mmap_sem-contention&#34;&gt;[LSF/MM TOPIC] Addressing mmap_sem contention&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/4c20d397-1268-ca0f-4986-af59bb31022c@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/4c20d397-1268-ca0f-4986-af59bb31022c@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널에서 메모리 매핑은 mmap_sem 이라는 reader-writer semaphor 를 이용해
race condition 으로부터 보호되고 있습니다.  당연하게도, 쓰레드가 많은 환경에선
여기 부하가 심하게 걸리고 성능 확장을 저해하게 됩니다.  Peter Zijlstra 의
Speculative Page Fault 패치는 페이지 폴트 시에 메모리 매핑을 할 때 mmap_sem 을
잡지 않고 매핑하려 시도해보고 중간에 동시에 같은 영역을 매핑하려 한 쓰레드가
존재하면 abort &amp;amp; retry 를 하는식으로 이 문제를 완화시킵니다.
해당 패치셋은 최근 Laurent 에 의해 다시 포팅되어 커뮤니티에 올라오기도 했죠.
실제로 ebizzy[1] 와 같이 쓰레드를 많이 쓰는 벤치마크에서는 두배가까이 성능
향상이 있었다고 하구요.&lt;/p&gt;
&lt;p&gt;하지만 Speculative Page Fault 만으로는 모든 문제가 해결되지 않기에 mmap_sem
자체에 대한 논의를 LSFMM 에서 하고 싶다는 메일입니다.&lt;/p&gt;
&lt;p&gt;병렬 프로그래밍에 관심있는 제게도 흥미로운 주제네요.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;http://ebizzy.sourceforge.net/&#34;&gt;http://ebizzy.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-lru_lock-scalability&#34;&gt;[LSF/MM TOPIC] lru_lock scalability&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/2a16be43-0757-d342-abfb-d4d043922da9@oracle.com&#34;&gt;https://lkml.kernel.org/r/2a16be43-0757-d342-abfb-d4d043922da9@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;최근에 덜 사용된 (Least Recently Used) 페이지를 가려내기 위해 사용되는
&lt;code&gt;lru_lock&lt;/code&gt; 은 메모리 집중적 벤치마크를 돌릴 때 커널에서 가장 뜨거워지는 락들
가운데 하나입니다.
당연히 확장성 문제가 있죠.&lt;/p&gt;
&lt;p&gt;이걸 배칭 또는 페이지 개별적 락킹을 통해 해결해 보자는 안을 내놓고 이에 대해
LSFMM 에서 이야기 해보자는 메일입니다.&lt;/p&gt;
&lt;p&gt;RFC 패치가 벌써 올라왔네요:
&lt;a href=&#34;https://lkml.kernel.org/r/20180131230413.27653-1-daniel.m.jordan@oracle.com&#34;&gt;https://lkml.kernel.org/r/20180131230413.27653-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-pull-rcu-changes-for-v416&#34;&gt;[GIT PULL] RCU changes for v4.16&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180129100051.ndq4osy45fz3g26a@gmail.com&#34;&gt;https://lkml.kernel.org/r/20180129100051.ndq4osy45fz3g26a@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From: Ingo Molnar &lt;a href=&#34;mailto:mingo@kernel.org&#34;&gt;mingo@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.16 머지 윈도우가 열렸으니 Ingo 가 4.16 을 위한 rcu 쪽 변경사항을 리누스에게
풀리퀘스트 보냈습니다.
사실 이건 별로 흥미로운 메일은 아닐 수 있지만, 4.16 에서 RCU 가 어떻게 변경될지
알 수 있겠죠.
그리고, 제가 작년 프라하와 상해에서 만들어 올렸던, 패치 9개가 있습니다 ;)&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-0064-mm-towards-parallel-address-space-operations&#34;&gt;[RFC PATCH 00/64] mm: towards parallel address space operations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180205012754.23615-1-dbueso@wotan.suse.de&#34;&gt;https://lkml.kernel.org/r/20180205012754.23615-1-dbueso@wotan.suse.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lsquo;mmap_sem&amp;rsquo; 은 커널의 메모리 관리에서 자주 사용되는 락으로, 많은 scalability
문제의 중심에 있습니다.  이 패치셋은 mmap_sem 을 range locking 기법을 활용해서
바꿔냄으로써 병렬성을 확보하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch--mm--v2-mm-swap-frontswap-fix-thp-swap-if-frontswap-enabled&#34;&gt;[PATCH -mm -v2] mm, swap, frontswap: Fix THP swap if frontswap enabled&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180207070035.30302-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180207070035.30302-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;zswap 은 THP 를 고려하지 않기 때문에 THP 가 켜진 상태에서 zswap 이 frontswap
으로 동작할 경우 일부 어플리케이션은 segfault 와 memory corruption 을 낼 수
있는 문제가 있었습니다.  커밋 bd4c82c22c367e068 (&amp;ldquo;mm, THP, swap: delay
splitting THP after swapped&amp;rdquo;) 때문에 발생한 문제였구요.  이를 고치기 위한
패치입니다.
out&amp;rdquo;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc9</title>
      <link>/post/lkml_news_v4.15-rc9/</link>
      <pubDate>Tue, 23 Jan 2018 12:16:07 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc9/</guid>
      <description>&lt;h2 id=&#34;not-final-415-this-weekend&#34;&gt;&lt;em&gt;Not&lt;/em&gt; final 4.15 this weekend&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxzQBH5gnG92ah-PREfOqb5_rjWriLH3fWHMWS1=BSQFw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;원래대로라면 4.15 정식 버전의 릴리즈가 될 타이밍이었습니다만&amp;hellip;
아직 충분히 안정화 되지 않은 것 같다는 토발즈의 판단 아래 이번주에도 rc 버전이
나왔습니다.  rc9 입니다.
2011년의 3.1-rc9 이후 처음 나온 rc9 이네요.&lt;/p&gt;
&lt;p&gt;이번 릴리즈는 x86, arm powerpc, mips 쪽의 arch 업데이트, 드라이버, 그리고
네트워킹 핵심부 업데이트가 주된 변경이군요.&lt;/p&gt;
&lt;p&gt;다음주에는 꼭 4.15를 릴리즈 하고 싶다고 하는데, 아마도 다음주에는 4.15 정식
버전이 릴리즈되길 빕니다.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-topic-cma-and-larger-page-sizes&#34;&gt;[LSF/MM TOPIC] CMA and larger page sizes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/3a3d724e-4d74-9bd8-60f3-f6896cffac7a@redhat.com&#34;&gt;https://lkml.kernel.org/r/3a3d724e-4d74-9bd8-60f3-f6896cffac7a@redhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Contiguous Memory Allocator (CMA) 는 할당에 사용되는 메모리 영역을 비트맵으로
관리하는데, 페이지 하나에 비트 하나씩 주면 비트맵을 traverse 하는데 너무 많은
시간이 걸리므로, 하나의 비트가 여러개의 페이지를 담당하도록 되어있습니다.
이게 CMA 의 응답시간에는 큰 도움이 되지만, fragmentation 으로 인한 메모리
낭비가 심합니다.  Laura Abbott 은 이걸 LSFMM 에서 논의해보고 싶어하는군요.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-tools-linux-kernel-memory-model&#34;&gt;[GIT PULL tools] Linux kernel memory model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180125093440.GA875@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20180125093440.GA875@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul McKenney 의 리눅스 커널 메모리 모델이 리눅스 커널 소스트리의 &lt;code&gt;tools/&lt;/code&gt;
디렉토리로 머지될 것 같습니다!
이 모델은 &lt;code&gt;cat&lt;/code&gt; 언어로 쓰여져서 &lt;code&gt;herd7&lt;/code&gt; 시뮬레이터로 실행될 수 있어서, 동시성을
갖는 코드가 실제로 어떻게 동작할지 검사할 수 있게 해줍니다.
과장 좀 보태서 자동화된 memory-barriers.txt 라고도 할 수 있죠.&lt;/p&gt;
&lt;p&gt;이미 Ingo Molnar 가 풀 했군요.  별다른 문제 없다면 정식 버전으로는 4.17
버전에서 볼 수 있겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc8</title>
      <link>/post/lkml_news_v4.15-rc8/</link>
      <pubDate>Tue, 16 Jan 2018 13:26:26 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc8/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc8&#34;&gt;Linux 4.15-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFz=PcxdARFpCTyQCJKaJcBwVUB9y6XAXM8VyyxnbRD=bw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;마침내 여덟번째 rc 버전의 릴리즈입니다.  스펙터 버그를 성능 저하 없이 막기 위한
구글의 해결책, Retpoline 지원이 들어갔군요.  그 외에는 드라이버 업데이트여서
일단 rc8 에 걸맞는 조용함이긴 하다고 토발즈는 평하네요.  자, 다음주에는 4.15 가
릴리즈될런지?  아니면 rc9 이 나오고 말런지?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc7</title>
      <link>/post/lkml_news_v4.15-rc7/</link>
      <pubDate>Sat, 13 Jan 2018 10:30:13 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc7&#34;&gt;Linux 4.15-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwbmKznuQZe_VemxXJPSmB-9yy8uyWsMZcrkA4T=m8xkw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meltdown 과 Spectre 로 떠들썩했던 시간을 지나 4.15 의 일곱번째 rc 버전이 릴리즈
되었습니다.  지난 여섯번째 릴리즈 때도 상당히 안정화에 신경써야 할 시점임에도
x86 pti (page table isolation) 업데이트 패치가 많이 머지되어 의아했는데, 이게
Meltdown 과 Spectre 버그 때문이었음도 밝혀졌죠.
그렇다곤 해도 그 외의 부분은 예상대로 상당히 안정화 되어가고 있다고 합니다.&lt;/p&gt;
&lt;p&gt;더불어, Thomas Geixner 등의 인텔쪽 커널 개발자들의 노력 덕에 pti 등 Meltdown 과
Spectre 버그를 위한 패치가 잘 관리되어 비교적 쉽게 머지될 수 있었음에 리누스가
감사를 표하네요.  욕할땐 욕하고 칭찬할 땐 칭찬하고. ;)&lt;/p&gt;
&lt;p&gt;아무튼, 이때문에 4.15 는 rc8 까지 릴리즈 할 계획이라고 합니다.  4.15 는 2주일
후에나 릴리즈 되겠군요.&lt;/p&gt;
&lt;h2 id=&#34;lsfmm-2018-call-for-proposals&#34;&gt;LSF/MM 2018: Call for Proposals&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180115163952.GB26120@cmpxchg.org&#34;&gt;https://lkml.kernel.org/r/20180115163952.GB26120@cmpxchg.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 스토리지, 파일 시스템, 메모리 관리 쪽 개발자들의 모임인 LSFMM 서밋 2018
을 위한 CFP 가 공개되었습니다.  올해도 4월에 하네요.  장소는 유타입니다.  1월
31일까지 토론하고 싶은 주제를 메일로 보내면 흥미로운 주제를 바탕으로 주제를
꾸미고, 그 외에도 그냥 참가하고 싶은 사람도 메일 보내면 내부적으로 심사 후
초대를 해주는 것 같네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc6</title>
      <link>/post/lkml_news_v4.15-rc6/</link>
      <pubDate>Tue, 02 Jan 2018 13:34:11 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc6&#34;&gt;Linux 4.15-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzU_Q04CVEABo50x24yeTaP-yzzrB1wTPeOiOgAbSKiDA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;한국시간으로는 1월 1일, 토발즈의 현지 시각으로는 2017년의 마지막날, 4.15 의
여섯번째 rc 버전이 릴리즈 되었습니다.&lt;/p&gt;
&lt;p&gt;지난주는 크리스마스 등의 연휴 때문인지 참 조용했죠.  덕분에 이번 릴리즈의
변경사항도 많지 않습니다.
다만 x86 pti 쪽 업데이트가 있었기 때문에 이번엔 rc8 까지 릴리즈 할수도 있을 것
같다고 하는군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc5</title>
      <link>/post/lkml_news_v4.14-rc4/</link>
      <pubDate>Sun, 24 Dec 2017 14:24:13 +0900</pubDate>
      <guid>/post/lkml_news_v4.14-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc5&#34;&gt;Linux 4.15-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다.
원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈
한다는군요.&lt;/p&gt;
&lt;p&gt;이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의
커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-v3-patch-05-eliminate-zone-lock-contention-for-will-it-scalepage_fault1-and-parallel-free&#34;&gt;[RFC v3 PATCH 0/5] Eliminate zone-&amp;gt;lock contention for will-it-scale/page_fault1 and parallel free&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180509085450.3524-1-aaron.lu@intel.com&#34;&gt;https://lkml.kernel.org/r/20180509085450.3524-1-aaron.lu@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;패치셋 저자는 112개 CPU를 갖는 Intel Skylake 서버에서 will-it-scale/page_fult1
워크로드를 돌려보았고 80% CPU 가 zone-&amp;gt;lock 에서 스핀하며 시간을 보내고 있음을
파악했습니다.  이 문제를 해결하기 위한 RFC 패치의 세번째 버전입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0013-improve-shrink_slab-scalability-old-complexity-was-on2-new-is-on&#34;&gt;[PATCH v4 00/13] Improve shrink_slab() scalability (old complexity was O(n^2), new is O(n))&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/152586686544.3048.15776787801312398314.stgit@localhost.localdomain&#34;&gt;https://lkml.kernel.org/r/152586686544.3048.15776787801312398314.stgit@localhost.localdomain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shrink_slab()&lt;/code&gt; 의 복잡도가 O(n^2) 이기 때문에 많은 shrinker 와 메모리 cgroups
를 갖는 기계에서는 확장성의 병목이 될 수 있습니다.  이를 간단한 스크립트로
보이는데요.  먼저 다음과 같이 4000개의 memory cgroup 들을 만들고,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$echo 1 &amp;gt; /sys/fs/cgroup/memory/memory.use_hierarchy
$mkdir /sys/fs/cgroup/memory/ct
$echo 4000M &amp;gt; /sys/fs/cgroup/memory/ct/memory.kmem.limit_in_bytes
$for i in `seq 0 4000`;
        do mkdir /sys/fs/cgroup/memory/ct/$i;
        echo $$ &amp;gt; /sys/fs/cgroup/memory/ct/$i/cgroup.procs;
        mkdir -p s/$i; mount -t tmpfs $i s/$i; touch s/$i/file;
done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;아래와 같이 drop cache 를 다섯번 수행하며 여기 걸리는 시간을 측정했습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$time echo 3 &amp;gt; /proc/sys/vm/drop_caches

0.00user 13.78system 0:13.78elapsed 99%CPU
0.00user 5.59system 0:05.60elapsed 99%CPU
0.00user 5.48system 0:05.48elapsed 99%CPU
0.00user 8.35system 0:08.35elapsed 99%CPU
0.00user 8.34system 0:08.35elapsed 99%CPU
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;반복해서 drop cache 를 할 뿐이기 때문에 뒤따르는 drop cache 들은 실질적으로
cache 를 비우진 않고 그저 shrinker 와 memcg 를 둘러볼 뿐입니다.  그럼에도 최소
5.48초가 걸렸군요.  그만큼 병목이 심하단 이야기죠.&lt;/p&gt;
&lt;p&gt;패치는 shrink_slab() 의 복잡도를 O(n)으로 고쳤고, 이후 다음과 같이 오버헤드가 거의 사라지는 결과를 내놓았습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.00user 1.10system 0:01.10elapsed 99%CPU
0.00user 0.00system 0:00.01elapsed 64%CPU
0.00user 0.01system 0:00.01elapsed 82%CPU
0.00user 0.00system 0:00.01elapsed 64%CPU
0.00user 0.01system 0:00.01elapsed 82%CPU
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;약 548배의 성능 향상이군요!&lt;/p&gt;
&lt;h2 id=&#34;patch--mm--v2-0021-mm-thp-swap-swapoutswapin-thp-as-a-whole&#34;&gt;[PATCH -mm -V2 00/21] mm, THP, swap: Swapout/swapin THP as a whole&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20180509083846.14823-1-ying.huang@intel.com&#34;&gt;https://lkml.kernel.org/r/20180509083846.14823-1-ying.huang@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난번에도 소개한, THP 를 2 MiB 그대로 한번에 swap out / swap in 하는
패치입니다.  기존에는 THP 를 regular page 로 쪼개서 swap out / swap in
했었거든요.&lt;/p&gt;
&lt;h2 id=&#34;patch--mm-mm-thp-doc-add-document-for-thp_swpoutthp_swpout_fallback&#34;&gt;[PATCH -mm] mm, THP, doc: Add document for thp_swpout/thp_swpout_fallback&lt;/h2&gt;
&lt;p&gt;https:/lkml.kernel.org/r/20180509082341.13953-1-ying.huang@intel.com&lt;/p&gt;
&lt;p&gt;앞에 설명한 THP swap 관련 최적화는 단계별로 적용되고 있는데, 그와 함께
&lt;code&gt;/proc/vmstat&lt;/code&gt; 에는 &lt;code&gt;thp_swpout&lt;/code&gt; 과 &lt;code&gt;thp_swpout_fallback&lt;/code&gt; 필드가
추가되었습니다.  그에 대한 문서화가 아직 안들어와 있었는데, 이를 추가하는
패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc5</title>
      <link>/post/lkml_news_v4.15-rc5/</link>
      <pubDate>Sun, 24 Dec 2017 14:24:13 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc5/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc5&#34;&gt;Linux 4.15-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFy1U+uBLEAoCWU3=BqEbROW6rsbaHUdYJArR6iYQQWo_A@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 의 다섯번째 rc 버전이 평소 스케쥴보다 하루 일찍 릴리즈 되었습니다.
원래대로라면 내일일텐데, 미국 시간으로는 크리스마스 이브라서 그냥 오늘 릴리즈
한다는군요.&lt;/p&gt;
&lt;p&gt;이번 rc5 의 변경 사항들도 지난 릴리즈의 rc5 와 비슷했다고 하는데, 다만 x86 의
커널 페이지 테이블 격리화 관련 작업이 진행 중인 게 좀 예외라고 하는군요.&lt;/p&gt;
&lt;h2 id=&#34;re-about-the-try-to-remove-cross-release-feature-entirely-by-ingo&#34;&gt;Re: About the try to remove cross-release feature entirely by Ingo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R&#34;&gt;https://lkml.kernel.org/r/20171229014736.GA10341@X58A-UD3R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lockdep 의 cross release 기능은 너무 느렸고, false positive 가 많다는 이유로,
특히 false positive 가 너무 많다는 이유로 Ingo Molnar 에 의해 제거되려 하고
있습니다.  관련해서 이 블로그에서도 일단 default 로는 disable 되는 변경이 v4.14
에 있었음을 이야기 했죠.&lt;/p&gt;
&lt;p&gt;Cross release 의 개발자인 박병철님께서 이에 대해 다른 의견을 내놓는 메일입니다.&lt;/p&gt;
&lt;h2 id=&#34;re-hang-with-v415-rc-trying-to-swap-back-in&#34;&gt;Re: Hang with v4.15-rc trying to swap back in&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1514407817.4169.4.camel@HansenPartnership.com&#34;&gt;https://lkml.kernel.org/r/1514407817.4169.4.camel@HansenPartnership.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;스왑 레이어를 최적화하는 많은 변경이 최근에 있었는데, 그 중 하나가 시스템 행을
일으키는군요.  관련된 패치들을 발본색원해서 레포팅 한 메일입니다.  충분히 빠른
swap device 에 대해서는 swapcache 를 건너뛰게 한게 원인이 되었군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc4</title>
      <link>/post/lkml_news_v4.15-rc4/</link>
      <pubDate>Mon, 18 Dec 2017 17:46:23 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc4/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc4&#34;&gt;Linux 4.15-rc4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFysmVGm_shBvK4kmaS+_PsMEt3Mz_b+Dm0SDrmVtUofbA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 의 네번째 rc 버전입니다.  지난 rc 버전들이 생각보다 커서 토발즈가 좀
걱정했는데, 이번 릴리즈에 들어서는 평범한 네번째 rc 만큼이나 변화가 많이 없어
충분히 안정화 되기 시작한 것 같다고 하는군요.&lt;/p&gt;
&lt;p&gt;이번에 가장 눈에 띌만한 변화는 suspend/resume 처리를 정리하고 고친 것이라고
합니다.  크로스 락킹 디버깅 기능은 부팅 시간을 늘리는 문제 등도 있어선지 이번에
일단 제거되었네요.  나중에 다시 되살릴 계획은 있는 것 같습니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-11-move-kfree_call_rcu-to-slab_commonc&#34;&gt;[PATCH v2 1/1] Move kfree_call_rcu() to slab_common.c&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513895570-28640-1-git-send-email-rao.shoaib@oracle.com&#34;&gt;https://lkml.kernel.org/r/1513895570-28640-1-git-send-email-rao.shoaib@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 의 modularity 를 개선하는 패치입니다.  몇가지 쟁점이 있긴 하지만 기본
아이디어는 받아들여지는 분위기군요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc3</title>
      <link>/post/lkml_news_v4.15-rc3/</link>
      <pubDate>Mon, 11 Dec 2017 11:25:13 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc3/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc3&#34;&gt;Linux 4.15-rc3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFz9O9R8u3ori-QNPz4ALU+0B=Es0gd+oWmsce5qxugxXA@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 의 세번째 rc 버전입니다.  지난주보단 조금 늦게 릴리즈 되었네요.&lt;/p&gt;
&lt;p&gt;일반적으로 rc3 릴리즈는 좀 변경사항이 많지만 이번엔 그중에서도 변경사항이 많은
편이라 걱정된다고 하는군요.  대부분은 드라이버쪽 변경인데 perf 쪽 변경도 꽤
있고 core, networking, kvm, arch, 문서 업데이트도 물론 있습니다.  어쨌든
토발즈는 이제는 정말 안정화가 되어가길 바라는 마음이라는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-mmslab-do-not-hash-pointers-when-debugging-slab&#34;&gt;[PATCH v2] mm/slab: Do not hash pointers when debugging slab&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be&#34;&gt;https://lkml.kernel.org/r/1513179267-2509-1-git-send-email-geert+renesas@glider.be&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번 버전에 들어와 포인터 값을 기반으로 한 예측을 통해 공격이 들어오는 걸
방지하기 위해 &amp;lsquo;%p&amp;rsquo; 가 포인터를 그냥 출력하는게 아니라 hash 한 다음에 출력하도록
바뀌었죠.  때문에 디버깅이 좀 까다로워졌구요.  디버깅을 위해 온전한 포인터가
필요한 곳에선 &amp;lsquo;%pX&amp;rsquo; 를 써야 합니다.  일단 slab 쪽에서도 그게 필요하기에 DEBUG
옵션이 켜졌을 때에는 &amp;lsquo;%pX&amp;rsquo; 를 사용하도록 하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-mm-unclutter-thp-migration&#34;&gt;[RFC PATCH] mm: unclutter THP migration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171207124815.12075-1-mhocko@kernel.org&#34;&gt;https://lkml.kernel.org/r/20171207124815.12075-1-mhocko@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transparent Huge Page 를 위한 Michal Hocko 의 패치입니다.&lt;/p&gt;
&lt;p&gt;THP 마이그레이션을 위한 메모리 할당 콜백은 THP 가 한꺼번에 마이그레이션 될 수
있는지 보고, 마이그레이션 될 곳에 메모리가 부족해 불가능하거나 하다면 평범한
페이지를 할당받습니다.  이어서 unmap_and_mov() 가 THP 를 평범한 페이지로
쪼개고, 그사이 THP 의 head page 는 split_huge_page() 를 통해 LRU 리스트에
들어갑니다.  같은 일이 THP 할당에 실패할 때도 이러나는데, 이건 에러가 나기 쉬운
행위라고 Michal 은 봅니다.&lt;/p&gt;
&lt;p&gt;LRU 리스트에 split_huge_page() 를 행하는 것도 잘못된 행위인데, 모든 tail page
들이 마이그레이션 되지 않았기 때문이죠.  이로 인해 발생하는 문제는 사용자가
각각 처리해야 했습니다.&lt;/p&gt;
&lt;p&gt;Michal 은 이 패치를 통해 THP 처리를 위한 특수한 부분들을 migrate_pages() 단계로
올려서 이 상황을 정리하고자 합니다. 여기서 unmap_and_move() 가 ENOMEM 으로
실패하면 THP 페이지를 쪼개고 현재 존재하는 리스트로 옮깁니다.  이렇게 함으로써
우리는 모든 THP 서브페이지들을 항상 마이그레이션 하고 특정한 migrate_pages()
사용자들은 앞서 이야기한 경우를 별도로 처리할 필요가 없어지는 것이죠.&lt;/p&gt;
&lt;h2 id=&#34;patch-lockinglockdep-make-config_lockdep_crossrelease-and-config_lockdep_completions-optional&#34;&gt;[PATCH] locking/lockdep: Make CONFIG_LOCKDEP_CROSSRELEASE and CONFIG_LOCKDEP_COMPLETIONS optional&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513062681-5995-1-git-send-email-byungchul.park@lge.com&#34;&gt;https://lkml.kernel.org/r/1513062681-5995-1-git-send-email-byungchul.park@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아직 락들의 classification 이 잘 되어있지 않아 너무 많은 false positive 가
나오고 있어 lockdep 의 CROSSRELEASE 와 COMPLETIONS 를 기본 활성에서 옵셔널로
바꾸는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-reduce-memory-bloat-with-thp&#34;&gt;[PATCH] mm: Reduce memory bloat with THP&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513301359-117568-1-git-send-email-nitin.m.gupta@oracle.com&#34;&gt;https://lkml.kernel.org/r/1513301359-117568-1-git-send-email-nitin.m.gupta@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 는 굉장히 aggressive 하게 huge page 를 선호하기 때문에 메모리 사용량을
증가시키는 문제가 있습니다.  Redis 등에서는 그런 이유로 THP 를 꺼버리라고
하기도 하죠.&lt;/p&gt;
&lt;p&gt;이 패치는 어플리케이션이 특정 메모리 영역에 MADV_DONTNEED 를 보내면, 이 영역은
&amp;ldquo;space-efficient&amp;rdquo; 로 마크되어서 해당 영역은 항상 huge page 를 사용하는게 아니라
khugepaged 가 해당 영역이 정말로 매핑되어 있고 사용되고 있는지에 따라 huge page
로 승격을 시키도록 합니다.  어플리케이션이 다시 MADV_HUGEPAGE 를 해당 영역에
내면, 해당 영역은 다시 non-space-efficient 로 마크되어 원래대로 동작합니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-rcutorture-add-basic-arm64-support-to-run-scripts&#34;&gt;[PATCH v2] rcutorture: Add basic ARM64 support to run scripts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1513070365-13436-1-git-send-email-lianglihao@huawei.com&#34;&gt;https://lkml.kernel.org/r/1513070365-13436-1-git-send-email-lianglihao@huawei.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 를 테스트하는 rcutorture 드라이버의 드라이버 ;) 스크립트에 aarch64 지원을
추가하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v5-0078-xarray-v5&#34;&gt;[PATCH v5 00/78] XArray v5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171215220450.7899-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20171215220450.7899-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matthew Wilcox 의 XArray 다섯번째 버전 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-08-restructure-struct-page&#34;&gt;[PATCH 0/8] Restructure struct page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171216164425.8703-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20171216164425.8703-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct page&lt;/code&gt; 는 매우 민감한 구조체죠.  요걸 구조를 살짝 바꾸려는 패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc2</title>
      <link>/post/lkml_news_v4.15-rc2/</link>
      <pubDate>Mon, 04 Dec 2017 13:38:11 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc2/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc2&#34;&gt;Linux 4.15-rc2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxPBszFBt91KRNBrsQdJ10b+6fh9ySNzSKSX7JOq4WRPw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 의 두번째 rc 버전이 나왔습니다.&lt;/p&gt;
&lt;p&gt;동부 지방을 여행 중인가 보군요.  평소보다 좀 이른 시간에 릴리즈가 됐습니다.
원하던 것보단 큰 릴리즈가 되어버렸지만 대부분 fixup 이기에 큰 문제는 없는 것
같다는군요.  Kernel ASLR leak 을 막기 위해 모든 &amp;ldquo;%P&amp;rdquo; 로 프린트되는 어드레스
주소를 해시해 버린다고 하네요.  이럼 디버깅할 때 좀 짜증날 수 있긴 하겠지만
다른 방법이 별로 없었다고&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v3-07-ktask-multithread-cpu-intensive-kernel-work&#34;&gt;[RFC PATCH v3 0/7] ktask: multithread CPU-intensive kernel work&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com&#34;&gt;https://lkml.kernel.org/r/20171205195220.28208-1-daniel.m.jordan@oracle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU-intensive 한 작업을 커널 내에서 병렬로 진행하도록 도와주는 새로운 프레임웍,
ktask 의 RFC 패치입니다.  예를 들어, 부팅 시에 &lt;code&gt;struct page&lt;/code&gt; 들을 초기화 하는
작업은 현재 하나의 쓰레드가 처리하게 되어 booting 시간이 길어지는데, 멀티코어
시스템이라면 ktask 를 이용해 이 작업을 자동으로 병렬화 할 수 있다는 겁니다.
기존에도 workqueue, kthread_worker 와 같이 병렬 작어을 위한 커널 기능들이
존재하지만, workqueue 는 작업을 쓰레드별로 나누는 걸 대신 해주지는 않고,
kthread_worker 는 하나의 쓰레드만 지원하기 때문에 ktask 를 새로 만들었다고
하네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v4-0073-xarray-version-4&#34;&gt;[PATCH v4 00/73] XArray version 4&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171206004159.3755-1-willy@infradead.org&#34;&gt;https://lkml.kernel.org/r/20171206004159.3755-1-willy@infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XArray 네번째 버전의 패치가 올라왔습니다.  LinuxCon Europe 에서도 관련 발표를
재밌게 들었었는데요.  XArray 는 Radix tree 의 API 를 대체할 목적으로 만들어진
새로운 자료구조 인터페이스입니다.  이번 버전의 패치를 통해 page cache 가 완전히
Radix tree 에서 XArray 로 갈아타게 했다는군요.  하지만 여전히 문제들도 많아서
바로 머지되진 않을 것 같다고 패치의 작성자도 이야기하네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.15-rc1</title>
      <link>/post/lkml_news_v4.15-rc1/</link>
      <pubDate>Mon, 27 Nov 2017 11:09:15 +0900</pubDate>
      <guid>/post/lkml_news_v4.15-rc1/</guid>
      <description>&lt;h2 id=&#34;linux-415-rc1&#34;&gt;Linux 4.15-rc1&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFzcudOPSwbD9XfVxBgFsQOhBjyncyYnGDYwZUEHOGUwcw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFzcudOPSwbD9XfVxBgFsQOhBjyncyYnGDYwZUEHOGUwcw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;예정대로 2주만에 4.15 의 첫번째 rc 버전이 나왔습니다.&lt;/p&gt;
&lt;p&gt;지난주는 추수감사절이라 다들 휴가인 사람이 많았기에 첫번째 주에 최대한 많이
풀리퀘스트를 받았고 지난주는 좀 더 까다롭게 풀리퀘스트를 검사했군요.  토발즈는
두번째 주 동안 랩톱 들고 여행중이었고, 랩톱에서는 전체 모듈 빌드를 하지 않기
때문이라 합니다.  메인테이너들도 가능한 첫번째 주에 중요 플리퀘스트를 보내는
식으로 협조를 해줬다고 합니다.  그네들도 두번째주는 휴가가고 싶었을테니&amp;hellip; ;)&lt;/p&gt;
&lt;p&gt;4.14 가 LTS 였기에 이번 머지윈도우에는 변화가 크지 않을 것으로 예상했는데
생각보다 많은 풀리퀘스트가 있었다고 합니다.  4.9 때와는 다른 경향인데, 4.9 에
비해 4.14 가 변화가 크지 않았기 때문 아니겠냐고 토발즈는 생각하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v3-04-introduce-get_user_pages_longterm&#34;&gt;[PATCH v3 0/4] introduce get_user_pages_longterm()&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/151197872943.26211.6551382719053304996.stgit@dwillia2-desk3.amr.corp.intel.com&#34;&gt;https://lkml.kernel.org/r/151197872943.26211.6551382719053304996.stgit@dwillia2-desk3.amr.corp.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;커널스페이스에서 꽤 오랜시간 페이지를 잡아둬야 하는 경우를 위한, 예를 들어
dma-to-dax vs truncate 문제를 위한, get_user_pages() 의 변종의 추가입니다.
실제 이를 사용하는 패치는 나중에 올라올 것 같군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-0018-introduce-a-new-tool-valid-access-checker&#34;&gt;[PATCH 00/18] introduce a new tool, valid access checker&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1511855333-3570-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1511855333-3570-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Valid access checker (Vchecker) 라는 이름의 새로운 메모리 에러 탐색 도구의
소개입니다.  Out of bound access, use after free 같은, 의도되지 않은 메모리
접근을 잡아낼 수 있게 해준다고 하는군요.  Kernel Address SANitizer (KASAN) 의
기능에 많이 의존하고 있기 때문에 KASAN 메인테이너 중 하나인 Dmitry 는 이게
별도의 도구로 머지되어야 할지 의문스럽다며 머지될 예정이면 한번 더 이야기
해달라고 하네요.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-03-mmcma-manage-the-memory-of-the-cma-area-by-using-the-zone_movable&#34;&gt;[PATCH v2 0/3] mm/cma: manage the memory of the CMA area by using the ZONE_MOVABLE&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1512114786-5085-1-git-send-email-iamjoonsoo.kim@lge.com&#34;&gt;https://lkml.kernel.org/r/1512114786-5085-1-git-send-email-iamjoonsoo.kim@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CMA 를 위한 영역은 하나의 zone 내에 위치하게 되는데, 이 zone 내에 다양한 특성의
페이지들이 혼재되어있다보니 이런저런 문제가 생깁니다.  CMA 영역을 MOVABLE zone
만 쓰도록 함으로써 이 문제를 해결하는 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-tipcorercu-021-de-emphasize-smp_read_barrier_depends&#34;&gt;[PATCH tip/core/rcu 0/21] De-emphasize {smp_,}read_barrier_depends&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171201195053.GA23494@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20171201195053.GA23494@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCU 패치는 일단 Paul 의 트리에 머지된 후, tip 트리로 머지되고 나서야 토발즈의
트리에 들어갑니다.  이번에도 tip 트리로 머지되기 위한 패치들이 올라왔습니다.
그중에서도 이 시리즈는 READ_ONCE() 에 들어간 smp_read_barrier_depends() 의
architecture independent 한 코드로부터의 제거를 담고 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.14</title>
      <link>/post/lkml_news_v4.14/</link>
      <pubDate>Mon, 13 Nov 2017 17:07:44 +0900</pubDate>
      <guid>/post/lkml_news_v4.14/</guid>
      <description>&lt;h2 id=&#34;linux-414&#34;&gt;Linux 4.14&lt;/h2&gt;
&lt;p&gt;htpps://lkml.kernel.org/r/CA+55aFwqXh4rgJJ3T98k8wa-JYF7t8mWuwUjdxkbZyOyDEcGzQ@mail.gmail.com&lt;/p&gt;
&lt;p&gt;드디어 v4.14 의 릴리즈입니다.  이번 버전은 또하나의 LTS 커널이 될 예정이군요.&lt;/p&gt;
&lt;p&gt;동시에, v4.15 를 위한 머지 윈도우가 열렸습니다.  이번 머지 윈도우는 thanks
giving 이랑 겹치게 되었는데, 이때문에 머지 윈도우를 연장할지 아니면 아예 1주일
줄일지 토발즈는 고민중인 것 같네요.&lt;/p&gt;
&lt;h2 id=&#34;rfc-patch-v11-for-415-0124-restartable-sequences-system-call&#34;&gt;[RFC PATCH v11 for 4.15 01/24] Restartable sequences system call&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171114200414.2188-2-mathieu.desnoyers@efficios.com&#34;&gt;https://lkml.kernel.org/r/20171114200414.2188-2-mathieu.desnoyers@efficios.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;몇년전부터 올라오고 있으나 아직 머지되지 못한, restartable sequence 패치의 최신
버전이 또 올라왔습니다.  유저스페이스의 크리티컬 섹션을 커널에게 제어할 수
있도록 도와주는 기능입니다.  이번엔 머지될런지?&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-selftestvm-add-test-case-for-mmap-across-128tb-boundary&#34;&gt;[PATCH V2] selftest/vm: Add test case for mmap across 128TB boundary.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171123030313.6418-1-aneesh.kumar@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20171123030313.6418-1-aneesh.kumar@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;128TB mmap() 에 대한 테스트 케이스가 kselftest 에 추가되었습니다.  x86_64 와
powerpc64 를 지원하는군요.&lt;/p&gt;
&lt;p&gt;이후 몇가지 코멘트를 받고 v3 도 올라왔습니다:
&lt;a href=&#34;https://lkml.kernel.org/r/20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;xarray-documentation&#34;&gt;XArray documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171124011607.GB3722@bombadil.infradead.org&#34;&gt;https://lkml.kernel.org/r/20171124011607.GB3722@bombadil.infradead.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난 ossummit europe 에서 흥미롭게 발표를 들었던 XArray 의 문서입니다.  radix
tree 를 대체할 만한 인터페이스를 목표로 하고있다고 하더군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-mm-do-not-stall-register_shrinker&#34;&gt;[PATCH] mm: Do not stall register_shrinker&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1511481899-20335-1-git-send-email-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/1511481899-20335-1-git-send-email-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;메모리가 부족할 때 깨어나 일을 하게 되는 shrinker 의 등록 시 메모리가 부족해서
다른 것들에 의해 shink_slab() 에서 시간을 보내느라 register_shrinker() 에서
수십초씩이나 시스템을 멈춰있게 만드는 문제가 있었는데, shrink_slab() 에서
shrinker 등록 여부를 rwsem 에 대한 contention 확인으로 파악하고 slab shrinking
을 멈춰주도록 수정했습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.14-rc8</title>
      <link>/post/lkml_news_v4.14-rc8/</link>
      <pubDate>Wed, 08 Nov 2017 04:19:47 +0900</pubDate>
      <guid>/post/lkml_news_v4.14-rc8/</guid>
      <description>&lt;h2 id=&#34;linux-414-rc8&#34;&gt;Linux 4.14-rc8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/738207/&#34;&gt;https://lwn.net/Articles/738207/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;v4.14 를 향한 (아마도) 마지막 rc 버전의 릴리즈입니다.&lt;/p&gt;
&lt;p&gt;정말로 별다른 일 없었다면 그냥 이번에 v4.14 릴리즈를 할 계획이었지만 그정도는
아니었다고 하는군요.
어쨌든 rc8 덕분에 v4.15 merge window 는 thanksgiving week 를 포함하게 되었는데
토발즈는 이때 가족과 휴가를 갈 계획이라 랩톱 가지고 휴가다니는 동안에도 머지를
잘 할 수 있길 바라지만 문제가 생기면 merge window 를 연장할 수도 있겠다고
하네요.  일단 어떻게 될지 두고보자는군요.&lt;/p&gt;
&lt;p&gt;이번 릴리즈에 포함된 변경은 대부분 드라이버 쪽 변경이고, SPDK 관련 소스코드에
라이센스 추가 등을 한 사소하지만 커다란 양의 변경이 있습니다.  또 하나, 4.13
버전에서 /proc/cpuinfo 가 CPU frequency 를 부정확하게 표시하게 하는 중대한
버그가 있었는데, 다행히 이번에 고쳐졌군요.&lt;/p&gt;
&lt;h2 id=&#34;page-allocator-bottleneck&#34;&gt;Page allocator bottleneck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/cef85936-10b2-5d76-9f97-cb03b418fd94@mellanox.com&#34;&gt;https://lkml.kernel.org/r/cef85936-10b2-5d76-9f97-cb03b418fd94@mellanox.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;차세대 고속 NIC 에 의해 두각이 드러나는 소프트웨어쪽 bottleneck 을 찾다보니
page allocator 쪽에 오버헤드가 있다는 이야기로 시작된 쓰레드로, 9월부터 시작된
쓰레드인데 요즘 다시 답변이 활기차게 붙고 있습니다.&lt;/p&gt;
&lt;p&gt;ConnectX-5 100 Gbps NIC, Xeon CPU E5-2680 v3 @ 2.50GHz CPU 의 시스템에서
super_netperf 를 사용, 128개 TCP 스트림을 RX queue 갯수 바꿔가며 돌려가며 BW 를
측정했습니다.  mlx5 드라이버를 다음과 같이 수정, 사용했습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1) RX page cache disabled, 2 packets per page.
2) RX page cache disabled, one packet per page.
3) Huge RX page cache, one packet per page.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;두번째 드라이버는 200Gbps NIC 을 시뮬레이션 하기 위한 변경입니다.
첫번째, 세번째 드라이버는 RX queue
갯수에 따라 BW 가 증가, line rate 까지 도달하는데 두번째 드라이버는 그렇지
못하고 8개 RX queue 부터는 오히려 BW 가 줄어들었습니다.
이때 perf top 은
&lt;code&gt;85.58% [kernel] [k] queued_spin_lock_slowpath&lt;/code&gt; 를 보여, 페이지 할당 메커니즘의
자체적 성능도 문제고, 확장성도 문제라고 이슈를 최초 제기했습니다.&lt;/p&gt;
&lt;p&gt;PCP (per-CPU) allocator 를 사용해 성능이 좋아지는 걸 확인하고 쓰레드가 닫히는
것 같았는데, 11월 2일자로 다시 새로운 실험 결과를 가지고 왔습니다.
PCP allocator 내의 페이지가 남아있을 동안은 문제가 없지만, 이후부터는 페이지가
할당된 코어와 해제되는 코어가 달라서 buddy allocator 에 부담을 주더란
이야기입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-x86selftests-add-test-for-mapping-placement-for-5-level-paging&#34;&gt;[PATCH] x86/selftests: Add test for mapping placement for 5-level paging&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171108102250.38609-1-kirill.shutemov@linux.intel.com&#34;&gt;https://lkml.kernel.org/r/20171108102250.38609-1-kirill.shutemov@linux.intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x86 의 5-level paging 을 위한 selftest 가 추가되었네요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.14-rc7</title>
      <link>/post/lkml_news_v4.14-rc7/</link>
      <pubDate>Fri, 03 Nov 2017 14:51:35 +0900</pubDate>
      <guid>/post/lkml_news_v4.14-rc7/</guid>
      <description>&lt;h2 id=&#34;linux-414-rc7&#34;&gt;Linux 4.14-rc7&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFwhgxivTE3k88nshbrH9nd-4nhmhXGzw-MxRVGxf-R8Eg@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFwhgxivTE3k88nshbrH9nd-4nhmhXGzw-MxRVGxf-R8Eg@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일곱번째 rc 버전의 릴리즈입니다.&lt;/p&gt;
&lt;p&gt;OSSE 와 kernel summit 으로 프라하를 방문했던 토발즈인데, 집에 잘
돌아왔다는군요.  이번 rc 버전은 기존의 rc7 보다도 작은 편에 가깝다고 합니다만,
다음 한주간이 정말 조용하지 않는한은 rc8 릴리즈를 할 생각이라는군요.&lt;/p&gt;
&lt;h2 id=&#34;re-page-allocator-bottleneck&#34;&gt;Re: Page allocator bottleneck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1c218381-067e-7757-ccc2-4e5befd2bfc3@mellanox.com&#34;&gt;https://lkml.kernel.org/r/1c218381-067e-7757-ccc2-4e5befd2bfc3@mellanox.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;멜라녹스의 빠른 네트워크 카드를 사용하는 환경에서는 page allocator 의 속도가
bottleneck 이 된다는 이야기에 대한 업데이트입니다.  여전히 해당 부분이
bottleneck 이며, queued_spin_lock_slowpath() 가 85 % 가까이 CPU 를 차지하고
있군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-swap-readahead-clean-up&#34;&gt;[PATCH 0/2] swap readahead clean up&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1509514103-17550-1-git-send-email-minchan@kernel.org&#34;&gt;https://lkml.kernel.org/r/1509514103-17550-1-git-send-email-minchan@kernel.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swap layer 는 swap in 시에, 연속된 물리 주소의 페이지들을 한번에 읽어들이는
read-ahead 기법을 사용하고 있습니다.  후에 근접한 페이지도 접근될 확률이 높다는
거죠.  하지만 fragmentation 이 심한 환경에서는 꼭 그렇지 않을 수 있습니다.
때문에 virtual address space 에서 연속된 페이지들을 read ahead 하는 패치가
최근에 들어왔는데, 이에 대한 코드 정리 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-v2-ftracedocs-add-documentation-on-how-to-use-ftrace-from-within-the-kernel&#34;&gt;[PATCH v2] ftrace/docs: Add documentation on how to use ftrace from within the kernel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171031100705.573531cd@gandalf.local.home&#34;&gt;https://lkml.kernel.org/r/20171031100705.573531cd@gandalf.local.home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jprobe 가 사라지고 ftrace 가 대신 사용될 예정입니다.  이를 위한 문서의 추가
패치입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.14-rc6</title>
      <link>/post/lkml_news_v4.14-rc6/</link>
      <pubDate>Wed, 25 Oct 2017 12:56:27 +0200</pubDate>
      <guid>/post/lkml_news_v4.14-rc6/</guid>
      <description>&lt;h2 id=&#34;linux-414-rc6&#34;&gt;Linux 4.14-rc6&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFxSJGeN=2X-uX-on1Uq2Nb8+v1aiMDz5H1+tKW_N5Q+6g@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFxSJGeN=2X-uX-on1Uq2Nb8+v1aiMDz5H1+tKW_N5Q+6g@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여섯번째 rc 버전의 릴리즈입니다.&lt;/p&gt;
&lt;p&gt;토발즈 집 인터넷 문제로 평소보다 늦은 릴리즈였군요.
이번 rc 버전은 기대보다는 좀 많은 내용이 추가되었는데, 때문에 어쩌면 rc8 까지
나올지도 모르겠다고 하는군요.  물론 확정되거나 한건 아니라고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;re-git-pull-rcunext-rcu-commits-for-415&#34;&gt;Re: [GIT PULL rcu/next] RCU commits for 4.15&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/20171023204502.GA2776@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20171023204502.GA2776@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.15 에 들어가야 할 RCU 쪽 커밋들의 풀리퀘스트 입니다.&lt;/p&gt;
&lt;p&gt;문서, RCU CPU Stall warning 업데이트, rcutorture 쪽 업데이트가 포함되었네요.&lt;/p&gt;
&lt;h2 id=&#34;git-pull-de-alpha-make-core-code-not-need-to-know-about-alpha-for-v415&#34;&gt;[GIT PULL de-alpha] Make core code not need to know about Alpha for v4.15&lt;/h2&gt;
&lt;p&gt;코어 커널 코드에서 Alpha 를 위한 예외 케이스를 제거하기 위한 작업의 첫번째
결과물이 v4.15 를 향합니다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;code&gt;ACCESS_ONCE()&lt;/code&gt; 를 모두 &lt;code&gt;READ_ONCE()&lt;/code&gt; 와 &lt;code&gt;WRITE_ONCE()&lt;/code&gt; 로 변경하고,
&lt;code&gt;READ_ONCE()&lt;/code&gt; 와 Alpha 의 값을 리턴하는 &lt;code&gt;_release&lt;/code&gt; 와 &lt;code&gt;_relaxed&lt;/code&gt; atomic RMW
오퍼레이션들에 &lt;code&gt;smp_read_barrier_depends()&lt;/code&gt; 를 내장시키며, 따라서 필요없어진
&lt;code&gt;lockless_dereference()&lt;/code&gt; 는 수정된 &lt;code&gt;READ_ONCE()&lt;/code&gt; 로 대체되게 했습니다
(lockless_dereference() 는 사실 READ_ONCE() 플러스 smp_read_barrier_depends()
였는데 smp_read_barrier_depends() 는 Alpha 외의 아키텍쳐에서는 NOOP 이라 Alpha
만을 위해 괜히 복잡했거든요).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News after v4.14-rc5</title>
      <link>/post/lkml_news_v4.14-rc5/</link>
      <pubDate>Tue, 17 Oct 2017 20:54:24 +0900</pubDate>
      <guid>/post/lkml_news_v4.14-rc5/</guid>
      <description>&lt;h2 id=&#34;linux-414-rc5&#34;&gt;Linux 4.14-rc5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/CA+55aFyKgEL3dj7XGYsPQd8y_z0GWx91TLZPSQAxjrua1aWOLw@mail.gmail.com&#34;&gt;https://lkml.kernel.org/r/CA+55aFyKgEL3dj7XGYsPQd8y_z0GWx91TLZPSQAxjrua1aWOLw@mail.gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다섯번째 rc 버전의 릴리즈입니다.&lt;/p&gt;
&lt;p&gt;Lazy TLB flushing 변경은 지나치게 게으르게 TLB flushing 을 해서 AMD 칩 일부에서
문제를 일으키기도 했었다는군요.&lt;/p&gt;
&lt;p&gt;일부 서브시스템에서 fuzzing 을 통한 문제 발견과 수정이 있었는데 좋은
현상이라고도 언급합니다.&lt;/p&gt;
&lt;p&gt;전체적으로 x86, powerpc, mips 에의 arch 업데이트, gpu, networking, usb, sound,
misc 드라이버 업데이트, lockdep, networking, mm 쪽 코어 커널 업데이트, 그리고
perf 와 selftest 에의 업데이트가 있었다고 이번 릴리즈를 정리하는군요.&lt;/p&gt;
&lt;h2 id=&#34;patch-02-mm-thp-introduce-dedicated-transparent-huge-page&#34;&gt;[PATCH 0/2] mm, thp: introduce dedicated transparent huge page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1508145557-9944-1-git-send-email-changbin.du@intel.com&#34;&gt;https://lkml.kernel.org/r/1508145557-9944-1-git-send-email-changbin.du@intel.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;THP 의 메모리 할당은 좀 복잡하게 여기저기 코드 복사로 구현되어 있습니다.
HugeTLB 는 별도 인터페이스가 있구요. THP 에도 HugeTLB 처럼 별도 인터페이스를
사용하도록 제안한 패치입니다.&lt;/p&gt;
&lt;h2 id=&#34;patch-12-lockdep-introduce-crossreleasestacktrace-and-make-it&#34;&gt;[PATCH 1/2] lockdep: Introduce CROSSRELEASESTACKTRACE and make it&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lkml.kernel.org/r/1508318006-2090-1-git-send-email-byungchul.park@lge.com&#34;&gt;https://lkml.kernel.org/r/1508318006-2090-1-git-send-email-byungchul.park@lge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;지난번 Johan Hovold 가 이야기한 lockdep crossrelease 에 의한 성능 문제 (부팅
시간이 17초에서 35초까지 늘어났죠)에 대한 해결책입니다.&lt;/p&gt;
&lt;p&gt;stack unwind 를 너무 자주 해서 생긴 문제이므로 이를 선택적으로 할 수 있게 하고
그 디폴트 값을 자주 하지 않도록 수정했네요.&lt;/p&gt;
&lt;p&gt;작은 qemu 머신에서 부팅시간이 lockdep disabled 시 1.543 초, lockdep enabled 시
1.570 초, lockdep + crossrelease enabled 시 1.870 초를 보였는데, 이 패치를
적용한 후 마지막 환경에서 부팅시간이 1.574 초로 줄었습니다.&lt;/p&gt;
&lt;p&gt;패치를 보낸 박병철 님은 커널 로그의 타임스탬프를 통해 부팅 시간을 측정했는데,
Ingo Molnar 는 부팅 시간 테스트에 qemu 시작 스크립트에 init=/bin/true 과 같은
kernel parameter 를 줘서 부팅 완료와 함께 종료되게 하고서 perf &amp;ndash;null &amp;ndash;repeat
옵션을 사용해서 부팅 시간을 측정할 것을 제안했습니다. 유용한 팁 같습니다!&lt;/p&gt;
&lt;p&gt;Linux-kernel examples for LKMM recipes
&lt;a href=&#34;https://lkml.kernel.org/r/20171011223229.GA31650@linux.vnet.ibm.com&#34;&gt;https://lkml.kernel.org/r/20171011223229.GA31650@linux.vnet.ibm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스 커널에서의 메모리 순서 규칙을 위한 리트머스 테스트들이 실제로 비슷한
패턴으로 사용된 예를 Linux Plumbers Conference 에서 요청받은 Paul E. Mckenney
가 이에 대한 내용을 문서로 만들어 업데이트 했습니다.&lt;/p&gt;
&lt;p&gt;해당 문서는 다음 링크에서도 얻을 수 있습니다:
&lt;a href=&#34;https://github.com/aparri/memory-model/blob/master/Documentation/recipes-LKcode.txt&#34;&gt;https://github.com/aparri/memory-model/blob/master/Documentation/recipes-LKcode.txt&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LKML News - Intro</title>
      <link>/post/lkml_news_0000/</link>
      <pubDate>Tue, 10 Oct 2017 18:37:00 +0900</pubDate>
      <guid>/post/lkml_news_0000/</guid>
      <description>&lt;p&gt;LKML 을 모니터링 하면서 흥미가는 패치나 토론을 &lt;code&gt;lkml news&lt;/code&gt; 라는 카테고리로
묶어서 비정기적, 비형식적으로 간략히 정리하고 관련 소식을 업데이트 해보고자
합니다.  주로 모니터링 하는 메일은 메모리 매니지먼트 쪽과 rcu 관련 메일들이
될겁니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lkml livestream</title>
      <link>/post/lkml_go/</link>
      <pubDate>Sun, 28 May 2017 17:51:43 +0900</pubDate>
      <guid>/post/lkml_go/</guid>
      <description>&lt;p&gt;I wrote a simple, stupid program[1] that showing LKML[2] mails in terminal
briefly like twitter livestream in Go language.  It is just an early version
and so many things to be complemented exists, though.  Nevertheless, now it
just works as I wanted at first.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://github.com/sjp38/lkml&#34;&gt;https://github.com/sjp38/lkml&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_kernel_mailing_list&#34;&gt;https://en.wikipedia.org/wiki/Linux_kernel_mailing_list&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
