<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git | hacklog</title>
    <link>/tags/git/</link>
      <atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <description>git</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 06 Jan 2020 21:10:05 +0100</lastBuildDate>
    <image>
      <url>/img/tux.png</url>
      <title>git</title>
      <link>/tags/git/</link>
    </image>
    
    <item>
      <title>A thing you should know if you are using multiple email accounts with `git send-email`</title>
      <link>/post/git_send_email_multiple_email_caution/</link>
      <pubDate>Mon, 06 Jan 2020 21:10:05 +0100</pubDate>
      <guid>/post/git_send_email_multiple_email_caution/</guid>
      <description>&lt;p&gt;In some case, we need to send patches that made by other people instead.  &lt;code&gt;git send-email&lt;/code&gt; command can know this situation by itself by comparing the commit
author information and mail sender&#39;s information.  In that case, &lt;code&gt;git send-email&lt;/code&gt; automatically add &lt;code&gt;From:&lt;/code&gt; line pointing the real author of the
patch in the body of the mail so that maintainers applying the patches can set
the author information correctly.&lt;/p&gt;
&lt;p&gt;For example, if &amp;ldquo;Alice &lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&amp;rdquo; has made a commit and &amp;ldquo;Bob
&lt;a href=&#34;mailto:bob@abc.com&#34;&gt;bob@abc.com&lt;/a&gt;&amp;rdquo; formats the commit into a patch file and sends it, &lt;code&gt;git send-email&lt;/code&gt; automatically adds &lt;code&gt;From: Alice &amp;lt;alice@abc.com&amp;gt;&lt;/code&gt; line in the body
of the mail.  And, when a maintainer is applying the patch using &lt;code&gt;git am&lt;/code&gt;, the
patch is applied with author &amp;ldquo;Alice &lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;However, please note that &lt;code&gt;git send-email&lt;/code&gt; knows the situation by comparing the
author information and the command caller&#39;s git user eamil configuration or
given &amp;lsquo;&amp;ndash;from&amp;rsquo; option only, not considering real smtp email account.&lt;/p&gt;
&lt;p&gt;For example, suppose that Alice has two email accounts, &lt;a href=&#34;mailto:%60alice@abc.com&#34;&gt;`alice@abc.com&lt;/a&gt;&lt;code&gt; and&lt;/code&gt;&lt;a href=&#34;mailto:alice@def.com&#34;&gt;alice@def.com&lt;/a&gt;&lt;code&gt;.  And, Alice wants to use &lt;/code&gt;&lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&lt;code&gt;as her email address in the git history, but needs to send her patches using&lt;/code&gt;def.com` SMTP server.
She might use below commands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config sendemail.smtpserver smtp.def.com
$ git config sendemail.smtpuser alice@def.com
$ git config user.email &amp;quot;alice@abc.com&amp;quot;
$ git commit -as -m &#39;the patch&#39;
$ git format-patch HEAD^
$ git send-email 0001_the_patch.patch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because her git config is saying the &lt;code&gt;user.email&lt;/code&gt; is &lt;a href=&#34;mailto:%60alice@abc.com&#34;&gt;`alice@abc.com&lt;/a&gt;&lt;code&gt;and the patch is authored by&lt;/code&gt;&lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;&lt;code&gt;, &lt;/code&gt;git send-email&lt;code&gt;thinks same people is sending the patch.  Thus, it doesn&#39;t add the &#39;From:&#39; line in the body of the mail.  Of course,&lt;/code&gt;git send-email&lt;code&gt;tries to set the&lt;/code&gt;from&lt;code&gt; of the mail as&lt;/code&gt;&lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;`, but as the additionally specified &amp;lsquo;from&amp;rsquo; information is
usually (at least gmail does) ignored by the SMTP server, the maintainer will
receive the mail saying author email as &lt;a href=&#34;mailto:&#39;alice@def.com&#34;&gt;&#39;alice@def.com&lt;/a&gt;&amp;rsquo; only.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;git send-email&lt;/code&gt; considers the email address it &lt;em&gt;tries&lt;/em&gt; to use as the
from address, not the final one that SMTP server will use.  Thus, this problem
can be worked around in weird way using the &lt;code&gt;--from&lt;/code&gt; option of the &lt;code&gt;git send-email&lt;/code&gt;.  In the above case, giving &lt;code&gt;--from &amp;quot;Alice &amp;lt;alice@def.com&amp;gt;&amp;quot;&lt;/code&gt; option
to &lt;code&gt;git send-email&lt;/code&gt; makes the command to think the sender is not the author
(&lt;a href=&#34;mailto:alice@abc.com&#34;&gt;alice@abc.com&lt;/a&gt;) and as a result, it adds the &lt;code&gt;From:&lt;/code&gt; line in the body.&lt;/p&gt;
&lt;p&gt;Also, please note that adding &lt;code&gt;--from&lt;/code&gt; option does not always add the &lt;code&gt;From:&lt;/code&gt;
line in the body.  Rather than that, it can even hide the &lt;code&gt;From:&lt;/code&gt; line you
intended to add, if you give the address that same with the commit&#39;s author,
regardless of what SMTP server you use.  For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config sendemail.smtpserver smtp.def.com
$ git config sendemail.smtpuser alice@def.com
$ git config user.email &amp;quot;alice@abc.com&amp;quot;
$ git commit -as -m &#39;the patch&#39;
$ git format-patch HEAD^
$ git config user.email &amp;quot;alice@def.com&amp;quot;
$ git send-email --from alice@abc.com 0001_the_patch.patch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the final command had no &lt;code&gt;--from&lt;/code&gt; option, it would added the From: in-body
line.  However, because it specifies the real author address using &lt;code&gt;--from&lt;/code&gt;
option, &lt;code&gt;git send-email&lt;/code&gt; thinks the real author is sending this mail and omits
the &lt;code&gt;From:&lt;/code&gt; line in the body.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Git for email send</title>
      <link>/post/git_email_setup/</link>
      <pubDate>Sat, 28 Dec 2019 09:58:49 +0100</pubDate>
      <guid>/post/git_email_setup/</guid>
      <description>&lt;p&gt;Many communities are using Github nowadays, but some communities still use
mailing list based development style.  The Linux kernel community would be a
good example.  In the style, all major communications are made by email only.
Patches are submitted to the maintainers and one more open mailing lists as a
mail.
Reviews are also made as replies to the mail.&lt;/p&gt;
&lt;p&gt;Because some email clients can distort the original content for so-called
``rich user experience&amp;rsquo;&amp;rsquo; (e.g., changing tabs to spaces or inserting html
code), patch submitting people should aware of it and try to keep their mail
content to be plain.
This can be awful or even impossible on some mail clients.&lt;/p&gt;
&lt;p&gt;Git can help formatting and sending your patch files using SMTP.
This post describes how you can use git to send email.&lt;/p&gt;
&lt;h1 id=&#34;package-install&#34;&gt;Package Install&lt;/h1&gt;
&lt;p&gt;If you installed git using the package manager, you should install not only
&lt;code&gt;git&lt;/code&gt; package, but also &lt;code&gt;git-email&lt;/code&gt; package.  If you are using &lt;code&gt;apt&lt;/code&gt; package
manager, simply type
&lt;code&gt;$ sudo apt install git-email&lt;/code&gt; on the terminal.&lt;/p&gt;
&lt;h1 id=&#34;smtp-setting&#34;&gt;SMTP Setting&lt;/h1&gt;
&lt;p&gt;Then, set smtp server configurations for you.  Of course, you should enable the
smtp configuration on your mail accout first.  If your mail account is ready
for the smtp, now you should let git to know how it can access to your mail
account using &amp;lsquo;git config&amp;rsquo;.  If you want to use your Gmail account, it will be
as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global sendemail.smtpserver smtp.gmail.com
$ git config --global sendemail.smtpserverport 587
$ git config --global sendemail.smtpencryption tls
$ git config --global sendemail.smtpuser &amp;lt;your-gmail-account@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also set the mail account password as below, but I will recommend you
to not store your password in that way, because it can harm your security.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global sendemail.smtppass &amp;lt;your_password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;send-mail&#34;&gt;Send Mail&lt;/h1&gt;
&lt;p&gt;Sending mail is so easy.  You should first save your mail message in a file.
This could be patch file, which can also easily formatted using &lt;code&gt;git format-patch&lt;/code&gt;.  After that, make sure you know who you want your mail to be
sent to.
Now, just type below command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git send-email --to &amp;lt;recipients&amp;gt; &amp;lt;the file containing your message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have not set your password (again, I recommend you do not save your
password), this command will ask your password.  Just type it on the prompt.
Then, your mail will delivered to the recipients you specified.&lt;/p&gt;
&lt;p&gt;For more detail, &lt;code&gt;$ git help send-email&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Summarised how you can send email using Git.  Install packages, set SMTP, write
your mail in a plain file, and &lt;code&gt;git send-email&lt;/code&gt;.  That&#39;s it. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrate external git repository with its history</title>
      <link>/post/integrate_external_git_repository_with_history/</link>
      <pubDate>Thu, 27 Jun 2019 17:02:49 +0900</pubDate>
      <guid>/post/integrate_external_git_repository_with_history/</guid>
      <description>&lt;p&gt;프로젝트 a 와 프로젝트 b 를 병렬로 진행하고 있었는데, 두개의 리포지토리를
합치고 싶어지는 경우가 있습니다.  예컨대 프로젝트 a 의 성격이 보다 범용이
되었고 프로젝트 b 는 프로젝트 a 를 위한 도구적 성격이 되는 경우가 있겠죠.
a 프로젝트에 &amp;lsquo;b&amp;rsquo; 디렉토리를 만들고 그 아래 기존 프로젝트 b 의 파일들을 위치하고
싶습니다.
하지만 기존 b 프로젝트의 git 히스토리들도 유지하고 싶습니다.
비슷한 사례로 리눅스 커널 메모리 모델 프로젝트는 별도의 리포지토리[1] 로
개발되었지만 리눅스 업스트림 리포지토리의 tools/ 디렉토리 아래로 머지[2]
되었는데, 이 때 기존 개발 히스토리를 유지했죠.&lt;/p&gt;
&lt;p&gt;이 포스트는 이렇게 특정 git 리포지토리를 그 히스토리를 유지한 채 다른 git
리포지토리의 하위 디렉토리로 옮기는 법을 설명합니다.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://github.com/aparri/memory-model&#34;&gt;https://github.com/aparri/memory-model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/memory-model&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/memory-model&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;--&#34;&gt;초기 상황과 목표&lt;/h2&gt;
&lt;p&gt;먼저 현재 디렉토리 아래에 a 리포지토리와 b 리포지토리가 있다고 가정합니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
a   b
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우리는 a 리포지토리 아래 b/ 디렉토리를 만들고 그 아래 b 리포지토리를 넣고
싶습니다.&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;전략&lt;/h2&gt;
&lt;p&gt;b 리포지토리가 b/ 디렉토리 아래 모든 파일을 위치하도록 변경한 후, 이
리포지토리를 a 리포지토리에서 &lt;code&gt;--allow-unrelated-histories&lt;/code&gt; 옵션을 사용해
머지하도록 하겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;----&#34;&gt;합쳐질 리포지토리 파일 구조 변경&lt;/h2&gt;
&lt;p&gt;먼저 b 리포지토리의 파일들이 b/ 디렉토리 아래 위치하도록 만듭니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd b
$ mkdir b
$ git mv !(b) b
$ git commit -a -m &amp;quot;Relocate files for inclusion&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-&#34;&gt;리포지토리 병합&lt;/h2&gt;
&lt;p&gt;이제 b 리포지토리를 임시 remote 리포지토리로 등록하고 머지합니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ../a
$ git remote add temp ../b
$ git fetch temp
$ git merge --allow-unrelated-histories temp/master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;--allow-unrelated-histories&lt;/code&gt; 는 경로가 다른 파일에 대한 커밋들도 머지가 될 수
있게 해줍니다.&lt;/p&gt;
&lt;p&gt;임시로 등록한 remote 리포지토리는 지워줍시다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote rm temp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading1&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이상과 같이 기존의 개발 히스토리를 유지하면서 특정 git 리포지토리를 다른 git
리포지토리의 하위 디렉토리로 병합하는 방법을 알아보았습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Origin Story in Korean</title>
      <link>/post/git_origin_story_ko/</link>
      <pubDate>Wed, 29 Aug 2018 21:15:13 +0900</pubDate>
      <guid>/post/git_origin_story_ko/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;최근 흥미롭게 보았던 &lt;code&gt;Git Origin Story&lt;/code&gt; 라는 제목의 LinuxJournal.com 기사를
번역해 봅니다.  원본 기사는
&lt;a href=&#34;https://www.linuxjournal.com/content/git-origin-story&#34;&gt;https://www.linuxjournal.com/content/git-origin-story&lt;/a&gt; 에서 보실 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;수년간 리눅스 커널 개발자들이 사용해온 다양한 리비전 컨트롤 방법, Linus
Torvalds가 Bit keeper 를 사용하기로 한 결정과 그에 뒤따른 논쟁, 그리고 어떻게 Git
이 만들어졌는가에 대한 글입니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;처음에, Linus Torvalds는 리비전 컨트롤을 아예 사용하지 않았습니다.  커널에
코드를 기여하고자 하는 사람은 Usenet 그룹에, 나중에는 메일링 리스트에 패치를
올렸고, Linus는 자신의 소스 트리에 그걸 적용했습니다.  나중에 Linus는
릴리즈를 통해 패치들 사이의 구분 없이 전체 소스 트리를 공개하는 식이었습니다.
Torvalds의 작업 이력을 알아낼 수 있는 유일한 방법은 전체 릴리즈 버전 사이의
거대한 diff 를 통하는 것 뿐이었습니다.&lt;/p&gt;
&lt;p&gt;이는 오픈소스 리비전 컨트롤 시스템이 없기 때문은 아니었습니다.  1980년대부터
CVS 가 있었고, 그 당시에도 가장 유명한 시스템이었습니다.  그 핵심 기능을
사용해서 기여자들이 패치를 중앙 저장소에 보낼 수 있었고 그 저장소로 들어가는
패치의 기록을 조사할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 CVS 에 대한 많은 불만이 있었습니다.  그 중 하나는 변경 사항을 파일별로
제공하고 커다란 패치는 하나의 버전으로 인식할 수 없어서, 다른 개발자들로부터의
과거의 기여를 해석하기가 어려웠습니다.  또한, 두개의 같은 파일을 수정하는
패치가 동시에 보내졌을 때 발생하는 레이스 컨디션 같은 고치기 어려운 버그들도
일부 있었습니다.&lt;/p&gt;
&lt;p&gt;Linus는 CVS 를 좋아하지 않았는데, 부분적으로는 다른 사람들의 불만과 같은 이유
때문이었고 부분적으로는 후에야 명확해진 그만의 이유 때문이었습니다.  그는 CVS
의 버그와 이상한 기능들을 해결하려는 목표를 가지고 2000년대 초부터 발전되어온
오픈소스 프로젝트인 SVN 도 좋아하지 않았습니다.&lt;/p&gt;
&lt;p&gt;많은 리눅스 커널 개발자들이 적당한 리비전 컨트롤의 부재에 불만족스러 했으며,
따라서 Linus가 사용 가능한 리비전 컨트롤 중에서 뭐든 하나를 고르길 바라는
커뮤니티로부터의 압력이 항상 있었습니다.  그리고, 2002년, Linus는 그렇게
했습니다.  충격적이고 당황스럽게도, Linus는 Larry McVoy 에 의해 운영되는
BitMover 라는 회사에 의해 개발된, 소스코드가 공개되어있지 않은 상업용 시스템인
BitKeeper 를 선택했습니다.&lt;/p&gt;
&lt;p&gt;리눅스 커널은 역사상 가장 중요한 오픈소스 프로젝트였고, Linus 그 스스로가
수십년간 다른 오픈소스 프로젝트들이 따라하게 되었고 지금까지도 그렇게 하고 있는
오픈소스 개발 방법을 처음으로 발견한 사람이었습니다.  Linus가 무슨 생각을 하는
거지?  어떻게 그가 그의 커뮤니티와 오픈소스 세계를 이렇게 배신할수가 있지?
이게 Linus가 처음 커널 개발에 BitKeeper 를 사용했을 때 대부분의
반응이었습니다.&lt;/p&gt;
&lt;p&gt;또한, BitMover 는 돈을 받지 않고 BitKeeper 를 사용할 수 있는 라이센스를
제공하는데 대한 대가로 리눅스 커뮤니티에 제한을 걸었습니다.  첫째, 리눅스
개발자들은 BitKeeper 를 사용하는 동안 다른 경쟁 리비전 컨트롤 시스템 개발
프로젝트에 참여할 수 없었습니다.  둘째, BitMover 는 라이센스에 대한 악용을 막기
위해 커널 프로젝트에 관계된 일부 메타데이터를 제어할 수 있었습니다.  이
메타데이터에 대한 접근이 불가능하면, 커널 개발자들은 다른 리비전 컨트롤
시스템에서의 중요한 표준적 기능인, 과거의 커널 버전들 사이의 비교를 할 수
없었습니다.&lt;/p&gt;
&lt;p&gt;Linus가 BitKeeper 를 사용한지 수년이 지나도 논쟁은 줄어들지 않았습니다.  그의
기본적 주장은, 그는 프리 소프트웨어 (Free Software) 광신도가 아니라는
것이었습니다.  그는 오픈소스 도구들이 같은 일을 하는 상업용 도구들에 비해
낫다면 그걸 사용할 거라고 했습니다.  하지만 상업용 도구가 더 낫다면, 그는 다른
도구를 고려하지 않을 거라고요.&lt;/p&gt;
&lt;p&gt;하지만, 많은 커널 개발자들이 실제로 프리 소프트웨어 광신도였습니다.  커뮤니티에
손상을 입히고 리눅스 커널 프로젝트의 fork 를 일으킬 만큼은 아니지만 Linus와
다른 개발자들간의 분노와 긴장이 심해졌습니다.  Alan Cox, Al Viro, David Miller,
Andrea Arcangeli, Andrew Morton 과 많은 수의 다른 사람들이 경쟁 프로젝트를
이끌만한 기술력을 가지고 있음이 분명했고, 심지어 일부는 상당수 커널 개발자들을
그들 쪽으로 끌어갈 명성을 가지고 있었습니다.  하지만 아무도 그러지 않았습니다.
이 긴장과 적대는 계속 유지되었습니다.&lt;/p&gt;
&lt;p&gt;BitKeeper 의 무엇이 그리 대단했을까요?  BitKeeper 에서 자랑한 건 분산시스템을
제공한다는 것으로, 모든 저장소가 쉽게 fork 되고 merge 될 수 있었습니다.  이게
핵심이었습니다.  이를 통해, 특정 하위 그룹의 커널 개발자들은 리비전 컨트롤의
이득을 얻으면서 그룹끼리 독자적으로 협업하고, 준비된 다음에 그들의 변경 사항을
Linus에게 전달할 수 있었습니다.  이를 통해, 전에는 Linus 한명의 어깨에 완전히
매여있던 수많은 작업이 Linus가 믿는 개발자들, 또는 그렇게 작업하기로 한
그룹들에게 분산될 수 있었습니다.  아키텍쳐별 코드, 드라이버, 그리고 커널의 하위
시스템들이 모두 어떻게든 독립적으로 개발되고, 이후 적절한 시점에 한번에 메인
커널에 병합될 수 있었습니다.&lt;/p&gt;
&lt;p&gt;슬슬 하는 이야기가 익숙하게 들릴 겁니다만, 2002년에 이건 새로운
아이디어였습니다.  CVS 와 Subversion 같은 당시 존재하던 프로젝트들에서 fork 와
merge 는 주인만 할 수 있고, 죽고 싶도록 시간이 오래 걸리는 작업이었습니다.
BitKeeper 를 통해, 이게 사소한 작업이 되었습니다.&lt;/p&gt;
&lt;p&gt;커널 개발 도구의 핵심부에 독점 소프트웨어를 사용하려는 Linus의 의지는 많은
사람들이 대안을 만드는데 더욱 노력하게 만들었습니다.  CVS 와 Subversion
프로젝트는 너무 많은 기초적 설계 오류가 있었고, 이미 너무 많이 개발이 진행되어
변경하기가 쉽지 않았습니다.  다른 프로젝트들 모두 마찬가지였습니다.  하지만
이제 그들은 Linus가 정말 원하는걸 알거나 안다고 생각했으므로, 정말로 코딩을
시작할 수 있었습니다.  그 결과 분산 개발 기능을 제공하는 많은 수의 리비전
컨트롤 시스템이 나왔습니다.&lt;/p&gt;
&lt;p&gt;그런 시스템들 중에 arch, darcs, 그리고 monotone 등이 있었습니다.  그들은
Bitkeeper 를 경쟁 상대라고 함으로써, Linus가 Bitkeeper 에 대한 대안으로 그들을
선택하라고 설득했습니다.&lt;/p&gt;
&lt;p&gt;많은 사람들이 시도했지만, 아무도 성공하지 못했습니다.  이는 부분적으로는
Linus가 CVS 와 Subversion 에 뭐가 빠져있는지 모두 이야기 하지 않았듯, 그
프로젝트들에 Linus가 더 필요로 하는 것이 무엇인지 모두 말하지 않았기
때문입니다.  그리고, Linus가 소스가 폐쇄된 도구를 사용하는것도 개의치 않는 것
같았으므로, 어떤 대안이 그에게 받아들여질만 하려면 그 대안은 BitKeeper 보다
훨씬 기술적으로 향상되어 있어야만 할 것이었습니다.  따라서, BitKeeper 전에도
오픈소스 툴의 기능은 충분하지 않았지만, BitKeeper 가 나타남으로써 오픈소스 툴이
맞춰야 할 기능의 목표가 더욱 높아진 셈입니다.&lt;/p&gt;
&lt;p&gt;수년간의 많은 노력 후에도, 어떤 오픈소스 대안도 Linus의 필요를 맞추기엔 CVS 나
Subversion 보다도 크게 나아지지 못했습니다.  만약 Samba 를 만들었고 rsync 의
공동 창시자인 Andrew Tridgell 이 아니었더라면 이 상황은 훨씬 오래 지속될 수
있었을 겁니다.  2005년, Andrew는 프리 소프트웨어인 대안을 만들기 위해 BitKeeper
네트워킹 프로토콜을 리버스 엔지니어링 하려 했습니다.  그가 아니었더라도,
누군가는 시도했을 겁니다 - 그건 그저 시간 문제였습니다.  Larry McVoy 는 누구든
이 시도를 했다면 당장 지원을 끊겠다고 리눅스 개발자들에게 경고했고, 실제로
그렇게 했습니다.  결국, 급작스럽게 BitKeeper 를 커널 개발에 사용될 수 없게
되었습니다.  전체 개발 도구와 분산 버전 컨트롤로부터 생겨난 개발 문화는 앞날을
알 수 없는 상황에 놓였습니다.&lt;/p&gt;
&lt;p&gt;이게 무슨 의미일까요?  Linus는 그의 과거 방식의 개발로 돌아가서 모든 패치를 그
자신에게 보내라고 했을까요?  그렇지 않다면, BitKeeper 의 오픈소스 대안들 가운데
하나를 선택했을까요?  만약 그가 그랬다면, 어떤 대안을 골랐을까요?&lt;/p&gt;
&lt;p&gt;이 시점에서, 놀라운 일이 발생했습니다.  Linus가 리눅스 커널 개발을 1991년
시작한 후 처음으로 작업을 완전히 멈췄습니다.  현존하는 어떤 도구도 그가 원하는
일을 해주지 못했으므로, 그는 자신의 것을 만들기로 결정했습니다.&lt;/p&gt;
&lt;p&gt;Linus의 주요 관심은, 사실 속도였습니다.  이것이 그가 기존에는 완전히, 적어도
현존하는 프로젝트들이 이해할 수 있는 방식으로는 이야기하지 않은 부분이었습니다.
전세계에서 전력을 다해 패치를 보내오는 수천명의 커널 개발자들을 위해, 그는
기존에는 상상할 수 없는 속도로 동작하는 무언가가 필요했습니다.  그는 가장
거대하고 가장 복잡한 작업이라 해도 완료하는데 몇초 이상 기다리는 걸 참을 수
없었습니다.  Arch 도, darcs, monotone 도, 그리고 어떤 다른 프로젝트도 이
요구사항을 맞추지 못했습니다.&lt;/p&gt;
&lt;p&gt;Linus는 잠시 은둔한 채 코딩을 했고, 그 후에 그의 새로운 계획을 세상에
알렸습니다.  2005년 6월에 그 프로젝트를 시작한 이래 몇일만에, Linus의 git
리비전 컨트롤 시스템은 git 소스코드의 리비전 컨트롤을 완전히 할 수 있게
되었습니다.  몇주 후, git 은 리눅스 커널 개발의 리비전 컨트롤을 맡을 준비가
되었습니다.  몇달 후, 완전한 기능을 갖추었습니다.  이 시점에서, Linus는 이
프로젝트의 관리 권한을 해당 프로젝트의 가장 열정적인 기여자, Junio C. Hamano
에게 넘기고 리눅스 개발에 다시 전념했습니다.&lt;/p&gt;
&lt;p&gt;이 도구에 놀란 프리 소프트웨어 개발자 커뮤니티는 이 괴상한 작업물을 이해하려
노력했습니다.  이것은 리비전 컨트롤 소프트웨어의 어떤 것도 닮지 않았습니다.
사실, 이것은 리비전 컨트롤 시스템보다는 낮은 단계의 파일시스템 오퍼레이션들의
집합에 가까워 보였습니다.  그리고 다른 시스템들이 패치를 저장하는 것과 달리,
이것은 각각의 변경된 파일의 버전을 모두 저장했습니다.  어떻게 이런 방식이
괜찮을 수 있을까요?  하지만, 이 도구는 fork 와 merge 를 번개같은 속도로 처리할
수 있고, 패치를 요청하자마자 만들어낼 수 있었습니다.&lt;/p&gt;
&lt;p&gt;점진적으로, Junio는 CVS 와 Subversion 의 것들을 닮은 높은 수준의 커맨드 집합을
만들었습니다.  Git 의 원래 커맨드들이 &amp;ldquo;배관&amp;rdquo; 이었다면, 새로운 커맨드들은
&amp;ldquo;도자기 제품&amp;rdquo; 이었습니다.  그리고, 결국 사용되게 되었습니다.&lt;/p&gt;
&lt;p&gt;BitKeeper 에 대한 논쟁과 분노가 있었던 만큼이나, git 의 계속된 개발을 향한
열망과 참여 의지가 많았습니다.  포팅, 확장 기능, 그리고 웹사이트들이 모든 것을
현재 상태로 끌어올렸습니다.  몇년만에, 거의 모든 사람들이 git 을 사용하게
되었습니다.  리눅스처럼, git 이 세상을 집어삼켰습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fetching linux kernel source code</title>
      <link>/post/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>/post/fetching-linux-source-code/</guid>
      <description>&lt;p&gt;리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나
인터넷을 통해 쉽게 얻을 수 있습니다.  이 글에서는 리눅스 커널 소스코드를 받아올
수 있는 몇가지 방법을 설명합니다.&lt;/p&gt;
&lt;h1 id=&#34;kernelorg&#34;&gt;kernel.org&lt;/h1&gt;
&lt;p&gt;리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는
[kernel.org] (&lt;a href=&#34;https://www.kernel.org&#34;&gt;https://www.kernel.org&lt;/a&gt;) 라 할 수 있겠는데, 이 사이트에는 소스
코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다.  이
사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된
버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 &lt;code&gt;tar.xz&lt;/code&gt; 포맷의 압축
파일 또는 &lt;code&gt;patch&lt;/code&gt; 등 다양한 형태로 다운받을 수 있는 링크가 있습니다.&lt;/p&gt;
&lt;p&gt;한가지 유의할 것은 kernel.org 는 공식적 사이트일 뿐으로 비슷하게 소스코드를
호스팅 하는 사이트는 github 을 포함해 여럿 있을 수 있다는 점입니다.  또한,
특정한 회사나 개인이 수정한 버전의 커널의 소스코드는 kernel.org 에서 받을 수
없을 수 있습니다.  하지만, 리눅스 커널의 라이센스가 GPL 인만큼, 그들도 자신이
수정한 버전을 상품 등으로 배포하고 있다면 소스코드를 공개해야 하므로, 해당
버전을 만든 사람 또는 회사에 문의해 보면 그 소스코드를 받을 수 있을 겁니다.
예를 들어 안드로이드의 경우 자신들이 수정한 커널을 사용하며, 그렇게 수정된
커널의 소스코드를 자신들의 소스코드 [호스팅 사이트]
(&lt;a href=&#34;https://android.googlesource.com/&#34;&gt;https://android.googlesource.com/&lt;/a&gt;) 에 공개하고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;specific-version&#34;&gt;Specific Version&lt;/h2&gt;
&lt;p&gt;kernel.org 첫 페이지에는 몇가지 버전의 소스코드만 존재하므로 찾고 있는 버전은
해당 페이지에 링크가 존재하지 않을 수 있습니다.  특정 버전을 찾기 위한 페이지
역시 kernel.org 는 제공하는데, &lt;a href=&#34;https://www.kernel.org/pub/linux/kernel/&#34;&gt;https://www.kernel.org/pub/linux/kernel/&lt;/a&gt; 주소로
들어가면 특정 버전의 커널 소스코드를 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 4.2.1 버전을 받고 싶다면, 다음 커맨드를 셸에서 수행해 받아올 수
있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.2.1.tar.xz
$ tar xvf linux-4.2.1.tar.xz
$ ls linux-4.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;git-repository-cloning&#34;&gt;Git Repository Cloning&lt;/h1&gt;
&lt;p&gt;주요 리눅스 개발자들은 각자의 git repository 로 자신이 개발중인 버전의 리눅스
커널 소스코드를 관리하는데, 이 역시 남들이 볼 수 있게 공유해 두고 있습니다.
따라서, 원한다면 특정 리눅스 개발자의 개발중인 리눅스 커널 소스코드를 git 으로
clone 해올 수 있습니다.  많은 주요 개발자들이 kernel.org 위에 자신의 git
repository 를 호스팅 하고 있으며, github 을 사용하는 사람들도 많습니다.  예를
들어 리누스 토발즈는 kernel.org 위에 자신의 git repository 를 호스팅 하면서
github 에 미러링도 하고 있습니다.  각각의 repository 의 주소는 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux.git&#34;&gt;https://github.com/torvalds/linux.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음과 같은 명령을 통해 리누스 토발즈의 개발중인 리눅스 커널 소스코드를 clone
해올 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
$ ls linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;개발자의 repository 를 클론해 오는 방식의 장점은, 일단 아직 릴리즈 되지 않은
따끈따끈한 버전의 소스코드를 그 commit history 와 함께 볼 수 있다는 점일
겁니다.  리눅스 커널 개발에 참여하고 싶다면 현재 어떤 기능이 구현되고 있고 어떤
버그가 아직 고쳐지지 않았는지 등을 알 수 있으므로 필수적입니다.  또하나의
장점은 git repository 에는 그동안 해당 repository 에서 릴리즈한 버전들이 모두
포함되어 있어, 해당 버전을 언제든지 &lt;code&gt;checkout&lt;/code&gt; 할 수 있다는 점입니다.&lt;/p&gt;
&lt;p&gt;단점은, commit history 와 개발중인 코드를 원하는게 아니라면 불필요하게 많은
용량의 데이터를 다운로드 받아야 한다는 것입니다.  현재 소스코드를 필요로 하는
목적에 맞춰, 특정 버전의 코드가 필요할 뿐이라면 압축 파일을, 그렇지 않다면 git
repository 를 사용한 접근을 하는 편이 옳을 겁니다.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;리눅스 커널의 소스코드를 얻어오는 몇가지 방법을 알아봤습니다.  리눅스 커널은
오픈소스 형태라 그 소스코드를 쉽게 구할 수 있으며, kernel.org 또는 github 등의
호스팅 사이트에서 압축 파일, 패치, 또는 git repository 의 형태로 얻을 수
있습니다.  개발중인 repository 의 clone 을 통한 형태는 commit history 와
개발중인 코드의 정보를 알 수 있다는 장점이 있지만 그만큼 다운로드 받아야 하는
데이터의 양이 크다는 단점도 존재합니다.  자신이 현재 소스코드를 얻고자 하는
목적에 맞춰 적합한 방법으로 소스코드를 얻어오는 것이 좋을 겁니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
