<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on hacklog</title>
    <link>https://sjp38.github.io/tags/linux/</link>
    <description>Recent content in Linux on hacklog</description>
    <image>
      <title>hacklog</title>
      <url>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://sjp38.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 23 May 2025 07:59:31 -0700</lastBuildDate>
    <atom:link href="https://sjp38.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I will have a talk at the Kernel Recipes 2025</title>
      <link>https://sjp38.github.io/posts/kernel_recipes_2025_talk/</link>
      <pubDate>Fri, 23 May 2025 07:59:31 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/kernel_recipes_2025_talk/</guid>
      <description>DAMON talk for Kernel Recipes 2025 has been scheduled. The title of the talk is &amp;ldquo;Overcoming Observer Effects in Memory Management with DAMON&amp;rdquo;. It will introduce DAMON at whole for wider audience.</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2025</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2025_talk/</link>
      <pubDate>Mon, 07 Apr 2025 21:12:06 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2025_talk/</guid>
      <description>DAMON talk for OSSummit North America 2025 has been accepted and scheduled. The title of the talk is &amp;ldquo;Self-Driving DAMON/S: Controlled and Automated Access-aware Efficient Systems&amp;rdquo;. It will present DAMON&amp;rsquo;s two auto-tuning features for access monitoring and access-aware system operations.</description>
    </item>
    <item>
      <title>I will have two sessions for DAMON at LSFMM&#43;BPF 2025</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2025_talks/</link>
      <pubDate>Sat, 22 Mar 2025 13:58:08 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2025_talks/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON, and any requirements to DAMON for more access-aware memory management kernel subsystem of future in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2025. The title of the talks are &amp;ldquo;DAMON Updates and Plans: Monitoring Parameters Auot-tuning and Memory Tiering&amp;rdquo; and &amp;ldquo;DAMON Requirements for Access-aware MM of Future&amp;rdquo;, respectively.
Detailed schedules can be found from the below Google doc spreadsheet.</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2024</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2024/</link>
      <pubDate>Tue, 31 Dec 2024 10:16:21 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2024/</guid>
      <description>As today is the last day of 2024, I checked my open source commits statistics using my simple and buggy scripts. Similar statistics for 2023 is available at another post.
Note that the script may have bugs, and numbers don&amp;rsquo;t tell everything.
In short, I made 7th and 2nd biggest changes to Linux kernel memory management subsystem among the 340 people, in terms of lines of changes (2,347) and commits (102).</description>
    </item>
    <item>
      <title>I will have a talk at the FOSDEM 2025</title>
      <link>https://sjp38.github.io/posts/fosdem2025_talk/</link>
      <pubDate>Fri, 13 Dec 2024 09:08:43 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/fosdem2025_talk/</guid>
      <description>I will present DAMON in FOSDEM&#39;25. The title of the talk is &amp;ldquo;DAMON: Kernel Subsystem for Data Access Monitoring and Access-aware System Operations&amp;rdquo;.</description>
    </item>
    <item>
      <title>Creating DAMON logo using DAMON</title>
      <link>https://sjp38.github.io/posts/damon_heatmap_logo/</link>
      <pubDate>Sat, 13 Jul 2024 13:56:02 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/damon_heatmap_logo/</guid>
      <description>I just made a DAMON logo using DAMON, like below.
$ git clone https://github.com/sjp38/masim &amp;amp;&amp;amp; cd masim $ cat damon_pixel_2 11111111 11 11 111111 11111111 11 11 11111111 11111111 1111 11111111 11111111 11 11 11111111 11111111 1111 11111111 $ ./pixels_to_access_config.py ./damon_pixel_2 $((100*1024*1024)) 300 damon.cfg $ sudo damo record &amp;#34;./masim ./configs/stairs.cfg&amp;#34; $ sudo damo report heatmap --output damon.png The output is below:
The cropped one:</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit Euroe 2024</title>
      <link>https://sjp38.github.io/posts/ossummit_eu_2024_talk/</link>
      <pubDate>Wed, 12 Jun 2024 21:22:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_eu_2024_talk/</guid>
      <description>DAMON talk for OSSummit EU 2024 has accepted and scheduled. The talk will focus on use cases of DAMON for saving memory including those for real world products.
The title of the talk is &amp;ldquo;DAMON Recipes: Ways to Save Memory Using a Linux Kernel Subsystem in the Real World&amp;rdquo;.</description>
    </item>
    <item>
      <title>I will have a session for DAMON at LSFMM 2024</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2024_talk/</link>
      <pubDate>Wed, 08 May 2024 07:48:52 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2024_talk/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2024. The title of the talks is &amp;ldquo;DAMON updates and Plans: Automation of DAMON tuning, tiering, and VM guest scaling&amp;rdquo;.
https://docs.google.com/spreadsheets/d/176LXLys9Uh6A-Eal2flrzcbUSJMUXGkGwyihr9jAAaQ/edit#gid=0</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2024</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2024_talk/</link>
      <pubDate>Wed, 14 Feb 2024 23:05:59 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2024_talk/</guid>
      <description>DAMON talk for OSSummit North America 2024 has been accepted and scheduled. The talk will present DAMOS auto-tuning and hopefully, more new DAMO features. The features are still under development, but hopefully, the power of presentation-driven development will make it. ;) Looking forward to meeting you there!</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2023</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2023/</link>
      <pubDate>Sun, 31 Dec 2023 12:57:52 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2023/</guid>
      <description>As today is the last day of 2023, I checked some open source commits statistics using my simple and buggy script, and github. Similar statistics for 2022 is available at another post.
In short, I made 8th and 4th biggest changes to Linux kernel memory management subsystem among the 295 people, for lines of changes (1,910) and commits (66).
For the Linux kernel whole tree, the numbers become 264th (3,562 lines) and 80th (147 commits) among 5,006 people.</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit Europe 2023</title>
      <link>https://sjp38.github.io/posts/ossummit_eu_2023_talk/</link>
      <pubDate>Fri, 30 Jun 2023 16:01:51 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_eu_2023_talk/</guid>
      <description>DAMON talk for OSSummit EU 2023 has accepted and scheduled. The talk will focus on its user-space tool, damo. It&amp;rsquo;s mainly for helping more audiences to digest the content easier, and also for accelerating the development of damo. By the time, hopefully the version of damo would reach to, or exceed 2.0.0, and newer interface and features will be introduced together.
The title of the talk is &amp;ldquo;Data Access Monitoring Operator (DAMO): User-Space Tool/Python Library for Access-Aware Profiling and Optimization of Your Linux Systems&amp;rdquo;.</description>
    </item>
    <item>
      <title>DAMON News List</title>
      <link>https://sjp38.github.io/posts/damon_news/</link>
      <pubDate>Sat, 06 May 2023 11:27:07 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/damon_news/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_news. This out-dated post will be removed soon.
Below is a list of news around DAMON project.
This list is not exhaustive but just a DAMON maintainer&amp;rsquo;s collection of news. If you find a news that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
2024 2024-10-15: DAMON debugfs interface removal RFC patch has posted.
2024-10-10: Monthly PyPI downloads of DAMON user-space too, DAMO, doubled again after ten days.</description>
    </item>
    <item>
      <title>DAMON News List</title>
      <link>https://sjp38.github.io/posts/ko/damon_news/</link>
      <pubDate>Sat, 06 May 2023 11:27:07 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_news/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_news. This out-dated post will be removed soon.
Below is a list of news around DAMON project.
This list is not exhaustive but just a DAMON maintainer&amp;rsquo;s collection of news. If you find a news that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
2024 2024-10-15: DAMON debugfs interface removal RFC patch has posted.
2024-10-10: Monthly PyPI downloads of DAMON user-space too, DAMO, doubled again after ten days.</description>
    </item>
    <item>
      <title>I will have a session for DAMON at the LSFMM 2023</title>
      <link>https://sjp38.github.io/posts/lsfmmbpf_2023_talk/</link>
      <pubDate>Thu, 04 May 2023 18:13:37 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/lsfmmbpf_2023_talk/</guid>
      <description>I will present and discuss about the current status and future plans of DAMON in Linux Storage/File System/Memory Management/BPF (LSFMM+BPF) 2023. The title of the talks is &amp;ldquo;DAMON updates and future plans&amp;rdquo;.
https://events.linuxfoundation.org/lsfmm/program/schedule-at-a-glance/</description>
    </item>
    <item>
      <title>I will have a talk at the Open Source Summit North America 2023</title>
      <link>https://sjp38.github.io/posts/ossummit_na_2023_talk/</link>
      <pubDate>Sat, 18 Mar 2023 09:34:33 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ossummit_na_2023_talk/</guid>
      <description>I will present DAMON, DAMOS, and DAMO in Open Source Summit North America 2023. The title of the talk is &amp;ldquo;DAMON, DAMOS, and DAMO: Kernel Subsystems and User-Space Tools for Data Access-Aware System Analysis/Optimizations&amp;rdquo;.
https://sched.co/1K5HS</description>
    </item>
    <item>
      <title>DAMON-based System Optimization Guide</title>
      <link>https://sjp38.github.io/posts/damon_optimization_guide/</link>
      <pubDate>Sun, 15 Jan 2023 10:36:11 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_optimization_guide/</guid>
      <description>This document helps you estimating the amount of benefit that you could get from DAMON-based system optimizations, and describes how you could achieve it.
Check The Signs No optimization can provide same extent of benefit to every case. Therefore you should first guess how much improvements you could get using DAMON. If some of below conditions match your situation, you could consider using DAMON.
Low IPC and High Cache Miss Ratios.</description>
    </item>
    <item>
      <title>DAMON-based System Optimization Guide</title>
      <link>https://sjp38.github.io/posts/ko/damon_optimization_guide/</link>
      <pubDate>Sun, 15 Jan 2023 10:36:11 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_optimization_guide/</guid>
      <description>This document helps you estimating the amount of benefit that you could get from DAMON-based system optimizations, and describes how you could achieve it.
Check The Signs No optimization can provide same extent of benefit to every case. Therefore you should first guess how much improvements you could get using DAMON. If some of below conditions match your situation, you could consider using DAMON.
Low IPC and High Cache Miss Ratios.</description>
    </item>
    <item>
      <title>DAMON Evaluation</title>
      <link>https://sjp38.github.io/posts/damon_evaluation/</link>
      <pubDate>Sun, 15 Jan 2023 10:34:06 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_evaluation/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon_evaluation. This out-dated post will be removed soon.
DAMON is lightweight. It increases system memory usage by 0.39% and slows target workloads down by 1.16%.
DAMON is accurate and useful for memory management optimizations. An experimental DAMON-based operation scheme for THP, namely &amp;rsquo;ethp&amp;rsquo;, removes 76.15% of THP memory overheads while preserving 51.25% of THP speedup. Another experimental DAMON-based &amp;lsquo;proactive reclamation&amp;rsquo; implementation, namely &amp;lsquo;prcl&amp;rsquo;, reduces 93.</description>
    </item>
    <item>
      <title>DAMON Evaluation</title>
      <link>https://sjp38.github.io/posts/ko/damon_evaluation/</link>
      <pubDate>Sun, 15 Jan 2023 10:34:06 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_evaluation/</guid>
      <description>DAMON is lightweight. It increases system memory usage by 0.39% and slows target workloads down by 1.16%.
DAMON is accurate and useful for memory management optimizations. An experimental DAMON-based operation scheme for THP, namely &amp;rsquo;ethp&amp;rsquo;, removes 76.15% of THP memory overheads while preserving 51.25% of THP speedup. Another experimental DAMON-based &amp;lsquo;proactive reclamation&amp;rsquo; implementation, namely &amp;lsquo;prcl&amp;rsquo;, reduces 93.38% of residential sets and 23.63% of system memory footprint while incurring only 1.22% runtime overhead in the best case (parsec3/freqmine).</description>
    </item>
    <item>
      <title>2022년 오픈소스 커밋 통계</title>
      <link>https://sjp38.github.io/posts/ko/my_opensource_commits_stat_2022/</link>
      <pubDate>Sat, 31 Dec 2022 13:48:12 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/ko/my_opensource_commits_stat_2022/</guid>
      <description>2022년 마지막 날을 맞아, 저의 간단하고 버그가 많은 스크립트와[1] github 을 통해 저의 오픈소스 커밋 통계를 내봤습니다.
리눅스 커널 통계 리눅스 커널의 메모리 관리 서브시스템과 커널 전체의 2022년 통계를 위해 제 버그 많은 스크립트를[1] 아래와 같이 돌려 봤습니다.
메모리 관리 서브시스템 2022년 한해, 305명의 사람들이 리눅스 커널 메모리 관리 서브시스템 개발에 참여해 81,631 라인의 변경을 2,135 개 커밋으로 만들었습니다.
변경한 라인 수와 커밋 갯수 기준으로 저는 그 305명 가운데 두번째와 (10,537 라인) 세번째로 (106 커밋) 큰 변경을 만들었군요.</description>
    </item>
    <item>
      <title>My opensource commits statistics in 2022</title>
      <link>https://sjp38.github.io/posts/my_opensource_commits_stat_2022/</link>
      <pubDate>Sat, 31 Dec 2022 13:48:12 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/my_opensource_commits_stat_2022/</guid>
      <description>As today is the last day of 2022, I checked some open source commits statistics using my simple and buggy script[1], and github.
Linux kernel statistics I ran my buggy script[1] to show some 2022 statistics for memory management subsystem and whole tree of Linux kernel as below.
Memory Management In 2022, 305 people participated in Linux kernel memory management subsystem development by making 81,631 lines of changes with 2,135 commits.</description>
    </item>
    <item>
      <title>Summary of DAMON Development in 2022</title>
      <link>https://sjp38.github.io/posts/damon_stat_2022/</link>
      <pubDate>Thu, 29 Dec 2022 19:35:00 -0800</pubDate>
      <guid>https://sjp38.github.io/posts/damon_stat_2022/</guid>
      <description>A summary of DAMON development in 2022 has posted: https://lore.kernel.org/damon/20221229171209.162356-1-sj@kernel.org/
2022 was a year of active and healthy DAMON development.
Seven new DAMON major features were delivered to users. Some of those were featured in articles and academic papers.
It was possible thanks to the DAMON community. The community has expanded with its own mailing list and an open bi-weekly chat series. 40 people contributed their great code to DAMON via making their 275 commits merged into the mainline.</description>
    </item>
    <item>
      <title>My 10th anniversary of the Linux kernel contribution</title>
      <link>https://sjp38.github.io/posts/linux_kernel_contribution_10th_anniversary/</link>
      <pubDate>Sun, 16 Oct 2022 09:09:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/linux_kernel_contribution_10th_anniversary/</guid>
      <description>Today is the 10th anniversary of my Linux kernel contribution. Including the tiny and trivial patch, I made 381 patches merged in the mainline during the 10 years.
$ git log --author SeongJae --reverse commit cf174b0ef52ad8184779e1da4132e2d9d17247e5 Author: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Date: Tue Oct 16 16:47:50 2012 +0900 staging: csr: csr_framework_ext_types.h: fix coding style Fix coding style of csr_framework_ext_types.h Signed-off-by: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt; [...] $ git log --author SeongJae --oneline | wc -l 381 I&amp;rsquo;m looking forward to the next 10 years.</description>
    </item>
    <item>
      <title>나의 리눅스 커널 컨트리뷰션 10주년</title>
      <link>https://sjp38.github.io/posts/ko/linux_kernel_contribution_10th_anniversary/</link>
      <pubDate>Sun, 16 Oct 2022 09:09:55 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux_kernel_contribution_10th_anniversary/</guid>
      <description>오늘은 제가 리눅스 커널에 처음 기여를 한지 10년이 되는 날입니다. 그 작고 사소했던 패치를 포함해, 지난 10년간 총 381개의 패치를 메인라인에 기여했네요.
$ git log --author SeongJae --reverse commit cf174b0ef52ad8184779e1da4132e2d9d17247e5 Author: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Date: Tue Oct 16 16:47:50 2012 +0900 staging: csr: csr_framework_ext_types.h: fix coding style Fix coding style of csr_framework_ext_types.h Signed-off-by: SeongJae Park &amp;lt;sj38.park@gmail.com&amp;gt; Signed-off-by: Greg Kroah-Hartman &amp;lt;gregkh@linuxfoundation.org&amp;gt; [...] $ git log --author SeongJae --oneline | wc -l 381 다음 10년을 기대합니다.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2022</title>
      <link>https://sjp38.github.io/posts/kernelsummit2022_talk/</link>
      <pubDate>Fri, 29 Jul 2022 21:02:43 -0700</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2022_talk/</guid>
      <description>I will present current status and future plans for DAMON in KernelSummit&#39;22. The title of the talk is &amp;ldquo;Current Status and Future Plans of DAMON&amp;rdquo;.
https://lpc.events/event/16/contributions/1224/</description>
    </item>
    <item>
      <title>Linux Memory Management Subsystem Development Statistics in 2021 (Short)</title>
      <link>https://sjp38.github.io/posts/linux-mm-dev-stat-2021-short/</link>
      <pubDate>Fri, 31 Dec 2021 07:52:00 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/linux-mm-dev-stat-2021-short/</guid>
      <description>Whenever reading the kernel development statistics report for each release from LWN, I wanted to scope it down to specific subsystems. For that, I wrote a script.
Belows are the top 10 kernel hackers who contributed to the memory management subsystem of Linux kernel, sorted by number of commits and changed (added, deleted, or modified) lines, respectively.
$ ./authors.py ~/linux --file mm/ --since 2021-01-01 --author_identity name --sortby lines --max_nr_authors 10 1.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2021</title>
      <link>https://sjp38.github.io/posts/kernelsummit2021_talk/</link>
      <pubDate>Wed, 08 Sep 2021 07:12:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2021_talk/</guid>
      <description>I will present DAMON/DAMOS in KernelSummit&#39;21. The title of the talk is &amp;ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes&amp;rdquo;.
https://linuxplumbersconf.org/event/11/contributions/984/</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2021</title>
      <link>https://sjp38.github.io/posts/ko/kernelsummit2021_talk/</link>
      <pubDate>Wed, 08 Sep 2021 07:12:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernelsummit2021_talk/</guid>
      <description>KernelSummit&#39;21 에서 DAMON/DAMOS 를 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Writing a fine-grained access pattern-oriented lightweight kernel module using DAMON/DAMOS in 10 minutes&amp;rdquo; 입니다.
https://linuxplumbersconf.org/event/11/contributions/984/</description>
    </item>
    <item>
      <title>An example of DAMON usage for profiling</title>
      <link>https://sjp38.github.io/posts/damon_profile_callstack_example/</link>
      <pubDate>Thu, 25 Feb 2021 07:20:30 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/damon_profile_callstack_example/</guid>
      <description>I realized I didn&amp;rsquo;t introduce a good, intuitive example use case of DAMON[0] for profiling so far, though DAMON is not for only profiling. One straightforward and realistic usage of DAMON as a profiling tool would be recording the monitoring results with callstack and visualize those by timeline together.
For example, below shows that visualization for a realistic workload, namely &amp;lsquo;fft&amp;rsquo; in SPLASH-2X benchmark suite. The upper-most graph shows how DAMON-detected working set size of the workload (y-axis) changes by time (x-axis).</description>
    </item>
    <item>
      <title>DAMON 을 이용한 프로파일링의 한 예</title>
      <link>https://sjp38.github.io/posts/ko/damon_profile_callstack_example/</link>
      <pubDate>Thu, 25 Feb 2021 07:20:30 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_profile_callstack_example/</guid>
      <description>DAMON[0] 이 프로파일링만을 위한 건 아니지만, DAMON 을 프로파일링에 활용하는 방법에 대한 괜찮은 직관적 예를 여태 소개한 적이 없다는 걸 깨달았습니다. 간단하지만 현실적인 DAMON 의 프로파일링 도구로써의 사용법은 모니터링 결과를 콜스택과 함께 기록한 후 시간대에 맞춰 시각화 하는 것입니다.
예를 들어, 아래 그림은 SPLASH-2X 벤치마크의 &amp;lsquo;fft&amp;rsquo; 라는 워크로드에 대한 그런 시각화 결과입니다. 여기서, 우린 이 워크로드에 세개의 폭발적 메모리 액세스가 이루어지는 구간이 있는 것을 알 수 있으며, FFT1DOnce.cons::prop.2() 가 그 첫번째와 두번째 구간에, 그리고 Transpose() 는 세번째 구간에 연관되어 있음을 알 수 있습니다.</description>
    </item>
    <item>
      <title>DAMON 테스트 패키지가 GPL v2 로 릴리즈 되었습니다</title>
      <link>https://sjp38.github.io/posts/ko/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon-tests_open_sourced/</guid>
      <description>DAMON 은 kselftest 와 kunit 에 기반한 여러 테스트를 자신의 패치셋에 포함시켜 두고 있습니다. 커널 트리에 위치하는 테스트는 짧은 수행시간만 가지는게 바람직하므로, 시간을 오래 소요하는 테스트들을 패키지화 해서 저희 회사 내에서만 사용해 오고 있었습니다. 테스트는 좋은 문서로 사용될 수 있고 컨트리뷰터들에게도 필요하죠. 그런 이유로, 이 패키지를 오픈소스로 만들겠다고 지난 커널 서밋 발표에서 이야기 했었습니다 (https://linuxplumbersconf.org/event/7/contributions/659/).
어제, 이 패키지 를 마침내 GPL v2 라이센스의 오픈소스로 릴리즈 했습니다. 이제 DAMON 인터페이스를 이해하고 여러분의 기계 위에서 스스로 DAMON 을 테스트 하는데 이 패키지를 사용하실 수 있습니다.</description>
    </item>
    <item>
      <title>Tests package for DAMON is released under GPL v2</title>
      <link>https://sjp38.github.io/posts/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/damon-tests_open_sourced/</guid>
      <description>DAMON contains a number of tests based on the kselftest and kunit in its patchset itself. As it is preferred to contain only tests having short runtime in kernel tree, I organized time consuming tests in a package and used it in my company only. Tests could be used as a good document and essential for contributors. For the reason, I promised I will make it open source in the last kernel summit talk (https://linuxplumbersconf.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2020</title>
      <link>https://sjp38.github.io/posts/kernelsummit2020_talk/</link>
      <pubDate>Sat, 08 Aug 2020 07:10:32 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2020_talk/</guid>
      <description>My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers Conference has accepted! Hope to (virtually) see you there. The title of the talk is, &amp;ldquo;DAMON: Data Access Monitoring Framework for Fun and Memory Management Optimizations&amp;rdquo;.</description>
    </item>
    <item>
      <title>Opening a Showcase Website for DAMON</title>
      <link>https://sjp38.github.io/posts/damon_github_page/</link>
      <pubDate>Tue, 19 May 2020 06:27:47 +0000</pubDate>
      <guid>https://sjp38.github.io/posts/damon_github_page/</guid>
      <description>A DAMON showcase website[1] is open. There are
the official documentation of DAMON[2], the heatmap format dynamic access pattern of various realistic workloads for heap area[3], mmap()-ed area[4], and stack[5] area, the dynamic working set size distribution[6] and chronological working set size changes[7], and the latest performance test results[8]. [1] https://damonitor.github.io
[2] https://damonitor.github.io/doc/html/latest
[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html
[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html
[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html
[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html
[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html
[8] https://damonitor.github.io/test/result/perf/latest/html/index.html</description>
    </item>
    <item>
      <title>DAMON 쇼케이스 웹사이트를 열었습니다</title>
      <link>https://sjp38.github.io/posts/ko/damon_github_page/</link>
      <pubDate>Sat, 16 May 2020 13:25:55 +0200</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon_github_page/</guid>
      <description>DAMON 소개를 위한 웹사이트[1] 를 열었습니다.
DAMON 공식 문서[2], 실제에 가까운 여러 워크로드의 힙[3], mmap() 된 영역[4], 그리고 스택[5] 에 대한 히트맵 포맷의 동적 액세스 패턴들, 동적 워킹셋 사이즈의 분포[6] 와 시간대에 따른 워킹셋 사이즈의 변화양상[7], 그리고 성능 테스트 결과[8] 를 확인해 보실 수 있습니다.
[1] https://damonitor.github.io
[2] https://damonitor.github.io/doc/html/latest
[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html
[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html
[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html
[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html
[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html
[8] https://damonitor.github.io/test/result/perf/latest/html/index.html</description>
    </item>
    <item>
      <title>DAMON: Data Access Monitor</title>
      <link>https://sjp38.github.io/posts/damon/</link>
      <pubDate>Fri, 27 Dec 2019 18:21:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/damon/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon. This out-dated post will be removed soon.
With increasingly data-intensive workloads and limited DRAM capacity, optimal memory management based on dynamic access patterns is becoming increasingly important. Such mechanisms are only possible if accurate and efficient dynamic access pattern monitoring is available.
DAMON is a Data Access MONitoring framework subsystem for the Linux kernel developed for such memory management. It is designed with some key mechanism (refer to Design for the detail) that make it</description>
    </item>
    <item>
      <title>DAMON: Data Access Monitor</title>
      <link>https://sjp38.github.io/posts/ko/damon/</link>
      <pubDate>Fri, 27 Dec 2019 18:21:07 +0100</pubDate>
      <guid>https://sjp38.github.io/posts/ko/damon/</guid>
      <description>!! NOTE !!
This post has migrated to https://damonitor.github.io/posts/damon. This out-dated post will be removed soon.
With increasingly data-intensive workloads and limited DRAM capacity, optimal memory management based on dynamic access patterns is becoming increasingly important. Such mechanisms are only possible if accurate and efficient dynamic access pattern monitoring is available.
DAMON is a Data Access MONitoring framework subsystem for the Linux kernel developed for such memory management. It is designed with some key mechanism (refer to Design for the detail) that make it</description>
    </item>
    <item>
      <title>Memory: the flat, the discontiguous, and the sparse (Korean)</title>
      <link>https://sjp38.github.io/posts/ko/lwn_memory_flat_discontiguous_sparse/</link>
      <pubDate>Wed, 31 Jul 2019 07:45:17 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lwn_memory_flat_discontiguous_sparse/</guid>
      <description>LWN 의 &amp;ldquo;Memory: the flat, the discontiguous, and the sparse&amp;rdquo; 라는 제목의 글의 한글 번역입니다. 원문은 LWN 에서 볼 수 있습니다: https://lwn.net/Articles/789304/
May 27, 2019
이 기사는 Mike Rapoport 에 의해 기여되었습니다.
컴퓨터 시스템에서 물리 메모리는 소중한 자원이어서, 이를 효율적으로 관리하기 위한 많은 노력이 기울여져왔습니다. 이 일은 현대의 시스템에서의 메모리 구조가 복잡해짐에 따라 더 어려워졌습니다. 물리 메모리가 실제로 어떻게 위치해 있는가를 다루기 위한 여러 계층의 추상화가 존재합니다; 그런 추상화 중 하나는 &amp;ldquo;메모리 모델&amp;rdquo; 이라고 불립니다.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2019</title>
      <link>https://sjp38.github.io/posts/kernelsummit2019_talk/</link>
      <pubDate>Sat, 20 Jul 2019 02:41:46 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kernelsummit2019_talk/</guid>
      <description>My talk proposal to the Linux Kernel Summit of this year which is co-located with the Linux Plumbers has accepted! Hope to see you in Lisbon. The title of the talk is, &amp;ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy&amp;rdquo;.</description>
    </item>
    <item>
      <title>I will have a talk at the Linux Kernel Summit 2019</title>
      <link>https://sjp38.github.io/posts/ko/kernelsummit2019_talk/</link>
      <pubDate>Sat, 20 Jul 2019 02:41:46 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernelsummit2019_talk/</guid>
      <description>[Linux Plumbers Conference 2019] (https://www.linuxplumbersconf.org/blog/2019/) 와 함께 열리는 올해의 [Linux Kernel Summit] (https://lwn.net/Articles/788378/) 에 제안한 발표 주제가 accept 되어 9월에 리스본에서 이에 대한 내용을 발표하게 되었습니다. 발표 제목은 &amp;ldquo;Tracing Data Access Pattern with Bounded Overhead and Best-effort Accuracy&amp;rdquo; 입니다.
티켓이 너무 일찍 팔려버리는 바람에 올해는 들으러도 못가나 걱정했는데 갈 수 있게 됐네요, 다행입니다! :D</description>
    </item>
    <item>
      <title>Linux Development History Visualization Youtube Channel</title>
      <link>https://sjp38.github.io/posts/ko/linux_develop_visualization_youtube/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:33 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux_develop_visualization_youtube/</guid>
      <description>재미 삼아 리눅스 커널 릴리즈 때마다 git history 를 visualize 해서 올리는 유투브 채널[1]을 개설해 봤습니다. 지금은 visualization 에는 gource[2] 를 사용하고 있습니다. 이 비디오를 만드는데 사용되는 스크립트도 GPL v3 로 공개[3]했으니 필요한 분은 사용해 보셔도 좋을 것 같습니다.
[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg
[2] https://gource.io/
[3] https://github.com/sjp38/linux_development_visualization</description>
    </item>
    <item>
      <title>Linux Development History Visualization Youtube Channel</title>
      <link>https://sjp38.github.io/posts/linux_develop_visualization_youtube/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:33 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/linux_develop_visualization_youtube/</guid>
      <description>I created a Youtube channel[1]. I will upload videos for the git history between each release of the Linux kernel, just for jun. I use gource[2] for the visualization for now. The scripts I use for these videos are available[3] under GPL v3. If you want, you may use the scripts for your own video generation.
[1] https://www.youtube.com/channel/UCI7qoGt1hOfCsI8hFqriYCg
[2] https://gource.io/
[3] https://github.com/sjp38/linux_development_visualization</description>
    </item>
    <item>
      <title>Unit test for the Linux kernel using Kunit</title>
      <link>https://sjp38.github.io/posts/ko/kunit_intro/</link>
      <pubDate>Wed, 20 Mar 2019 15:32:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kunit_intro/</guid>
      <description>업데이트 (2020-01-01): KUnit 은 v5.5 머지 윈도우 사이 메인라인에 머지되었습니다. 이 포스트 작성 시점 이후로 많은 KUnit 에도 많은 변화가 있었고, 따라서 아래 내용 중 일부, 특히 테스트 셋업과 수행 부분은 좀 많이 달라졌습니다. 해당 내용을 위해선 공식 문서 를 참고하시길 권장합니다. 또한, 최신 버전은 파이썬 버전 종속성이 생겨서 우분투 16.04 위에서는 문제를 겪으실 수 있습니다. 최신버전의 파이썬을 쓰시거나 그냥 우분투 18.04 를 사용하시길 권장합니다.
지난 2월 말에 FAST&#39;19 학회를 다녀왔는데요, Ted Tso 도 왔더군요.</description>
    </item>
    <item>
      <title>Unit test for the Linux kernel using Kunit</title>
      <link>https://sjp38.github.io/posts/kunit_intro/</link>
      <pubDate>Wed, 20 Mar 2019 15:32:29 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kunit_intro/</guid>
      <description>Update (2020-01-01): KUnit has merged in v5.5 merge window. From the writing of this post, it had some changes, so below content, especially the test setup and running will not work. Recommend you to refer to the official document in the kernel for detailed tutorial. It also has a python version dependency now, so you would encounter a problem with Ubuntu 16.04. Recommend you to use later Python or Ubuntu 18.</description>
    </item>
    <item>
      <title>Perf symbol problem on Linux 4.19</title>
      <link>https://sjp38.github.io/posts/ko/perf_symbol_problem_4.19/</link>
      <pubDate>Fri, 21 Dec 2018 17:00:22 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/perf_symbol_problem_4.19/</guid>
      <description>4.19 커널에서 오랫만에 perf 를 다시 빌드하고 써보려고 하니, perf report 가 아래와 같이 제대로 된 symbol name 을 찾질 못합니다.
$ sudo perf record -g ls arch builtin-ftrace.c builtin-report.c Documentation perf.data.old bench builtin.h builtin-sched.c examples perf.h Build builtin-help.c builtin-script.c include perf-read-vdso.c builtin-annotate.c builtin-inject.c builtin-stat.c jvmti perf-sys.h builtin-bench.c builtin-kallsyms.c builtin-timechart.c Makefile perf-with-kcore.sh builtin-buildid-cache.c builtin-kmem.c builtin-top.c Makefile.config pmu-events builtin-buildid-list.c builtin-kvm.c builtin-trace.c Makefile.perf python builtin-c2c.c builtin-list.c builtin-version.c MANIFEST scripts builtin-config.c builtin-lock.c check-headers.sh perf-archive.</description>
    </item>
    <item>
      <title>I will have a talk at the kernel summit</title>
      <link>https://sjp38.github.io/posts/ko/ksummit2018_talk/</link>
      <pubDate>Thu, 08 Nov 2018 06:11:48 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/ksummit2018_talk/</guid>
      <description>지난 토요일, Theodore Ts&amp;rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.
[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html</description>
    </item>
    <item>
      <title>I will have a talk at the kernel summit</title>
      <link>https://sjp38.github.io/posts/ksummit2018_talk/</link>
      <pubDate>Thu, 08 Nov 2018 06:11:48 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ksummit2018_talk/</guid>
      <description>지난 토요일, Theodore Ts&amp;rsquo;o 로부터 올해 Linux Plumbers Conference 의 한 트랙으로 열리는 커널 서밋에서 GCMA 발표를 해줄 수 있겠냐는 제의를 받았고 물론 그러겠노라고 했습니다. 발표 일정의 [첫번째 드래프트][1]가 올라왔군요. 화요일 아침에 발표하게 됐습니다.
[1] https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2018-November/006238.html</description>
    </item>
    <item>
      <title>LKMM Setup and Usage</title>
      <link>https://sjp38.github.io/posts/ko/lkmm-install/</link>
      <pubDate>Thu, 08 Nov 2018 04:30:42 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lkmm-install/</guid>
      <description>리눅스 커널은 Formalised and executable memory consistent model 을 제공합니다. 줄여서 linux kernel memory model (LKMM) 이라고 하죠. 이 글은 4.19 버전을 기준으로 LKMM 을 실제로 수행해 보기 위한 환경 셋업 과정과 간단한 실행 방법을 정리해 봅니다. 글 작성을 위한 테스트는 Ubuntu 16.04 서버가 설치된 가상머신에서 진행되었습니다.
herd7 install LKMM 은 버전 7.49 의 &amp;ldquo;herd7&amp;rdquo; 과 &amp;ldquo;klitmus7&amp;rdquo; 을 필요로 합니다. 하지만 herd7 은 또 Ocaml 을 위한 패키지 매니저인 OPAM 을 설치할 것을 필요로 하죠.</description>
    </item>
    <item>
      <title>Linux Kernel Build</title>
      <link>https://sjp38.github.io/posts/ko/linux-kernel-build/</link>
      <pubDate>Fri, 07 Sep 2018 16:00:23 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/linux-kernel-build/</guid>
      <description>제가 새 기계에서 리눅스 커널 빌드 환경을 셋업하고 실제 빌드, 설치하는 과정을 정리해 봅니다. 글 작성 과정에서 실제 커맨드를 수행한 환경은 Ubuntu 16.04.3 Server OS 를 설치한 x86_64 가상머신입니다.
Install Dependent Packages $ sudo apt install build-essential libncurses5-dev libssl-dev bc bison flex \ libelf-dev 커널을 빌드하려면 컴파일러와 라이브러리 등이 필요하겠죠. 위 커맨드는 우분투에서 커널 빌드에 필요한 패키지들을 깔아줍니다. 커널 트리의 Documentation/process/changes.rst 에도 커널 빌드에 필요한 패키지들이 나열되어 있으므로, 다른 환경이라면 이를 참고해 필요한 패키지를 설치합시다.</description>
    </item>
    <item>
      <title>Linux Kernel Performance (LKP) Tests</title>
      <link>https://sjp38.github.io/posts/ko/lkp-tests/</link>
      <pubDate>Thu, 02 Aug 2018 17:20:10 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/lkp-tests/</guid>
      <description>리눅스 커널의 개발은 커뮤니티 주도입니다. 개발의 한 부분인 테스트 역시 커뮤니티 주도적입니다. 여러 개인 또는 단체가 커널을 각자의 방식으로 테스트 하고 그 결과를 공유합니다. 인텔에서는 0-day 서비스[1] 라는 서비스를 자체적으로 돌리는데, 이 서비스는 최신 리눅스 커널을 가져다가 빌드하고 다양한 기능 / 성능 테스트를 돌리고 그 결과 발견된 regression 을 LKML 에 메일로 보내주는 일을 합니다. 말하자면 Continuous Integration (CI) 이죠.
Linux Kernel Performance (LKP) Tests[2] 는 0-day 서비스에서 기능 / 성능 테스트를 수행하는데 사용되는 도구입니다.</description>
    </item>
    <item>
      <title>Linux Kernel Debugging Using QEMU</title>
      <link>https://sjp38.github.io/posts/qemu_kernel_debugging/</link>
      <pubDate>Mon, 07 May 2018 18:21:01 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/qemu_kernel_debugging/</guid>
      <description>You can use classical debugger for your Linux kernel programming, though Torvalds doesn&amp;rsquo;t like it. I also do not prefer such use of debuggers, but admit that sometimes debuggers are quite useful. ;)
There are several ways to debug Linux kernel, but one of above is to set up a Linux virtual machine using QEMU and debugging the Linux kernel of the virtual machine from the host machine. This post summarises how to debug the Linux kernel in this way.</description>
    </item>
    <item>
      <title>QEMU 를 사용한 리눅스 커널 디버깅</title>
      <link>https://sjp38.github.io/posts/ko/qemu_kernel_debugging/</link>
      <pubDate>Mon, 07 May 2018 18:21:01 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/qemu_kernel_debugging/</guid>
      <description>토발즈는 좋아하지 않지만, 리눅스 커널 프로그래밍에도 디버거를 사용할 수 있습니다. 저도 디버거 사용을 좋아하지는 않는 편이지만, 경우에 따라선 디버거를 사용하는게 좋을 때도 있고 취향은 존중되어야죠. ;)
커널 디버깅 방법은 여러가지가 있는데, 그 중 하나는 QEMU 등을 이용한 리눅스 가상 머신을 띄워 두고, 호스트 머신에서 해당 가상 머신의 리눅스 커널을 디버깅 하는 방법입니다. 이 글에선 이렇게 디버깅 하는 방법을 간단히 정리해 봅니다.
테스트 환경 글 작성 과정에서 테스트에 사용한 주요 소프트웨어들과 버전은 다음과 같습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 05</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_05/</link>
      <pubDate>Sun, 26 Nov 2017 12:40:11 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_05/</guid>
      <description>컨퍼런스 둘째날부터는 kernel summit track 이 시작됩니다. 이번 컨퍼런스 참가는 아무래도 kernel summit 에서의 시끄럽고 정신없는 토론에 참여하고 싶기 때문이었기에 오늘부터가 제게는 가장 재밌는 시간입니다.
![foo] (/img/osse_05/1.jpg)
아침 일찍 일어나 컨퍼런스 장소로 출발합니다. 10명이 함께 묵는 방을 사용하고 있기에 일찍 일어나지 않으면 샤워를 제시간에 하기 어려우므로 조금 일찍 일어났습니다.
![foo] (/img/osse_05/2.jpg)
![foo] (/img/osse_05/3.jpg)
![foo] (/img/osse_05/4.jpg)
일찍 출발한 만큼 일찍 도착. 아직 부스에 사람도 없고 조용하네요. 한동안 부스 한켠에 준비된 휴식 공간에 앉아 커널 메일링 리스트도 읽고 코드도 보고 했습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 04</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_04/</link>
      <pubDate>Sun, 26 Nov 2017 12:13:00 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_04/</guid>
      <description>드디어 컨퍼런스 첫날입니다. 아침 8시부터 아침식사와 등록이 시작되므로, 7시에 숙소에서 나왔습니다.
![foo] (/img/osse_04/1.jpg)
어제는 날이 흐리더니, 오늘은 비도 옵니다. 우산을 챙겨 나옵니다. 그래도 어제 미리 학회장에 들렀던 덕에 길을 헤매지 않고 찾아갈 수 있었습니다.
![foo] (/img/osse_04/2.jpg)
빗길을 따라 한참을 걸어서 도착했습니다.
![foo] (/img/osse_04/3.jpg)
![foo] (/img/osse_04/4.jpg)
도착하니 7시 반 정도. 공식 스케쥴은 8시부터 시작이라 아직 한산합니다. 스폰서 부스도 아직 준비중인 곳이 많고, 아직 준비가 덜된 곳도 많습니다. 돌아다니며 인사도 하고 간단한 스몰토크도 하면서 시간을 보냈습니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 03</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_03/</link>
      <pubDate>Sat, 04 Nov 2017 10:20:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_03/</guid>
      <description>OSSummit 등록도 마쳤고, 남은 하루는 프라하 성 쪽을 둘러보기로 했습니다. 내일부터는 OSSummit 발표를 아침부터 오후까지 들어야 하므로, 프라하 관광을 해가 떠있을 때 하는건 오늘이 마지막이니 부지런히 걸어야 합니다. 어떻게 생각해 보면 꽤 강행군이기도 하고, 아침 일찍 도착하길 다행이다 싶습니다.
Vltava[1] ![foo] (/img/osse_03/4.jpg)
OSSummit 컨퍼런스 회장인 힐튼 프라하 호텔은 프라하 시내의 동북쪽에 위치해 있어서 조금만 걸으면 아침에 심카드 사고 나서 걸었던 블타바 강이 나옵니다. 아까 지나갔던 코스지만 한번 더 걸어가기로 합니다.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 02</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_02/</link>
      <pubDate>Sat, 04 Nov 2017 04:58:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_02/</guid>
      <description>Immigration ![immigration] (/img/osse_02/14.jpg)
먼저 공항에서 입국심사를 거쳐야 합니다. 한글 표지판이 많이 있어서 영어에 익숙지 않은 분들도 비교적 쉽게 적응할 수 있겠다 싶었습니다.
제가 가장 많이 다녀온 외국은 미국인데요. 대한민국 여권 소지자는 미국에 갈 때 비자가 필요없지만 E-SATA 로 등록을 해야 하고, 언젠가부터 E-SATA 등록비도 몇만원 정도 생겼죠. 또, 미국은 입국심사가 왠지 날카롭다는 인상입니다. 입국할 때 입국심사 카드도 써야하고 여기 숙소 주소 등도 적어야 하고, 지문도 찍어야 하죠. 공항 보안검색대에선 투시카메라로 사진도 찍고.</description>
    </item>
    <item>
      <title>OSSummit 2017 Attendence - 01</title>
      <link>https://sjp38.github.io/posts/ko/osse2017_01/</link>
      <pubDate>Sun, 29 Oct 2017 16:55:24 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/osse2017_01/</guid>
      <description>![pargue!] (/img/osse_01/8.jpg)
Open Source Summit Europe 과 Embedded Linux Conference Europe, 그리고 Annual Kernel Summit 이 합동으로 열린 프라하에 다녀왔습니다. 이에 대한 기록을 남겨봅니다.
The Event 리눅스 재단에서는 다양한 컨퍼런스를 개최합니다. 2015년까지는 한국에서도 Korea Linux Forum 이라는 행사를 매년 열었죠. 특히 2015년에는 커널 서밋도 함께해서 특히 특별했던 기억입니다. 이런 이벤트들 중에서도 가장 큰 이벤트는 오픈소스 서밋이 아닐까 싶습니다. 이 이벤트는 기존의 리눅스콘 등 행사들이 합쳐진 행사입니다. 가장 큰 이벤트가 오픈소스 서밋이라면 가장 중요한 행사는 커널 서밋이라 할 수 있지 않을까 싶습니다.</description>
    </item>
    <item>
      <title>Kernel text addresses removed from calltrace</title>
      <link>https://sjp38.github.io/posts/kernel-text-addresses-removed-from-calltrace/</link>
      <pubDate>Fri, 16 Jun 2017 16:46:09 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/kernel-text-addresses-removed-from-calltrace/</guid>
      <description>최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.
Call Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.</description>
    </item>
    <item>
      <title>Kernel text addresses removed from calltrace</title>
      <link>https://sjp38.github.io/posts/ko/kernel-text-addresses-removed-from-calltrace/</link>
      <pubDate>Fri, 16 Jun 2017 16:46:09 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/kernel-text-addresses-removed-from-calltrace/</guid>
      <description>최근 커널은 stakc dump 에서 콜 트레이스(Call Trace) 에 각 코드의 메모리 어드레스를 찍어주지 않습니다. 이에 대해 포스팅을 해봅니다.
Call Trace 커널은 문제가 발생하거나 하면 문제의 원인을 찾을 수 있는 다양한 정보를 담고 있는 stack dump 를 로그로 뿌려 줍니다. 문제의 원인을 찾는데 매우 소중한 정보입니다. 그 정보 중에서도 중요한 것 중 하나가 콜 트레이스로, 이 문제의 순간에 오기까지 어느 함수의 어느 지점에서 어느 함수를 호출해서 여기까지 왔는가를 담는 정보입니다.</description>
    </item>
    <item>
      <title>Fetching linux kernel source code</title>
      <link>https://sjp38.github.io/posts/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fetching-linux-source-code/</guid>
      <description>리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.
kernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.</description>
    </item>
    <item>
      <title>Fetching linux kernel source code</title>
      <link>https://sjp38.github.io/posts/ko/fetching-linux-source-code/</link>
      <pubDate>Mon, 20 Mar 2017 22:37:03 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fetching-linux-source-code/</guid>
      <description>리눅스 커널은 오픈 소스 소프트웨어이므로 그 소스코드가 공개되어 있어 누구나 인터넷을 통해 쉽게 얻을 수 있습니다. 이 글에서는 리눅스 커널 소스코드를 받아올 수 있는 몇가지 방법을 설명합니다.
kernel.org 리눅스 커널 소스 코드를 받아오기 위한 기본적 공식 사이트는 [kernel.org] (https://www.kernel.org) 라 할 수 있겠는데, 이 사이트에는 소스 코드를 포함해 리눅스 커널을 위한 다양한 리소스가 정리되어 있습니다. 이 사이트에 웹브라우저를 통해 들어가보면 첫페이지에서부터 가장 최근에 릴리즈된 버전의 소스코드, 가장 최근의 안정화된 버전의 소스코드 등을 tar.</description>
    </item>
    <item>
      <title>Updating Google Chrome on Fedora 23</title>
      <link>https://sjp38.github.io/posts/fedora-chrome-update/</link>
      <pubDate>Mon, 20 Mar 2017 22:24:26 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/fedora-chrome-update/</guid>
      <description>I am using Fedora 23 laptop and installed stable version Google Chrome from its official website [0]. In this case, just using Updates of Fedora Software program doesn&amp;rsquo;t update Chrome automatically. For the case, follow below commands to update your Chrome:
$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable The second killall command is necessary because Chrome doesn&amp;rsquo;t kill its process by just cliking Close button. Or, you may reboot your computer but you wouldn&amp;rsquo;t like that.</description>
    </item>
    <item>
      <title>Updating Google Chrome on Fedora 23</title>
      <link>https://sjp38.github.io/posts/ko/fedora-chrome-update/</link>
      <pubDate>Mon, 20 Mar 2017 22:24:26 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/fedora-chrome-update/</guid>
      <description>랩톱에 Fedora 23 을 깔고 크롬을 공식 홈페이지 [0] 에서 다운받아 메인 브라우저로 사용하고 있습니다. 그런데 이렇게 설치한 경우에는 단순히 Fedora Software 프로그램의 Updates 기능을 통해 업데이트가 되지 않더군요. 이런 경우에는 다음의 커맨드를 통해 직접 업데이트를 할 수 있습니다:
$ sudo dnf update google-chrome-stable ... $ sudo killall chrome $ google-chrome-stable 두번째의 killall 커맨드는 Chrome 프로세스들이 닫기 버튼을 누르는 것만으로는 모두 종료되지 않기 때문에 명시적으로 종료시키기 위해 필요합니다. 컴퓨터를 아예 리붓 하는 방법도 있겠지만 별로 그러고 싶지는 않을테지요.</description>
    </item>
    <item>
      <title>Using arping to know ip-MAC mapping</title>
      <link>https://sjp38.github.io/posts/arping-howto/</link>
      <pubDate>Tue, 07 Mar 2017 19:41:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/arping-howto/</guid>
      <description>You can use arping to know IP address to MAC address mapping of your local network. Usage is simple:
arping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination For example, you may use the command as below:
$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... Secret of the tool is ARP protocol [1]. To know the MAC address of the machine that has a specific IP address, IP protocol layer uses the protocol.</description>
    </item>
    <item>
      <title>Using arping to know ip-MAC mapping</title>
      <link>https://sjp38.github.io/posts/ko/arping-howto/</link>
      <pubDate>Tue, 07 Mar 2017 19:41:16 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/arping-howto/</guid>
      <description>로컬 네트워크에서 어떤 IP 주소가 어떤 MAC 어드레스에 매핑되는지 알기 위해 arping 을 사용할 수 있습니다. 사용법은 간단합니다:
arping [-AbDfhqUV] [-c count] [-w deadline] [-s source] -I interface destination 예를 들면, 다음과 같습니다:
$ arping -I eth0 10.0.0.1 ARPING 10.0.0.1 from 10.0.0.2 eth0 Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.123ms Unicast reply from 10.0.0.1 [11:22:33:44:55:66] 0.251ms ... 이 툴의 동작 원리는 ARP 프로토콜 [1] 입니다. IP 프로토콜 레이어는 이 프로토콜을 사용해 특정 IP 주소를 사용하는 기계의 MAC 어드레스를 파악하고 이 주소를 아랫단의 Ethernet 레이어에 보냅니다.</description>
    </item>
    <item>
      <title>uninstall kernel</title>
      <link>https://sjp38.github.io/posts/ko/uninstall-kernel/</link>
      <pubDate>Fri, 20 Jan 2017 13:18:56 +0900</pubDate>
      <guid>https://sjp38.github.io/posts/ko/uninstall-kernel/</guid>
      <description>테스트 등을 위해 소스코드로부터 커널을 직접 빌드, 설치하기 시작하면 어느새 수많은 커널이 설치되어 있는 것을 확인할 수 있다. 삭제를 위해선 make install 로 만들어진 파일들을 직접 제거하고 grub 을 업데이트 해줘야 한다.
예를 들어 시스템이 현재 부팅되어 있는 버전의 커널을 언인스톨하고자 한다면 다음의 일련의 커맨드를 입력하면 된다:
# rm /boot/vmlinuz-$(uname -r) # rm /boot/initrd.img-$(uname -r) # rm /boot/System.map-$(uname -r) # rm /boot/config-$(uname -r) # rm -fr /lib/modules/$(uname -r) # rm /var/lib/initramfs-tools/$(uname -r) # update-grub2 다른 버전의 설치되어있는 커널을 제거하고 싶다면 위의 $(uname -r) 부분을 제거하고자 하는 커널 버전으로 대체하면 된다.</description>
    </item>
  </channel>
</rss>
